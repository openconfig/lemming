/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Cpu_User_MinPath represents the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_User_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_User_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_User_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_User_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_UserPath represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPath struct {
	*ygnmi.NodePath
}

// System_Cpu_UserPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPath) Avg() *System_Cpu_User_AvgPath {
	ps := &System_Cpu_User_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPathAny) Avg() *System_Cpu_User_AvgPathAny {
	ps := &System_Cpu_User_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPath) Instant() *System_Cpu_User_InstantPath {
	ps := &System_Cpu_User_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPathAny) Instant() *System_Cpu_User_InstantPathAny {
	ps := &System_Cpu_User_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPath) Interval() *System_Cpu_User_IntervalPath {
	ps := &System_Cpu_User_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPathAny) Interval() *System_Cpu_User_IntervalPathAny {
	ps := &System_Cpu_User_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPath) Max() *System_Cpu_User_MaxPath {
	ps := &System_Cpu_User_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPathAny) Max() *System_Cpu_User_MaxPathAny {
	ps := &System_Cpu_User_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPath) MaxTime() *System_Cpu_User_MaxTimePath {
	ps := &System_Cpu_User_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPathAny) MaxTime() *System_Cpu_User_MaxTimePathAny {
	ps := &System_Cpu_User_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPath) Min() *System_Cpu_User_MinPath {
	ps := &System_Cpu_User_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPathAny) Min() *System_Cpu_User_MinPathAny {
	ps := &System_Cpu_User_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPath) MinTime() *System_Cpu_User_MinTimePath {
	ps := &System_Cpu_User_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPathAny) MinTime() *System_Cpu_User_MinTimePathAny {
	ps := &System_Cpu_User_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_UserPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_User] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_User](
		"System_Cpu_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_UserPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_User] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_User](
		"System_Cpu_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_AvgPath represents the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_Wait_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_Wait_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_InstantPath represents the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_Wait_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_Wait_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_Wait_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_Wait_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MaxPath represents the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_Wait_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_Wait_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_Wait_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_Wait_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MinPath represents the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_Wait_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_Wait_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_Wait_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_Wait_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_WaitPath represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPath struct {
	*ygnmi.NodePath
}

// System_Cpu_WaitPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPath) Avg() *System_Cpu_Wait_AvgPath {
	ps := &System_Cpu_Wait_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPathAny) Avg() *System_Cpu_Wait_AvgPathAny {
	ps := &System_Cpu_Wait_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPath) Instant() *System_Cpu_Wait_InstantPath {
	ps := &System_Cpu_Wait_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPathAny) Instant() *System_Cpu_Wait_InstantPathAny {
	ps := &System_Cpu_Wait_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPath) Interval() *System_Cpu_Wait_IntervalPath {
	ps := &System_Cpu_Wait_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPathAny) Interval() *System_Cpu_Wait_IntervalPathAny {
	ps := &System_Cpu_Wait_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPath) Max() *System_Cpu_Wait_MaxPath {
	ps := &System_Cpu_Wait_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPathAny) Max() *System_Cpu_Wait_MaxPathAny {
	ps := &System_Cpu_Wait_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPath) MaxTime() *System_Cpu_Wait_MaxTimePath {
	ps := &System_Cpu_Wait_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPathAny) MaxTime() *System_Cpu_Wait_MaxTimePathAny {
	ps := &System_Cpu_Wait_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPath) Min() *System_Cpu_Wait_MinPath {
	ps := &System_Cpu_Wait_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPathAny) Min() *System_Cpu_Wait_MinPathAny {
	ps := &System_Cpu_Wait_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPath) MinTime() *System_Cpu_Wait_MinTimePath {
	ps := &System_Cpu_Wait_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPathAny) MinTime() *System_Cpu_Wait_MinTimePathAny {
	ps := &System_Cpu_Wait_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygnmi.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygnmi.NodePath
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	ps := &System_Dns_HostEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryMap() *System_Dns_HostEntryPathMap {
	ps := &System_Dns_HostEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryMap() *System_Dns_HostEntryPathMapAny {
	ps := &System_Dns_HostEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	ps := &System_Dns_SearchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	ps := &System_Dns_SearchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPath) ServerMap() *System_Dns_ServerPathMap {
	ps := &System_Dns_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPathAny) ServerMap() *System_Dns_ServerPathMapAny {
	ps := &System_Dns_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) State() ygnmi.SingletonQuery[*oc.System_Dns] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) Config() ygnmi.ConfigQuery[*oc.System_Dns] {
	return ygnmi.NewConfigQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMap represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMapAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMapAny struct {
	*ygnmi.NodePath
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	ps := &System_Dns_HostEntry_AliasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	ps := &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	ps := &System_Dns_HostEntry_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	ps := &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	ps := &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	ps := &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) State() ygnmi.SingletonQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) Config() ygnmi.ConfigQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMap represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) State() ygnmi.SingletonQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) State() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) Config() ygnmi.ConfigQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygnmi.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygnmi.NodePath
}

// LicenseAny (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
	return ps
}

// LicenseAny (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
	return ps
}

// License (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
//
//	LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	ps := &System_License_LicensePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
	return ps
}

// License (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
//
//	LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
	return ps
}

// LicenseMap (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePath) LicenseMap() *System_License_LicensePathMap {
	ps := &System_License_LicensePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LicenseMap (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePathAny) LicenseMap() *System_License_LicensePathMapAny {
	ps := &System_License_LicensePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LicensePath) State() ygnmi.SingletonQuery[*oc.System_License] {
	return ygnmi.NewSingletonQuery[*oc.System_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LicensePathAny) State() ygnmi.WildcardQuery[*oc.System_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LicensePath) Config() ygnmi.ConfigQuery[*oc.System_License] {
	return ygnmi.NewConfigQuery[*oc.System_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LicensePathAny) Config() ygnmi.WildcardQuery[*oc.System_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active"
//	Path from root:       "/system/license/licenses/license/state/active"
func (n *System_License_License_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active"
//	Path from root:       "/system/license/licenses/license/state/active"
func (n *System_License_License_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/active"
//	Path from root:       "/system/license/licenses/license/config/active"
func (n *System_License_License_ActivePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/active"
//	Path from root:       "/system/license/licenses/license/config/active"
func (n *System_License_License_ActivePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_DescriptionPath represents the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_DescriptionPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_License_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_License_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ExpirationDatePath represents the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ExpirationDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_License_ExpirationDatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).ExpirationDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_License_ExpirationDatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).ExpirationDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ExpiredPath represents the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ExpiredPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_License_ExpiredPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expired"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Expired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_License_ExpiredPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expired"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Expired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_InUsePath represents the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_InUsePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_License_InUsePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).InUse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_License_InUsePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).InUse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_IssueDatePath represents the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_IssueDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_License_IssueDatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).IssueDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_License_IssueDatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).IssueDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-data"
//	Path from root:       "/system/license/licenses/license/state/license-data"
func (n *System_License_License_LicenseDataPath) State() ygnmi.SingletonQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewSingletonQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-data"
//	Path from root:       "/system/license/licenses/license/state/license-data"
func (n *System_License_License_LicenseDataPathAny) State() ygnmi.WildcardQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewWildcardQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-data"
//	Path from root:       "/system/license/licenses/license/config/license-data"
func (n *System_License_License_LicenseDataPath) Config() ygnmi.ConfigQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewConfigQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-data"
//	Path from root:       "/system/license/licenses/license/config/license-data"
func (n *System_License_License_LicenseDataPathAny) Config() ygnmi.WildcardQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewWildcardQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-id"
//	Path from root:       "/system/license/licenses/license/state/license-id"
func (n *System_License_License_LicenseIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-id"
//	Path from root:       "/system/license/licenses/license/state/license-id"
func (n *System_License_License_LicenseIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-id"
//	Path from root:       "/system/license/licenses/license/config/license-id"
func (n *System_License_License_LicenseIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-id"
//	Path from root:       "/system/license/licenses/license/config/license-id"
func (n *System_License_License_LicenseIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ValidPath represents the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ValidPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_License_ValidPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_License_ValidPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygnmi.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygnmi.NodePath
}

// System_License_LicensePathMap represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathMap struct {
	*ygnmi.NodePath
}

// System_License_LicensePathMapAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): The activation state of the license.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/active"
//	Path from root:       "/system/license/licenses/license/*/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	ps := &System_License_License_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The activation state of the license.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/active"
//	Path from root:       "/system/license/licenses/license/*/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	ps := &System_License_License_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): The license description.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_LicensePath) Description() *System_License_License_DescriptionPath {
	ps := &System_License_License_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): The license description.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_LicensePathAny) Description() *System_License_License_DescriptionPathAny {
	ps := &System_License_License_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePath) ExpirationDate() *System_License_License_ExpirationDatePath {
	ps := &System_License_License_ExpirationDatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePathAny) ExpirationDate() *System_License_License_ExpirationDatePathAny {
	ps := &System_License_License_ExpirationDatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Expired (leaf): The license has expired.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePath) Expired() *System_License_License_ExpiredPath {
	ps := &System_License_License_ExpiredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Expired (leaf): The license has expired.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePathAny) Expired() *System_License_License_ExpiredPathAny {
	ps := &System_License_License_ExpiredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePath) InUse() *System_License_License_InUsePath {
	ps := &System_License_License_InUsePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePathAny) InUse() *System_License_License_InUsePathAny {
	ps := &System_License_License_InUsePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePath) IssueDate() *System_License_License_IssueDatePath {
	ps := &System_License_License_IssueDatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePathAny) IssueDate() *System_License_License_IssueDatePathAny {
	ps := &System_License_License_IssueDatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-data"
//	Path from root:       "/system/license/licenses/license/*/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	ps := &System_License_License_LicenseDataPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-data"
//	Path from root:       "/system/license/licenses/license/*/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	ps := &System_License_License_LicenseDataPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-id"
//	Path from root:       "/system/license/licenses/license/*/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	ps := &System_License_License_LicenseIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-id"
//	Path from root:       "/system/license/licenses/license/*/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	ps := &System_License_License_LicenseIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePath) Valid() *System_License_License_ValidPath {
	ps := &System_License_License_ValidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePathAny) Valid() *System_License_License_ValidPathAny {
	ps := &System_License_License_ValidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePath) State() ygnmi.SingletonQuery[*oc.System_License_License] {
	return ygnmi.NewSingletonQuery[*oc.System_License_License](
		"System_License_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathAny) State() ygnmi.WildcardQuery[*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License_License](
		"System_License_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePath) Config() ygnmi.ConfigQuery[*oc.System_License_License] {
	return ygnmi.NewConfigQuery[*oc.System_License_License](
		"System_License_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathAny) Config() ygnmi.WildcardQuery[*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License_License](
		"System_License_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_License_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_License_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_License_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_License_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygnmi.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygnmi.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	ps := &System_Logging_ConsolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Console (container): Top-level container for data related to console-based
// logging
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	ps := &System_Logging_ConsolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FileAny (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPath) FileAny() *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
	return ps
}

// FileAny (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPathAny) FileAny() *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
	return ps
}

// WithPath sets System_Logging_FilePathAny's key "path" to the specified value.
// Path: string
func (n *System_Logging_FilePathAny) WithPath(Path string) *System_Logging_FilePathAny {
	ygnmi.ModifyKey(n.NodePath, "path", Path)
	return n
}

// WithFilenamePrefix sets System_Logging_FilePathAny's key "filename-prefix" to the specified value.
// FilenamePrefix: string
func (n *System_Logging_FilePathAny) WithFilenamePrefix(FilenamePrefix string) *System_Logging_FilePathAny {
	ygnmi.ModifyKey(n.NodePath, "filename-prefix", FilenamePrefix)
	return n
}

// File (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
//
//	Path: string
//	FilenamePrefix: string
func (n *System_LoggingPath) File(Path string, FilenamePrefix string) *System_Logging_FilePath {
	ps := &System_Logging_FilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
	return ps
}

// File (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
//
//	Path: string
//	FilenamePrefix: string
func (n *System_LoggingPathAny) File(Path string, FilenamePrefix string) *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
	return ps
}

// FileMap (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPath) FileMap() *System_Logging_FilePathMap {
	ps := &System_Logging_FilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"files"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FileMap (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPathAny) FileMap() *System_Logging_FilePathMapAny {
	ps := &System_Logging_FilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteServerAny (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
	return ps
}

// RemoteServerAny (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
	return ps
}

// RemoteServer (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
//
//	Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	ps := &System_Logging_RemoteServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
	return ps
}

// RemoteServer (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
//
//	Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
	return ps
}

// RemoteServerMap (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPath) RemoteServerMap() *System_Logging_RemoteServerPathMap {
	ps := &System_Logging_RemoteServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteServerMap (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPathAny) RemoteServerMap() *System_Logging_RemoteServerPathMapAny {
	ps := &System_Logging_RemoteServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "vty"
//	Path from root:       "/system/logging/vty"
func (n *System_LoggingPath) Vty() *System_Logging_VtyPath {
	ps := &System_Logging_VtyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "vty"
//	Path from root:       "/system/logging/vty"
func (n *System_LoggingPathAny) Vty() *System_Logging_VtyPathAny {
	ps := &System_Logging_VtyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LoggingPath) State() ygnmi.SingletonQuery[*oc.System_Logging] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LoggingPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LoggingPath) Config() ygnmi.ConfigQuery[*oc.System_Logging] {
	return ygnmi.NewConfigQuery[*oc.System_Logging](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LoggingPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygnmi.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygnmi.NodePath
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_Console_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_Console_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_Console_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_Console_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	ps := &System_Logging_Console_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePath) SelectorMap() *System_Logging_Console_SelectorPathMap {
	ps := &System_Logging_Console_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePathAny) SelectorMap() *System_Logging_Console_SelectorPathMapAny {
	ps := &System_Logging_Console_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePath) State() ygnmi.SingletonQuery[*oc.System_Logging_Console] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Console] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
