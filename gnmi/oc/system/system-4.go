/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Cpu_WaitPath represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPath struct {
	*ygnmi.NodePath
}

// System_Cpu_WaitPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPath) Avg() *System_Cpu_Wait_AvgPath {
	ps := &System_Cpu_Wait_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPathAny) Avg() *System_Cpu_Wait_AvgPathAny {
	ps := &System_Cpu_Wait_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPath) Instant() *System_Cpu_Wait_InstantPath {
	ps := &System_Cpu_Wait_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPathAny) Instant() *System_Cpu_Wait_InstantPathAny {
	ps := &System_Cpu_Wait_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPath) Interval() *System_Cpu_Wait_IntervalPath {
	ps := &System_Cpu_Wait_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPathAny) Interval() *System_Cpu_Wait_IntervalPathAny {
	ps := &System_Cpu_Wait_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPath) Max() *System_Cpu_Wait_MaxPath {
	ps := &System_Cpu_Wait_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPathAny) Max() *System_Cpu_Wait_MaxPathAny {
	ps := &System_Cpu_Wait_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPath) MaxTime() *System_Cpu_Wait_MaxTimePath {
	ps := &System_Cpu_Wait_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPathAny) MaxTime() *System_Cpu_Wait_MaxTimePathAny {
	ps := &System_Cpu_Wait_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPath) Min() *System_Cpu_Wait_MinPath {
	ps := &System_Cpu_Wait_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPathAny) Min() *System_Cpu_Wait_MinPathAny {
	ps := &System_Cpu_Wait_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPath) MinTime() *System_Cpu_Wait_MinTimePath {
	ps := &System_Cpu_Wait_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPathAny) MinTime() *System_Cpu_Wait_MinTimePathAny {
	ps := &System_Cpu_Wait_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygnmi.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygnmi.NodePath
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	ps := &System_Dns_HostEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryMap() *System_Dns_HostEntryPathMap {
	ps := &System_Dns_HostEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryMap() *System_Dns_HostEntryPathMapAny {
	ps := &System_Dns_HostEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	ps := &System_Dns_SearchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	ps := &System_Dns_SearchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPath) ServerMap() *System_Dns_ServerPathMap {
	ps := &System_Dns_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPathAny) ServerMap() *System_Dns_ServerPathMapAny {
	ps := &System_Dns_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) State() ygnmi.SingletonQuery[*oc.System_Dns] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) Config() ygnmi.ConfigQuery[*oc.System_Dns] {
	return ygnmi.NewConfigQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMap represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMapAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMapAny struct {
	*ygnmi.NodePath
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	ps := &System_Dns_HostEntry_AliasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	ps := &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	ps := &System_Dns_HostEntry_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	ps := &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	ps := &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	ps := &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) State() ygnmi.SingletonQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) Config() ygnmi.ConfigQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMap represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) State() ygnmi.SingletonQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) State() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) Config() ygnmi.ConfigQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_GnmiPathzPoliciesPath represents the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPoliciesPath struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPoliciesPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPoliciesPathAny struct {
	*ygnmi.NodePath
}

// PolicyAny (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPath) PolicyAny() *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": "*"},
			n,
		),
	}
	return ps
}

// PolicyAny (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPathAny) PolicyAny() *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": "*"},
			n,
		),
	}
	return ps
}

// Policy (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
//
//	Instance: oc.E_Policy_Instance
func (n *System_GnmiPathzPoliciesPath) Policy(Instance oc.E_Policy_Instance) *System_GnmiPathzPolicies_PolicyPath {
	ps := &System_GnmiPathzPolicies_PolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": Instance},
			n,
		),
	}
	return ps
}

// Policy (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
//
//	Instance: oc.E_Policy_Instance
func (n *System_GnmiPathzPoliciesPathAny) Policy(Instance oc.E_Policy_Instance) *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": Instance},
			n,
		),
	}
	return ps
}

// PolicyMap (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPath) PolicyMap() *System_GnmiPathzPolicies_PolicyPathMap {
	ps := &System_GnmiPathzPolicies_PolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyMap (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPathAny) PolicyMap() *System_GnmiPathzPolicies_PolicyPathMapAny {
	ps := &System_GnmiPathzPolicies_PolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPoliciesPath) State() ygnmi.SingletonQuery[*oc.System_GnmiPathzPolicies] {
	return ygnmi.NewSingletonQuery[*oc.System_GnmiPathzPolicies](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPoliciesPathAny) State() ygnmi.WildcardQuery[*oc.System_GnmiPathzPolicies] {
	return ygnmi.NewWildcardQuery[*oc.System_GnmiPathzPolicies](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_CreatedOnPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/created-on YANG schema element.
type System_GnmiPathzPolicies_Policy_CreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_CreatedOnPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/created-on YANG schema element.
type System_GnmiPathzPolicies_Policy_CreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_Policy_CreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_Policy_CreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_InstancePath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/instance YANG schema element.
type System_GnmiPathzPolicies_Policy_InstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_InstancePathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/instance YANG schema element.
type System_GnmiPathzPolicies_Policy_InstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/instance"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/instance"
func (n *System_GnmiPathzPolicies_Policy_InstancePath) State() ygnmi.SingletonQuery[oc.E_Policy_Instance] {
	return ygnmi.NewSingletonQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/instance"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/instance"
func (n *System_GnmiPathzPolicies_Policy_InstancePathAny) State() ygnmi.WildcardQuery[oc.E_Policy_Instance] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "instance"
//	Path from root:       ""
func (n *System_GnmiPathzPolicies_Policy_InstancePath) Config() ygnmi.ConfigQuery[oc.E_Policy_Instance] {
	return ygnmi.NewConfigQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "instance"
//	Path from root:       ""
func (n *System_GnmiPathzPolicies_Policy_InstancePathAny) Config() ygnmi.WildcardQuery[oc.E_Policy_Instance] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_VersionPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/version YANG schema element.
type System_GnmiPathzPolicies_Policy_VersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_VersionPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/version YANG schema element.
type System_GnmiPathzPolicies_Policy_VersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_Policy_VersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Version
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_Policy_VersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Version
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_PolicyPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPath struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPolicies_PolicyPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPathAny struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPolicies_PolicyPathMap represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPathMap struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPolicies_PolicyPathMapAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPathMapAny struct {
	*ygnmi.NodePath
}

// CreatedOn (leaf): The timestamp of the moment when the policy was
// created.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_PolicyPath) CreatedOn() *System_GnmiPathzPolicies_Policy_CreatedOnPath {
	ps := &System_GnmiPathzPolicies_Policy_CreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreatedOn (leaf): The timestamp of the moment when the policy was
// created.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_PolicyPathAny) CreatedOn() *System_GnmiPathzPolicies_Policy_CreatedOnPathAny {
	ps := &System_GnmiPathzPolicies_Policy_CreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instance (leaf): The instance identifier of the gNMI OpenConfig-path-based
// authorization policy.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/instance"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/*/instance"
func (n *System_GnmiPathzPolicies_PolicyPath) Instance() *System_GnmiPathzPolicies_Policy_InstancePath {
	ps := &System_GnmiPathzPolicies_Policy_InstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instance (leaf): The instance identifier of the gNMI OpenConfig-path-based
// authorization policy.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/instance"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/*/instance"
func (n *System_GnmiPathzPolicies_PolicyPathAny) Instance() *System_GnmiPathzPolicies_Policy_InstancePathAny {
	ps := &System_GnmiPathzPolicies_Policy_InstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): The version of the gNMI OpenConfig-path-based authorization
// policy.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_PolicyPath) Version() *System_GnmiPathzPolicies_Policy_VersionPath {
	ps := &System_GnmiPathzPolicies_Policy_VersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): The version of the gNMI OpenConfig-path-based authorization
// policy.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_PolicyPathAny) Version() *System_GnmiPathzPolicies_Policy_VersionPathAny {
	ps := &System_GnmiPathzPolicies_Policy_VersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPath) State() ygnmi.SingletonQuery[*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewSingletonQuery[*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPathAny) State() ygnmi.WildcardQuery[*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewWildcardQuery[*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPathMap) State() ygnmi.SingletonQuery[map[oc.E_Policy_Instance]*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewSingletonQuery[map[oc.E_Policy_Instance]*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Policy_Instance]*oc.System_GnmiPathzPolicies_Policy, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-pathz:policies"},
			PostRelPath: []string{"openconfig-gnsi-pathz:policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Policy_Instance]*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewWildcardQuery[map[oc.E_Policy_Instance]*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Policy_Instance]*oc.System_GnmiPathzPolicies_Policy, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-pathz:policies"},
			PostRelPath: []string{"openconfig-gnsi-pathz:policy"},
		},
	)
}

// System_GrpcServer_AuthenticationPolicyCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/authentication-policy-created-on YANG schema element.
type System_GrpcServer_AuthenticationPolicyCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthenticationPolicyCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/authentication-policy-created-on YANG schema element.
type System_GrpcServer_AuthenticationPolicyCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/authentication-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-created-on"
func (n *System_GrpcServer_AuthenticationPolicyCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthenticationPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/authentication-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-created-on"
func (n *System_GrpcServer_AuthenticationPolicyCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthenticationPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthenticationPolicyVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/authentication-policy-version YANG schema element.
type System_GrpcServer_AuthenticationPolicyVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthenticationPolicyVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/authentication-policy-version YANG schema element.
type System_GrpcServer_AuthenticationPolicyVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/authentication-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-version"
func (n *System_GrpcServer_AuthenticationPolicyVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthenticationPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/authentication-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-version"
func (n *System_GrpcServer_AuthenticationPolicyVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthenticationPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CaTrustBundleCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on YANG schema element.
type System_GrpcServer_CaTrustBundleCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CaTrustBundleCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on YANG schema element.
type System_GrpcServer_CaTrustBundleCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/ca-trust-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServer_CaTrustBundleCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/ca-trust-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServer_CaTrustBundleCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CaTrustBundleVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-version YANG schema element.
type System_GrpcServer_CaTrustBundleVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CaTrustBundleVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-version YANG schema element.
type System_GrpcServer_CaTrustBundleVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServer_CaTrustBundleVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServer_CaTrustBundleVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-created-on YANG schema element.
type System_GrpcServer_CertificateCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-created-on YANG schema element.
type System_GrpcServer_CertificateCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServer_CertificateCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServer_CertificateCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-id"
func (n *System_GrpcServer_CertificateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-id"
func (n *System_GrpcServer_CertificateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServer_CertificateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServer_CertificateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateRevocationListBundleCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServer_CertificateRevocationListBundleCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateRevocationListBundleVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateRevocationListBundleVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServer_CertificateRevocationListBundleVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServer_CertificateRevocationListBundleVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-version YANG schema element.
type System_GrpcServer_CertificateVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-version YANG schema element.
type System_GrpcServer_CertificateVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServer_CertificateVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServer_CertificateVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_EnablePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/enable YANG schema element.
type System_GrpcServer_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/enable YANG schema element.
type System_GrpcServer_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/state/enable"
func (n *System_GrpcServer_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/state/enable"
func (n *System_GrpcServer_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServer_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServer_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServer_GnmiPathzPolicyCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version YANG schema element.
type System_GrpcServer_GnmiPathzPolicyVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version YANG schema element.
type System_GrpcServer_GnmiPathzPolicyVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServer_GnmiPathzPolicyVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServer_GnmiPathzPolicyVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_ListenAddressesPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_ListenAddressesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/state/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPath) State() ygnmi.SingletonQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/state/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPathAny) State() ygnmi.WildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPath) Config() ygnmi.ConfigQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPathAny) Config() ygnmi.WildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_MetadataAuthenticationPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_MetadataAuthenticationPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/state/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/state/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_NamePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/name YANG schema element.
type System_GrpcServer_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_NamePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/name YANG schema element.
type System_GrpcServer_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/state/name"
func (n *System_GrpcServer_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/state/name"
func (n *System_GrpcServer_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/name"
//	Path from root:       "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServer_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/name"
//	Path from root:       "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServer_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_NetworkInstancePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/state/network-instance"
func (n *System_GrpcServer_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/state/network-instance"
func (n *System_GrpcServer_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServer_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServer_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_PortPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/port YANG schema element.
type System_GrpcServer_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_PortPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/port YANG schema element.
type System_GrpcServer_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/port"
//	Path from root:       "/system/grpc-servers/grpc-server/state/port"
func (n *System_GrpcServer_PortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/port"
//	Path from root:       "/system/grpc-servers/grpc-server/state/port"
func (n *System_GrpcServer_PortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/port"
//	Path from root:       "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServer_PortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/port"
//	Path from root:       "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServer_PortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_ServicesPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/services YANG schema element.
type System_GrpcServer_ServicesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_ServicesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/services YANG schema element.
type System_GrpcServer_ServicesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/services"
//	Path from root:       "/system/grpc-servers/grpc-server/state/services"
func (n *System_GrpcServer_ServicesPath) State() ygnmi.SingletonQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewSingletonQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/services"
//	Path from root:       "/system/grpc-servers/grpc-server/state/services"
func (n *System_GrpcServer_ServicesPathAny) State() ygnmi.WildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewWildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/services"
//	Path from root:       "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServer_ServicesPath) Config() ygnmi.ConfigQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewConfigQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/services"
//	Path from root:       "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServer_ServicesPathAny) Config() ygnmi.WildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewWildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_SslProfileIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/ssl-profile-id YANG schema element.
type System_GrpcServer_SslProfileIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_SslProfileIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/ssl-profile-id YANG schema element.
type System_GrpcServer_SslProfileIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/ssl-profile-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ssl-profile-id"
func (n *System_GrpcServer_SslProfileIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssl-profile-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).SslProfileId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "state/ssl-profile-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ssl-profile-id"
func (n *System_GrpcServer_SslProfileIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssl-profile-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).SslProfileId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_TransportSecurityPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_TransportSecurityPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/state/transport-security"
func (n *System_GrpcServer_TransportSecurityPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/state/transport-security"
func (n *System_GrpcServer_TransportSecurityPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServer_TransportSecurityPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServer_TransportSecurityPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServerPath represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPath struct {
	*ygnmi.NodePath
}

// System_GrpcServerPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathAny struct {
	*ygnmi.NodePath
}

// System_GrpcServerPathMap represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathMap struct {
	*ygnmi.NodePath
}

// System_GrpcServerPathMapAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathMapAny struct {
	*ygnmi.NodePath
}

// Acctz (container): A collection of counters from the gNSI.acctz module that exist
// per grpc server.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "acctz"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz"
func (n *System_GrpcServerPath) Acctz() *System_GrpcServer_AcctzPath {
	ps := &System_GrpcServer_AcctzPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acctz"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Acctz (container): A collection of counters from the gNSI.acctz module that exist
// per grpc server.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "acctz"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz"
func (n *System_GrpcServerPathAny) Acctz() *System_GrpcServer_AcctzPathAny {
	ps := &System_GrpcServer_AcctzPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acctz"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AuthenticationPolicyCreatedOn (leaf): The timestamp of the moment when the authentication policy
// that is currently used by this gRPC server was created.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-created-on"
func (n *System_GrpcServerPath) AuthenticationPolicyCreatedOn() *System_GrpcServer_AuthenticationPolicyCreatedOnPath {
	ps := &System_GrpcServer_AuthenticationPolicyCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationPolicyCreatedOn (leaf): The timestamp of the moment when the authentication policy
// that is currently used by this gRPC server was created.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-created-on"
func (n *System_GrpcServerPathAny) AuthenticationPolicyCreatedOn() *System_GrpcServer_AuthenticationPolicyCreatedOnPathAny {
	ps := &System_GrpcServer_AuthenticationPolicyCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationPolicyVersion (leaf): The version of the authentication policy that is used by
// this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-version"
func (n *System_GrpcServerPath) AuthenticationPolicyVersion() *System_GrpcServer_AuthenticationPolicyVersionPath {
	ps := &System_GrpcServer_AuthenticationPolicyVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationPolicyVersion (leaf): The version of the authentication policy that is used by
// this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authentication-policy-version"
func (n *System_GrpcServerPathAny) AuthenticationPolicyVersion() *System_GrpcServer_AuthenticationPolicyVersionPathAny {
	ps := &System_GrpcServer_AuthenticationPolicyVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authentication-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthzPolicyCounters (container): A collection of counters collected by the gNSI.authz module.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authz-policy-counters"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters"
func (n *System_GrpcServerPath) AuthzPolicyCounters() *System_GrpcServer_AuthzPolicyCountersPath {
	ps := &System_GrpcServer_AuthzPolicyCountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authz-policy-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AuthzPolicyCounters (container): A collection of counters collected by the gNSI.authz module.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authz-policy-counters"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters"
func (n *System_GrpcServerPathAny) AuthzPolicyCounters() *System_GrpcServer_AuthzPolicyCountersPathAny {
	ps := &System_GrpcServer_AuthzPolicyCountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authz-policy-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CaTrustBundleCreatedOn (leaf): The timestamp of the moment when the bundle of
// the Certificate Authority certificates (a.k.a.
//
//	   trust bundle) was created.
//		Defining module:      "openconfig-gnsi-certz"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "state/ca-trust-bundle-created-on"
//		Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServerPath) CaTrustBundleCreatedOn() *System_GrpcServer_CaTrustBundleCreatedOnPath {
	ps := &System_GrpcServer_CaTrustBundleCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleCreatedOn (leaf): The timestamp of the moment when the bundle of
// the Certificate Authority certificates (a.k.a.
//
//	   trust bundle) was created.
//		Defining module:      "openconfig-gnsi-certz"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "state/ca-trust-bundle-created-on"
//		Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServerPathAny) CaTrustBundleCreatedOn() *System_GrpcServer_CaTrustBundleCreatedOnPathAny {
	ps := &System_GrpcServer_CaTrustBundleCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleVersion (leaf): The version of the bundle of the Certificate
// Authority certificates a.k.a. trust bundle used by
// this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServerPath) CaTrustBundleVersion() *System_GrpcServer_CaTrustBundleVersionPath {
	ps := &System_GrpcServer_CaTrustBundleVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleVersion (leaf): The version of the bundle of the Certificate
// Authority certificates a.k.a. trust bundle used by
// this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServerPathAny) CaTrustBundleVersion() *System_GrpcServer_CaTrustBundleVersionPathAny {
	ps := &System_GrpcServer_CaTrustBundleVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateCreatedOn (leaf): The timestamp of the moment when the certificate
// (and associated private key) that is currently used
// by this gRPC server was created.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServerPath) CertificateCreatedOn() *System_GrpcServer_CertificateCreatedOnPath {
	ps := &System_GrpcServer_CertificateCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateCreatedOn (leaf): The timestamp of the moment when the certificate
// (and associated private key) that is currently used
// by this gRPC server was created.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServerPathAny) CertificateCreatedOn() *System_GrpcServer_CertificateCreatedOnPathAny {
	ps := &System_GrpcServer_CertificateCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/certificate-id"
func (n *System_GrpcServerPath) CertificateId() *System_GrpcServer_CertificateIdPath {
	ps := &System_GrpcServer_CertificateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "certificate-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/certificate-id"
func (n *System_GrpcServerPathAny) CertificateId() *System_GrpcServer_CertificateIdPathAny {
	ps := &System_GrpcServer_CertificateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "certificate-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleCreatedOn (leaf): The timestamp of the moment when the Certificate Revocation
// List bundle was created.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServerPath) CertificateRevocationListBundleCreatedOn() *System_GrpcServer_CertificateRevocationListBundleCreatedOnPath {
	ps := &System_GrpcServer_CertificateRevocationListBundleCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleCreatedOn (leaf): The timestamp of the moment when the Certificate Revocation
// List bundle was created.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServerPathAny) CertificateRevocationListBundleCreatedOn() *System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny {
	ps := &System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleVersion (leaf): The version of the Certificate Revocation List bundle used by
// this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServerPath) CertificateRevocationListBundleVersion() *System_GrpcServer_CertificateRevocationListBundleVersionPath {
	ps := &System_GrpcServer_CertificateRevocationListBundleVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleVersion (leaf): The version of the Certificate Revocation List bundle used by
// this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServerPathAny) CertificateRevocationListBundleVersion() *System_GrpcServer_CertificateRevocationListBundleVersionPathAny {
	ps := &System_GrpcServer_CertificateRevocationListBundleVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateVersion (leaf): The version of the certificate (and associated
// private key) that is used by this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServerPath) CertificateVersion() *System_GrpcServer_CertificateVersionPath {
	ps := &System_GrpcServer_CertificateVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateVersion (leaf): The version of the certificate (and associated
// private key) that is used by this gRPC server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServerPathAny) CertificateVersion() *System_GrpcServer_CertificateVersionPathAny {
	ps := &System_GrpcServer_CertificateVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionAny (list): List of gRPC connections
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connections/connection"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection"
func (n *System_GrpcServerPath) ConnectionAny() *System_GrpcServer_ConnectionPathAny {
	ps := &System_GrpcServer_ConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connections", "connection"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
	return ps
}

// ConnectionAny (list): List of gRPC connections
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connections/connection"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection"
func (n *System_GrpcServerPathAny) ConnectionAny() *System_GrpcServer_ConnectionPathAny {
	ps := &System_GrpcServer_ConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connections", "connection"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
	return ps
}

// WithAddress sets System_GrpcServer_ConnectionPathAny's key "address" to the specified value.
// Address: string
func (n *System_GrpcServer_ConnectionPathAny) WithAddress(Address string) *System_GrpcServer_ConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "address", Address)
	return n
}

// WithPort sets System_GrpcServer_ConnectionPathAny's key "port" to the specified value.
// Port: uint16
func (n *System_GrpcServer_ConnectionPathAny) WithPort(Port uint16) *System_GrpcServer_ConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "port", Port)
	return n
}

// Connection (list): List of gRPC connections
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connections/connection"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection"
//
//	Address: string
//	Port: uint16
func (n *System_GrpcServerPath) Connection(Address string, Port uint16) *System_GrpcServer_ConnectionPath {
	ps := &System_GrpcServer_ConnectionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connections", "connection"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
	return ps
}

// Connection (list): List of gRPC connections
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connections/connection"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection"
//
//	Address: string
//	Port: uint16
func (n *System_GrpcServerPathAny) Connection(Address string, Port uint16) *System_GrpcServer_ConnectionPathAny {
	ps := &System_GrpcServer_ConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connections", "connection"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
	return ps
}

// ConnectionMap (list): List of gRPC connections
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connections/connection"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection"
func (n *System_GrpcServerPath) ConnectionMap() *System_GrpcServer_ConnectionPathMap {
	ps := &System_GrpcServer_ConnectionPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"connections"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConnectionMap (list): List of gRPC connections
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connections/connection"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection"
func (n *System_GrpcServerPathAny) ConnectionMap() *System_GrpcServer_ConnectionPathMapAny {
	ps := &System_GrpcServer_ConnectionPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connections"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of counters that were collected by the gRPC during
// the authentication process.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters"
func (n *System_GrpcServerPath) Counters() *System_GrpcServer_CountersPath {
	ps := &System_GrpcServer_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of counters that were collected by the gRPC during
// the authentication process.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters"
func (n *System_GrpcServerPathAny) Counters() *System_GrpcServer_CountersPathAny {
	ps := &System_GrpcServer_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/*/enable"
func (n *System_GrpcServerPath) Enable() *System_GrpcServer_EnablePath {
	ps := &System_GrpcServer_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/*/enable"
func (n *System_GrpcServerPathAny) Enable() *System_GrpcServer_EnablePathAny {
	ps := &System_GrpcServer_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyCounters (container): A collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "gnmi-pathz-policy-counters"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters"
func (n *System_GrpcServerPath) GnmiPathzPolicyCounters() *System_GrpcServer_GnmiPathzPolicyCountersPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"gnmi-pathz-policy-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GnmiPathzPolicyCounters (container): A collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "gnmi-pathz-policy-counters"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters"
func (n *System_GrpcServerPathAny) GnmiPathzPolicyCounters() *System_GrpcServer_GnmiPathzPolicyCountersPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"gnmi-pathz-policy-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GnmiPathzPolicyCreatedOn (leaf): The timestamp of the moment when the OpenConfig-path-based
// authorization policy that is currently used by this gNMI server
// was created.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServerPath) GnmiPathzPolicyCreatedOn() *System_GrpcServer_GnmiPathzPolicyCreatedOnPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyCreatedOn (leaf): The timestamp of the moment when the OpenConfig-path-based
// authorization policy that is currently used by this gNMI server
// was created.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServerPathAny) GnmiPathzPolicyCreatedOn() *System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyVersion (leaf): The version of the OpenConfig-path-based authorization policy
// that is used by this gNMI server.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServerPath) GnmiPathzPolicyVersion() *System_GrpcServer_GnmiPathzPolicyVersionPath {
	ps := &System_GrpcServer_GnmiPathzPolicyVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyVersion (leaf): The version of the OpenConfig-path-based authorization policy
// that is used by this gNMI server.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServerPathAny) GnmiPathzPolicyVersion() *System_GrpcServer_GnmiPathzPolicyVersionPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/*/listen-addresses"
func (n *System_GrpcServerPath) ListenAddresses() *System_GrpcServer_ListenAddressesPath {
	ps := &System_GrpcServer_ListenAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/*/listen-addresses"
func (n *System_GrpcServerPathAny) ListenAddresses() *System_GrpcServer_ListenAddressesPathAny {
	ps := &System_GrpcServer_ListenAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/*/metadata-authentication"
func (n *System_GrpcServerPath) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPath {
	ps := &System_GrpcServer_MetadataAuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/*/metadata-authentication"
func (n *System_GrpcServerPathAny) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPathAny {
	ps := &System_GrpcServer_MetadataAuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/*/name"
func (n *System_GrpcServerPath) Name() *System_GrpcServer_NamePath {
	ps := &System_GrpcServer_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/*/name"
func (n *System_GrpcServerPathAny) Name() *System_GrpcServer_NamePathAny {
	ps := &System_GrpcServer_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/*/network-instance"
func (n *System_GrpcServerPath) NetworkInstance() *System_GrpcServer_NetworkInstancePath {
	ps := &System_GrpcServer_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/*/network-instance"
func (n *System_GrpcServerPathAny) NetworkInstance() *System_GrpcServer_NetworkInstancePathAny {
	ps := &System_GrpcServer_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): TCP port on which the gRPC server should listen.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/grpc-servers/grpc-server/*/port"
func (n *System_GrpcServerPath) Port() *System_GrpcServer_PortPath {
	ps := &System_GrpcServer_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): TCP port on which the gRPC server should listen.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/grpc-servers/grpc-server/*/port"
func (n *System_GrpcServerPathAny) Port() *System_GrpcServer_PortPathAny {
	ps := &System_GrpcServer_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/services"
//	Path from root:       "/system/grpc-servers/grpc-server/*/services"
func (n *System_GrpcServerPath) Services() *System_GrpcServer_ServicesPath {
	ps := &System_GrpcServer_ServicesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "services"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/services"
//	Path from root:       "/system/grpc-servers/grpc-server/*/services"
func (n *System_GrpcServerPathAny) Services() *System_GrpcServer_ServicesPathAny {
	ps := &System_GrpcServer_ServicesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "services"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SslProfileId (leaf): The ID of this gRPC server's SSL profile
// as used by the gNSI Certz service
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ssl-profile-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ssl-profile-id"
func (n *System_GrpcServerPath) SslProfileId() *System_GrpcServer_SslProfileIdPath {
	ps := &System_GrpcServer_SslProfileIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ssl-profile-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SslProfileId (leaf): The ID of this gRPC server's SSL profile
// as used by the gNSI Certz service
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ssl-profile-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ssl-profile-id"
func (n *System_GrpcServerPathAny) SslProfileId() *System_GrpcServer_SslProfileIdPathAny {
	ps := &System_GrpcServer_SslProfileIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ssl-profile-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/*/transport-security"
func (n *System_GrpcServerPath) TransportSecurity() *System_GrpcServer_TransportSecurityPath {
	ps := &System_GrpcServer_TransportSecurityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transport-security"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/*/transport-security"
func (n *System_GrpcServerPathAny) TransportSecurity() *System_GrpcServer_TransportSecurityPathAny {
	ps := &System_GrpcServer_TransportSecurityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transport-security"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPath) Config() ygnmi.ConfigQuery[*oc.System_GrpcServer] {
	return ygnmi.NewConfigQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_GrpcServer](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GrpcServer](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_GrpcServer](
		"System",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GrpcServer](
		"System",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// System_GrpcServer_AcctzPath represents the /openconfig-system/system/grpc-servers/grpc-server/acctz YANG schema element.
type System_GrpcServer_AcctzPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_AcctzPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/acctz YANG schema element.
type System_GrpcServer_AcctzPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): A collection of counters that were collected by the gNSI.acctz
// module while servicing acctz clients.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters"
func (n *System_GrpcServer_AcctzPath) Counters() *System_GrpcServer_Acctz_CountersPath {
	ps := &System_GrpcServer_Acctz_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of counters that were collected by the gNSI.acctz
// module while servicing acctz clients.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters"
func (n *System_GrpcServer_AcctzPathAny) Counters() *System_GrpcServer_Acctz_CountersPathAny {
	ps := &System_GrpcServer_Acctz_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AcctzPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_Acctz] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_Acctz](
		"System_GrpcServer_Acctz",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AcctzPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_Acctz] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_Acctz](
		"System_GrpcServer_Acctz",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Acctz_Counters_HistoryIstruncatedPath represents the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters/history-istruncated YANG schema element.
type System_GrpcServer_Acctz_Counters_HistoryIstruncatedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Acctz_Counters_HistoryIstruncatedPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters/history-istruncated YANG schema element.
type System_GrpcServer_Acctz_Counters_HistoryIstruncatedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "history-istruncated"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/history-istruncated"
func (n *System_GrpcServer_Acctz_Counters_HistoryIstruncatedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"history-istruncated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Acctz_Counters).HistoryIstruncated
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Acctz_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "history-istruncated"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/history-istruncated"
func (n *System_GrpcServer_Acctz_Counters_HistoryIstruncatedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"history-istruncated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Acctz_Counters).HistoryIstruncated
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Acctz_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Acctz_Counters_RecordRequestsPath represents the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters/record-requests YANG schema element.
type System_GrpcServer_Acctz_Counters_RecordRequestsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Acctz_Counters_RecordRequestsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters/record-requests YANG schema element.
type System_GrpcServer_Acctz_Counters_RecordRequestsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "record-requests"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-requests"
func (n *System_GrpcServer_Acctz_Counters_RecordRequestsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"record-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Acctz_Counters).RecordRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Acctz_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "record-requests"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-requests"
func (n *System_GrpcServer_Acctz_Counters_RecordRequestsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"record-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Acctz_Counters).RecordRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Acctz_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Acctz_Counters_RecordResponsesPath represents the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters/record-responses YANG schema element.
type System_GrpcServer_Acctz_Counters_RecordResponsesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Acctz_Counters_RecordResponsesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters/record-responses YANG schema element.
type System_GrpcServer_Acctz_Counters_RecordResponsesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "record-responses"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-responses"
func (n *System_GrpcServer_Acctz_Counters_RecordResponsesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"record-responses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Acctz_Counters).RecordResponses
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Acctz_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "record-responses"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-responses"
func (n *System_GrpcServer_Acctz_Counters_RecordResponsesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"record-responses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Acctz_Counters).RecordResponses
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Acctz_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Acctz_CountersPath represents the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters YANG schema element.
type System_GrpcServer_Acctz_CountersPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_Acctz_CountersPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters YANG schema element.
type System_GrpcServer_Acctz_CountersPathAny struct {
	*ygnmi.NodePath
}

// HistoryIstruncated (leaf): The total number of times that a RecordRequest resulted in
// a RecordResponse being marked history-istruncated. ie: a
// request was made for a timestamp that did not exist in the
// history.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "history-istruncated"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/history-istruncated"
func (n *System_GrpcServer_Acctz_CountersPath) HistoryIstruncated() *System_GrpcServer_Acctz_Counters_HistoryIstruncatedPath {
	ps := &System_GrpcServer_Acctz_Counters_HistoryIstruncatedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"history-istruncated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HistoryIstruncated (leaf): The total number of times that a RecordRequest resulted in
// a RecordResponse being marked history-istruncated. ie: a
// request was made for a timestamp that did not exist in the
// history.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "history-istruncated"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/history-istruncated"
func (n *System_GrpcServer_Acctz_CountersPathAny) HistoryIstruncated() *System_GrpcServer_Acctz_Counters_HistoryIstruncatedPathAny {
	ps := &System_GrpcServer_Acctz_Counters_HistoryIstruncatedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"history-istruncated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordRequests (leaf): The total number of RecordRequest messages that have been received.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "record-requests"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-requests"
func (n *System_GrpcServer_Acctz_CountersPath) RecordRequests() *System_GrpcServer_Acctz_Counters_RecordRequestsPath {
	ps := &System_GrpcServer_Acctz_Counters_RecordRequestsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordRequests (leaf): The total number of RecordRequest messages that have been received.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "record-requests"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-requests"
func (n *System_GrpcServer_Acctz_CountersPathAny) RecordRequests() *System_GrpcServer_Acctz_Counters_RecordRequestsPathAny {
	ps := &System_GrpcServer_Acctz_Counters_RecordRequestsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordResponses (leaf): The total number of RecordResponse messages that have been sent.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "record-responses"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-responses"
func (n *System_GrpcServer_Acctz_CountersPath) RecordResponses() *System_GrpcServer_Acctz_Counters_RecordResponsesPath {
	ps := &System_GrpcServer_Acctz_Counters_RecordResponsesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-responses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordResponses (leaf): The total number of RecordResponse messages that have been sent.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "record-responses"
//	Path from root:       "/system/grpc-servers/grpc-server/acctz/state/counters/record-responses"
func (n *System_GrpcServer_Acctz_CountersPathAny) RecordResponses() *System_GrpcServer_Acctz_Counters_RecordResponsesPathAny {
	ps := &System_GrpcServer_Acctz_Counters_RecordResponsesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-responses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_Acctz_CountersPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_Acctz_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_Acctz_Counters](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_Acctz_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_Acctz_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_Acctz_Counters](
		"System_GrpcServer_Acctz_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyCountersPath represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters YANG schema element.
type System_GrpcServer_AuthzPolicyCountersPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_AuthzPolicyCountersPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters YANG schema element.
type System_GrpcServer_AuthzPolicyCountersPathAny struct {
	*ygnmi.NodePath
}

// RpcAny (list): A collection of counters collected by the gNSI.authz module
// for a RPC identified by the `name`.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "rpcs/rpc"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc"
func (n *System_GrpcServer_AuthzPolicyCountersPath) RpcAny() *System_GrpcServer_AuthzPolicyCounters_RpcPathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_RpcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rpcs", "rpc"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// RpcAny (list): A collection of counters collected by the gNSI.authz module
// for a RPC identified by the `name`.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "rpcs/rpc"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc"
func (n *System_GrpcServer_AuthzPolicyCountersPathAny) RpcAny() *System_GrpcServer_AuthzPolicyCounters_RpcPathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_RpcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rpcs", "rpc"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Rpc (list): A collection of counters collected by the gNSI.authz module
// for a RPC identified by the `name`.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "rpcs/rpc"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc"
//
//	Name: string
func (n *System_GrpcServer_AuthzPolicyCountersPath) Rpc(Name string) *System_GrpcServer_AuthzPolicyCounters_RpcPath {
	ps := &System_GrpcServer_AuthzPolicyCounters_RpcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rpcs", "rpc"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Rpc (list): A collection of counters collected by the gNSI.authz module
// for a RPC identified by the `name`.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "rpcs/rpc"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc"
//
//	Name: string
func (n *System_GrpcServer_AuthzPolicyCountersPathAny) Rpc(Name string) *System_GrpcServer_AuthzPolicyCounters_RpcPathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_RpcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rpcs", "rpc"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// RpcMap (list): A collection of counters collected by the gNSI.authz module
// for a RPC identified by the `name`.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "rpcs/rpc"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc"
func (n *System_GrpcServer_AuthzPolicyCountersPath) RpcMap() *System_GrpcServer_AuthzPolicyCounters_RpcPathMap {
	ps := &System_GrpcServer_AuthzPolicyCounters_RpcPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"rpcs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RpcMap (list): A collection of counters collected by the gNSI.authz module
// for a RPC identified by the `name`.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "rpcs/rpc"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc"
func (n *System_GrpcServer_AuthzPolicyCountersPathAny) RpcMap() *System_GrpcServer_AuthzPolicyCounters_RpcPathMapAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_RpcPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rpcs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AuthzPolicyCountersPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_AuthzPolicyCounters] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_AuthzPolicyCounters](
		"System_GrpcServer_AuthzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AuthzPolicyCountersPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_AuthzPolicyCounters] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_AuthzPolicyCounters](
		"System_GrpcServer_AuthzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPath represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-accepts YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-accepts YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-accepts"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-accepts"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPath represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-rejects YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-rejects YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-rejects"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-rejects"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPath represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-accept YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-accept YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-accept"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-accept"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPath represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-reject YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-reject YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-reject"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-reject"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_NamePath represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/name YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthzPolicyCounters_Rpc_NamePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/name YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/name"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/name"
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_GrpcServer_AuthzPolicyCounters_Rpc_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters_Rpc).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters_Rpc) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyCounters_RpcPath represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_RpcPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_AuthzPolicyCounters_RpcPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_RpcPathAny struct {
	*ygnmi.NodePath
}

// System_GrpcServer_AuthzPolicyCounters_RpcPathMap represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_RpcPathMap struct {
	*ygnmi.NodePath
}

// System_GrpcServer_AuthzPolicyCounters_RpcPathMapAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_RpcPathMapAny struct {
	*ygnmi.NodePath
}

// AccessAccepts (leaf): The total number of times the gNSI.authz module allowed access
// to a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-accepts"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPath) AccessAccepts() *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPath {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessAccepts (leaf): The total number of times the gNSI.authz module allowed access
// to a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-accepts"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathAny) AccessAccepts() *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_AccessAcceptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times the gNSI.authz module denied access
// to a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-rejects"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPath) AccessRejects() *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPath {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times the gNSI.authz module denied access
// to a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/access-rejects"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathAny) AccessRejects() *System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_AccessRejectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time the gNSI.authz allowed access to
// a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-accept"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPath) LastAccessAccept() *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPath {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time the gNSI.authz allowed access to
// a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-accept"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathAny) LastAccessAccept() *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessAcceptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time the gNSI.authz denied access to
// a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-reject"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPath) LastAccessReject() *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPath {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time the gNSI.authz denied access to
// a RPC.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/state/last-access-reject"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathAny) LastAccessReject() *System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_LastAccessRejectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the RPC the counters were collected for.
//
// The name MUST match the HTTP/2 Path header value in
// https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests
//
// For example,
// /gnmi.gNMI/Subscribe
// /gnoi.healthz.Healthz/Get
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/*/name"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPath) Name() *System_GrpcServer_AuthzPolicyCounters_Rpc_NamePath {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the RPC the counters were collected for.
//
// The name MUST match the HTTP/2 Path header value in
// https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests
//
// For example,
// /gnmi.gNMI/Subscribe
// /gnoi.healthz.Healthz/Get
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/*/name"
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathAny) Name() *System_GrpcServer_AuthzPolicyCounters_Rpc_NamePathAny {
	ps := &System_GrpcServer_AuthzPolicyCounters_Rpc_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_AuthzPolicyCounters_Rpc] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_AuthzPolicyCounters_Rpc](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_AuthzPolicyCounters_Rpc] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_AuthzPolicyCounters_Rpc](
		"System_GrpcServer_AuthzPolicyCounters_Rpc",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_GrpcServer_AuthzPolicyCounters_Rpc] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_GrpcServer_AuthzPolicyCounters_Rpc](
		"System_GrpcServer_AuthzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer_AuthzPolicyCounters_Rpc, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters).Rpc
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-authz:rpcs"},
			PostRelPath: []string{"openconfig-gnsi-authz:rpc"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_AuthzPolicyCounters_RpcPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_GrpcServer_AuthzPolicyCounters_Rpc] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GrpcServer_AuthzPolicyCounters_Rpc](
		"System_GrpcServer_AuthzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer_AuthzPolicyCounters_Rpc, bool) {
			ret := gs.(*oc.System_GrpcServer_AuthzPolicyCounters).Rpc
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_AuthzPolicyCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-authz:rpcs"},
			PostRelPath: []string{"openconfig-gnsi-authz:rpc"},
		},
	)
}

// System_GrpcServer_Connection_AddressPath represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/address YANG schema element.
type System_GrpcServer_Connection_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Connection_AddressPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/address YANG schema element.
type System_GrpcServer_Connection_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/address"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/address"
func (n *System_GrpcServer_Connection_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer_Connection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/address"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/address"
func (n *System_GrpcServer_Connection_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer_Connection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *System_GrpcServer_Connection_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer_Connection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *System_GrpcServer_Connection_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer_Connection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Connection_PortPath represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/port YANG schema element.
type System_GrpcServer_Connection_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Connection_PortPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/port YANG schema element.
type System_GrpcServer_Connection_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/port"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/port"
func (n *System_GrpcServer_Connection_PortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_GrpcServer_Connection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/port"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/port"
func (n *System_GrpcServer_Connection_PortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_GrpcServer_Connection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "port"
//	Path from root:       ""
func (n *System_GrpcServer_Connection_PortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_GrpcServer_Connection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "port"
//	Path from root:       ""
func (n *System_GrpcServer_Connection_PortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_GrpcServer_Connection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_ConnectionPath represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection YANG schema element.
type System_GrpcServer_ConnectionPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_ConnectionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection YANG schema element.
type System_GrpcServer_ConnectionPathAny struct {
	*ygnmi.NodePath
}

// System_GrpcServer_ConnectionPathMap represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection YANG schema element.
type System_GrpcServer_ConnectionPathMap struct {
	*ygnmi.NodePath
}

// System_GrpcServer_ConnectionPathMapAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection YANG schema element.
type System_GrpcServer_ConnectionPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): IPv4/IPv6 address of the gRPC server connection.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/*/address"
func (n *System_GrpcServer_ConnectionPath) Address() *System_GrpcServer_Connection_AddressPath {
	ps := &System_GrpcServer_Connection_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): IPv4/IPv6 address of the gRPC server connection.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/*/address"
func (n *System_GrpcServer_ConnectionPathAny) Address() *System_GrpcServer_Connection_AddressPathAny {
	ps := &System_GrpcServer_Connection_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Operational data for gRPC counters.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters"
func (n *System_GrpcServer_ConnectionPath) Counters() *System_GrpcServer_Connection_CountersPath {
	ps := &System_GrpcServer_Connection_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Operational data for gRPC counters.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters"
func (n *System_GrpcServer_ConnectionPathAny) Counters() *System_GrpcServer_Connection_CountersPathAny {
	ps := &System_GrpcServer_Connection_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Port (leaf): TCP/UDP port number for the gRPC server connection.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/*/port"
func (n *System_GrpcServer_ConnectionPath) Port() *System_GrpcServer_Connection_PortPath {
	ps := &System_GrpcServer_Connection_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): TCP/UDP port number for the gRPC server connection.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/*/port"
func (n *System_GrpcServer_ConnectionPathAny) Port() *System_GrpcServer_Connection_PortPathAny {
	ps := &System_GrpcServer_Connection_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_ConnectionPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_Connection] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_Connection](
		"System_GrpcServer_Connection",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_ConnectionPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_Connection] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_Connection](
		"System_GrpcServer_Connection",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_ConnectionPathMap) State() ygnmi.SingletonQuery[map[oc.System_GrpcServer_Connection_Key]*oc.System_GrpcServer_Connection] {
	return ygnmi.NewSingletonQuery[map[oc.System_GrpcServer_Connection_Key]*oc.System_GrpcServer_Connection](
		"System_GrpcServer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_GrpcServer_Connection_Key]*oc.System_GrpcServer_Connection, bool) {
			ret := gs.(*oc.System_GrpcServer).Connection
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:connections"},
			PostRelPath: []string{"openconfig-system-grpc:connection"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_ConnectionPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_GrpcServer_Connection_Key]*oc.System_GrpcServer_Connection] {
	return ygnmi.NewWildcardQuery[map[oc.System_GrpcServer_Connection_Key]*oc.System_GrpcServer_Connection](
		"System_GrpcServer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_GrpcServer_Connection_Key]*oc.System_GrpcServer_Connection, bool) {
			ret := gs.(*oc.System_GrpcServer).Connection
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:connections"},
			PostRelPath: []string{"openconfig-system-grpc:connection"},
		},
	)
}

// System_GrpcServer_Connection_Counters_BytesSentPath represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters/bytes-sent YANG schema element.
type System_GrpcServer_Connection_Counters_BytesSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Connection_Counters_BytesSentPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters/bytes-sent YANG schema element.
type System_GrpcServer_Connection_Counters_BytesSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "bytes-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/bytes-sent"
func (n *System_GrpcServer_Connection_Counters_BytesSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bytes-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection_Counters).BytesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "bytes-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/bytes-sent"
func (n *System_GrpcServer_Connection_Counters_BytesSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bytes-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection_Counters).BytesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
