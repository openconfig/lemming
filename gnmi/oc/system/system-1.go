/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Aaa_Authorization_EventPath represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Authorization_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_Authorization_EventPathMap represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_Authorization_EventPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathMapAny struct {
	*ygnmi.NodePath
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/*/event-type"
func (n *System_Aaa_Authorization_EventPath) EventType() *System_Aaa_Authorization_Event_EventTypePath {
	ps := &System_Aaa_Authorization_Event_EventTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/*/event-type"
func (n *System_Aaa_Authorization_EventPathAny) EventType() *System_Aaa_Authorization_Event_EventTypePathAny {
	ps := &System_Aaa_Authorization_Event_EventTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMap) State() ygnmi.SingletonQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewSingletonQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMap) Config() ygnmi.ConfigQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewConfigQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// System_Aaa_ServerGroup_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/state/name YANG schema element.
type System_Aaa_ServerGroup_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/state/name YANG schema element.
type System_Aaa_ServerGroup_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/state/name"
func (n *System_Aaa_ServerGroup_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/state/name"
func (n *System_Aaa_ServerGroup_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroup_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroup_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_TypePath represents the /openconfig-system/system/aaa/server-groups/server-group/state/type YANG schema element.
type System_Aaa_ServerGroup_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_TypePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/state/type YANG schema element.
type System_Aaa_ServerGroup_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/aaa/server-groups/server-group/state/type"
func (n *System_Aaa_ServerGroup_TypePath) State() ygnmi.SingletonQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/aaa/server-groups/server-group/state/type"
func (n *System_Aaa_ServerGroup_TypePathAny) State() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/type"
//	Path from root:       "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroup_TypePath) Config() ygnmi.ConfigQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/type"
//	Path from root:       "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroup_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroupPath represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroupPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroupPathMap represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroupPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Name for the server group
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/*/name"
func (n *System_Aaa_ServerGroupPath) Name() *System_Aaa_ServerGroup_NamePath {
	ps := &System_Aaa_ServerGroup_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name for the server group
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/*/name"
func (n *System_Aaa_ServerGroupPathAny) Name() *System_Aaa_ServerGroup_NamePathAny {
	ps := &System_Aaa_ServerGroup_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerAny (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPath) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	ps := &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// ServerAny (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPathAny) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	ps := &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Server (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
//
//	Address: string
func (n *System_Aaa_ServerGroupPath) Server(Address string) *System_Aaa_ServerGroup_ServerPath {
	ps := &System_Aaa_ServerGroup_ServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Server (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
//
//	Address: string
func (n *System_Aaa_ServerGroupPathAny) Server(Address string) *System_Aaa_ServerGroup_ServerPathAny {
	ps := &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPath) ServerMap() *System_Aaa_ServerGroup_ServerPathMap {
	ps := &System_Aaa_ServerGroup_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPathAny) ServerMap() *System_Aaa_ServerGroup_ServerPathMapAny {
	ps := &System_Aaa_ServerGroup_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/type"
//	Path from root:       "/system/aaa/server-groups/server-group/*/type"
func (n *System_Aaa_ServerGroupPath) Type() *System_Aaa_ServerGroup_TypePath {
	ps := &System_Aaa_ServerGroup_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/type"
//	Path from root:       "/system/aaa/server-groups/server-group/*/type"
func (n *System_Aaa_ServerGroupPathAny) Type() *System_Aaa_ServerGroup_TypePathAny {
	ps := &System_Aaa_ServerGroup_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// System_Aaa_ServerGroup_Server_AddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/address"
func (n *System_Aaa_ServerGroup_Server_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/address"
func (n *System_Aaa_ServerGroup_Server_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_Server_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_Server_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_Server_ConnectionAbortsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionAborts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionAborts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_Server_ConnectionClosesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionCloses
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_Server_ConnectionClosesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionCloses
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_Server_ConnectionFailuresPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionFailures
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionFailures
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_Server_ConnectionOpensPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_Server_ConnectionOpensPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_Server_ErrorsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ErrorsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ErrorsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_Server_MessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_Server_MessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_MessagesSentPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_MessagesSentPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_Server_MessagesSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_Server_MessagesSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/name"
func (n *System_Aaa_ServerGroup_Server_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/name"
func (n *System_Aaa_ServerGroup_Server_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_Server_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_Server_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_TimeoutPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_ServerPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_ServerPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_ServerPathMap represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): Address of the authentication server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/address"
func (n *System_Aaa_ServerGroup_ServerPath) Address() *System_Aaa_ServerGroup_Server_AddressPath {
	ps := &System_Aaa_ServerGroup_Server_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): Address of the authentication server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/address"
func (n *System_Aaa_ServerGroup_ServerPathAny) Address() *System_Aaa_ServerGroup_Server_AddressPathAny {
	ps := &System_Aaa_ServerGroup_Server_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionAbortsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionClosesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionClosesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionFailures (leaf): Number of connection failures to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionFailuresPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionFailures (leaf): Number of connection failures to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionOpensPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionOpensPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorsReceived (leaf): Number of error messages received from the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPath) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPath {
	ps := &System_Aaa_ServerGroup_Server_ErrorsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorsReceived (leaf): Number of error messages received from the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny {
	ps := &System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesReceived (leaf): Number of messages received by the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPath {
	ps := &System_Aaa_ServerGroup_Server_MessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesReceived (leaf): Number of messages received by the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPathAny {
	ps := &System_Aaa_ServerGroup_Server_MessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesSent (leaf): Number of messages sent to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPath {
	ps := &System_Aaa_ServerGroup_Server_MessagesSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesSent (leaf): Number of messages sent to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPathAny {
	ps := &System_Aaa_ServerGroup_Server_MessagesSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name assigned to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/name"
func (n *System_Aaa_ServerGroup_ServerPath) Name() *System_Aaa_ServerGroup_Server_NamePath {
	ps := &System_Aaa_ServerGroup_Server_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name assigned to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/name"
func (n *System_Aaa_ServerGroup_ServerPathAny) Name() *System_Aaa_ServerGroup_Server_NamePathAny {
	ps := &System_Aaa_ServerGroup_Server_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Radius (container): Top-level container for RADIUS server data
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "radius"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPath) Radius() *System_Aaa_ServerGroup_Server_RadiusPath {
	ps := &System_Aaa_ServerGroup_Server_RadiusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Radius (container): Top-level container for RADIUS server data
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "radius"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPathAny) Radius() *System_Aaa_ServerGroup_Server_RadiusPathAny {
	ps := &System_Aaa_ServerGroup_Server_RadiusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tacacs (container): Top-level container for TACACS+ server data
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "tacacs"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPath) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPath {
	ps := &System_Aaa_ServerGroup_Server_TacacsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tacacs (container): Top-level container for TACACS+ server data
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "tacacs"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPathAny) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPathAny {
	ps := &System_Aaa_ServerGroup_Server_TacacsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/timeout"
func (n *System_Aaa_ServerGroup_ServerPath) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPath {
	ps := &System_Aaa_ServerGroup_Server_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/timeout"
func (n *System_Aaa_ServerGroup_ServerPathAny) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPathAny {
	ps := &System_Aaa_ServerGroup_Server_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_RadiusPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_Server_RadiusPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPathAny struct {
	*ygnmi.NodePath
}

// AcctPort (leaf): Port number for accounting requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_AcctPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "acct-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcctPort (leaf): Port number for accounting requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "acct-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPort (leaf): Port number for authentication requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_AuthPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPort (leaf): Port number for authentication requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of RADIUS related state objects.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of RADIUS related state objects.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).RetriedAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).RetriedAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).TimeoutAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).TimeoutAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_CountersPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_CountersPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPathAny struct {
	*ygnmi.NodePath
}

// AccessAccepts (leaf): Received Access-Accept messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessAccepts (leaf): Received Access-Accept messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): Received Access-Reject messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): Received Access-Reject messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_TacacsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_Server_TacacsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPathAny struct {
	*ygnmi.NodePath
}

// Port (leaf): The port number on which to contact the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): The port number on which to contact the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_IdPath represents the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_IdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/id"
//	Path from root:       "/system/alarms/alarm/state/id"
func (n *System_Alarm_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/id"
//	Path from root:       "/system/alarms/alarm/state/id"
func (n *System_Alarm_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_Alarm_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Alarm",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_Alarm_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_ResourcePath represents the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_ResourcePathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_Alarm_ResourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resource"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Resource
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_Alarm_ResourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resource"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Resource
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_SeverityPath represents the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_SeverityPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_Alarm_SeverityPath) State() ygnmi.SingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewSingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.System_Alarm).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_Alarm_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.System_Alarm).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_TextPath represents the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_TextPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_Alarm_TextPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "text"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Text
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_Alarm_TextPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "text"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Text
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_TimeCreatedPath represents the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_TimeCreatedPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_Alarm_TimeCreatedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Alarm).TimeCreated
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_Alarm_TimeCreatedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Alarm).TimeCreated
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_TypeIdPath represents the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_TypeIdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_Alarm_TypeIdPath) State() ygnmi.SingletonQuery[oc.System_Alarm_TypeId_Union] {
	return ygnmi.NewSingletonQuery[oc.System_Alarm_TypeId_Union](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Alarm_TypeId_Union, bool) {
			ret := gs.(*oc.System_Alarm).TypeId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_Alarm_TypeIdPathAny) State() ygnmi.WildcardQuery[oc.System_Alarm_TypeId_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Alarm_TypeId_Union](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Alarm_TypeId_Union, bool) {
			ret := gs.(*oc.System_Alarm).TypeId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_AlarmPath represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPath struct {
	*ygnmi.NodePath
}

// System_AlarmPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathAny struct {
	*ygnmi.NodePath
}

// System_AlarmPathMap represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathMap struct {
	*ygnmi.NodePath
}

// System_AlarmPathMapAny represents the wildcard version of the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/alarms/alarm/*/id"
func (n *System_AlarmPath) Id() *System_Alarm_IdPath {
	ps := &System_Alarm_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/alarms/alarm/*/id"
func (n *System_AlarmPathAny) Id() *System_Alarm_IdPathAny {
	ps := &System_Alarm_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_AlarmPath) Resource() *System_Alarm_ResourcePath {
	ps := &System_Alarm_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_AlarmPathAny) Resource() *System_Alarm_ResourcePathAny {
	ps := &System_Alarm_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_AlarmPath) Severity() *System_Alarm_SeverityPath {
	ps := &System_Alarm_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_AlarmPathAny) Severity() *System_Alarm_SeverityPathAny {
	ps := &System_Alarm_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_AlarmPath) Text() *System_Alarm_TextPath {
	ps := &System_Alarm_TextPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_AlarmPathAny) Text() *System_Alarm_TextPathAny {
	ps := &System_Alarm_TextPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPath) TimeCreated() *System_Alarm_TimeCreatedPath {
	ps := &System_Alarm_TimeCreatedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPathAny) TimeCreated() *System_Alarm_TimeCreatedPathAny {
	ps := &System_Alarm_TimeCreatedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPath) TypeId() *System_Alarm_TypeIdPath {
	ps := &System_Alarm_TypeIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPathAny) TypeId() *System_Alarm_TypeIdPathAny {
	ps := &System_Alarm_TypeIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPath) State() ygnmi.SingletonQuery[*oc.System_Alarm] {
	return ygnmi.NewSingletonQuery[*oc.System_Alarm](
		"System_Alarm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPathAny) State() ygnmi.WildcardQuery[*oc.System_Alarm] {
	return ygnmi.NewWildcardQuery[*oc.System_Alarm](
		"System_Alarm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Alarm] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Alarm](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Alarm, bool) {
			ret := gs.(*oc.System).Alarm
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:alarms"},
			PostRelPath: []string{"openconfig-system:alarm"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Alarm] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Alarm](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Alarm, bool) {
			ret := gs.(*oc.System).Alarm
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:alarms"},
			PostRelPath: []string{"openconfig-system:alarm"},
		},
	)
}

// System_Bootz_ChecksumPath represents the /openconfig-system/system/bootz/state/checksum YANG schema element.
type System_Bootz_ChecksumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Bootz_ChecksumPathAny represents the wildcard version of the /openconfig-system/system/bootz/state/checksum YANG schema element.
type System_Bootz_ChecksumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/checksum"
//	Path from root:       "/system/bootz/state/checksum"
func (n *System_Bootz_ChecksumPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Bootz",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Bootz).Checksum
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/checksum"
//	Path from root:       "/system/bootz/state/checksum"
func (n *System_Bootz_ChecksumPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Bootz",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Bootz).Checksum
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Bootz_ErrorCountPath represents the /openconfig-system/system/bootz/state/error-count YANG schema element.
type System_Bootz_ErrorCountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Bootz_ErrorCountPathAny represents the wildcard version of the /openconfig-system/system/bootz/state/error-count YANG schema element.
type System_Bootz_ErrorCountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/error-count"
//	Path from root:       "/system/bootz/state/error-count"
func (n *System_Bootz_ErrorCountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Bootz",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "error-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Bootz).ErrorCount
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/error-count"
//	Path from root:       "/system/bootz/state/error-count"
func (n *System_Bootz_ErrorCountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Bootz",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "error-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Bootz).ErrorCount
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Bootz_LastBootAttemptPath represents the /openconfig-system/system/bootz/state/last-boot-attempt YANG schema element.
type System_Bootz_LastBootAttemptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Bootz_LastBootAttemptPathAny represents the wildcard version of the /openconfig-system/system/bootz/state/last-boot-attempt YANG schema element.
type System_Bootz_LastBootAttemptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/last-boot-attempt"
//	Path from root:       "/system/bootz/state/last-boot-attempt"
func (n *System_Bootz_LastBootAttemptPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Bootz",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-boot-attempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Bootz).LastBootAttempt
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/last-boot-attempt"
//	Path from root:       "/system/bootz/state/last-boot-attempt"
func (n *System_Bootz_LastBootAttemptPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Bootz",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-boot-attempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Bootz).LastBootAttempt
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Bootz_StatusPath represents the /openconfig-system/system/bootz/state/status YANG schema element.
type System_Bootz_StatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Bootz_StatusPathAny represents the wildcard version of the /openconfig-system/system/bootz/state/status YANG schema element.
type System_Bootz_StatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/status"
//	Path from root:       "/system/bootz/state/status"
func (n *System_Bootz_StatusPath) State() ygnmi.SingletonQuery[oc.E_Bootz_Status] {
	return ygnmi.NewSingletonQuery[oc.E_Bootz_Status](
		"System_Bootz",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Bootz_Status, bool) {
			ret := gs.(*oc.System_Bootz).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system-bootz"
//	Path from parent:     "state/status"
//	Path from root:       "/system/bootz/state/status"
func (n *System_Bootz_StatusPathAny) State() ygnmi.WildcardQuery[oc.E_Bootz_Status] {
	return ygnmi.NewWildcardQuery[oc.E_Bootz_Status](
		"System_Bootz",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Bootz_Status, bool) {
			ret := gs.(*oc.System_Bootz).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Bootz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_BootzPath represents the /openconfig-system/system/bootz YANG schema element.
type System_BootzPath struct {
	*ygnmi.NodePath
}

// System_BootzPathAny represents the wildcard version of the /openconfig-system/system/bootz YANG schema element.
type System_BootzPathAny struct {
	*ygnmi.NodePath
}

// Checksum (leaf): The current checksum of the bootz protocol buffer.
//
// This value should refect the current sha-512 of the bootz
// protocol buffer message BootstrapDataSigned. The protocol
// buffer serialization must be done by tag value for each field
// in the bootz protocol buffer. This will produce a
// determintistic marshalled value which can be
// checksummed.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/checksum"
//	Path from root:       "/system/bootz/state/checksum"
func (n *System_BootzPath) Checksum() *System_Bootz_ChecksumPath {
	ps := &System_Bootz_ChecksumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Checksum (leaf): The current checksum of the bootz protocol buffer.
//
// This value should refect the current sha-512 of the bootz
// protocol buffer message BootstrapDataSigned. The protocol
// buffer serialization must be done by tag value for each field
// in the bootz protocol buffer. This will produce a
// determintistic marshalled value which can be
// checksummed.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/checksum"
//	Path from root:       "/system/bootz/state/checksum"
func (n *System_BootzPathAny) Checksum() *System_Bootz_ChecksumPathAny {
	ps := &System_Bootz_ChecksumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorCount (leaf): Total count of all bootz errors.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/error-count"
//	Path from root:       "/system/bootz/state/error-count"
func (n *System_BootzPath) ErrorCount() *System_Bootz_ErrorCountPath {
	ps := &System_Bootz_ErrorCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "error-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorCount (leaf): Total count of all bootz errors.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/error-count"
//	Path from root:       "/system/bootz/state/error-count"
func (n *System_BootzPathAny) ErrorCount() *System_Bootz_ErrorCountPathAny {
	ps := &System_Bootz_ErrorCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "error-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastBootAttempt (leaf): The timestamp of the last bootz attempt.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-boot-attempt"
//	Path from root:       "/system/bootz/state/last-boot-attempt"
func (n *System_BootzPath) LastBootAttempt() *System_Bootz_LastBootAttemptPath {
	ps := &System_Bootz_LastBootAttemptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-boot-attempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastBootAttempt (leaf): The timestamp of the last bootz attempt.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-boot-attempt"
//	Path from root:       "/system/bootz/state/last-boot-attempt"
func (n *System_BootzPathAny) LastBootAttempt() *System_Bootz_LastBootAttemptPathAny {
	ps := &System_Bootz_LastBootAttemptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-boot-attempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): The status of the bootz service.
//
// The general sequence for the flow would be:
// BOOTZ_UNSPECIFIED            <- system initial state
// BOOTZ_SENT                   <- bootz request sent
// BOOTZ_RECEIVED               <- bootz response received
// BOOTZ_OS_UPGRADE_IN_PROGRESS <- (if needed)
// BOOTZ_OS_UPGRADE_COMPLETE    <- (if needed)
// BOOTZ_CONFIGURATION_APPLIED  <- bootz configuration applied
// BOOTZ_OK                     <- bootz process successful
//
// If any error is encounter an error ENUM will be returned.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/status"
//	Path from root:       "/system/bootz/state/status"
func (n *System_BootzPath) Status() *System_Bootz_StatusPath {
	ps := &System_Bootz_StatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): The status of the bootz service.
//
// The general sequence for the flow would be:
// BOOTZ_UNSPECIFIED            <- system initial state
// BOOTZ_SENT                   <- bootz request sent
// BOOTZ_RECEIVED               <- bootz response received
// BOOTZ_OS_UPGRADE_IN_PROGRESS <- (if needed)
// BOOTZ_OS_UPGRADE_COMPLETE    <- (if needed)
// BOOTZ_CONFIGURATION_APPLIED  <- bootz configuration applied
// BOOTZ_OK                     <- bootz process successful
//
// If any error is encounter an error ENUM will be returned.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/status"
//	Path from root:       "/system/bootz/state/status"
func (n *System_BootzPathAny) Status() *System_Bootz_StatusPathAny {
	ps := &System_Bootz_StatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_BootzPath) State() ygnmi.SingletonQuery[*oc.System_Bootz] {
	return ygnmi.NewSingletonQuery[*oc.System_Bootz](
		"System_Bootz",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_BootzPathAny) State() ygnmi.WildcardQuery[*oc.System_Bootz] {
	return ygnmi.NewWildcardQuery[*oc.System_Bootz](
		"System_Bootz",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_BootzPath) Config() ygnmi.ConfigQuery[*oc.System_Bootz] {
	return ygnmi.NewConfigQuery[*oc.System_Bootz](
		"System_Bootz",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_BootzPathAny) Config() ygnmi.WildcardQuery[*oc.System_Bootz] {
	return ygnmi.NewWildcardQuery[*oc.System_Bootz](
		"System_Bootz",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Clock_TimezoneNamePath represents the /openconfig-system/system/clock/state/timezone-name YANG schema element.
type System_Clock_TimezoneNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Clock_TimezoneNamePathAny represents the wildcard version of the /openconfig-system/system/clock/state/timezone-name YANG schema element.
type System_Clock_TimezoneNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timezone-name"
//	Path from root:       "/system/clock/state/timezone-name"
func (n *System_Clock_TimezoneNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Clock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timezone-name"
//	Path from root:       "/system/clock/state/timezone-name"
func (n *System_Clock_TimezoneNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Clock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timezone-name"
//	Path from root:       "/system/clock/config/timezone-name"
func (n *System_Clock_TimezoneNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Clock",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timezone-name"
//	Path from root:       "/system/clock/config/timezone-name"
func (n *System_Clock_TimezoneNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Clock",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_ClockPath represents the /openconfig-system/system/clock YANG schema element.
type System_ClockPath struct {
	*ygnmi.NodePath
}

// System_ClockPathAny represents the wildcard version of the /openconfig-system/system/clock YANG schema element.
type System_ClockPathAny struct {
	*ygnmi.NodePath
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timezone-name"
//	Path from root:       "/system/clock/*/timezone-name"
func (n *System_ClockPath) TimezoneName() *System_Clock_TimezoneNamePath {
	ps := &System_Clock_TimezoneNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timezone-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timezone-name"
//	Path from root:       "/system/clock/*/timezone-name"
func (n *System_ClockPathAny) TimezoneName() *System_Clock_TimezoneNamePathAny {
	ps := &System_Clock_TimezoneNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timezone-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ClockPath) State() ygnmi.SingletonQuery[*oc.System_Clock] {
	return ygnmi.NewSingletonQuery[*oc.System_Clock](
		"System_Clock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ClockPathAny) State() ygnmi.WildcardQuery[*oc.System_Clock] {
	return ygnmi.NewWildcardQuery[*oc.System_Clock](
		"System_Clock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_ClockPath) Config() ygnmi.ConfigQuery[*oc.System_Clock] {
	return ygnmi.NewConfigQuery[*oc.System_Clock](
		"System_Clock",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_ClockPathAny) Config() ygnmi.WildcardQuery[*oc.System_Clock] {
	return ygnmi.NewWildcardQuery[*oc.System_Clock](
		"System_Clock",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Console_EnabledPath represents the /openconfig-system/system/console/state/enabled YANG schema element.
type System_Console_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Console_EnabledPathAny represents the wildcard version of the /openconfig-system/system/console/state/enabled YANG schema element.
type System_Console_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/console/state/enabled"
func (n *System_Console_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Console",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Console).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/console/state/enabled"
func (n *System_Console_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Console",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Console).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_ConsolePath represents the /openconfig-system/system/console YANG schema element.
type System_ConsolePath struct {
	*ygnmi.NodePath
}

// System_ConsolePathAny represents the wildcard version of the /openconfig-system/system/console YANG schema element.
type System_ConsolePathAny struct {
	*ygnmi.NodePath
}

// Counters (container): A collection of counters collected while authorizing users
// accessing the target.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/console/state/counters"
func (n *System_ConsolePath) Counters() *System_Console_CountersPath {
	ps := &System_Console_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of counters collected while authorizing users
// accessing the target.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/console/state/counters"
func (n *System_ConsolePathAny) Counters() *System_Console_CountersPathAny {
	ps := &System_Console_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): Whether GLOME is enabled or not.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/console/state/enabled"
func (n *System_ConsolePath) Enabled() *System_Console_EnabledPath {
	ps := &System_Console_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Whether GLOME is enabled or not.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/console/state/enabled"
func (n *System_ConsolePathAny) Enabled() *System_Console_EnabledPathAny {
	ps := &System_Console_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ConsolePath) State() ygnmi.SingletonQuery[*oc.System_Console] {
	return ygnmi.NewSingletonQuery[*oc.System_Console](
		"System_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ConsolePathAny) State() ygnmi.WildcardQuery[*oc.System_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Console](
		"System_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_ConsolePath) Config() ygnmi.ConfigQuery[*oc.System_Console] {
	return ygnmi.NewConfigQuery[*oc.System_Console](
		"System_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_ConsolePathAny) Config() ygnmi.WildcardQuery[*oc.System_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Console](
		"System_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Console_Counters_AccessAcceptsPath represents the /openconfig-system/system/console/state/counters/access-accepts YANG schema element.
type System_Console_Counters_AccessAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Console_Counters_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/console/state/counters/access-accepts YANG schema element.
type System_Console_Counters_AccessAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/console/state/counters/access-accepts"
func (n *System_Console_Counters_AccessAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Console_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Console_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Console_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/console/state/counters/access-accepts"
func (n *System_Console_Counters_AccessAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Console_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Console_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Console_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Console_Counters_AccessRejectsPath represents the /openconfig-system/system/console/state/counters/access-rejects YANG schema element.
type System_Console_Counters_AccessRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Console_Counters_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/console/state/counters/access-rejects YANG schema element.
type System_Console_Counters_AccessRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/console/state/counters/access-rejects"
func (n *System_Console_Counters_AccessRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Console_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Console_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Console_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/console/state/counters/access-rejects"
func (n *System_Console_Counters_AccessRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Console_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Console_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Console_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
