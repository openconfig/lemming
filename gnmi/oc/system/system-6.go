/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Memory_UsedPath represents the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_UsedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_Memory_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_Memory_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MemoryPath represents the /openconfig-system/system/memory YANG schema element.
type System_MemoryPath struct {
	*ygnmi.NodePath
}

// System_MemoryPathAny represents the wildcard version of the /openconfig-system/system/memory YANG schema element.
type System_MemoryPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters for tracking system memory errors
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/memory/state/counters"
func (n *System_MemoryPath) Counters() *System_Memory_CountersPath {
	ps := &System_Memory_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters for tracking system memory errors
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/memory/state/counters"
func (n *System_MemoryPathAny) Counters() *System_Memory_CountersPathAny {
	ps := &System_Memory_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Free (leaf): Memory that is not used and is available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_MemoryPath) Free() *System_Memory_FreePath {
	ps := &System_Memory_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Memory that is not used and is available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_MemoryPathAny) Free() *System_Memory_FreePathAny {
	ps := &System_Memory_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Physical (leaf): Reports the total physical memory available on the
// system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_MemoryPath) Physical() *System_Memory_PhysicalPath {
	ps := &System_Memory_PhysicalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Physical (leaf): Reports the total physical memory available on the
// system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_MemoryPathAny) Physical() *System_Memory_PhysicalPathAny {
	ps := &System_Memory_PhysicalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reserved (leaf): Memory reserved for system use
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_MemoryPath) Reserved() *System_Memory_ReservedPath {
	ps := &System_Memory_ReservedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reserved (leaf): Memory reserved for system use
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_MemoryPathAny) Reserved() *System_Memory_ReservedPathAny {
	ps := &System_Memory_ReservedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Memory that has been used and not available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_MemoryPath) Used() *System_Memory_UsedPath {
	ps := &System_Memory_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Memory that has been used and not available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_MemoryPathAny) Used() *System_Memory_UsedPathAny {
	ps := &System_Memory_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MemoryPath) State() ygnmi.SingletonQuery[*oc.System_Memory] {
	return ygnmi.NewSingletonQuery[*oc.System_Memory](
		"System_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MemoryPathAny) State() ygnmi.WildcardQuery[*oc.System_Memory] {
	return ygnmi.NewWildcardQuery[*oc.System_Memory](
		"System_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MemoryPath) Config() ygnmi.ConfigQuery[*oc.System_Memory] {
	return ygnmi.NewConfigQuery[*oc.System_Memory](
		"System_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MemoryPathAny) Config() ygnmi.WildcardQuery[*oc.System_Memory] {
	return ygnmi.NewWildcardQuery[*oc.System_Memory](
		"System_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_Counters_CorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_Counters_CorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_Counters_CorrectableEccErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).CorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_Counters_CorrectableEccErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).CorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_Counters_TotalEccErrorsPath represents the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_Counters_TotalEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_Counters_TotalEccErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).TotalEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_Counters_TotalEccErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).TotalEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_Counters_UncorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_Counters_UncorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_Counters_UncorrectableEccErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).UncorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_Counters_UncorrectableEccErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).UncorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_CountersPath represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPath struct {
	*ygnmi.NodePath
}

// System_Memory_CountersPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPathAny struct {
	*ygnmi.NodePath
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPath) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPath {
	ps := &System_Memory_Counters_CorrectableEccErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPathAny) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPathAny {
	ps := &System_Memory_Counters_CorrectableEccErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPath) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPath {
	ps := &System_Memory_Counters_TotalEccErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPathAny) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPathAny {
	ps := &System_Memory_Counters_TotalEccErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPath) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPath {
	ps := &System_Memory_Counters_UncorrectableEccErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPathAny) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPathAny {
	ps := &System_Memory_Counters_UncorrectableEccErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Memory_CountersPath) State() ygnmi.SingletonQuery[*oc.System_Memory_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_Memory_Counters](
		"System_Memory_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Memory_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_Memory_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_Memory_Counters](
		"System_Memory_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_SeverityPath represents the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Messages_SeverityPathAny represents the wildcard version of the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/messages/state/severity"
func (n *System_Messages_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Messages",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/messages/state/severity"
func (n *System_Messages_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Messages",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/messages/config/severity"
func (n *System_Messages_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Messages",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/messages/config/severity"
func (n *System_Messages_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Messages",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MessagesPath represents the /openconfig-system/system/messages YANG schema element.
type System_MessagesPath struct {
	*ygnmi.NodePath
}

// System_MessagesPathAny represents the wildcard version of the /openconfig-system/system/messages YANG schema element.
type System_MessagesPathAny struct {
	*ygnmi.NodePath
}

// DebugServiceAny (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPath) DebugServiceAny() *System_Messages_DebugServicePathAny {
	ps := &System_Messages_DebugServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
	return ps
}

// DebugServiceAny (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPathAny) DebugServiceAny() *System_Messages_DebugServicePathAny {
	ps := &System_Messages_DebugServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
	return ps
}

// DebugService (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
//
//	Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePath {
	ps := &System_Messages_DebugServicePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
	return ps
}

// DebugService (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
//
//	Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePathAny {
	ps := &System_Messages_DebugServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
	return ps
}

// DebugServiceMap (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPath) DebugServiceMap() *System_Messages_DebugServicePathMap {
	ps := &System_Messages_DebugServicePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DebugServiceMap (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPathAny) DebugServiceMap() *System_Messages_DebugServicePathMapAny {
	ps := &System_Messages_DebugServicePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/message"
//	Path from root:       "/system/messages/state/message"
func (n *System_MessagesPath) Message() *System_Messages_MessagePath {
	ps := &System_Messages_MessagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/message"
//	Path from root:       "/system/messages/state/message"
func (n *System_MessagesPathAny) Message() *System_Messages_MessagePathAny {
	ps := &System_Messages_MessagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/messages/*/severity"
func (n *System_MessagesPath) Severity() *System_Messages_SeverityPath {
	ps := &System_Messages_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/messages/*/severity"
func (n *System_MessagesPathAny) Severity() *System_Messages_SeverityPathAny {
	ps := &System_Messages_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MessagesPath) State() ygnmi.SingletonQuery[*oc.System_Messages] {
	return ygnmi.NewSingletonQuery[*oc.System_Messages](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MessagesPathAny) State() ygnmi.WildcardQuery[*oc.System_Messages] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MessagesPath) Config() ygnmi.ConfigQuery[*oc.System_Messages] {
	return ygnmi.NewConfigQuery[*oc.System_Messages](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MessagesPathAny) Config() ygnmi.WildcardQuery[*oc.System_Messages] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_DebugService_EnabledPath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Messages_DebugService_EnabledPathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugService_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Messages_DebugService",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugService_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Messages_DebugService",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugService_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Messages_DebugService",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugService_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Messages_DebugService",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_DebugService_ServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Messages_DebugService_ServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugService_ServicePath) State() ygnmi.SingletonQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewSingletonQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugService_ServicePathAny) State() ygnmi.WildcardQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewWildcardQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugService_ServicePath) Config() ygnmi.ConfigQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewConfigQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugService_ServicePathAny) Config() ygnmi.WildcardQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewWildcardQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_DebugServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePath struct {
	*ygnmi.NodePath
}

// System_Messages_DebugServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathAny struct {
	*ygnmi.NodePath
}

// System_Messages_DebugServicePathMap represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathMap struct {
	*ygnmi.NodePath
}

// System_Messages_DebugServicePathMapAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathMapAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Enable and disable debugging.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/enabled"
func (n *System_Messages_DebugServicePath) Enabled() *System_Messages_DebugService_EnabledPath {
	ps := &System_Messages_DebugService_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enable and disable debugging.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/enabled"
func (n *System_Messages_DebugServicePathAny) Enabled() *System_Messages_DebugService_EnabledPathAny {
	ps := &System_Messages_DebugService_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/service"
func (n *System_Messages_DebugServicePath) Service() *System_Messages_DebugService_ServicePath {
	ps := &System_Messages_DebugService_ServicePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/service"
func (n *System_Messages_DebugServicePathAny) Service() *System_Messages_DebugService_ServicePathAny {
	ps := &System_Messages_DebugService_ServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePath) State() ygnmi.SingletonQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewSingletonQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathAny) State() ygnmi.WildcardQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePath) Config() ygnmi.ConfigQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewConfigQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathAny) Config() ygnmi.WildcardQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMap) State() ygnmi.SingletonQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewSingletonQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMap) Config() ygnmi.ConfigQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewConfigQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// System_Messages_MessagePath represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePath struct {
	*ygnmi.NodePath
}

// System_Messages_MessagePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_MessagePath) State() ygnmi.SingletonQuery[*oc.System_Messages_Message] {
	return ygnmi.NewSingletonQuery[*oc.System_Messages_Message](
		"System_Messages_Message",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_MessagePathAny) State() ygnmi.WildcardQuery[*oc.System_Messages_Message] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages_Message](
		"System_Messages_Message",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_AvailablePath represents the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_AvailablePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPoint_AvailablePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPoint_AvailablePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_NamePath represents the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_NamePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/mount-points/mount-point/state/name"
func (n *System_MountPoint_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/mount-points/mount-point/state/name"
func (n *System_MountPoint_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_MountPoint_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_MountPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_MountPoint_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MountPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_SizePath represents the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_SizePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPoint_SizePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Size
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPoint_SizePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Size
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_StorageComponentPath represents the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_StorageComponentPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPoint_StorageComponentPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).StorageComponent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPoint_StorageComponentPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).StorageComponent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_TypePath represents the /openconfig-system/system/mount-points/mount-point/state/type YANG schema element.
type System_MountPoint_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_TypePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/type YANG schema element.
type System_MountPoint_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/mount-points/mount-point/state/type"
func (n *System_MountPoint_TypePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Type
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/mount-points/mount-point/state/type"
func (n *System_MountPoint_TypePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Type
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_UtilizedPath represents the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_UtilizedPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPoint_UtilizedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPoint_UtilizedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPointPath represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPath struct {
	*ygnmi.NodePath
}

// System_MountPointPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathAny struct {
	*ygnmi.NodePath
}

// System_MountPointPathMap represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathMap struct {
	*ygnmi.NodePath
}

// System_MountPointPathMapAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathMapAny struct {
	*ygnmi.NodePath
}

// Available (leaf): The amount of unused space on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPath) Available() *System_MountPoint_AvailablePath {
	ps := &System_MountPoint_AvailablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Available (leaf): The amount of unused space on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPathAny) Available() *System_MountPoint_AvailablePathAny {
	ps := &System_MountPoint_AvailablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Mount point name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/mount-points/mount-point/*/name"
func (n *System_MountPointPath) Name() *System_MountPoint_NamePath {
	ps := &System_MountPoint_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Mount point name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/mount-points/mount-point/*/name"
func (n *System_MountPointPathAny) Name() *System_MountPoint_NamePathAny {
	ps := &System_MountPoint_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The total size of the initialised filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPath) Size() *System_MountPoint_SizePath {
	ps := &System_MountPoint_SizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The total size of the initialised filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPathAny) Size() *System_MountPoint_SizePathAny {
	ps := &System_MountPoint_SizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPath) StorageComponent() *System_MountPoint_StorageComponentPath {
	ps := &System_MountPoint_StorageComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPathAny) StorageComponent() *System_MountPoint_StorageComponentPathAny {
	ps := &System_MountPoint_StorageComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): A human readable string indicating the filesystem type used
// for storage.  Examples might include flash, hard disk, tmpfs/ramdisk
// or remote/network based storage.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/mount-points/mount-point/state/type"
func (n *System_MountPointPath) Type() *System_MountPoint_TypePath {
	ps := &System_MountPoint_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): A human readable string indicating the filesystem type used
// for storage.  Examples might include flash, hard disk, tmpfs/ramdisk
// or remote/network based storage.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/mount-points/mount-point/state/type"
func (n *System_MountPointPathAny) Type() *System_MountPoint_TypePathAny {
	ps := &System_MountPoint_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPath) Utilized() *System_MountPoint_UtilizedPath {
	ps := &System_MountPoint_UtilizedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPathAny) Utilized() *System_MountPoint_UtilizedPathAny {
	ps := &System_MountPoint_UtilizedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPath) State() ygnmi.SingletonQuery[*oc.System_MountPoint] {
	return ygnmi.NewSingletonQuery[*oc.System_MountPoint](
		"System_MountPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPathAny) State() ygnmi.WildcardQuery[*oc.System_MountPoint] {
	return ygnmi.NewWildcardQuery[*oc.System_MountPoint](
		"System_MountPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_MountPoint] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_MountPoint](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_MountPoint, bool) {
			ret := gs.(*oc.System).MountPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:mount-points"},
			PostRelPath: []string{"openconfig-system:mount-point"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_MountPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_MountPoint](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_MountPoint, bool) {
			ret := gs.(*oc.System).MountPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:mount-points"},
			PostRelPath: []string{"openconfig-system:mount-point"},
		},
	)
}

// System_Ntp_AuthMismatchPath represents the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_AuthMismatchPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_Ntp_AuthMismatchPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp).AuthMismatch
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_Ntp_AuthMismatchPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp).AuthMismatch
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_EnableNtpAuthPath represents the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_EnableNtpAuthPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable-ntp-auth"
//	Path from root:       "/system/ntp/state/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable-ntp-auth"
//	Path from root:       "/system/ntp/state/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable-ntp-auth"
//	Path from root:       "/system/ntp/config/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable-ntp-auth"
//	Path from root:       "/system/ntp/config/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_EnabledPath represents the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_EnabledPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/ntp/state/enabled"
func (n *System_Ntp_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/ntp/state/enabled"
func (n *System_Ntp_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/ntp/config/enabled"
func (n *System_Ntp_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/ntp/config/enabled"
func (n *System_Ntp_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_NtpPath represents the /openconfig-system/system/ntp YANG schema element.
type System_NtpPath struct {
	*ygnmi.NodePath
}

// System_NtpPathAny represents the wildcard version of the /openconfig-system/system/ntp YANG schema element.
type System_NtpPathAny struct {
	*ygnmi.NodePath
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_NtpPath) AuthMismatch() *System_Ntp_AuthMismatchPath {
	ps := &System_Ntp_AuthMismatchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_NtpPathAny) AuthMismatch() *System_Ntp_AuthMismatchPathAny {
	ps := &System_Ntp_AuthMismatchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable-ntp-auth"
//	Path from root:       "/system/ntp/*/enable-ntp-auth"
func (n *System_NtpPath) EnableNtpAuth() *System_Ntp_EnableNtpAuthPath {
	ps := &System_Ntp_EnableNtpAuthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable-ntp-auth"
//	Path from root:       "/system/ntp/*/enable-ntp-auth"
func (n *System_NtpPathAny) EnableNtpAuth() *System_Ntp_EnableNtpAuthPathAny {
	ps := &System_Ntp_EnableNtpAuthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/ntp/*/enabled"
func (n *System_NtpPath) Enabled() *System_Ntp_EnabledPath {
	ps := &System_Ntp_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/ntp/*/enabled"
func (n *System_NtpPathAny) Enabled() *System_Ntp_EnabledPathAny {
	ps := &System_Ntp_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NtpKeyAny (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPath) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	ps := &System_Ntp_NtpKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
	return ps
}

// NtpKeyAny (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPathAny) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	ps := &System_Ntp_NtpKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
	return ps
}

// NtpKey (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
//
//	KeyId: uint16
func (n *System_NtpPath) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPath {
	ps := &System_Ntp_NtpKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
	return ps
}

// NtpKey (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
//
//	KeyId: uint16
func (n *System_NtpPathAny) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPathAny {
	ps := &System_Ntp_NtpKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
	return ps
}

// NtpKeyMap (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPath) NtpKeyMap() *System_Ntp_NtpKeyPathMap {
	ps := &System_Ntp_NtpKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NtpKeyMap (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPathAny) NtpKeyMap() *System_Ntp_NtpKeyPathMapAny {
	ps := &System_Ntp_NtpKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPath) ServerAny() *System_Ntp_ServerPathAny {
	ps := &System_Ntp_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPathAny) ServerAny() *System_Ntp_ServerPathAny {
	ps := &System_Ntp_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
//
//	Address: string
func (n *System_NtpPath) Server(Address string) *System_Ntp_ServerPath {
	ps := &System_Ntp_ServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
//
//	Address: string
func (n *System_NtpPathAny) Server(Address string) *System_Ntp_ServerPathAny {
	ps := &System_Ntp_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPath) ServerMap() *System_Ntp_ServerPathMap {
	ps := &System_Ntp_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPathAny) ServerMap() *System_Ntp_ServerPathMapAny {
	ps := &System_Ntp_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_NtpPath) State() ygnmi.SingletonQuery[*oc.System_Ntp] {
	return ygnmi.NewSingletonQuery[*oc.System_Ntp](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_NtpPathAny) State() ygnmi.WildcardQuery[*oc.System_Ntp] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_NtpPath) Config() ygnmi.ConfigQuery[*oc.System_Ntp] {
	return ygnmi.NewConfigQuery[*oc.System_Ntp](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_NtpPathAny) Config() ygnmi.WildcardQuery[*oc.System_Ntp] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKey_KeyIdPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_NtpKey_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKey_KeyIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKey_KeyIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKey_KeyIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKey_KeyIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKey_KeyTypePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_NtpKey_KeyTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKey_KeyTypePath) State() ygnmi.SingletonQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKey_KeyTypePathAny) State() ygnmi.WildcardQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKey_KeyTypePath) Config() ygnmi.ConfigQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKey_KeyTypePathAny) Config() ygnmi.WildcardQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKey_KeyValuePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_NtpKey_KeyValuePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKey_KeyValuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKey_KeyValuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKey_KeyValuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKey_KeyValuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKeyPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPath struct {
	*ygnmi.NodePath
}

// System_Ntp_NtpKeyPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathAny struct {
	*ygnmi.NodePath
}

// System_Ntp_NtpKeyPathMap represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathMap struct {
	*ygnmi.NodePath
}

// System_Ntp_NtpKeyPathMapAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathMapAny struct {
	*ygnmi.NodePath
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-id"
func (n *System_Ntp_NtpKeyPath) KeyId() *System_Ntp_NtpKey_KeyIdPath {
	ps := &System_Ntp_NtpKey_KeyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-id"
func (n *System_Ntp_NtpKeyPathAny) KeyId() *System_Ntp_NtpKey_KeyIdPathAny {
	ps := &System_Ntp_NtpKey_KeyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyType (leaf): Encryption type used for the NTP authentication key
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-type"
func (n *System_Ntp_NtpKeyPath) KeyType() *System_Ntp_NtpKey_KeyTypePath {
	ps := &System_Ntp_NtpKey_KeyTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyType (leaf): Encryption type used for the NTP authentication key
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-type"
func (n *System_Ntp_NtpKeyPathAny) KeyType() *System_Ntp_NtpKey_KeyTypePathAny {
	ps := &System_Ntp_NtpKey_KeyTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyValue (leaf): NTP authentication key value
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-value"
func (n *System_Ntp_NtpKeyPath) KeyValue() *System_Ntp_NtpKey_KeyValuePath {
	ps := &System_Ntp_NtpKey_KeyValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyValue (leaf): NTP authentication key value
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-value"
func (n *System_Ntp_NtpKeyPathAny) KeyValue() *System_Ntp_NtpKey_KeyValuePathAny {
	ps := &System_Ntp_NtpKey_KeyValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPath) State() ygnmi.SingletonQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewSingletonQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathAny) State() ygnmi.WildcardQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPath) Config() ygnmi.ConfigQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewConfigQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathAny) Config() ygnmi.WildcardQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// System_Ntp_Server_AddressPath represents the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/ntp/servers/server/state/address"
func (n *System_Ntp_Server_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/ntp/servers/server/state/address"
func (n *System_Ntp_Server_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/ntp/servers/server/config/address"
func (n *System_Ntp_Server_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/ntp/servers/server/config/address"
func (n *System_Ntp_Server_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_AssociationTypePath represents the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_AssociationTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/association-type"
//	Path from root:       "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_Server_AssociationTypePath) State() ygnmi.SingletonQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewSingletonQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/association-type"
//	Path from root:       "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_Server_AssociationTypePathAny) State() ygnmi.WildcardQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewWildcardQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/association-type"
//	Path from root:       "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_Server_AssociationTypePath) Config() ygnmi.ConfigQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewConfigQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/association-type"
//	Path from root:       "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_Server_AssociationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewWildcardQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_IburstPath represents the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_IburstPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/iburst"
//	Path from root:       "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_Server_IburstPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/iburst"
//	Path from root:       "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_Server_IburstPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/iburst"
//	Path from root:       "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_Server_IburstPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/iburst"
//	Path from root:       "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_Server_IburstPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_KeyIdPath represents the /openconfig-system/system/ntp/servers/server/state/key-id YANG schema element.
type System_Ntp_Server_KeyIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/key-id YANG schema element.
type System_Ntp_Server_KeyIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-id"
//	Path from root:       "/system/ntp/servers/server/state/key-id"
func (n *System_Ntp_Server_KeyIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-id"
//	Path from root:       "/system/ntp/servers/server/state/key-id"
func (n *System_Ntp_Server_KeyIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-id"
//	Path from root:       "/system/ntp/servers/server/config/key-id"
func (n *System_Ntp_Server_KeyIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-id"
//	Path from root:       "/system/ntp/servers/server/config/key-id"
func (n *System_Ntp_Server_KeyIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_NetworkInstancePath represents the /openconfig-system/system/ntp/servers/server/state/network-instance YANG schema element.
type System_Ntp_Server_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/network-instance YANG schema element.
type System_Ntp_Server_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/ntp/servers/server/state/network-instance"
func (n *System_Ntp_Server_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/ntp/servers/server/state/network-instance"
func (n *System_Ntp_Server_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/ntp/servers/server/config/network-instance"
func (n *System_Ntp_Server_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/ntp/servers/server/config/network-instance"
func (n *System_Ntp_Server_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
