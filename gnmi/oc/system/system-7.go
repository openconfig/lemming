/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Ntp_Server_RootDelayPath represents the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_RootDelayPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_Server_RootDelayPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDelay
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_Server_RootDelayPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDelay
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_RootDispersionPath represents the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_RootDispersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_Server_RootDispersionPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDispersion
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_Server_RootDispersionPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDispersion
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_SourceAddressPath represents the /openconfig-system/system/ntp/servers/server/state/source-address YANG schema element.
type System_Ntp_Server_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/source-address YANG schema element.
type System_Ntp_Server_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/ntp/servers/server/state/source-address"
func (n *System_Ntp_Server_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/ntp/servers/server/state/source-address"
func (n *System_Ntp_Server_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/ntp/servers/server/config/source-address"
func (n *System_Ntp_Server_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/ntp/servers/server/config/source-address"
func (n *System_Ntp_Server_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_StratumPath represents the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_StratumPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_Server_StratumPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Stratum
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_Server_StratumPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Stratum
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_VersionPath represents the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_VersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/ntp/servers/server/state/version"
func (n *System_Ntp_Server_VersionPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/ntp/servers/server/state/version"
func (n *System_Ntp_Server_VersionPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/version"
//	Path from root:       "/system/ntp/servers/server/config/version"
func (n *System_Ntp_Server_VersionPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/version"
//	Path from root:       "/system/ntp/servers/server/config/version"
func (n *System_Ntp_Server_VersionPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_ServerPath represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPath struct {
	*ygnmi.NodePath
}

// System_Ntp_ServerPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Ntp_ServerPathMap represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Ntp_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The address or hostname of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/ntp/servers/server/*/address"
func (n *System_Ntp_ServerPath) Address() *System_Ntp_Server_AddressPath {
	ps := &System_Ntp_Server_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The address or hostname of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/ntp/servers/server/*/address"
func (n *System_Ntp_ServerPathAny) Address() *System_Ntp_Server_AddressPathAny {
	ps := &System_Ntp_Server_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociationType (leaf): The desired association type for this NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/association-type"
//	Path from root:       "/system/ntp/servers/server/*/association-type"
func (n *System_Ntp_ServerPath) AssociationType() *System_Ntp_Server_AssociationTypePath {
	ps := &System_Ntp_Server_AssociationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "association-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociationType (leaf): The desired association type for this NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/association-type"
//	Path from root:       "/system/ntp/servers/server/*/association-type"
func (n *System_Ntp_ServerPathAny) AssociationType() *System_Ntp_Server_AssociationTypePathAny {
	ps := &System_Ntp_Server_AssociationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "association-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/iburst"
//	Path from root:       "/system/ntp/servers/server/*/iburst"
func (n *System_Ntp_ServerPath) Iburst() *System_Ntp_Server_IburstPath {
	ps := &System_Ntp_Server_IburstPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "iburst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/iburst"
//	Path from root:       "/system/ntp/servers/server/*/iburst"
func (n *System_Ntp_ServerPathAny) Iburst() *System_Ntp_Server_IburstPathAny {
	ps := &System_Ntp_Server_IburstPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "iburst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyId (leaf): Reference to NTP authentication key for this server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-id"
//	Path from root:       "/system/ntp/servers/server/*/key-id"
func (n *System_Ntp_ServerPath) KeyId() *System_Ntp_Server_KeyIdPath {
	ps := &System_Ntp_Server_KeyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyId (leaf): Reference to NTP authentication key for this server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-id"
//	Path from root:       "/system/ntp/servers/server/*/key-id"
func (n *System_Ntp_ServerPathAny) KeyId() *System_Ntp_Server_KeyIdPathAny {
	ps := &System_Ntp_Server_KeyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to find this server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/ntp/servers/server/*/network-instance"
func (n *System_Ntp_ServerPath) NetworkInstance() *System_Ntp_Server_NetworkInstancePath {
	ps := &System_Ntp_Server_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to find this server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/ntp/servers/server/*/network-instance"
func (n *System_Ntp_ServerPathAny) NetworkInstance() *System_Ntp_Server_NetworkInstancePathAny {
	ps := &System_Ntp_Server_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference of the peer's clock minus the local clock.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/offset"
//	Path from root:       "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPath) Offset() *System_Ntp_Server_OffsetPath {
	ps := &System_Ntp_Server_OffsetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference of the peer's clock minus the local clock.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/offset"
//	Path from root:       "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPathAny) Offset() *System_Ntp_Server_OffsetPathAny {
	ps := &System_Ntp_Server_OffsetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollInterval (leaf): Polling interval of the peer
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/poll-interval"
//	Path from root:       "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPath) PollInterval() *System_Ntp_Server_PollIntervalPath {
	ps := &System_Ntp_Server_PollIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollInterval (leaf): Polling interval of the peer
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/poll-interval"
//	Path from root:       "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPathAny) PollInterval() *System_Ntp_Server_PollIntervalPathAny {
	ps := &System_Ntp_Server_PollIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): The port number of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/ntp/servers/server/*/port"
func (n *System_Ntp_ServerPath) Port() *System_Ntp_Server_PortPath {
	ps := &System_Ntp_Server_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): The port number of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/ntp/servers/server/*/port"
func (n *System_Ntp_ServerPathAny) Port() *System_Ntp_Server_PortPathAny {
	ps := &System_Ntp_Server_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/prefer"
//	Path from root:       "/system/ntp/servers/server/*/prefer"
func (n *System_Ntp_ServerPath) Prefer() *System_Ntp_Server_PreferPath {
	ps := &System_Ntp_Server_PreferPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/prefer"
//	Path from root:       "/system/ntp/servers/server/*/prefer"
func (n *System_Ntp_ServerPathAny) Prefer() *System_Ntp_Server_PreferPathAny {
	ps := &System_Ntp_Server_PreferPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDelay (leaf): The total round-trip delay to the reference clock, in nanoseconds.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPath) RootDelay() *System_Ntp_Server_RootDelayPath {
	ps := &System_Ntp_Server_RootDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDelay (leaf): The total round-trip delay to the reference clock, in nanoseconds.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPathAny) RootDelay() *System_Ntp_Server_RootDelayPathAny {
	ps := &System_Ntp_Server_RootDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDispersion (leaf): The maximum error inherent in the measurement, accumulated over the
// stratum levels from the reference clock.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPath) RootDispersion() *System_Ntp_Server_RootDispersionPath {
	ps := &System_Ntp_Server_RootDispersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDispersion (leaf): The maximum error inherent in the measurement, accumulated over the
// stratum levels from the reference clock.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPathAny) RootDispersion() *System_Ntp_Server_RootDispersionPathAny {
	ps := &System_Ntp_Server_RootDispersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source address to use on outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/ntp/servers/server/*/source-address"
func (n *System_Ntp_ServerPath) SourceAddress() *System_Ntp_Server_SourceAddressPath {
	ps := &System_Ntp_Server_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source address to use on outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/ntp/servers/server/*/source-address"
func (n *System_Ntp_ServerPathAny) SourceAddress() *System_Ntp_Server_SourceAddressPathAny {
	ps := &System_Ntp_Server_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPath) Stratum() *System_Ntp_Server_StratumPath {
	ps := &System_Ntp_Server_StratumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPathAny) Stratum() *System_Ntp_Server_StratumPathAny {
	ps := &System_Ntp_Server_StratumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): Version number to put in outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/version"
//	Path from root:       "/system/ntp/servers/server/*/version"
func (n *System_Ntp_ServerPath) Version() *System_Ntp_Server_VersionPath {
	ps := &System_Ntp_Server_VersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): Version number to put in outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/version"
//	Path from root:       "/system/ntp/servers/server/*/version"
func (n *System_Ntp_ServerPathAny) Version() *System_Ntp_Server_VersionPathAny {
	ps := &System_Ntp_Server_VersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPath) State() ygnmi.SingletonQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewSingletonQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathAny) State() ygnmi.WildcardQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPath) Config() ygnmi.ConfigQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewConfigQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_Process_ArgsPath represents the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_ArgsPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_Process_ArgsPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Process",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "args"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Process).Args
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_Process_ArgsPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Process",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "args"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Process).Args
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_CpuUsageSystemPath represents the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_CpuUsageSystemPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_Process_CpuUsageSystemPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageSystem
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_Process_CpuUsageSystemPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageSystem
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_CpuUsageUserPath represents the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_CpuUsageUserPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_Process_CpuUsageUserPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageUser
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_Process_CpuUsageUserPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageUser
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_CpuUtilizationPath represents the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_CpuUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_Process_CpuUtilizationPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).CpuUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_Process_CpuUtilizationPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).CpuUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_MemoryUsagePath represents the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_MemoryUsagePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_Process_MemoryUsagePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).MemoryUsage
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_Process_MemoryUsagePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).MemoryUsage
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_MemoryUtilizationPath represents the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_MemoryUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_Process_MemoryUtilizationPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).MemoryUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_Process_MemoryUtilizationPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).MemoryUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_NamePath represents the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_NamePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_Process_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Process).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_Process_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Process).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_PidPath represents the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_PidPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/pid"
//	Path from root:       "/system/processes/process/state/pid"
func (n *System_Process_PidPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/pid"
//	Path from root:       "/system/processes/process/state/pid"
func (n *System_Process_PidPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "pid"
//	Path from root:       ""
func (n *System_Process_PidPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"System_Process",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "pid"
//	Path from root:       ""
func (n *System_Process_PidPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_StartTimePath represents the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_StartTimePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_Process_StartTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_Process_StartTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_ProcessPath represents the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPath struct {
	*ygnmi.NodePath
}

// System_ProcessPathAny represents the wildcard version of the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathAny struct {
	*ygnmi.NodePath
}

// System_ProcessPathMap represents the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathMap struct {
	*ygnmi.NodePath
}

// System_ProcessPathMapAny represents the wildcard version of the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathMapAny struct {
	*ygnmi.NodePath
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_ProcessPath) Args() *System_Process_ArgsPath {
	ps := &System_Process_ArgsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_ProcessPathAny) Args() *System_Process_ArgsPathAny {
	ps := &System_Process_ArgsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPath) CpuUsageSystem() *System_Process_CpuUsageSystemPath {
	ps := &System_Process_CpuUsageSystemPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPathAny) CpuUsageSystem() *System_Process_CpuUsageSystemPathAny {
	ps := &System_Process_CpuUsageSystemPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPath) CpuUsageUser() *System_Process_CpuUsageUserPath {
	ps := &System_Process_CpuUsageUserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPathAny) CpuUsageUser() *System_Process_CpuUsageUserPathAny {
	ps := &System_Process_CpuUsageUserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPath) CpuUtilization() *System_Process_CpuUtilizationPath {
	ps := &System_Process_CpuUtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPathAny) CpuUtilization() *System_Process_CpuUtilizationPathAny {
	ps := &System_Process_CpuUtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_ProcessPath) MemoryUsage() *System_Process_MemoryUsagePath {
	ps := &System_Process_MemoryUsagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_ProcessPathAny) MemoryUsage() *System_Process_MemoryUsagePathAny {
	ps := &System_Process_MemoryUsagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPath) MemoryUtilization() *System_Process_MemoryUtilizationPath {
	ps := &System_Process_MemoryUtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPathAny) MemoryUtilization() *System_Process_MemoryUtilizationPathAny {
	ps := &System_Process_MemoryUtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The process name
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_ProcessPath) Name() *System_Process_NamePath {
	ps := &System_Process_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The process name
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_ProcessPathAny) Name() *System_Process_NamePathAny {
	ps := &System_Process_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Pid (leaf): The process pid
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/pid"
//	Path from root:       "/system/processes/process/*/pid"
func (n *System_ProcessPath) Pid() *System_Process_PidPath {
	ps := &System_Process_PidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Pid (leaf): The process pid
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/pid"
//	Path from root:       "/system/processes/process/*/pid"
func (n *System_ProcessPathAny) Pid() *System_Process_PidPathAny {
	ps := &System_Process_PidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_ProcessPath) StartTime() *System_Process_StartTimePath {
	ps := &System_Process_StartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_ProcessPathAny) StartTime() *System_Process_StartTimePathAny {
	ps := &System_Process_StartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPath) State() ygnmi.SingletonQuery[*oc.System_Process] {
	return ygnmi.NewSingletonQuery[*oc.System_Process](
		"System_Process",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPathAny) State() ygnmi.WildcardQuery[*oc.System_Process] {
	return ygnmi.NewWildcardQuery[*oc.System_Process](
		"System_Process",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.System_Process] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.System_Process](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.System_Process, bool) {
			ret := gs.(*oc.System).Process
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:processes"},
			PostRelPath: []string{"openconfig-system:process"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.System_Process] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.System_Process](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.System_Process, bool) {
			ret := gs.(*oc.System).Process
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:processes"},
			PostRelPath: []string{"openconfig-system:process"},
		},
	)
}

// System_SshServer_ActiveHostCertificateCreatedOnPath represents the /openconfig-system/system/ssh-server/state/active-host-certificate-created-on YANG schema element.
type System_SshServer_ActiveHostCertificateCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveHostCertificateCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-host-certificate-created-on YANG schema element.
type System_SshServer_ActiveHostCertificateCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-certificate-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-created-on"
func (n *System_SshServer_ActiveHostCertificateCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostCertificateCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-certificate-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-created-on"
func (n *System_SshServer_ActiveHostCertificateCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostCertificateCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ActiveHostCertificateVersionPath represents the /openconfig-system/system/ssh-server/state/active-host-certificate-version YANG schema element.
type System_SshServer_ActiveHostCertificateVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveHostCertificateVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-host-certificate-version YANG schema element.
type System_SshServer_ActiveHostCertificateVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-certificate-version"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-version"
func (n *System_SshServer_ActiveHostCertificateVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostCertificateVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-certificate-version"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-version"
func (n *System_SshServer_ActiveHostCertificateVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostCertificateVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ActiveHostKeyCreatedOnPath represents the /openconfig-system/system/ssh-server/state/active-host-key-created-on YANG schema element.
type System_SshServer_ActiveHostKeyCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveHostKeyCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-host-key-created-on YANG schema element.
type System_SshServer_ActiveHostKeyCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-key-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-key-created-on"
func (n *System_SshServer_ActiveHostKeyCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-key-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostKeyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-key-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-key-created-on"
func (n *System_SshServer_ActiveHostKeyCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-key-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostKeyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ActiveHostKeyVersionPath represents the /openconfig-system/system/ssh-server/state/active-host-key-version YANG schema element.
type System_SshServer_ActiveHostKeyVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveHostKeyVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-host-key-version YANG schema element.
type System_SshServer_ActiveHostKeyVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-key-version"
//	Path from root:       "/system/ssh-server/state/active-host-key-version"
func (n *System_SshServer_ActiveHostKeyVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-key-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostKeyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-host-key-version"
//	Path from root:       "/system/ssh-server/state/active-host-key-version"
func (n *System_SshServer_ActiveHostKeyVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-host-key-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveHostKeyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ActiveTrustedUserCaKeysCreatedOnPath represents the /openconfig-system/system/ssh-server/state/active-trusted-user-ca-keys-created-on YANG schema element.
type System_SshServer_ActiveTrustedUserCaKeysCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveTrustedUserCaKeysCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-trusted-user-ca-keys-created-on YANG schema element.
type System_SshServer_ActiveTrustedUserCaKeysCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-trusted-user-ca-keys-created-on"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-created-on"
func (n *System_SshServer_ActiveTrustedUserCaKeysCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustedUserCaKeysCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-trusted-user-ca-keys-created-on"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-created-on"
func (n *System_SshServer_ActiveTrustedUserCaKeysCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustedUserCaKeysCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ActiveTrustedUserCaKeysVersionPath represents the /openconfig-system/system/ssh-server/state/active-trusted-user-ca-keys-version YANG schema element.
type System_SshServer_ActiveTrustedUserCaKeysVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveTrustedUserCaKeysVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-trusted-user-ca-keys-version YANG schema element.
type System_SshServer_ActiveTrustedUserCaKeysVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-trusted-user-ca-keys-version"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-version"
func (n *System_SshServer_ActiveTrustedUserCaKeysVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustedUserCaKeysVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/active-trusted-user-ca-keys-version"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-version"
func (n *System_SshServer_ActiveTrustedUserCaKeysVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustedUserCaKeysVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_EnablePath represents the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/ssh-server/state/enable"
func (n *System_SshServer_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/ssh-server/state/enable"
func (n *System_SshServer_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/ssh-server/config/enable"
func (n *System_SshServer_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/ssh-server/config/enable"
func (n *System_SshServer_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ProtocolVersionPath represents the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ProtocolVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/protocol-version"
//	Path from root:       "/system/ssh-server/state/protocol-version"
func (n *System_SshServer_ProtocolVersionPath) State() ygnmi.SingletonQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewSingletonQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/protocol-version"
//	Path from root:       "/system/ssh-server/state/protocol-version"
func (n *System_SshServer_ProtocolVersionPathAny) State() ygnmi.WildcardQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewWildcardQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/protocol-version"
//	Path from root:       "/system/ssh-server/config/protocol-version"
func (n *System_SshServer_ProtocolVersionPath) Config() ygnmi.ConfigQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewConfigQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/protocol-version"
//	Path from root:       "/system/ssh-server/config/protocol-version"
func (n *System_SshServer_ProtocolVersionPathAny) Config() ygnmi.WildcardQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewWildcardQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_RateLimitPath represents the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/ssh-server/state/rate-limit"
func (n *System_SshServer_RateLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/ssh-server/state/rate-limit"
func (n *System_SshServer_RateLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/ssh-server/config/rate-limit"
func (n *System_SshServer_RateLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/ssh-server/config/rate-limit"
func (n *System_SshServer_RateLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_SessionLimitPath represents the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/ssh-server/state/session-limit"
func (n *System_SshServer_SessionLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/ssh-server/state/session-limit"
func (n *System_SshServer_SessionLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/ssh-server/config/session-limit"
func (n *System_SshServer_SessionLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/ssh-server/config/session-limit"
func (n *System_SshServer_SessionLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_TimeoutPath represents the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/ssh-server/state/timeout"
func (n *System_SshServer_TimeoutPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/ssh-server/state/timeout"
func (n *System_SshServer_TimeoutPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/ssh-server/config/timeout"
func (n *System_SshServer_TimeoutPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/ssh-server/config/timeout"
func (n *System_SshServer_TimeoutPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServerPath represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPath struct {
	*ygnmi.NodePath
}

// System_SshServerPathAny represents the wildcard version of the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPathAny struct {
	*ygnmi.NodePath
}

// ActiveHostCertificateCreatedOn (leaf): The timestamp of the moment when the host certificate
// was created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-certificate-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-created-on"
func (n *System_SshServerPath) ActiveHostCertificateCreatedOn() *System_SshServer_ActiveHostCertificateCreatedOnPath {
	ps := &System_SshServer_ActiveHostCertificateCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveHostCertificateCreatedOn (leaf): The timestamp of the moment when the host certificate
// was created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-certificate-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-created-on"
func (n *System_SshServerPathAny) ActiveHostCertificateCreatedOn() *System_SshServer_ActiveHostCertificateCreatedOnPathAny {
	ps := &System_SshServer_ActiveHostCertificateCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveHostCertificateVersion (leaf): The version of the host certificate.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-certificate-version"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-version"
func (n *System_SshServerPath) ActiveHostCertificateVersion() *System_SshServer_ActiveHostCertificateVersionPath {
	ps := &System_SshServer_ActiveHostCertificateVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveHostCertificateVersion (leaf): The version of the host certificate.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-certificate-version"
//	Path from root:       "/system/ssh-server/state/active-host-certificate-version"
func (n *System_SshServerPathAny) ActiveHostCertificateVersion() *System_SshServer_ActiveHostCertificateVersionPathAny {
	ps := &System_SshServer_ActiveHostCertificateVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-certificate-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveHostKeyCreatedOn (leaf): The timestamp of the moment when the host key was
// created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-key-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-key-created-on"
func (n *System_SshServerPath) ActiveHostKeyCreatedOn() *System_SshServer_ActiveHostKeyCreatedOnPath {
	ps := &System_SshServer_ActiveHostKeyCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-key-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveHostKeyCreatedOn (leaf): The timestamp of the moment when the host key was
// created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-key-created-on"
//	Path from root:       "/system/ssh-server/state/active-host-key-created-on"
func (n *System_SshServerPathAny) ActiveHostKeyCreatedOn() *System_SshServer_ActiveHostKeyCreatedOnPathAny {
	ps := &System_SshServer_ActiveHostKeyCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-key-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveHostKeyVersion (leaf): The version of the host public key.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-key-version"
//	Path from root:       "/system/ssh-server/state/active-host-key-version"
func (n *System_SshServerPath) ActiveHostKeyVersion() *System_SshServer_ActiveHostKeyVersionPath {
	ps := &System_SshServer_ActiveHostKeyVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-key-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveHostKeyVersion (leaf): The version of the host public key.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-host-key-version"
//	Path from root:       "/system/ssh-server/state/active-host-key-version"
func (n *System_SshServerPathAny) ActiveHostKeyVersion() *System_SshServer_ActiveHostKeyVersionPathAny {
	ps := &System_SshServer_ActiveHostKeyVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-host-key-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTrustedUserCaKeysCreatedOn (leaf): The timestamp of the moment when the trusted user CA keys
// were created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trusted-user-ca-keys-created-on"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-created-on"
func (n *System_SshServerPath) ActiveTrustedUserCaKeysCreatedOn() *System_SshServer_ActiveTrustedUserCaKeysCreatedOnPath {
	ps := &System_SshServer_ActiveTrustedUserCaKeysCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTrustedUserCaKeysCreatedOn (leaf): The timestamp of the moment when the trusted user CA keys
// were created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trusted-user-ca-keys-created-on"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-created-on"
func (n *System_SshServerPathAny) ActiveTrustedUserCaKeysCreatedOn() *System_SshServer_ActiveTrustedUserCaKeysCreatedOnPathAny {
	ps := &System_SshServer_ActiveTrustedUserCaKeysCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTrustedUserCaKeysVersion (leaf): The version of the Certificate Authority keys.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trusted-user-ca-keys-version"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-version"
func (n *System_SshServerPath) ActiveTrustedUserCaKeysVersion() *System_SshServer_ActiveTrustedUserCaKeysVersionPath {
	ps := &System_SshServer_ActiveTrustedUserCaKeysVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTrustedUserCaKeysVersion (leaf): The version of the Certificate Authority keys.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trusted-user-ca-keys-version"
//	Path from root:       "/system/ssh-server/state/active-trusted-user-ca-keys-version"
func (n *System_SshServerPathAny) ActiveTrustedUserCaKeysVersion() *System_SshServer_ActiveTrustedUserCaKeysVersionPathAny {
	ps := &System_SshServer_ActiveTrustedUserCaKeysVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trusted-user-ca-keys-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of counters collected while authorizing users
// accessing the target.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/ssh-server/state/counters"
func (n *System_SshServerPath) Counters() *System_SshServer_CountersPath {
	ps := &System_SshServer_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of counters collected while authorizing users
// accessing the target.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/ssh-server/state/counters"
func (n *System_SshServerPathAny) Counters() *System_SshServer_CountersPathAny {
	ps := &System_SshServer_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/ssh-server/*/enable"
func (n *System_SshServerPath) Enable() *System_SshServer_EnablePath {
	ps := &System_SshServer_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/ssh-server/*/enable"
func (n *System_SshServerPathAny) Enable() *System_SshServer_EnablePathAny {
	ps := &System_SshServer_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/protocol-version"
//	Path from root:       "/system/ssh-server/*/protocol-version"
func (n *System_SshServerPath) ProtocolVersion() *System_SshServer_ProtocolVersionPath {
	ps := &System_SshServer_ProtocolVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/protocol-version"
//	Path from root:       "/system/ssh-server/*/protocol-version"
func (n *System_SshServerPathAny) ProtocolVersion() *System_SshServer_ProtocolVersionPathAny {
	ps := &System_SshServer_ProtocolVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/ssh-server/*/rate-limit"
func (n *System_SshServerPath) RateLimit() *System_SshServer_RateLimitPath {
	ps := &System_SshServer_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/ssh-server/*/rate-limit"
func (n *System_SshServerPathAny) RateLimit() *System_SshServer_RateLimitPathAny {
	ps := &System_SshServer_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/ssh-server/*/session-limit"
func (n *System_SshServerPath) SessionLimit() *System_SshServer_SessionLimitPath {
	ps := &System_SshServer_SessionLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/ssh-server/*/session-limit"
func (n *System_SshServerPathAny) SessionLimit() *System_SshServer_SessionLimitPathAny {
	ps := &System_SshServer_SessionLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/ssh-server/*/timeout"
func (n *System_SshServerPath) Timeout() *System_SshServer_TimeoutPath {
	ps := &System_SshServer_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/ssh-server/*/timeout"
func (n *System_SshServerPathAny) Timeout() *System_SshServer_TimeoutPathAny {
	ps := &System_SshServer_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_SshServerPath) State() ygnmi.SingletonQuery[*oc.System_SshServer] {
	return ygnmi.NewSingletonQuery[*oc.System_SshServer](
		"System_SshServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_SshServerPathAny) State() ygnmi.WildcardQuery[*oc.System_SshServer] {
	return ygnmi.NewWildcardQuery[*oc.System_SshServer](
		"System_SshServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_SshServerPath) Config() ygnmi.ConfigQuery[*oc.System_SshServer] {
	return ygnmi.NewConfigQuery[*oc.System_SshServer](
		"System_SshServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_SshServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_SshServer] {
	return ygnmi.NewWildcardQuery[*oc.System_SshServer](
		"System_SshServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_Counters_AccessAcceptsPath represents the /openconfig-system/system/ssh-server/state/counters/access-accepts YANG schema element.
type System_SshServer_Counters_AccessAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_Counters_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/counters/access-accepts YANG schema element.
type System_SshServer_Counters_AccessAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/ssh-server/state/counters/access-accepts"
func (n *System_SshServer_Counters_AccessAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/ssh-server/state/counters/access-accepts"
func (n *System_SshServer_Counters_AccessAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_Counters_AccessRejectsPath represents the /openconfig-system/system/ssh-server/state/counters/access-rejects YANG schema element.
type System_SshServer_Counters_AccessRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_Counters_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/counters/access-rejects YANG schema element.
type System_SshServer_Counters_AccessRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/ssh-server/state/counters/access-rejects"
func (n *System_SshServer_Counters_AccessRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/ssh-server/state/counters/access-rejects"
func (n *System_SshServer_Counters_AccessRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_Counters_LastAccessAcceptPath represents the /openconfig-system/system/ssh-server/state/counters/last-access-accept YANG schema element.
type System_SshServer_Counters_LastAccessAcceptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_Counters_LastAccessAcceptPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/counters/last-access-accept YANG schema element.
type System_SshServer_Counters_LastAccessAcceptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/ssh-server/state/counters/last-access-accept"
func (n *System_SshServer_Counters_LastAccessAcceptPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/ssh-server/state/counters/last-access-accept"
func (n *System_SshServer_Counters_LastAccessAcceptPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_Counters_LastAccessRejectPath represents the /openconfig-system/system/ssh-server/state/counters/last-access-reject YANG schema element.
type System_SshServer_Counters_LastAccessRejectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_Counters_LastAccessRejectPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/counters/last-access-reject YANG schema element.
type System_SshServer_Counters_LastAccessRejectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/ssh-server/state/counters/last-access-reject"
func (n *System_SshServer_Counters_LastAccessRejectPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/ssh-server/state/counters/last-access-reject"
func (n *System_SshServer_Counters_LastAccessRejectPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer_Counters).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_CountersPath represents the /openconfig-system/system/ssh-server/state/counters YANG schema element.
type System_SshServer_CountersPath struct {
	*ygnmi.NodePath
}

// System_SshServer_CountersPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/counters YANG schema element.
type System_SshServer_CountersPathAny struct {
	*ygnmi.NodePath
}

// AccessAccepts (leaf): The total number of times access to the target has been
// allowed.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/ssh-server/state/counters/access-accepts"
func (n *System_SshServer_CountersPath) AccessAccepts() *System_SshServer_Counters_AccessAcceptsPath {
	ps := &System_SshServer_Counters_AccessAcceptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessAccepts (leaf): The total number of times access to the target has been
// allowed.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/ssh-server/state/counters/access-accepts"
func (n *System_SshServer_CountersPathAny) AccessAccepts() *System_SshServer_Counters_AccessAcceptsPathAny {
	ps := &System_SshServer_Counters_AccessAcceptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times access to the target has been
// denied.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/ssh-server/state/counters/access-rejects"
func (n *System_SshServer_CountersPath) AccessRejects() *System_SshServer_Counters_AccessRejectsPath {
	ps := &System_SshServer_Counters_AccessRejectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times access to the target has been
// denied.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/ssh-server/state/counters/access-rejects"
func (n *System_SshServer_CountersPathAny) AccessRejects() *System_SshServer_Counters_AccessRejectsPathAny {
	ps := &System_SshServer_Counters_AccessRejectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time access to the target has been
// allowed.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/ssh-server/state/counters/last-access-accept"
func (n *System_SshServer_CountersPath) LastAccessAccept() *System_SshServer_Counters_LastAccessAcceptPath {
	ps := &System_SshServer_Counters_LastAccessAcceptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time access to the target has been
// allowed.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/ssh-server/state/counters/last-access-accept"
func (n *System_SshServer_CountersPathAny) LastAccessAccept() *System_SshServer_Counters_LastAccessAcceptPathAny {
	ps := &System_SshServer_Counters_LastAccessAcceptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time access to the target has been
// denied.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/ssh-server/state/counters/last-access-reject"
func (n *System_SshServer_CountersPath) LastAccessReject() *System_SshServer_Counters_LastAccessRejectPath {
	ps := &System_SshServer_Counters_LastAccessRejectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time access to the target has been
// denied.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/ssh-server/state/counters/last-access-reject"
func (n *System_SshServer_CountersPathAny) LastAccessReject() *System_SshServer_Counters_LastAccessRejectPathAny {
	ps := &System_SshServer_Counters_LastAccessRejectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_SshServer_CountersPath) State() ygnmi.SingletonQuery[*oc.System_SshServer_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_SshServer_Counters](
		"System_SshServer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_SshServer_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_SshServer_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_SshServer_Counters](
		"System_SshServer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_EnablePath represents the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/telnet-server/state/enable"
func (n *System_TelnetServer_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/telnet-server/state/enable"
func (n *System_TelnetServer_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/telnet-server/config/enable"
func (n *System_TelnetServer_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/telnet-server/config/enable"
func (n *System_TelnetServer_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_RateLimitPath represents the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServer_RateLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServer_RateLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServer_RateLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServer_RateLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_SessionLimitPath represents the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/telnet-server/state/session-limit"
func (n *System_TelnetServer_SessionLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/telnet-server/state/session-limit"
func (n *System_TelnetServer_SessionLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/telnet-server/config/session-limit"
func (n *System_TelnetServer_SessionLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/telnet-server/config/session-limit"
func (n *System_TelnetServer_SessionLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_TimeoutPath represents the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/telnet-server/state/timeout"
func (n *System_TelnetServer_TimeoutPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/telnet-server/state/timeout"
func (n *System_TelnetServer_TimeoutPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/telnet-server/config/timeout"
func (n *System_TelnetServer_TimeoutPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/telnet-server/config/timeout"
func (n *System_TelnetServer_TimeoutPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServerPath represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPath struct {
	*ygnmi.NodePath
}

// System_TelnetServerPathAny represents the wildcard version of the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/telnet-server/*/enable"
func (n *System_TelnetServerPath) Enable() *System_TelnetServer_EnablePath {
	ps := &System_TelnetServer_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/telnet-server/*/enable"
func (n *System_TelnetServerPathAny) Enable() *System_TelnetServer_EnablePathAny {
	ps := &System_TelnetServer_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/telnet-server/*/rate-limit"
func (n *System_TelnetServerPath) RateLimit() *System_TelnetServer_RateLimitPath {
	ps := &System_TelnetServer_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/telnet-server/*/rate-limit"
func (n *System_TelnetServerPathAny) RateLimit() *System_TelnetServer_RateLimitPathAny {
	ps := &System_TelnetServer_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/telnet-server/*/session-limit"
func (n *System_TelnetServerPath) SessionLimit() *System_TelnetServer_SessionLimitPath {
	ps := &System_TelnetServer_SessionLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/telnet-server/*/session-limit"
func (n *System_TelnetServerPathAny) SessionLimit() *System_TelnetServer_SessionLimitPathAny {
	ps := &System_TelnetServer_SessionLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/telnet-server/*/timeout"
func (n *System_TelnetServerPath) Timeout() *System_TelnetServer_TimeoutPath {
	ps := &System_TelnetServer_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/telnet-server/*/timeout"
func (n *System_TelnetServerPathAny) Timeout() *System_TelnetServer_TimeoutPathAny {
	ps := &System_TelnetServer_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPath) State() ygnmi.SingletonQuery[*oc.System_TelnetServer] {
	return ygnmi.NewSingletonQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPathAny) State() ygnmi.WildcardQuery[*oc.System_TelnetServer] {
	return ygnmi.NewWildcardQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPath) Config() ygnmi.ConfigQuery[*oc.System_TelnetServer] {
	return ygnmi.NewConfigQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_TelnetServer] {
	return ygnmi.NewWildcardQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_UtilizationPath represents the /openconfig-system/system/utilization YANG schema element.
type System_UtilizationPath struct {
	*ygnmi.NodePath
}

// System_UtilizationPathAny represents the wildcard version of the /openconfig-system/system/utilization YANG schema element.
type System_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// ResourceAny (list): The list of all resources across all platform components keyed by
// resource name.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "resources/resource"
//	Path from root:       "/system/utilization/resources/resource"
func (n *System_UtilizationPath) ResourceAny() *System_Utilization_ResourcePathAny {
	ps := &System_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ResourceAny (list): The list of all resources across all platform components keyed by
// resource name.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "resources/resource"
//	Path from root:       "/system/utilization/resources/resource"
func (n *System_UtilizationPathAny) ResourceAny() *System_Utilization_ResourcePathAny {
	ps := &System_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Resource (list): The list of all resources across all platform components keyed by
// resource name.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "resources/resource"
//	Path from root:       "/system/utilization/resources/resource"
//
//	Name: string
func (n *System_UtilizationPath) Resource(Name string) *System_Utilization_ResourcePath {
	ps := &System_Utilization_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Resource (list): The list of all resources across all platform components keyed by
// resource name.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "resources/resource"
//	Path from root:       "/system/utilization/resources/resource"
//
//	Name: string
func (n *System_UtilizationPathAny) Resource(Name string) *System_Utilization_ResourcePathAny {
	ps := &System_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ResourceMap (list): The list of all resources across all platform components keyed by
// resource name.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "resources/resource"
//	Path from root:       "/system/utilization/resources/resource"
func (n *System_UtilizationPath) ResourceMap() *System_Utilization_ResourcePathMap {
	ps := &System_Utilization_ResourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResourceMap (list): The list of all resources across all platform components keyed by
// resource name.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "resources/resource"
//	Path from root:       "/system/utilization/resources/resource"
func (n *System_UtilizationPathAny) ResourceMap() *System_Utilization_ResourcePathMapAny {
	ps := &System_Utilization_ResourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_UtilizationPath) State() ygnmi.SingletonQuery[*oc.System_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.System_Utilization](
		"System_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.System_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.System_Utilization](
		"System_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.System_Utilization] {
	return ygnmi.NewConfigQuery[*oc.System_Utilization](
		"System_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.System_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.System_Utilization](
		"System_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Utilization_Resource_ActiveComponentListPath represents the /openconfig-system/system/utilization/resources/resource/state/active-component-list YANG schema element.
type System_Utilization_Resource_ActiveComponentListPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Utilization_Resource_ActiveComponentListPathAny represents the wildcard version of the /openconfig-system/system/utilization/resources/resource/state/active-component-list YANG schema element.
type System_Utilization_Resource_ActiveComponentListPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/active-component-list"
//	Path from root:       "/system/utilization/resources/resource/state/active-component-list"
func (n *System_Utilization_Resource_ActiveComponentListPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Utilization_Resource",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-component-list"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Utilization_Resource).ActiveComponentList
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/active-component-list"
//	Path from root:       "/system/utilization/resources/resource/state/active-component-list"
func (n *System_Utilization_Resource_ActiveComponentListPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Utilization_Resource",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-component-list"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Utilization_Resource).ActiveComponentList
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Utilization_Resource_NamePath represents the /openconfig-system/system/utilization/resources/resource/state/name YANG schema element.
type System_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-system/system/utilization/resources/resource/state/name YANG schema element.
type System_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/name"
//	Path from root:       "/system/utilization/resources/resource/state/name"
func (n *System_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/name"
//	Path from root:       "/system/utilization/resources/resource/state/name"
func (n *System_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "config/name"
//	Path from root:       "/system/utilization/resources/resource/config/name"
func (n *System_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "config/name"
//	Path from root:       "/system/utilization/resources/resource/config/name"
func (n *System_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Utilization_Resource_UsedThresholdUpperPath represents the /openconfig-system/system/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type System_Utilization_Resource_UsedThresholdUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Utilization_Resource_UsedThresholdUpperPathAny represents the wildcard version of the /openconfig-system/system/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type System_Utilization_Resource_UsedThresholdUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/system/utilization/resources/resource/state/used-threshold-upper"
func (n *System_Utilization_Resource_UsedThresholdUpperPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/system/utilization/resources/resource/state/used-threshold-upper"
func (n *System_Utilization_Resource_UsedThresholdUpperPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/system/utilization/resources/resource/config/used-threshold-upper"
func (n *System_Utilization_Resource_UsedThresholdUpperPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"System_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/system/utilization/resources/resource/config/used-threshold-upper"
func (n *System_Utilization_Resource_UsedThresholdUpperPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Utilization_Resource_UsedThresholdUpperClearPath represents the /openconfig-system/system/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type System_Utilization_Resource_UsedThresholdUpperClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Utilization_Resource_UsedThresholdUpperClearPathAny represents the wildcard version of the /openconfig-system/system/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type System_Utilization_Resource_UsedThresholdUpperClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/system/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *System_Utilization_Resource_UsedThresholdUpperClearPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/system/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *System_Utilization_Resource_UsedThresholdUpperClearPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/system/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *System_Utilization_Resource_UsedThresholdUpperClearPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"System_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system-utilization"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/system/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *System_Utilization_Resource_UsedThresholdUpperClearPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Utilization_ResourcePath represents the /openconfig-system/system/utilization/resources/resource YANG schema element.
type System_Utilization_ResourcePath struct {
	*ygnmi.NodePath
}

// System_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-system/system/utilization/resources/resource YANG schema element.
type System_Utilization_ResourcePathAny struct {
	*ygnmi.NodePath
}

// System_Utilization_ResourcePathMap represents the /openconfig-system/system/utilization/resources/resource YANG schema element.
type System_Utilization_ResourcePathMap struct {
	*ygnmi.NodePath
}

// System_Utilization_ResourcePathMapAny represents the wildcard version of the /openconfig-system/system/utilization/resources/resource YANG schema element.
type System_Utilization_ResourcePathMapAny struct {
	*ygnmi.NodePath
}

// ActiveComponentList (leaf-list): List of references to each component which has this resource.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-component-list"
//	Path from root:       "/system/utilization/resources/resource/state/active-component-list"
func (n *System_Utilization_ResourcePath) ActiveComponentList() *System_Utilization_Resource_ActiveComponentListPath {
	ps := &System_Utilization_Resource_ActiveComponentListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-component-list"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveComponentList (leaf-list): List of references to each component which has this resource.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-component-list"
//	Path from root:       "/system/utilization/resources/resource/state/active-component-list"
func (n *System_Utilization_ResourcePathAny) ActiveComponentList() *System_Utilization_Resource_ActiveComponentListPathAny {
	ps := &System_Utilization_Resource_ActiveComponentListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-component-list"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the system.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/utilization/resources/resource/*/name"
func (n *System_Utilization_ResourcePath) Name() *System_Utilization_Resource_NamePath {
	ps := &System_Utilization_Resource_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the system.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/utilization/resources/resource/*/name"
func (n *System_Utilization_ResourcePathAny) Name() *System_Utilization_Resource_NamePathAny {
	ps := &System_Utilization_Resource_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/system/utilization/resources/resource/*/used-threshold-upper"
func (n *System_Utilization_ResourcePath) UsedThresholdUpper() *System_Utilization_Resource_UsedThresholdUpperPath {
	ps := &System_Utilization_Resource_UsedThresholdUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/system/utilization/resources/resource/*/used-threshold-upper"
func (n *System_Utilization_ResourcePathAny) UsedThresholdUpper() *System_Utilization_Resource_UsedThresholdUpperPathAny {
	ps := &System_Utilization_Resource_UsedThresholdUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/system/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *System_Utilization_ResourcePath) UsedThresholdUpperClear() *System_Utilization_Resource_UsedThresholdUpperClearPath {
	ps := &System_Utilization_Resource_UsedThresholdUpperClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/system/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *System_Utilization_ResourcePathAny) UsedThresholdUpperClear() *System_Utilization_Resource_UsedThresholdUpperClearPathAny {
	ps := &System_Utilization_Resource_UsedThresholdUpperClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePath) State() ygnmi.SingletonQuery[*oc.System_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[*oc.System_Utilization_Resource](
		"System_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePathAny) State() ygnmi.WildcardQuery[*oc.System_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.System_Utilization_Resource](
		"System_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePath) Config() ygnmi.ConfigQuery[*oc.System_Utilization_Resource] {
	return ygnmi.NewConfigQuery[*oc.System_Utilization_Resource](
		"System_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePathAny) Config() ygnmi.WildcardQuery[*oc.System_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.System_Utilization_Resource](
		"System_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Utilization_Resource](
		"System_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Utilization_Resource, bool) {
			ret := gs.(*oc.System_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-utilization:resources"},
			PostRelPath: []string{"openconfig-system-utilization:resource"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Utilization_Resource](
		"System_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Utilization_Resource, bool) {
			ret := gs.(*oc.System_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-utilization:resources"},
			PostRelPath: []string{"openconfig-system-utilization:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Utilization_Resource] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Utilization_Resource](
		"System_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Utilization_Resource, bool) {
			ret := gs.(*oc.System_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-utilization:resources"},
			PostRelPath: []string{"openconfig-system-utilization:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Utilization_ResourcePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Utilization_Resource](
		"System_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Utilization_Resource, bool) {
			ret := gs.(*oc.System_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-utilization:resources"},
			PostRelPath: []string{"openconfig-system-utilization:resource"},
		},
	)
}
