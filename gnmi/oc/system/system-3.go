/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Cpu_Kernel_MinPath represents the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_Kernel_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_Kernel_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_Kernel_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_Kernel_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_KernelPath represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPath struct {
	*ygnmi.NodePath
}

// System_Cpu_KernelPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPath) Avg() *System_Cpu_Kernel_AvgPath {
	ps := &System_Cpu_Kernel_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPathAny) Avg() *System_Cpu_Kernel_AvgPathAny {
	ps := &System_Cpu_Kernel_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPath) Instant() *System_Cpu_Kernel_InstantPath {
	ps := &System_Cpu_Kernel_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPathAny) Instant() *System_Cpu_Kernel_InstantPathAny {
	ps := &System_Cpu_Kernel_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPath) Interval() *System_Cpu_Kernel_IntervalPath {
	ps := &System_Cpu_Kernel_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPathAny) Interval() *System_Cpu_Kernel_IntervalPathAny {
	ps := &System_Cpu_Kernel_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPath) Max() *System_Cpu_Kernel_MaxPath {
	ps := &System_Cpu_Kernel_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPathAny) Max() *System_Cpu_Kernel_MaxPathAny {
	ps := &System_Cpu_Kernel_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPath) MaxTime() *System_Cpu_Kernel_MaxTimePath {
	ps := &System_Cpu_Kernel_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPathAny) MaxTime() *System_Cpu_Kernel_MaxTimePathAny {
	ps := &System_Cpu_Kernel_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPath) Min() *System_Cpu_Kernel_MinPath {
	ps := &System_Cpu_Kernel_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPathAny) Min() *System_Cpu_Kernel_MinPathAny {
	ps := &System_Cpu_Kernel_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPath) MinTime() *System_Cpu_Kernel_MinTimePath {
	ps := &System_Cpu_Kernel_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPathAny) MinTime() *System_Cpu_Kernel_MinTimePathAny {
	ps := &System_Cpu_Kernel_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_KernelPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Kernel] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Kernel](
		"System_Cpu_Kernel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_KernelPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Kernel] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Kernel](
		"System_Cpu_Kernel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_AvgPath represents the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_Nice_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_Nice_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_InstantPath represents the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_Nice_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_Nice_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_Nice_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_Nice_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MaxPath represents the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_Nice_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_Nice_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_Nice_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_Nice_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MinPath represents the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_Nice_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_Nice_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_Nice_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_Nice_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_NicePath represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePath struct {
	*ygnmi.NodePath
}

// System_Cpu_NicePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePath) Avg() *System_Cpu_Nice_AvgPath {
	ps := &System_Cpu_Nice_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePathAny) Avg() *System_Cpu_Nice_AvgPathAny {
	ps := &System_Cpu_Nice_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePath) Instant() *System_Cpu_Nice_InstantPath {
	ps := &System_Cpu_Nice_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePathAny) Instant() *System_Cpu_Nice_InstantPathAny {
	ps := &System_Cpu_Nice_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePath) Interval() *System_Cpu_Nice_IntervalPath {
	ps := &System_Cpu_Nice_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePathAny) Interval() *System_Cpu_Nice_IntervalPathAny {
	ps := &System_Cpu_Nice_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePath) Max() *System_Cpu_Nice_MaxPath {
	ps := &System_Cpu_Nice_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePathAny) Max() *System_Cpu_Nice_MaxPathAny {
	ps := &System_Cpu_Nice_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePath) MaxTime() *System_Cpu_Nice_MaxTimePath {
	ps := &System_Cpu_Nice_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePathAny) MaxTime() *System_Cpu_Nice_MaxTimePathAny {
	ps := &System_Cpu_Nice_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePath) Min() *System_Cpu_Nice_MinPath {
	ps := &System_Cpu_Nice_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePathAny) Min() *System_Cpu_Nice_MinPathAny {
	ps := &System_Cpu_Nice_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePath) MinTime() *System_Cpu_Nice_MinTimePath {
	ps := &System_Cpu_Nice_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePathAny) MinTime() *System_Cpu_Nice_MinTimePathAny {
	ps := &System_Cpu_Nice_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_NicePath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Nice] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Nice](
		"System_Cpu_Nice",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_NicePathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Nice] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Nice](
		"System_Cpu_Nice",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_AvgPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterrupt_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterrupt_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterrupt_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterrupt_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterrupt_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterrupt_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterrupt_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterrupt_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterrupt_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterrupt_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterrupt_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterrupt_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterrupt_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterrupt_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPath struct {
	*ygnmi.NodePath
}

// System_Cpu_SoftwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPath) Avg() *System_Cpu_SoftwareInterrupt_AvgPath {
	ps := &System_Cpu_SoftwareInterrupt_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPathAny) Avg() *System_Cpu_SoftwareInterrupt_AvgPathAny {
	ps := &System_Cpu_SoftwareInterrupt_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPath) Instant() *System_Cpu_SoftwareInterrupt_InstantPath {
	ps := &System_Cpu_SoftwareInterrupt_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPathAny) Instant() *System_Cpu_SoftwareInterrupt_InstantPathAny {
	ps := &System_Cpu_SoftwareInterrupt_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPath) Interval() *System_Cpu_SoftwareInterrupt_IntervalPath {
	ps := &System_Cpu_SoftwareInterrupt_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPathAny) Interval() *System_Cpu_SoftwareInterrupt_IntervalPathAny {
	ps := &System_Cpu_SoftwareInterrupt_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPath) Max() *System_Cpu_SoftwareInterrupt_MaxPath {
	ps := &System_Cpu_SoftwareInterrupt_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPathAny) Max() *System_Cpu_SoftwareInterrupt_MaxPathAny {
	ps := &System_Cpu_SoftwareInterrupt_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPath) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePath {
	ps := &System_Cpu_SoftwareInterrupt_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePathAny {
	ps := &System_Cpu_SoftwareInterrupt_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPath) Min() *System_Cpu_SoftwareInterrupt_MinPath {
	ps := &System_Cpu_SoftwareInterrupt_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPathAny) Min() *System_Cpu_SoftwareInterrupt_MinPathAny {
	ps := &System_Cpu_SoftwareInterrupt_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPath) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePath {
	ps := &System_Cpu_SoftwareInterrupt_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePathAny {
	ps := &System_Cpu_SoftwareInterrupt_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_SoftwareInterruptPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_SoftwareInterrupt] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_SoftwareInterrupt](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_SoftwareInterruptPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_SoftwareInterrupt] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_SoftwareInterrupt](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_AvgPath represents the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_Total_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_Total_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_InstantPath represents the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_Total_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_Total_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_Total_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_Total_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MaxPath represents the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_Total_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_Total_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_Total_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_Total_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MinPath represents the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_Total_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_Total_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_Total_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_Total_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_TotalPath represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPath struct {
	*ygnmi.NodePath
}

// System_Cpu_TotalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPath) Avg() *System_Cpu_Total_AvgPath {
	ps := &System_Cpu_Total_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPathAny) Avg() *System_Cpu_Total_AvgPathAny {
	ps := &System_Cpu_Total_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPath) Instant() *System_Cpu_Total_InstantPath {
	ps := &System_Cpu_Total_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPathAny) Instant() *System_Cpu_Total_InstantPathAny {
	ps := &System_Cpu_Total_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPath) Interval() *System_Cpu_Total_IntervalPath {
	ps := &System_Cpu_Total_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPathAny) Interval() *System_Cpu_Total_IntervalPathAny {
	ps := &System_Cpu_Total_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPath) Max() *System_Cpu_Total_MaxPath {
	ps := &System_Cpu_Total_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPathAny) Max() *System_Cpu_Total_MaxPathAny {
	ps := &System_Cpu_Total_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPath) MaxTime() *System_Cpu_Total_MaxTimePath {
	ps := &System_Cpu_Total_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPathAny) MaxTime() *System_Cpu_Total_MaxTimePathAny {
	ps := &System_Cpu_Total_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPath) Min() *System_Cpu_Total_MinPath {
	ps := &System_Cpu_Total_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPathAny) Min() *System_Cpu_Total_MinPathAny {
	ps := &System_Cpu_Total_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPath) MinTime() *System_Cpu_Total_MinTimePath {
	ps := &System_Cpu_Total_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPathAny) MinTime() *System_Cpu_Total_MinTimePathAny {
	ps := &System_Cpu_Total_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_TotalPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Total] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Total](
		"System_Cpu_Total",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_TotalPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Total] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Total](
		"System_Cpu_Total",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_AvgPath represents the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_User_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_User_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_InstantPath represents the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_User_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_User_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_User_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_User_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MaxPath represents the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_User_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_User_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_User_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_User_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
