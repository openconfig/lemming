/*
Package oc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package oc

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction struct {
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Î›BelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction struct {
	Drop      *bool  `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetDrop sets the value of the leaf Drop in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetDrop(v bool) {
	t.Drop = &v
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Î›BelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_Output represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output struct {
	ChildScheduler *string             `path:"state/child-scheduler" module:"openconfig-qos/openconfig-qos" shadow-path:"config/child-scheduler" shadow-module:"openconfig-qos/openconfig-qos"`
	OutputFwdGroup *string             `path:"state/output-fwd-group" module:"openconfig-qos/openconfig-qos" shadow-path:"config/output-fwd-group" shadow-module:"openconfig-qos/openconfig-qos"`
	OutputType     E_Output_OutputType `path:"state/output-type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/output-type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Output) IsYANGGoStruct() {}

// GetChildScheduler retrieves the value of the leaf ChildScheduler from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChildScheduler is set, it can
// safely use t.GetChildScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChildScheduler == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetChildScheduler() string {
	if t == nil || t.ChildScheduler == nil {
		return ""
	}
	return *t.ChildScheduler
}

// GetOutputFwdGroup retrieves the value of the leaf OutputFwdGroup from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFwdGroup is set, it can
// safely use t.GetOutputFwdGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFwdGroup == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputFwdGroup() string {
	if t == nil || t.OutputFwdGroup == nil {
		return ""
	}
	return *t.OutputFwdGroup
}

// GetOutputType retrieves the value of the leaf OutputType from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputType is set, it can
// safely use t.GetOutputType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputType == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputType() E_Output_OutputType {
	if t == nil || t.OutputType == 0 {
		return 0
	}
	return t.OutputType
}

// SetChildScheduler sets the value of the leaf ChildScheduler in the Qos_SchedulerPolicy_Scheduler_Output
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Output) SetChildScheduler(v string) {
	t.ChildScheduler = &v
}

// SetOutputFwdGroup sets the value of the leaf OutputFwdGroup in the Qos_SchedulerPolicy_Scheduler_Output
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Output) SetOutputFwdGroup(v string) {
	t.OutputFwdGroup = &v
}

// SetOutputType sets the value of the leaf OutputType in the Qos_SchedulerPolicy_Scheduler_Output
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Output) SetOutputType(v E_Output_OutputType) {
	t.OutputType = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Output) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_Output.
func (*Qos_SchedulerPolicy_Scheduler_Output) Î›BelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor struct {
	Bc              *uint32                                                        `path:"state/bc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/bc" shadow-module:"openconfig-qos/openconfig-qos"`
	Be              *uint32                                                        `path:"state/be" module:"openconfig-qos/openconfig-qos" shadow-path:"config/be" shadow-module:"openconfig-qos/openconfig-qos"`
	Cir             *uint64                                                        `path:"state/cir" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPct          *uint8                                                         `path:"state/cir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPctRemaining *uint8                                                         `path:"state/cir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ConformAction   *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ExceedAction    *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	Pir             *uint64                                                        `path:"state/pir" module:"openconfig-qos/openconfig-qos" shadow-path:"config/pir" shadow-module:"openconfig-qos/openconfig-qos"`
	PirPct          *uint8                                                         `path:"state/pir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"config/pir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	PirPctRemaining *uint8                                                         `path:"state/pir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"config/pir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ViolateAction   *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction `path:"violate-action" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateViolateAction retrieves the value of the ViolateAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t.ViolateAction != nil {
		return t.ViolateAction
	}
	t.ViolateAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction{}
	return t.ViolateAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetViolateAction returns the value of the ViolateAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ViolateAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t != nil && t.ViolateAction != nil {
		return t.ViolateAction
	}
	return nil
}

// GetBc retrieves the value of the leaf Bc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bc is set, it can
// safely use t.GetBc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBc() uint32 {
	if t == nil || t.Bc == nil {
		return 0
	}
	return *t.Bc
}

// GetBe retrieves the value of the leaf Be from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBe() uint32 {
	if t == nil || t.Be == nil {
		return 0
	}
	return *t.Be
}

// GetCir retrieves the value of the leaf Cir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCir() uint64 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetCirPct retrieves the value of the leaf CirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPct is set, it can
// safely use t.GetCirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPct() uint8 {
	if t == nil || t.CirPct == nil {
		return 0
	}
	return *t.CirPct
}

// GetCirPctRemaining retrieves the value of the leaf CirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPctRemaining is set, it can
// safely use t.GetCirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPctRemaining() uint8 {
	if t == nil || t.CirPctRemaining == nil {
		return 0
	}
	return *t.CirPctRemaining
}

// GetPir retrieves the value of the leaf Pir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPir() uint64 {
	if t == nil || t.Pir == nil {
		return 0
	}
	return *t.Pir
}

// GetPirPct retrieves the value of the leaf PirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPct is set, it can
// safely use t.GetPirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPct() uint8 {
	if t == nil || t.PirPct == nil {
		return 0
	}
	return *t.PirPct
}

// GetPirPctRemaining retrieves the value of the leaf PirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPctRemaining is set, it can
// safely use t.GetPirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPctRemaining() uint8 {
	if t == nil || t.PirPctRemaining == nil {
		return 0
	}
	return *t.PirPctRemaining
}

// SetBc sets the value of the leaf Bc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetBc(v uint32) {
	t.Bc = &v
}

// SetBe sets the value of the leaf Be in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetBe(v uint32) {
	t.Be = &v
}

// SetCir sets the value of the leaf Cir in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetCir(v uint64) {
	t.Cir = &v
}

// SetCirPct sets the value of the leaf CirPct in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetCirPct(v uint8) {
	t.CirPct = &v
}

// SetCirPctRemaining sets the value of the leaf CirPctRemaining in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetCirPctRemaining(v uint8) {
	t.CirPctRemaining = &v
}

// SetPir sets the value of the leaf Pir in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetPir(v uint64) {
	t.Pir = &v
}

// SetPirPct sets the value of the leaf PirPct in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetPirPct(v uint8) {
	t.PirPct = &v
}

// SetPirPctRemaining sets the value of the leaf PirPctRemaining in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetPirPctRemaining(v uint8) {
	t.PirPctRemaining = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ConformAction.PopulateDefaults()
	t.ExceedAction.PopulateDefaults()
	t.ViolateAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Î›BelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction struct {
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Î›BelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction struct {
	Drop      *bool  `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetDrop sets the value of the leaf Drop in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetDrop(v bool) {
	t.Drop = &v
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Î›BelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction struct {
	Drop      *bool  `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetDrop sets the value of the leaf Drop in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetDrop(v bool) {
	t.Drop = &v
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Î›BelongingModule() string {
	return "openconfig-qos"
}

// RelayAgent represents the /openconfig-relay-agent/relay-agent YANG schema element.
type RelayAgent struct {
	Dhcp   *RelayAgent_Dhcp   `path:"dhcp" module:"openconfig-relay-agent"`
	Dhcpv6 *RelayAgent_Dhcpv6 `path:"dhcpv6" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent) IsYANGGoStruct() {}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *RelayAgent) GetOrCreateDhcp() *RelayAgent_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &RelayAgent_Dhcp{}
	return t.Dhcp
}

// GetOrCreateDhcpv6 retrieves the value of the Dhcpv6 field
// or returns the existing field if it already exists.
func (t *RelayAgent) GetOrCreateDhcpv6() *RelayAgent_Dhcpv6 {
	if t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	t.Dhcpv6 = &RelayAgent_Dhcpv6{}
	return t.Dhcpv6
}

// GetDhcp returns the value of the Dhcp struct pointer
// from RelayAgent. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent) GetDhcp() *RelayAgent_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetDhcpv6 returns the value of the Dhcpv6 struct pointer
// from RelayAgent. If the receiver or the field Dhcpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent) GetDhcpv6() *RelayAgent_Dhcpv6 {
	if t != nil && t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcp.PopulateDefaults()
	t.Dhcpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent.
func (*RelayAgent) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp represents the /openconfig-relay-agent/relay-agent/dhcp YANG schema element.
type RelayAgent_Dhcp struct {
	AgentInformationOption *RelayAgent_Dhcp_AgentInformationOption `path:"agent-information-option" module:"openconfig-relay-agent"`
	EnableRelayAgent       *bool                                   `path:"state/enable-relay-agent" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable-relay-agent" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Interface              map[string]*RelayAgent_Dhcp_Interface   `path:"interfaces/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// RelayAgent_Dhcp struct. The keys of the list are populated from the input
// arguments.
func (t *RelayAgent_Dhcp) NewInterface(Id string) (*RelayAgent_Dhcp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcp_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &RelayAgent_Dhcp_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the RelayAgent_Dhcp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RelayAgent_Dhcp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from RelayAgent_Dhcp.
//
// It initializes the field if not already initialized.
func (t *RelayAgent_Dhcp) GetOrCreateInterfaceMap() map[string]*RelayAgent_Dhcp_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcp_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver RelayAgent_Dhcp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RelayAgent_Dhcp) GetOrCreateInterface(Id string) *RelayAgent_Dhcp_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of RelayAgent_Dhcp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RelayAgent_Dhcp) GetInterface(Id string) *RelayAgent_Dhcp_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver RelayAgent_Dhcp. If there is no such element, the function
// is a no-op.
func (t *RelayAgent_Dhcp) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied RelayAgent_Dhcp_Interface struct to the
// list Interface of RelayAgent_Dhcp. If the key value(s) specified in
// the supplied RelayAgent_Dhcp_Interface already exist in the list, an error is
// returned.
func (t *RelayAgent_Dhcp) AppendInterface(v *RelayAgent_Dhcp_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAgentInformationOption retrieves the value of the AgentInformationOption field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp) GetOrCreateAgentInformationOption() *RelayAgent_Dhcp_AgentInformationOption {
	if t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	t.AgentInformationOption = &RelayAgent_Dhcp_AgentInformationOption{}
	return t.AgentInformationOption
}

// GetAgentInformationOption returns the value of the AgentInformationOption struct pointer
// from RelayAgent_Dhcp. If the receiver or the field AgentInformationOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp) GetAgentInformationOption() *RelayAgent_Dhcp_AgentInformationOption {
	if t != nil && t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	return nil
}

// GetEnableRelayAgent retrieves the value of the leaf EnableRelayAgent from the RelayAgent_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRelayAgent is set, it can
// safely use t.GetEnableRelayAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRelayAgent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp) GetEnableRelayAgent() bool {
	if t == nil || t.EnableRelayAgent == nil {
		return false
	}
	return *t.EnableRelayAgent
}

// SetEnableRelayAgent sets the value of the leaf EnableRelayAgent in the RelayAgent_Dhcp
// struct.
func (t *RelayAgent_Dhcp) SetEnableRelayAgent(v bool) {
	t.EnableRelayAgent = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableRelayAgent == nil {
		var v bool = false
		t.EnableRelayAgent = &v
	}
	t.AgentInformationOption.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp.
func (*RelayAgent_Dhcp) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_AgentInformationOption represents the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option YANG schema element.
type RelayAgent_Dhcp_AgentInformationOption struct {
	Enable *bool `path:"state/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_AgentInformationOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_AgentInformationOption) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_AgentInformationOption) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// SetEnable sets the value of the leaf Enable in the RelayAgent_Dhcp_AgentInformationOption
// struct.
func (t *RelayAgent_Dhcp_AgentInformationOption) SetEnable(v bool) {
	t.Enable = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_AgentInformationOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_AgentInformationOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_AgentInformationOption) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_AgentInformationOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_AgentInformationOption) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_AgentInformationOption) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_AgentInformationOption.
func (*RelayAgent_Dhcp_AgentInformationOption) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_Interface struct {
	AgentInformationOption *RelayAgent_Dhcp_Interface_AgentInformationOption `path:"agent-information-option" module:"openconfig-relay-agent"`
	Counters               *RelayAgent_Dhcp_Interface_Counters               `path:"state/counters" module:"openconfig-relay-agent/openconfig-relay-agent"`
	Enable                 *bool                                             `path:"state/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	HelperAddress          []string                                          `path:"state/helper-address" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/helper-address" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Id                     *string                                           `path:"state/id|id" module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent" shadow-path:"config/id|id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent"`
	InterfaceRef           *RelayAgent_Dhcp_Interface_InterfaceRef           `path:"interface-ref" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface) IsYANGGoStruct() {}

// GetOrCreateAgentInformationOption retrieves the value of the AgentInformationOption field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateAgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOption {
	if t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	t.AgentInformationOption = &RelayAgent_Dhcp_Interface_AgentInformationOption{}
	return t.AgentInformationOption
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateCounters() *RelayAgent_Dhcp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &RelayAgent_Dhcp_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateInterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &RelayAgent_Dhcp_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetAgentInformationOption returns the value of the AgentInformationOption struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field AgentInformationOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetAgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOption {
	if t != nil && t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetCounters() *RelayAgent_Dhcp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetInterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetHelperAddress retrieves the value of the leaf HelperAddress from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperAddress is set, it can
// safely use t.GetHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperAddress == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetHelperAddress() []string {
	if t == nil || t.HelperAddress == nil {
		return nil
	}
	return t.HelperAddress
}

// GetId retrieves the value of the leaf Id from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// SetEnable sets the value of the leaf Enable in the RelayAgent_Dhcp_Interface
// struct.
func (t *RelayAgent_Dhcp_Interface) SetEnable(v bool) {
	t.Enable = &v
}

// SetHelperAddress sets the value of the leaf HelperAddress in the RelayAgent_Dhcp_Interface
// struct.
func (t *RelayAgent_Dhcp_Interface) SetHelperAddress(v []string) {
	t.HelperAddress = v
}

// SetId sets the value of the leaf Id in the RelayAgent_Dhcp_Interface
// struct.
func (t *RelayAgent_Dhcp_Interface) SetId(v string) {
	t.Id = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AgentInformationOption.PopulateDefaults()
	t.Counters.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the RelayAgent_Dhcp_Interface struct, which is a YANG list entry.
func (t *RelayAgent_Dhcp_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface.
func (*RelayAgent_Dhcp_Interface) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_AgentInformationOption represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption struct {
	CircuitId     *string `path:"state/circuit-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/circuit-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Enable        *bool   `path:"state/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	RemoteId      *string `path:"state/remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentCircuitId *string `path:"state/sent-circuit-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentRemoteId  *string `path:"state/sent-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_AgentInformationOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_AgentInformationOption) IsYANGGoStruct() {}

// GetCircuitId retrieves the value of the leaf CircuitId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetCircuitId() string {
	if t == nil || t.CircuitId == nil {
		return ""
	}
	return *t.CircuitId
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRemoteId retrieves the value of the leaf RemoteId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetSentCircuitId retrieves the value of the leaf SentCircuitId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentCircuitId is set, it can
// safely use t.GetSentCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentCircuitId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetSentCircuitId() string {
	if t == nil || t.SentCircuitId == nil {
		return ""
	}
	return *t.SentCircuitId
}

// GetSentRemoteId retrieves the value of the leaf SentRemoteId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentRemoteId is set, it can
// safely use t.GetSentRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetSentRemoteId() string {
	if t == nil || t.SentRemoteId == nil {
		return ""
	}
	return *t.SentRemoteId
}

// SetCircuitId sets the value of the leaf CircuitId in the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) SetCircuitId(v string) {
	t.CircuitId = &v
}

// SetEnable sets the value of the leaf Enable in the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) SetEnable(v bool) {
	t.Enable = &v
}

// SetRemoteId sets the value of the leaf RemoteId in the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) SetRemoteId(v string) {
	t.RemoteId = &v
}

// SetSentCircuitId sets the value of the leaf SentCircuitId in the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) SetSentCircuitId(v string) {
	t.SentCircuitId = &v
}

// SetSentRemoteId sets the value of the leaf SentRemoteId in the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) SetSentRemoteId(v string) {
	t.SentRemoteId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface_AgentInformationOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_AgentInformationOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_AgentInformationOption.
func (*RelayAgent_Dhcp_Interface_AgentInformationOption) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_Counters represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcp_Interface_Counters struct {
	BootreplySent        *uint64 `path:"bootreply-sent" module:"openconfig-relay-agent"`
	BootrequestReceived  *uint64 `path:"bootrequest-received" module:"openconfig-relay-agent"`
	BootrequestSent      *uint64 `path:"bootrequest-sent" module:"openconfig-relay-agent"`
	DhcpAckSent          *uint64 `path:"dhcp-ack-sent" module:"openconfig-relay-agent"`
	DhcpDeclineReceived  *uint64 `path:"dhcp-decline-received" module:"openconfig-relay-agent"`
	DhcpDiscoverReceived *uint64 `path:"dhcp-discover-received" module:"openconfig-relay-agent"`
	DhcpInformReceived   *uint64 `path:"dhcp-inform-received" module:"openconfig-relay-agent"`
	DhcpNackSent         *uint64 `path:"dhcp-nack-sent" module:"openconfig-relay-agent"`
	DhcpOfferSent        *uint64 `path:"dhcp-offer-sent" module:"openconfig-relay-agent"`
	DhcpReleaseReceived  *uint64 `path:"dhcp-release-received" module:"openconfig-relay-agent"`
	DhcpRequestReceived  *uint64 `path:"dhcp-request-received" module:"openconfig-relay-agent"`
	InvalidOpcode        *uint64 `path:"invalid-opcode" module:"openconfig-relay-agent"`
	InvalidOptions       *uint64 `path:"invalid-options" module:"openconfig-relay-agent"`
	TotalDropped         *uint64 `path:"total-dropped" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_Counters) IsYANGGoStruct() {}

// GetBootreplySent retrieves the value of the leaf BootreplySent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootreplySent is set, it can
// safely use t.GetBootreplySent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootreplySent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootreplySent() uint64 {
	if t == nil || t.BootreplySent == nil {
		return 0
	}
	return *t.BootreplySent
}

// GetBootrequestReceived retrieves the value of the leaf BootrequestReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootrequestReceived is set, it can
// safely use t.GetBootrequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootrequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootrequestReceived() uint64 {
	if t == nil || t.BootrequestReceived == nil {
		return 0
	}
	return *t.BootrequestReceived
}

// GetBootrequestSent retrieves the value of the leaf BootrequestSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootrequestSent is set, it can
// safely use t.GetBootrequestSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootrequestSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootrequestSent() uint64 {
	if t == nil || t.BootrequestSent == nil {
		return 0
	}
	return *t.BootrequestSent
}

// GetDhcpAckSent retrieves the value of the leaf DhcpAckSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpAckSent is set, it can
// safely use t.GetDhcpAckSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpAckSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpAckSent() uint64 {
	if t == nil || t.DhcpAckSent == nil {
		return 0
	}
	return *t.DhcpAckSent
}

// GetDhcpDeclineReceived retrieves the value of the leaf DhcpDeclineReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpDeclineReceived is set, it can
// safely use t.GetDhcpDeclineReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpDeclineReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpDeclineReceived() uint64 {
	if t == nil || t.DhcpDeclineReceived == nil {
		return 0
	}
	return *t.DhcpDeclineReceived
}

// GetDhcpDiscoverReceived retrieves the value of the leaf DhcpDiscoverReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpDiscoverReceived is set, it can
// safely use t.GetDhcpDiscoverReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpDiscoverReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpDiscoverReceived() uint64 {
	if t == nil || t.DhcpDiscoverReceived == nil {
		return 0
	}
	return *t.DhcpDiscoverReceived
}

// GetDhcpInformReceived retrieves the value of the leaf DhcpInformReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpInformReceived is set, it can
// safely use t.GetDhcpInformReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpInformReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpInformReceived() uint64 {
	if t == nil || t.DhcpInformReceived == nil {
		return 0
	}
	return *t.DhcpInformReceived
}

// GetDhcpNackSent retrieves the value of the leaf DhcpNackSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpNackSent is set, it can
// safely use t.GetDhcpNackSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpNackSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpNackSent() uint64 {
	if t == nil || t.DhcpNackSent == nil {
		return 0
	}
	return *t.DhcpNackSent
}

// GetDhcpOfferSent retrieves the value of the leaf DhcpOfferSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpOfferSent is set, it can
// safely use t.GetDhcpOfferSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpOfferSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpOfferSent() uint64 {
	if t == nil || t.DhcpOfferSent == nil {
		return 0
	}
	return *t.DhcpOfferSent
}

// GetDhcpReleaseReceived retrieves the value of the leaf DhcpReleaseReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpReleaseReceived is set, it can
// safely use t.GetDhcpReleaseReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpReleaseReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpReleaseReceived() uint64 {
	if t == nil || t.DhcpReleaseReceived == nil {
		return 0
	}
	return *t.DhcpReleaseReceived
}

// GetDhcpRequestReceived retrieves the value of the leaf DhcpRequestReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpRequestReceived is set, it can
// safely use t.GetDhcpRequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpRequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpRequestReceived() uint64 {
	if t == nil || t.DhcpRequestReceived == nil {
		return 0
	}
	return *t.DhcpRequestReceived
}

// GetInvalidOpcode retrieves the value of the leaf InvalidOpcode from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOpcode is set, it can
// safely use t.GetInvalidOpcode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOpcode == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetInvalidOpcode() uint64 {
	if t == nil || t.InvalidOpcode == nil {
		return 0
	}
	return *t.InvalidOpcode
}

// GetInvalidOptions retrieves the value of the leaf InvalidOptions from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOptions is set, it can
// safely use t.GetInvalidOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOptions == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetInvalidOptions() uint64 {
	if t == nil || t.InvalidOptions == nil {
		return 0
	}
	return *t.InvalidOptions
}

// GetTotalDropped retrieves the value of the leaf TotalDropped from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalDropped is set, it can
// safely use t.GetTotalDropped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalDropped == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetTotalDropped() uint64 {
	if t == nil || t.TotalDropped == nil {
		return 0
	}
	return *t.TotalDropped
}

// SetBootreplySent sets the value of the leaf BootreplySent in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetBootreplySent(v uint64) {
	t.BootreplySent = &v
}

// SetBootrequestReceived sets the value of the leaf BootrequestReceived in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetBootrequestReceived(v uint64) {
	t.BootrequestReceived = &v
}

// SetBootrequestSent sets the value of the leaf BootrequestSent in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetBootrequestSent(v uint64) {
	t.BootrequestSent = &v
}

// SetDhcpAckSent sets the value of the leaf DhcpAckSent in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpAckSent(v uint64) {
	t.DhcpAckSent = &v
}

// SetDhcpDeclineReceived sets the value of the leaf DhcpDeclineReceived in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpDeclineReceived(v uint64) {
	t.DhcpDeclineReceived = &v
}

// SetDhcpDiscoverReceived sets the value of the leaf DhcpDiscoverReceived in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpDiscoverReceived(v uint64) {
	t.DhcpDiscoverReceived = &v
}

// SetDhcpInformReceived sets the value of the leaf DhcpInformReceived in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpInformReceived(v uint64) {
	t.DhcpInformReceived = &v
}

// SetDhcpNackSent sets the value of the leaf DhcpNackSent in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpNackSent(v uint64) {
	t.DhcpNackSent = &v
}

// SetDhcpOfferSent sets the value of the leaf DhcpOfferSent in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpOfferSent(v uint64) {
	t.DhcpOfferSent = &v
}

// SetDhcpReleaseReceived sets the value of the leaf DhcpReleaseReceived in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpReleaseReceived(v uint64) {
	t.DhcpReleaseReceived = &v
}

// SetDhcpRequestReceived sets the value of the leaf DhcpRequestReceived in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetDhcpRequestReceived(v uint64) {
	t.DhcpRequestReceived = &v
}

// SetInvalidOpcode sets the value of the leaf InvalidOpcode in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetInvalidOpcode(v uint64) {
	t.InvalidOpcode = &v
}

// SetInvalidOptions sets the value of the leaf InvalidOptions in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetInvalidOptions(v uint64) {
	t.InvalidOptions = &v
}

// SetTotalDropped sets the value of the leaf TotalDropped in the RelayAgent_Dhcp_Interface_Counters
// struct.
func (t *RelayAgent_Dhcp_Interface_Counters) SetTotalDropped(v uint64) {
	t.TotalDropped = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_Counters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_Counters.
func (*RelayAgent_Dhcp_Interface_Counters) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_InterfaceRef represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/interface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/subinterface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RelayAgent_Dhcp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RelayAgent_Dhcp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the RelayAgent_Dhcp_Interface_InterfaceRef
// struct.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the RelayAgent_Dhcp_Interface_InterfaceRef
// struct.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_InterfaceRef.
func (*RelayAgent_Dhcp_Interface_InterfaceRef) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6 represents the /openconfig-relay-agent/relay-agent/dhcpv6 YANG schema element.
type RelayAgent_Dhcpv6 struct {
	EnableRelayAgent *bool                                   `path:"state/enable-relay-agent" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable-relay-agent" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Interface        map[string]*RelayAgent_Dhcpv6_Interface `path:"interfaces/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	Options          *RelayAgent_Dhcpv6_Options              `path:"options" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// RelayAgent_Dhcpv6 struct. The keys of the list are populated from the input
// arguments.
func (t *RelayAgent_Dhcpv6) NewInterface(Id string) (*RelayAgent_Dhcpv6_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcpv6_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &RelayAgent_Dhcpv6_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the RelayAgent_Dhcpv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RelayAgent_Dhcpv6) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from RelayAgent_Dhcpv6.
//
// It initializes the field if not already initialized.
func (t *RelayAgent_Dhcpv6) GetOrCreateInterfaceMap() map[string]*RelayAgent_Dhcpv6_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcpv6_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver RelayAgent_Dhcpv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RelayAgent_Dhcpv6) GetOrCreateInterface(Id string) *RelayAgent_Dhcpv6_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of RelayAgent_Dhcpv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RelayAgent_Dhcpv6) GetInterface(Id string) *RelayAgent_Dhcpv6_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver RelayAgent_Dhcpv6. If there is no such element, the function
// is a no-op.
func (t *RelayAgent_Dhcpv6) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied RelayAgent_Dhcpv6_Interface struct to the
// list Interface of RelayAgent_Dhcpv6. If the key value(s) specified in
// the supplied RelayAgent_Dhcpv6_Interface already exist in the list, an error is
// returned.
func (t *RelayAgent_Dhcpv6) AppendInterface(v *RelayAgent_Dhcpv6_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcpv6_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6) GetOrCreateOptions() *RelayAgent_Dhcpv6_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &RelayAgent_Dhcpv6_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from RelayAgent_Dhcpv6. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6) GetOptions() *RelayAgent_Dhcpv6_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetEnableRelayAgent retrieves the value of the leaf EnableRelayAgent from the RelayAgent_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRelayAgent is set, it can
// safely use t.GetEnableRelayAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRelayAgent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6) GetEnableRelayAgent() bool {
	if t == nil || t.EnableRelayAgent == nil {
		return false
	}
	return *t.EnableRelayAgent
}

// SetEnableRelayAgent sets the value of the leaf EnableRelayAgent in the RelayAgent_Dhcpv6
// struct.
func (t *RelayAgent_Dhcpv6) SetEnableRelayAgent(v bool) {
	t.EnableRelayAgent = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableRelayAgent == nil {
		var v bool = false
		t.EnableRelayAgent = &v
	}
	t.Options.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6.
func (*RelayAgent_Dhcpv6) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_Interface struct {
	Counters      *RelayAgent_Dhcpv6_Interface_Counters     `path:"state/counters" module:"openconfig-relay-agent/openconfig-relay-agent"`
	Enable        *bool                                     `path:"state/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	HelperAddress []string                                  `path:"state/helper-address" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/helper-address" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Id            *string                                   `path:"state/id|id" module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent" shadow-path:"config/id|id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent"`
	InterfaceRef  *RelayAgent_Dhcpv6_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-relay-agent"`
	Options       *RelayAgent_Dhcpv6_Interface_Options      `path:"options" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateCounters() *RelayAgent_Dhcpv6_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &RelayAgent_Dhcpv6_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateInterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &RelayAgent_Dhcpv6_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateOptions() *RelayAgent_Dhcpv6_Interface_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &RelayAgent_Dhcpv6_Interface_Options{}
	return t.Options
}

// GetCounters returns the value of the Counters struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetCounters() *RelayAgent_Dhcpv6_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetInterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetOptions() *RelayAgent_Dhcpv6_Interface_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetHelperAddress retrieves the value of the leaf HelperAddress from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperAddress is set, it can
// safely use t.GetHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperAddress == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetHelperAddress() []string {
	if t == nil || t.HelperAddress == nil {
		return nil
	}
	return t.HelperAddress
}

// GetId retrieves the value of the leaf Id from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// SetEnable sets the value of the leaf Enable in the RelayAgent_Dhcpv6_Interface
// struct.
func (t *RelayAgent_Dhcpv6_Interface) SetEnable(v bool) {
	t.Enable = &v
}

// SetHelperAddress sets the value of the leaf HelperAddress in the RelayAgent_Dhcpv6_Interface
// struct.
func (t *RelayAgent_Dhcpv6_Interface) SetHelperAddress(v []string) {
	t.HelperAddress = v
}

// SetId sets the value of the leaf Id in the RelayAgent_Dhcpv6_Interface
// struct.
func (t *RelayAgent_Dhcpv6_Interface) SetId(v string) {
	t.Id = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Options.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the RelayAgent_Dhcpv6_Interface struct, which is a YANG list entry.
func (t *RelayAgent_Dhcpv6_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface.
func (*RelayAgent_Dhcpv6_Interface) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_Counters represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters struct {
	Dhcpv6AdverstiseSent      *uint64 `path:"dhcpv6-adverstise-sent" module:"openconfig-relay-agent"`
	Dhcpv6ConfirmReceived     *uint64 `path:"dhcpv6-confirm-received" module:"openconfig-relay-agent"`
	Dhcpv6DeclineReceived     *uint64 `path:"dhcpv6-decline-received" module:"openconfig-relay-agent"`
	Dhcpv6InfoRequestReceived *uint64 `path:"dhcpv6-info-request-received" module:"openconfig-relay-agent"`
	Dhcpv6RebindReceived      *uint64 `path:"dhcpv6-rebind-received" module:"openconfig-relay-agent"`
	Dhcpv6ReconfigureSent     *uint64 `path:"dhcpv6-reconfigure-sent" module:"openconfig-relay-agent"`
	Dhcpv6RelayForwSent       *uint64 `path:"dhcpv6-relay-forw-sent" module:"openconfig-relay-agent"`
	Dhcpv6RelayReplyReceived  *uint64 `path:"dhcpv6-relay-reply-received" module:"openconfig-relay-agent"`
	Dhcpv6ReleaseReceived     *uint64 `path:"dhcpv6-release-received" module:"openconfig-relay-agent"`
	Dhcpv6ReplySent           *uint64 `path:"dhcpv6-reply-sent" module:"openconfig-relay-agent"`
	Dhcpv6RequestReceived     *uint64 `path:"dhcpv6-request-received" module:"openconfig-relay-agent"`
	Dhcpv6SolicitReceived     *uint64 `path:"dhcpv6-solicit-received" module:"openconfig-relay-agent"`
	InvalidOpcode             *uint64 `path:"invalid-opcode" module:"openconfig-relay-agent"`
	InvalidOptions            *uint64 `path:"invalid-options" module:"openconfig-relay-agent"`
	TotalDropped              *uint64 `path:"total-dropped" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_Counters) IsYANGGoStruct() {}

// GetDhcpv6AdverstiseSent retrieves the value of the leaf Dhcpv6AdverstiseSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6AdverstiseSent is set, it can
// safely use t.GetDhcpv6AdverstiseSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6AdverstiseSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6AdverstiseSent() uint64 {
	if t == nil || t.Dhcpv6AdverstiseSent == nil {
		return 0
	}
	return *t.Dhcpv6AdverstiseSent
}

// GetDhcpv6ConfirmReceived retrieves the value of the leaf Dhcpv6ConfirmReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ConfirmReceived is set, it can
// safely use t.GetDhcpv6ConfirmReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ConfirmReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ConfirmReceived() uint64 {
	if t == nil || t.Dhcpv6ConfirmReceived == nil {
		return 0
	}
	return *t.Dhcpv6ConfirmReceived
}

// GetDhcpv6DeclineReceived retrieves the value of the leaf Dhcpv6DeclineReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6DeclineReceived is set, it can
// safely use t.GetDhcpv6DeclineReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6DeclineReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6DeclineReceived() uint64 {
	if t == nil || t.Dhcpv6DeclineReceived == nil {
		return 0
	}
	return *t.Dhcpv6DeclineReceived
}

// GetDhcpv6InfoRequestReceived retrieves the value of the leaf Dhcpv6InfoRequestReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6InfoRequestReceived is set, it can
// safely use t.GetDhcpv6InfoRequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6InfoRequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6InfoRequestReceived() uint64 {
	if t == nil || t.Dhcpv6InfoRequestReceived == nil {
		return 0
	}
	return *t.Dhcpv6InfoRequestReceived
}

// GetDhcpv6RebindReceived retrieves the value of the leaf Dhcpv6RebindReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RebindReceived is set, it can
// safely use t.GetDhcpv6RebindReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RebindReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RebindReceived() uint64 {
	if t == nil || t.Dhcpv6RebindReceived == nil {
		return 0
	}
	return *t.Dhcpv6RebindReceived
}

// GetDhcpv6ReconfigureSent retrieves the value of the leaf Dhcpv6ReconfigureSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReconfigureSent is set, it can
// safely use t.GetDhcpv6ReconfigureSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReconfigureSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReconfigureSent() uint64 {
	if t == nil || t.Dhcpv6ReconfigureSent == nil {
		return 0
	}
	return *t.Dhcpv6ReconfigureSent
}

// GetDhcpv6RelayForwSent retrieves the value of the leaf Dhcpv6RelayForwSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RelayForwSent is set, it can
// safely use t.GetDhcpv6RelayForwSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RelayForwSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RelayForwSent() uint64 {
	if t == nil || t.Dhcpv6RelayForwSent == nil {
		return 0
	}
	return *t.Dhcpv6RelayForwSent
}

// GetDhcpv6RelayReplyReceived retrieves the value of the leaf Dhcpv6RelayReplyReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RelayReplyReceived is set, it can
// safely use t.GetDhcpv6RelayReplyReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RelayReplyReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RelayReplyReceived() uint64 {
	if t == nil || t.Dhcpv6RelayReplyReceived == nil {
		return 0
	}
	return *t.Dhcpv6RelayReplyReceived
}

// GetDhcpv6ReleaseReceived retrieves the value of the leaf Dhcpv6ReleaseReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReleaseReceived is set, it can
// safely use t.GetDhcpv6ReleaseReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReleaseReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReleaseReceived() uint64 {
	if t == nil || t.Dhcpv6ReleaseReceived == nil {
		return 0
	}
	return *t.Dhcpv6ReleaseReceived
}

// GetDhcpv6ReplySent retrieves the value of the leaf Dhcpv6ReplySent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReplySent is set, it can
// safely use t.GetDhcpv6ReplySent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReplySent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReplySent() uint64 {
	if t == nil || t.Dhcpv6ReplySent == nil {
		return 0
	}
	return *t.Dhcpv6ReplySent
}

// GetDhcpv6RequestReceived retrieves the value of the leaf Dhcpv6RequestReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RequestReceived is set, it can
// safely use t.GetDhcpv6RequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RequestReceived() uint64 {
	if t == nil || t.Dhcpv6RequestReceived == nil {
		return 0
	}
	return *t.Dhcpv6RequestReceived
}

// GetDhcpv6SolicitReceived retrieves the value of the leaf Dhcpv6SolicitReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6SolicitReceived is set, it can
// safely use t.GetDhcpv6SolicitReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6SolicitReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6SolicitReceived() uint64 {
	if t == nil || t.Dhcpv6SolicitReceived == nil {
		return 0
	}
	return *t.Dhcpv6SolicitReceived
}

// GetInvalidOpcode retrieves the value of the leaf InvalidOpcode from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOpcode is set, it can
// safely use t.GetInvalidOpcode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOpcode == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetInvalidOpcode() uint64 {
	if t == nil || t.InvalidOpcode == nil {
		return 0
	}
	return *t.InvalidOpcode
}

// GetInvalidOptions retrieves the value of the leaf InvalidOptions from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOptions is set, it can
// safely use t.GetInvalidOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOptions == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetInvalidOptions() uint64 {
	if t == nil || t.InvalidOptions == nil {
		return 0
	}
	return *t.InvalidOptions
}

// GetTotalDropped retrieves the value of the leaf TotalDropped from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalDropped is set, it can
// safely use t.GetTotalDropped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalDropped == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetTotalDropped() uint64 {
	if t == nil || t.TotalDropped == nil {
		return 0
	}
	return *t.TotalDropped
}

// SetDhcpv6AdverstiseSent sets the value of the leaf Dhcpv6AdverstiseSent in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6AdverstiseSent(v uint64) {
	t.Dhcpv6AdverstiseSent = &v
}

// SetDhcpv6ConfirmReceived sets the value of the leaf Dhcpv6ConfirmReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6ConfirmReceived(v uint64) {
	t.Dhcpv6ConfirmReceived = &v
}

// SetDhcpv6DeclineReceived sets the value of the leaf Dhcpv6DeclineReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6DeclineReceived(v uint64) {
	t.Dhcpv6DeclineReceived = &v
}

// SetDhcpv6InfoRequestReceived sets the value of the leaf Dhcpv6InfoRequestReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6InfoRequestReceived(v uint64) {
	t.Dhcpv6InfoRequestReceived = &v
}

// SetDhcpv6RebindReceived sets the value of the leaf Dhcpv6RebindReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6RebindReceived(v uint64) {
	t.Dhcpv6RebindReceived = &v
}

// SetDhcpv6ReconfigureSent sets the value of the leaf Dhcpv6ReconfigureSent in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6ReconfigureSent(v uint64) {
	t.Dhcpv6ReconfigureSent = &v
}

// SetDhcpv6RelayForwSent sets the value of the leaf Dhcpv6RelayForwSent in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6RelayForwSent(v uint64) {
	t.Dhcpv6RelayForwSent = &v
}

// SetDhcpv6RelayReplyReceived sets the value of the leaf Dhcpv6RelayReplyReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6RelayReplyReceived(v uint64) {
	t.Dhcpv6RelayReplyReceived = &v
}

// SetDhcpv6ReleaseReceived sets the value of the leaf Dhcpv6ReleaseReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6ReleaseReceived(v uint64) {
	t.Dhcpv6ReleaseReceived = &v
}

// SetDhcpv6ReplySent sets the value of the leaf Dhcpv6ReplySent in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6ReplySent(v uint64) {
	t.Dhcpv6ReplySent = &v
}

// SetDhcpv6RequestReceived sets the value of the leaf Dhcpv6RequestReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6RequestReceived(v uint64) {
	t.Dhcpv6RequestReceived = &v
}

// SetDhcpv6SolicitReceived sets the value of the leaf Dhcpv6SolicitReceived in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetDhcpv6SolicitReceived(v uint64) {
	t.Dhcpv6SolicitReceived = &v
}

// SetInvalidOpcode sets the value of the leaf InvalidOpcode in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetInvalidOpcode(v uint64) {
	t.InvalidOpcode = &v
}

// SetInvalidOptions sets the value of the leaf InvalidOptions in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetInvalidOptions(v uint64) {
	t.InvalidOptions = &v
}

// SetTotalDropped sets the value of the leaf TotalDropped in the RelayAgent_Dhcpv6_Interface_Counters
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Counters) SetTotalDropped(v uint64) {
	t.TotalDropped = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_Counters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_Counters.
func (*RelayAgent_Dhcpv6_Interface_Counters) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/interface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/subinterface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_InterfaceRef.
func (*RelayAgent_Dhcpv6_Interface_InterfaceRef) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_Options represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options struct {
	EnableInterfaceId *bool   `path:"state/enable-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable-interface-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	EnableRemoteId    *bool   `path:"state/enable-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable-remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	InterfaceId       *string `path:"state/interface-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/interface-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	RemoteId          *string `path:"state/remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentInterfaceId   *string `path:"state/sent-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentRemoteId      *string `path:"state/sent-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_Options) IsYANGGoStruct() {}

// GetEnableInterfaceId retrieves the value of the leaf EnableInterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableInterfaceId is set, it can
// safely use t.GetEnableInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetEnableInterfaceId() bool {
	if t == nil || t.EnableInterfaceId == nil {
		return false
	}
	return *t.EnableInterfaceId
}

// GetEnableRemoteId retrieves the value of the leaf EnableRemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRemoteId is set, it can
// safely use t.GetEnableRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetEnableRemoteId() bool {
	if t == nil || t.EnableRemoteId == nil {
		return false
	}
	return *t.EnableRemoteId
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetRemoteId retrieves the value of the leaf RemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetSentInterfaceId retrieves the value of the leaf SentInterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentInterfaceId is set, it can
// safely use t.GetSentInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetSentInterfaceId() string {
	if t == nil || t.SentInterfaceId == nil {
		return ""
	}
	return *t.SentInterfaceId
}

// GetSentRemoteId retrieves the value of the leaf SentRemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentRemoteId is set, it can
// safely use t.GetSentRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetSentRemoteId() string {
	if t == nil || t.SentRemoteId == nil {
		return ""
	}
	return *t.SentRemoteId
}

// SetEnableInterfaceId sets the value of the leaf EnableInterfaceId in the RelayAgent_Dhcpv6_Interface_Options
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Options) SetEnableInterfaceId(v bool) {
	t.EnableInterfaceId = &v
}

// SetEnableRemoteId sets the value of the leaf EnableRemoteId in the RelayAgent_Dhcpv6_Interface_Options
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Options) SetEnableRemoteId(v bool) {
	t.EnableRemoteId = &v
}

// SetInterfaceId sets the value of the leaf InterfaceId in the RelayAgent_Dhcpv6_Interface_Options
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Options) SetInterfaceId(v string) {
	t.InterfaceId = &v
}

// SetRemoteId sets the value of the leaf RemoteId in the RelayAgent_Dhcpv6_Interface_Options
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Options) SetRemoteId(v string) {
	t.RemoteId = &v
}

// SetSentInterfaceId sets the value of the leaf SentInterfaceId in the RelayAgent_Dhcpv6_Interface_Options
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Options) SetSentInterfaceId(v string) {
	t.SentInterfaceId = &v
}

// SetSentRemoteId sets the value of the leaf SentRemoteId in the RelayAgent_Dhcpv6_Interface_Options
// struct.
func (t *RelayAgent_Dhcpv6_Interface_Options) SetSentRemoteId(v string) {
	t.SentRemoteId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableInterfaceId == nil {
		var v bool = false
		t.EnableInterfaceId = &v
	}
	if t.EnableRemoteId == nil {
		var v bool = false
		t.EnableRemoteId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Options) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Options) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_Options) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_Options.
func (*RelayAgent_Dhcpv6_Interface_Options) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Options represents the /openconfig-relay-agent/relay-agent/dhcpv6/options YANG schema element.
type RelayAgent_Dhcpv6_Options struct {
	EnableInterfaceId *bool `path:"state/enable-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable-interface-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	EnableRemoteId    *bool `path:"state/enable-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"config/enable-remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Options) IsYANGGoStruct() {}

// GetEnableInterfaceId retrieves the value of the leaf EnableInterfaceId from the RelayAgent_Dhcpv6_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableInterfaceId is set, it can
// safely use t.GetEnableInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Options) GetEnableInterfaceId() bool {
	if t == nil || t.EnableInterfaceId == nil {
		return false
	}
	return *t.EnableInterfaceId
}

// GetEnableRemoteId retrieves the value of the leaf EnableRemoteId from the RelayAgent_Dhcpv6_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRemoteId is set, it can
// safely use t.GetEnableRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Options) GetEnableRemoteId() bool {
	if t == nil || t.EnableRemoteId == nil {
		return false
	}
	return *t.EnableRemoteId
}

// SetEnableInterfaceId sets the value of the leaf EnableInterfaceId in the RelayAgent_Dhcpv6_Options
// struct.
func (t *RelayAgent_Dhcpv6_Options) SetEnableInterfaceId(v bool) {
	t.EnableInterfaceId = &v
}

// SetEnableRemoteId sets the value of the leaf EnableRemoteId in the RelayAgent_Dhcpv6_Options
// struct.
func (t *RelayAgent_Dhcpv6_Options) SetEnableRemoteId(v bool) {
	t.EnableRemoteId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableInterfaceId == nil {
		var v bool = false
		t.EnableInterfaceId = &v
	}
	if t.EnableRemoteId == nil {
		var v bool = false
		t.EnableRemoteId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Options) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Options) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Options) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Options.
func (*RelayAgent_Dhcpv6_Options) Î›BelongingModule() string {
	return "openconfig-relay-agent"
}

// Root represents the /root YANG schema element.
type Root struct {
	Acl                    *Acl                               `path:"acl" module:"openconfig-acl"`
	BgpGueIpv4GlobalPolicy map[string]*BgpGueIpv4GlobalPolicy `path:"bgp-gue-ipv4-policies/bgp-gue-ipv4-global-policy" module:"openconfig-bgp-gue/openconfig-bgp-gue"`
	BgpGueIpv6GlobalPolicy map[string]*BgpGueIpv6GlobalPolicy `path:"bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy" module:"openconfig-bgp-gue/openconfig-bgp-gue"`
	Component              map[string]*Component              `path:"components/component" module:"openconfig-platform/openconfig-platform"`
	DefinedSets            *DefinedSets                       `path:"defined-sets" module:"openconfig-defined-sets"`
	Interface              map[string]*Interface              `path:"interfaces/interface" module:"openconfig-interfaces/openconfig-interfaces"`
	Keychain               map[string]*Keychain               `path:"keychains/keychain" module:"openconfig-keychain/openconfig-keychain"`
	Lacp                   *Lacp                              `path:"lacp" module:"openconfig-lacp"`
	Lldp                   *Lldp                              `path:"lldp" module:"openconfig-lldp"`
	NetworkInstance        map[string]*NetworkInstance        `path:"network-instances/network-instance" module:"openconfig-network-instance/openconfig-network-instance"`
	Qos                    *Qos                               `path:"qos" module:"openconfig-qos"`
	RelayAgent             *RelayAgent                        `path:"relay-agent" module:"openconfig-relay-agent"`
	RoutingPolicy          *RoutingPolicy                     `path:"routing-policy" module:"openconfig-routing-policy"`
	Sampling               *Sampling                          `path:"sampling" module:"openconfig-sampling"`
	System                 *System                            `path:"system" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Root) IsYANGGoStruct() {}

// NewBgpGueIpv4GlobalPolicy creates a new entry in the BgpGueIpv4GlobalPolicy list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewBgpGueIpv4GlobalPolicy(Prefix string) (*BgpGueIpv4GlobalPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv4GlobalPolicy == nil {
		t.BgpGueIpv4GlobalPolicy = make(map[string]*BgpGueIpv4GlobalPolicy)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpGueIpv4GlobalPolicy", key)
	}

	t.BgpGueIpv4GlobalPolicy[key] = &BgpGueIpv4GlobalPolicy{
		Prefix: &Prefix,
	}

	return t.BgpGueIpv4GlobalPolicy[key], nil
}

// RenameBgpGueIpv4GlobalPolicy renames an entry in the list BgpGueIpv4GlobalPolicy within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameBgpGueIpv4GlobalPolicy(oldK, newK string) error {
	if _, ok := t.BgpGueIpv4GlobalPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpGueIpv4GlobalPolicy", newK)
	}

	e, ok := t.BgpGueIpv4GlobalPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpGueIpv4GlobalPolicy", oldK)
	}
	e.Prefix = &newK

	t.BgpGueIpv4GlobalPolicy[newK] = e
	delete(t.BgpGueIpv4GlobalPolicy, oldK)
	return nil
}

// GetOrCreateBgpGueIpv4GlobalPolicyMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateBgpGueIpv4GlobalPolicyMap() map[string]*BgpGueIpv4GlobalPolicy {
	if t.BgpGueIpv4GlobalPolicy == nil {
		t.BgpGueIpv4GlobalPolicy = make(map[string]*BgpGueIpv4GlobalPolicy)
	}
	return t.BgpGueIpv4GlobalPolicy
}

// GetOrCreateBgpGueIpv4GlobalPolicy retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateBgpGueIpv4GlobalPolicy(Prefix string) *BgpGueIpv4GlobalPolicy {

	key := Prefix

	if v, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpGueIpv4GlobalPolicy(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpGueIpv4GlobalPolicy got unexpected error: %v", err))
	}
	return v
}

// GetBgpGueIpv4GlobalPolicy retrieves the value with the specified key from
// the BgpGueIpv4GlobalPolicy map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetBgpGueIpv4GlobalPolicy(Prefix string) *BgpGueIpv4GlobalPolicy {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpGueIpv4GlobalPolicy deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteBgpGueIpv4GlobalPolicy(Prefix string) {
	key := Prefix

	delete(t.BgpGueIpv4GlobalPolicy, key)
}

// AppendBgpGueIpv4GlobalPolicy appends the supplied BgpGueIpv4GlobalPolicy struct to the
// list BgpGueIpv4GlobalPolicy of Root. If the key value(s) specified in
// the supplied BgpGueIpv4GlobalPolicy already exist in the list, an error is
// returned.
func (t *Root) AppendBgpGueIpv4GlobalPolicy(v *BgpGueIpv4GlobalPolicy) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv4GlobalPolicy == nil {
		t.BgpGueIpv4GlobalPolicy = make(map[string]*BgpGueIpv4GlobalPolicy)
	}

	if _, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list BgpGueIpv4GlobalPolicy %v", key)
	}

	t.BgpGueIpv4GlobalPolicy[key] = v
	return nil
}

// NewBgpGueIpv6GlobalPolicy creates a new entry in the BgpGueIpv6GlobalPolicy list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewBgpGueIpv6GlobalPolicy(Prefix string) (*BgpGueIpv6GlobalPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv6GlobalPolicy == nil {
		t.BgpGueIpv6GlobalPolicy = make(map[string]*BgpGueIpv6GlobalPolicy)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpGueIpv6GlobalPolicy", key)
	}

	t.BgpGueIpv6GlobalPolicy[key] = &BgpGueIpv6GlobalPolicy{
		Prefix: &Prefix,
	}

	return t.BgpGueIpv6GlobalPolicy[key], nil
}

// RenameBgpGueIpv6GlobalPolicy renames an entry in the list BgpGueIpv6GlobalPolicy within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameBgpGueIpv6GlobalPolicy(oldK, newK string) error {
	if _, ok := t.BgpGueIpv6GlobalPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpGueIpv6GlobalPolicy", newK)
	}

	e, ok := t.BgpGueIpv6GlobalPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpGueIpv6GlobalPolicy", oldK)
	}
	e.Prefix = &newK

	t.BgpGueIpv6GlobalPolicy[newK] = e
	delete(t.BgpGueIpv6GlobalPolicy, oldK)
	return nil
}

// GetOrCreateBgpGueIpv6GlobalPolicyMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateBgpGueIpv6GlobalPolicyMap() map[string]*BgpGueIpv6GlobalPolicy {
	if t.BgpGueIpv6GlobalPolicy == nil {
		t.BgpGueIpv6GlobalPolicy = make(map[string]*BgpGueIpv6GlobalPolicy)
	}
	return t.BgpGueIpv6GlobalPolicy
}

// GetOrCreateBgpGueIpv6GlobalPolicy retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateBgpGueIpv6GlobalPolicy(Prefix string) *BgpGueIpv6GlobalPolicy {

	key := Prefix

	if v, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpGueIpv6GlobalPolicy(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpGueIpv6GlobalPolicy got unexpected error: %v", err))
	}
	return v
}

// GetBgpGueIpv6GlobalPolicy retrieves the value with the specified key from
// the BgpGueIpv6GlobalPolicy map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetBgpGueIpv6GlobalPolicy(Prefix string) *BgpGueIpv6GlobalPolicy {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpGueIpv6GlobalPolicy deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteBgpGueIpv6GlobalPolicy(Prefix string) {
	key := Prefix

	delete(t.BgpGueIpv6GlobalPolicy, key)
}

// AppendBgpGueIpv6GlobalPolicy appends the supplied BgpGueIpv6GlobalPolicy struct to the
// list BgpGueIpv6GlobalPolicy of Root. If the key value(s) specified in
// the supplied BgpGueIpv6GlobalPolicy already exist in the list, an error is
// returned.
func (t *Root) AppendBgpGueIpv6GlobalPolicy(v *BgpGueIpv6GlobalPolicy) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv6GlobalPolicy == nil {
		t.BgpGueIpv6GlobalPolicy = make(map[string]*BgpGueIpv6GlobalPolicy)
	}

	if _, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list BgpGueIpv6GlobalPolicy %v", key)
	}

	t.BgpGueIpv6GlobalPolicy[key] = v
	return nil
}

// NewComponent creates a new entry in the Component list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewComponent(Name string) (*Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponentMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateComponentMap() map[string]*Component {
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}
	return t.Component
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateComponent(Name string) *Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetComponent(Name string) *Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// DeleteComponent deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteComponent(Name string) {
	key := Name

	delete(t.Component, key)
}

// AppendComponent appends the supplied Component struct to the
// list Component of Root. If the key value(s) specified in
// the supplied Component already exist in the list, an error is
// returned.
func (t *Root) AppendComponent(v *Component) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewInterface(Name string) (*Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateInterfaceMap() map[string]*Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateInterface(Name string) *Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetInterface(Name string) *Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Interface struct to the
// list Interface of Root. If the key value(s) specified in
// the supplied Interface already exist in the list, an error is
// returned.
func (t *Root) AppendInterface(v *Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewKeychain creates a new entry in the Keychain list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewKeychain(Name string) (*Keychain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &Keychain{
		Name: &Name,
	}

	return t.Keychain[key], nil
}

// RenameKeychain renames an entry in the list Keychain within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameKeychain(oldK, newK string) error {
	if _, ok := t.Keychain[newK]; ok {
		return fmt.Errorf("key %v already exists in Keychain", newK)
	}

	e, ok := t.Keychain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keychain", oldK)
	}
	e.Name = &newK

	t.Keychain[newK] = e
	delete(t.Keychain, oldK)
	return nil
}

// GetOrCreateKeychainMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateKeychainMap() map[string]*Keychain {
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}
	return t.Keychain
}

// GetOrCreateKeychain retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateKeychain(Name string) *Keychain {

	key := Name

	if v, ok := t.Keychain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeychain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeychain got unexpected error: %v", err))
	}
	return v
}

// GetKeychain retrieves the value with the specified key from
// the Keychain map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetKeychain(Name string) *Keychain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Keychain[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeychain deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteKeychain(Name string) {
	key := Name

	delete(t.Keychain, key)
}

// AppendKeychain appends the supplied Keychain struct to the
// list Keychain of Root. If the key value(s) specified in
// the supplied Keychain already exist in the list, an error is
// returned.
func (t *Root) AppendKeychain(v *Keychain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}

	if _, ok := t.Keychain[key]; ok {
		return fmt.Errorf("duplicate key for list Keychain %v", key)
	}

	t.Keychain[key] = v
	return nil
}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewNetworkInstance(Name string) (*NetworkInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// RenameNetworkInstance renames an entry in the list NetworkInstance within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameNetworkInstance(oldK, newK string) error {
	if _, ok := t.NetworkInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInstance", newK)
	}

	e, ok := t.NetworkInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInstance", oldK)
	}
	e.Name = &newK

	t.NetworkInstance[newK] = e
	delete(t.NetworkInstance, oldK)
	return nil
}

// GetOrCreateNetworkInstanceMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateNetworkInstanceMap() map[string]*NetworkInstance {
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}
	return t.NetworkInstance
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateNetworkInstance(Name string) *NetworkInstance {

	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetNetworkInstance(Name string) *NetworkInstance {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied NetworkInstance struct to the
// list NetworkInstance of Root. If the key value(s) specified in
// the supplied NetworkInstance already exist in the list, an error is
// returned.
func (t *Root) AppendNetworkInstance(v *NetworkInstance) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// GetOrCreateAcl retrieves the value of the Acl field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateAcl() *Acl {
	if t.Acl != nil {
		return t.Acl
	}
	t.Acl = &Acl{}
	return t.Acl
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateDefinedSets() *DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &DefinedSets{}
	return t.DefinedSets
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateLacp() *Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &Lacp{}
	return t.Lacp
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateLldp() *Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &Lldp{}
	return t.Lldp
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateQos() *Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &Qos{}
	return t.Qos
}

// GetOrCreateRelayAgent retrieves the value of the RelayAgent field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateRelayAgent() *RelayAgent {
	if t.RelayAgent != nil {
		return t.RelayAgent
	}
	t.RelayAgent = &RelayAgent{}
	return t.RelayAgent
}

// GetOrCreateRoutingPolicy retrieves the value of the RoutingPolicy field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateRoutingPolicy() *RoutingPolicy {
	if t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	t.RoutingPolicy = &RoutingPolicy{}
	return t.RoutingPolicy
}

// GetOrCreateSampling retrieves the value of the Sampling field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateSampling() *Sampling {
	if t.Sampling != nil {
		return t.Sampling
	}
	t.Sampling = &Sampling{}
	return t.Sampling
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateSystem() *System {
	if t.System != nil {
		return t.System
	}
	t.System = &System{}
	return t.System
}

// GetAcl returns the value of the Acl struct pointer
// from Root. If the receiver or the field Acl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetAcl() *Acl {
	if t != nil && t.Acl != nil {
		return t.Acl
	}
	return nil
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from Root. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetDefinedSets() *DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// GetLacp returns the value of the Lacp struct pointer
// from Root. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetLacp() *Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from Root. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetLldp() *Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from Root. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetQos() *Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetRelayAgent returns the value of the RelayAgent struct pointer
// from Root. If the receiver or the field RelayAgent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetRelayAgent() *RelayAgent {
	if t != nil && t.RelayAgent != nil {
		return t.RelayAgent
	}
	return nil
}

// GetRoutingPolicy returns the value of the RoutingPolicy struct pointer
// from Root. If the receiver or the field RoutingPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetRoutingPolicy() *RoutingPolicy {
	if t != nil && t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	return nil
}

// GetSampling returns the value of the Sampling struct pointer
// from Root. If the receiver or the field Sampling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetSampling() *Sampling {
	if t != nil && t.Sampling != nil {
		return t.Sampling
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from Root. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetSystem() *System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Acl.PopulateDefaults()
	t.DefinedSets.PopulateDefaults()
	t.Lacp.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.RelayAgent.PopulateDefaults()
	t.RoutingPolicy.PopulateDefaults()
	t.Sampling.PopulateDefaults()
	t.System.PopulateDefaults()
	for _, e := range t.BgpGueIpv4GlobalPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.BgpGueIpv6GlobalPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.Component {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Keychain {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Root) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of Root.
func (*Root) Î›BelongingModule() string {
	return ""
}

// RoutingPolicy represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicy struct {
	DefinedSets      *RoutingPolicy_DefinedSets                 `path:"defined-sets" module:"openconfig-routing-policy"`
	PolicyDefinition map[string]*RoutingPolicy_PolicyDefinition `path:"policy-definitions/policy-definition" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy) IsYANGGoStruct() {}

// NewPolicyDefinition creates a new entry in the PolicyDefinition list of the
// RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy) NewPolicyDefinition(Name string) (*RoutingPolicy_PolicyDefinition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyDefinition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyDefinition", key)
	}

	t.PolicyDefinition[key] = &RoutingPolicy_PolicyDefinition{
		Name: &Name,
	}

	return t.PolicyDefinition[key], nil
}

// RenamePolicyDefinition renames an entry in the list PolicyDefinition within
// the RoutingPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy) RenamePolicyDefinition(oldK, newK string) error {
	if _, ok := t.PolicyDefinition[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyDefinition", newK)
	}

	e, ok := t.PolicyDefinition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyDefinition", oldK)
	}
	e.Name = &newK

	t.PolicyDefinition[newK] = e
	delete(t.PolicyDefinition, oldK)
	return nil
}

// GetOrCreatePolicyDefinitionMap returns the list (map) from RoutingPolicy.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy) GetOrCreatePolicyDefinitionMap() map[string]*RoutingPolicy_PolicyDefinition {
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}
	return t.PolicyDefinition
}

// GetOrCreatePolicyDefinition retrieves the value with the specified keys from
// the receiver RoutingPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy) GetOrCreatePolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	key := Name

	if v, ok := t.PolicyDefinition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyDefinition(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyDefinition got unexpected error: %v", err))
	}
	return v
}

// GetPolicyDefinition retrieves the value with the specified key from
// the PolicyDefinition map field of RoutingPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy) GetPolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyDefinition[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyDefinition deletes the value with the specified keys from
// the receiver RoutingPolicy. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy) DeletePolicyDefinition(Name string) {
	key := Name

	delete(t.PolicyDefinition, key)
}

// AppendPolicyDefinition appends the supplied RoutingPolicy_PolicyDefinition struct to the
// list PolicyDefinition of RoutingPolicy. If the key value(s) specified in
// the supplied RoutingPolicy_PolicyDefinition already exist in the list, an error is
// returned.
func (t *RoutingPolicy) AppendPolicyDefinition(v *RoutingPolicy_PolicyDefinition) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	if _, ok := t.PolicyDefinition[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyDefinition %v", key)
	}

	t.PolicyDefinition[key] = v
	return nil
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy) GetOrCreateDefinedSets() *RoutingPolicy_DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &RoutingPolicy_DefinedSets{}
	return t.DefinedSets
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from RoutingPolicy. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy) GetDefinedSets() *RoutingPolicy_DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefinedSets.PopulateDefaults()
	for _, e := range t.PolicyDefinition {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy.
func (*RoutingPolicy) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSets struct {
	BgpDefinedSets *RoutingPolicy_DefinedSets_BgpDefinedSets         `path:"bgp-defined-sets" module:"openconfig-bgp-policy"`
	NeighborSet    map[string]*RoutingPolicy_DefinedSets_NeighborSet `path:"neighbor-sets/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	PrefixSet      map[string]*RoutingPolicy_DefinedSets_PrefixSet   `path:"prefix-sets/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	TagSet         map[string]*RoutingPolicy_DefinedSets_TagSet      `path:"tag-sets/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets) IsYANGGoStruct() {}

// NewNeighborSet creates a new entry in the NeighborSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewNeighborSet(Name string) (*RoutingPolicy_DefinedSets_NeighborSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NeighborSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NeighborSet", key)
	}

	t.NeighborSet[key] = &RoutingPolicy_DefinedSets_NeighborSet{
		Name: &Name,
	}

	return t.NeighborSet[key], nil
}

// RenameNeighborSet renames an entry in the list NeighborSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameNeighborSet(oldK, newK string) error {
	if _, ok := t.NeighborSet[newK]; ok {
		return fmt.Errorf("key %v already exists in NeighborSet", newK)
	}

	e, ok := t.NeighborSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NeighborSet", oldK)
	}
	e.Name = &newK

	t.NeighborSet[newK] = e
	delete(t.NeighborSet, oldK)
	return nil
}

// GetOrCreateNeighborSetMap returns the list (map) from RoutingPolicy_DefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets) GetOrCreateNeighborSetMap() map[string]*RoutingPolicy_DefinedSets_NeighborSet {
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}
	return t.NeighborSet
}

// GetOrCreateNeighborSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	key := Name

	if v, ok := t.NeighborSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighborSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighborSet got unexpected error: %v", err))
	}
	return v
}

// GetNeighborSet retrieves the value with the specified key from
// the NeighborSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NeighborSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighborSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteNeighborSet(Name string) {
	key := Name

	delete(t.NeighborSet, key)
}

// AppendNeighborSet appends the supplied RoutingPolicy_DefinedSets_NeighborSet struct to the
// list NeighborSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_NeighborSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendNeighborSet(v *RoutingPolicy_DefinedSets_NeighborSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	if _, ok := t.NeighborSet[key]; ok {
		return fmt.Errorf("duplicate key for list NeighborSet %v", key)
	}

	t.NeighborSet[key] = v
	return nil
}

// NewPrefixSet creates a new entry in the PrefixSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewPrefixSet(Name string) (*RoutingPolicy_DefinedSets_PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSet", key)
	}

	t.PrefixSet[key] = &RoutingPolicy_DefinedSets_PrefixSet{
		Name: &Name,
	}

	return t.PrefixSet[key], nil
}

// RenamePrefixSet renames an entry in the list PrefixSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenamePrefixSet(oldK, newK string) error {
	if _, ok := t.PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSet", newK)
	}

	e, ok := t.PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSet", oldK)
	}
	e.Name = &newK

	t.PrefixSet[newK] = e
	delete(t.PrefixSet, oldK)
	return nil
}

// GetOrCreatePrefixSetMap returns the list (map) from RoutingPolicy_DefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets) GetOrCreatePrefixSetMap() map[string]*RoutingPolicy_DefinedSets_PrefixSet {
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}
	return t.PrefixSet
}

// GetOrCreatePrefixSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreatePrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	key := Name

	if v, ok := t.PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSet retrieves the value with the specified key from
// the PrefixSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetPrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeletePrefixSet(Name string) {
	key := Name

	delete(t.PrefixSet, key)
}

// AppendPrefixSet appends the supplied RoutingPolicy_DefinedSets_PrefixSet struct to the
// list PrefixSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendPrefixSet(v *RoutingPolicy_DefinedSets_PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	if _, ok := t.PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSet %v", key)
	}

	t.PrefixSet[key] = v
	return nil
}

// NewTagSet creates a new entry in the TagSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewTagSet(Name string) (*RoutingPolicy_DefinedSets_TagSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TagSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TagSet", key)
	}

	t.TagSet[key] = &RoutingPolicy_DefinedSets_TagSet{
		Name: &Name,
	}

	return t.TagSet[key], nil
}

// RenameTagSet renames an entry in the list TagSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameTagSet(oldK, newK string) error {
	if _, ok := t.TagSet[newK]; ok {
		return fmt.Errorf("key %v already exists in TagSet", newK)
	}

	e, ok := t.TagSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TagSet", oldK)
	}
	e.Name = &newK

	t.TagSet[newK] = e
	delete(t.TagSet, oldK)
	return nil
}

// GetOrCreateTagSetMap returns the list (map) from RoutingPolicy_DefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets) GetOrCreateTagSetMap() map[string]*RoutingPolicy_DefinedSets_TagSet {
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}
	return t.TagSet
}

// GetOrCreateTagSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	key := Name

	if v, ok := t.TagSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTagSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTagSet got unexpected error: %v", err))
	}
	return v
}

// GetTagSet retrieves the value with the specified key from
// the TagSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TagSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteTagSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteTagSet(Name string) {
	key := Name

	delete(t.TagSet, key)
}

// AppendTagSet appends the supplied RoutingPolicy_DefinedSets_TagSet struct to the
// list TagSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_TagSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendTagSet(v *RoutingPolicy_DefinedSets_TagSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	if _, ok := t.TagSet[key]; ok {
		return fmt.Errorf("duplicate key for list TagSet %v", key)
	}

	t.TagSet[key] = v
	return nil
}

// GetOrCreateBgpDefinedSets retrieves the value of the BgpDefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_DefinedSets) GetOrCreateBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	t.BgpDefinedSets = &RoutingPolicy_DefinedSets_BgpDefinedSets{}
	return t.BgpDefinedSets
}

// GetBgpDefinedSets returns the value of the BgpDefinedSets struct pointer
// from RoutingPolicy_DefinedSets. If the receiver or the field BgpDefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_DefinedSets) GetBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t != nil && t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpDefinedSets.PopulateDefaults()
	for _, e := range t.NeighborSet {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixSet {
		e.PopulateDefaults()
	}
	for _, e := range t.TagSet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets.
func (*RoutingPolicy_DefinedSets) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets struct {
	AsPathSet       map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet       `path:"as-path-sets/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySet    map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet    `path:"community-sets/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySet map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet `path:"ext-community-sets/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) IsYANGGoStruct() {}

// NewAsPathSet creates a new entry in the AsPathSet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewAsPathSet(AsPathSetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	key := AsPathSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathSet", key)
	}

	t.AsPathSet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet{
		AsPathSetName: &AsPathSetName,
	}

	return t.AsPathSet[key], nil
}

// RenameAsPathSet renames an entry in the list AsPathSet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameAsPathSet(oldK, newK string) error {
	if _, ok := t.AsPathSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPathSet", newK)
	}

	e, ok := t.AsPathSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPathSet", oldK)
	}
	e.AsPathSetName = &newK

	t.AsPathSet[newK] = e
	delete(t.AsPathSet, oldK)
	return nil
}

// GetOrCreateAsPathSetMap returns the list (map) from RoutingPolicy_DefinedSets_BgpDefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateAsPathSetMap() map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}
	return t.AsPathSet
}

// GetOrCreateAsPathSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	key := AsPathSetName

	if v, ok := t.AsPathSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPathSet(AsPathSetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPathSet got unexpected error: %v", err))
	}
	return v
}

// GetAsPathSet retrieves the value with the specified key from
// the AsPathSet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	if t == nil {
		return nil
	}

	key := AsPathSetName

	if lm, ok := t.AsPathSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPathSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteAsPathSet(AsPathSetName string) {
	key := AsPathSetName

	delete(t.AsPathSet, key)
}

// AppendAsPathSet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct to the
// list AsPathSet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendAsPathSet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) error {
	if v.AsPathSetName == nil {
		return fmt.Errorf("invalid nil key received for AsPathSetName")
	}

	key := *v.AsPathSetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	if _, ok := t.AsPathSet[key]; ok {
		return fmt.Errorf("duplicate key for list AsPathSet %v", key)
	}

	t.AsPathSet[key] = v
	return nil
}

// NewCommunitySet creates a new entry in the CommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewCommunitySet(CommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	key := CommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommunitySet", key)
	}

	t.CommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet{
		CommunitySetName: &CommunitySetName,
	}

	return t.CommunitySet[key], nil
}

// RenameCommunitySet renames an entry in the list CommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameCommunitySet(oldK, newK string) error {
	if _, ok := t.CommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in CommunitySet", newK)
	}

	e, ok := t.CommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommunitySet", oldK)
	}
	e.CommunitySetName = &newK

	t.CommunitySet[newK] = e
	delete(t.CommunitySet, oldK)
	return nil
}

// GetOrCreateCommunitySetMap returns the list (map) from RoutingPolicy_DefinedSets_BgpDefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateCommunitySetMap() map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}
	return t.CommunitySet
}

// GetOrCreateCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	key := CommunitySetName

	if v, ok := t.CommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunitySet(CommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetCommunitySet retrieves the value with the specified key from
// the CommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	if t == nil {
		return nil
	}

	key := CommunitySetName

	if lm, ok := t.CommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteCommunitySet(CommunitySetName string) {
	key := CommunitySetName

	delete(t.CommunitySet, key)
}

// AppendCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct to the
// list CommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) error {
	if v.CommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for CommunitySetName")
	}

	key := *v.CommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	if _, ok := t.CommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list CommunitySet %v", key)
	}

	t.CommunitySet[key] = v
	return nil
}

// NewExtCommunitySet creates a new entry in the ExtCommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewExtCommunitySet(ExtCommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	key := ExtCommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExtCommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExtCommunitySet", key)
	}

	t.ExtCommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet{
		ExtCommunitySetName: &ExtCommunitySetName,
	}

	return t.ExtCommunitySet[key], nil
}

// RenameExtCommunitySet renames an entry in the list ExtCommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameExtCommunitySet(oldK, newK string) error {
	if _, ok := t.ExtCommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in ExtCommunitySet", newK)
	}

	e, ok := t.ExtCommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExtCommunitySet", oldK)
	}
	e.ExtCommunitySetName = &newK

	t.ExtCommunitySet[newK] = e
	delete(t.ExtCommunitySet, oldK)
	return nil
}

// GetOrCreateExtCommunitySetMap returns the list (map) from RoutingPolicy_DefinedSets_BgpDefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateExtCommunitySetMap() map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}
	return t.ExtCommunitySet
}

// GetOrCreateExtCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	key := ExtCommunitySetName

	if v, ok := t.ExtCommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtCommunitySet(ExtCommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetExtCommunitySet retrieves the value with the specified key from
// the ExtCommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	if t == nil {
		return nil
	}

	key := ExtCommunitySetName

	if lm, ok := t.ExtCommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteExtCommunitySet(ExtCommunitySetName string) {
	key := ExtCommunitySetName

	delete(t.ExtCommunitySet, key)
}

// AppendExtCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct to the
// list ExtCommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendExtCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) error {
	if v.ExtCommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for ExtCommunitySetName")
	}

	key := *v.ExtCommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	if _, ok := t.ExtCommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list ExtCommunitySet %v", key)
	}

	t.ExtCommunitySet[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AsPathSet {
		e.PopulateDefaults()
	}
	for _, e := range t.CommunitySet {
		e.PopulateDefaults()
	}
	for _, e := range t.ExtCommunitySet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct {
	AsPathSetMember []string `path:"state/as-path-set-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/as-path-set-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathSetName   *string  `path:"state/as-path-set-name|as-path-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/as-path-set-name|as-path-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) IsYANGGoStruct() {}

// GetAsPathSetMember retrieves the value of the leaf AsPathSetMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetMember is set, it can
// safely use t.GetAsPathSetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetMember() []string {
	if t == nil || t.AsPathSetMember == nil {
		return nil
	}
	return t.AsPathSetMember
}

// GetAsPathSetName retrieves the value of the leaf AsPathSetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetName is set, it can
// safely use t.GetAsPathSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetName() string {
	if t == nil || t.AsPathSetName == nil {
		return ""
	}
	return *t.AsPathSetName
}

// SetAsPathSetMember sets the value of the leaf AsPathSetMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) SetAsPathSetMember(v []string) {
	t.AsPathSetMember = v
}

// SetAsPathSetName sets the value of the leaf AsPathSetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) SetAsPathSetName(v string) {
	t.AsPathSetName = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.AsPathSetName == nil {
		return nil, fmt.Errorf("nil value for key AsPathSetName")
	}

	return map[string]interface{}{
		"as-path-set-name": *t.AsPathSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct {
	CommunityMember  []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union `path:"state/community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySetName *string                                                                       `path:"state/community-set-name|community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/community-set-name|community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsType                                             `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) IsYANGGoStruct() {}

// GetCommunityMember retrieves the value of the leaf CommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityMember is set, it can
// safely use t.GetCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunityMember() []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union {
	if t == nil || t.CommunityMember == nil {
		return nil
	}
	return t.CommunityMember
}

// GetCommunitySetName retrieves the value of the leaf CommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetName is set, it can
// safely use t.GetCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunitySetName() string {
	if t == nil || t.CommunitySetName == nil {
		return ""
	}
	return *t.CommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetCommunityMember sets the value of the leaf CommunityMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetCommunityMember(v []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union) {
	t.CommunityMember = v
}

// SetCommunitySetName sets the value of the leaf CommunitySetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetCommunitySetName(v string) {
	t.CommunitySetName = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.CommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key CommunitySetName")
	}

	return map[string]interface{}{
		"community-set-name": *t.CommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct {
	ExtCommunityMember  []string                          `path:"state/ext-community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySetName *string                           `path:"state/ext-community-set-name|ext-community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/ext-community-set-name|ext-community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions     E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) IsYANGGoStruct() {}

// GetExtCommunityMember retrieves the value of the leaf ExtCommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityMember is set, it can
// safely use t.GetExtCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunityMember() []string {
	if t == nil || t.ExtCommunityMember == nil {
		return nil
	}
	return t.ExtCommunityMember
}

// GetExtCommunitySetName retrieves the value of the leaf ExtCommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetName is set, it can
// safely use t.GetExtCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunitySetName() string {
	if t == nil || t.ExtCommunitySetName == nil {
		return ""
	}
	return *t.ExtCommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetExtCommunityMember sets the value of the leaf ExtCommunityMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetExtCommunityMember(v []string) {
	t.ExtCommunityMember = v
}

// SetExtCommunitySetName sets the value of the leaf ExtCommunitySetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetExtCommunitySetName(v string) {
	t.ExtCommunitySetName = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.ExtCommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key ExtCommunitySetName")
	}

	return map[string]interface{}{
		"ext-community-set-name": *t.ExtCommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_NeighborSet represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet struct {
	Address []string `path:"state/address" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/address" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name    *string  `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_NeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_NeighborSet) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetAddress sets the value of the leaf Address in the RoutingPolicy_DefinedSets_NeighborSet
// struct.
func (t *RoutingPolicy_DefinedSets_NeighborSet) SetAddress(v []string) {
	t.Address = v
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_NeighborSet
// struct.
func (t *RoutingPolicy_DefinedSets_NeighborSet) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_NeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_NeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_DefinedSets_NeighborSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_NeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_NeighborSet.
func (*RoutingPolicy_DefinedSets_NeighborSet) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet struct {
	Mode   E_PrefixSet_Mode                                                                               `path:"state/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name   *string                                                                                        `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Prefix map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix `path:"prefixes/prefix" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet) IsYANGGoStruct() {}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key represents the key for list Prefix of element /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key struct {
	IpPrefix        string `path:"ip-prefix"`
	MasklengthRange string `path:"masklength-range"`
}

// IsYANGGoKeyStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key key struct.
func (t RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ip-prefix":        t.IpPrefix,
		"masklength-range": t.MasklengthRange,
	}, nil
}

// NewPrefix creates a new entry in the Prefix list of the
// RoutingPolicy_DefinedSets_PrefixSet struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_PrefixSet) NewPrefix(IpPrefix string, MasklengthRange string) (*RoutingPolicy_DefinedSets_PrefixSet_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &RoutingPolicy_DefinedSets_PrefixSet_Prefix{
		IpPrefix:        &IpPrefix,
		MasklengthRange: &MasklengthRange,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the RoutingPolicy_DefinedSets_PrefixSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) RenamePrefix(oldK, newK RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.MasklengthRange = &newK.MasklengthRange

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from RoutingPolicy_DefinedSets_PrefixSet.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetOrCreatePrefixMap() map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetOrCreatePrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, MasklengthRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of RoutingPolicy_DefinedSets_PrefixSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetPrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	if t == nil {
		return nil
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_PrefixSet) DeletePrefix(IpPrefix string, MasklengthRange string) {
	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix struct to the
// list Prefix of RoutingPolicy_DefinedSets_PrefixSet. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_PrefixSet) AppendPrefix(v *RoutingPolicy_DefinedSets_PrefixSet_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.MasklengthRange == nil {
		return fmt.Errorf("invalid nil key for MasklengthRange")
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        *v.IpPrefix,
		MasklengthRange: *v.MasklengthRange,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetMode() E_PrefixSet_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetMode sets the value of the leaf Mode in the RoutingPolicy_DefinedSets_PrefixSet
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet) SetMode(v E_PrefixSet_Mode) {
	t.Mode = v
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_PrefixSet
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet.
func (*RoutingPolicy_DefinedSets_PrefixSet) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix struct {
	IpPrefix        *string `path:"state/ip-prefix|ip-prefix" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/ip-prefix|ip-prefix" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	MasklengthRange *string `path:"state/masklength-range|masklength-range" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/masklength-range|masklength-range" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMasklengthRange retrieves the value of the leaf MasklengthRange from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasklengthRange is set, it can
// safely use t.GetMasklengthRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasklengthRange == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetMasklengthRange() string {
	if t == nil || t.MasklengthRange == nil {
		return ""
	}
	return *t.MasklengthRange
}

// SetIpPrefix sets the value of the leaf IpPrefix in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) SetIpPrefix(v string) {
	t.IpPrefix = &v
}

// SetMasklengthRange sets the value of the leaf MasklengthRange in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) SetMasklengthRange(v string) {
	t.MasklengthRange = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet_Prefix struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MasklengthRange == nil {
		return nil, fmt.Errorf("nil value for key MasklengthRange")
	}

	return map[string]interface{}{
		"ip-prefix":        *t.IpPrefix,
		"masklength-range": *t.MasklengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet_Prefix.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_TagSet represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSet struct {
	Name     *string                                           `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	TagValue []RoutingPolicy_DefinedSets_TagSet_TagValue_Union `path:"state/tag-value" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-value" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_TagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_TagSet) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTagValue retrieves the value of the leaf TagValue from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagValue is set, it can
// safely use t.GetTagValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagValue == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetTagValue() []RoutingPolicy_DefinedSets_TagSet_TagValue_Union {
	if t == nil || t.TagValue == nil {
		return nil
	}
	return t.TagValue
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_TagSet
// struct.
func (t *RoutingPolicy_DefinedSets_TagSet) SetName(v string) {
	t.Name = &v
}

// SetTagValue sets the value of the leaf TagValue in the RoutingPolicy_DefinedSets_TagSet
// struct.
func (t *RoutingPolicy_DefinedSets_TagSet) SetTagValue(v []RoutingPolicy_DefinedSets_TagSet_TagValue_Union) {
	t.TagValue = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_TagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_TagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_DefinedSets_TagSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_TagSet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_TagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_TagSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_TagSet.
func (*RoutingPolicy_DefinedSets_TagSet) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinition struct {
	Name      *string                                              `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Statement *RoutingPolicy_PolicyDefinition_Statement_OrderedMap `path:"statements/statement" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the RoutingPolicy_PolicyDefinition
// struct.
func (t *RoutingPolicy_PolicyDefinition) SetName(v string) {
	t.Name = &v
}

// GetOrCreateStatementMap returns the ordered map field
// Statement from RoutingPolicy_PolicyDefinition.
//
// It initializes the field if not already initialized.
func (s *RoutingPolicy_PolicyDefinition) GetOrCreateStatementMap() *RoutingPolicy_PolicyDefinition_Statement_OrderedMap {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement
}

// AppendNewStatement creates a new entry in the Statement
// ordered map of the RoutingPolicy_PolicyDefinition struct. The keys of the list are
// populated from the input arguments.
func (s *RoutingPolicy_PolicyDefinition) AppendNewStatement(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement.AppendNew(Name)
}

// AppendStatement appends the supplied RoutingPolicy_PolicyDefinition_Statement struct
// to the list Statement of RoutingPolicy_PolicyDefinition. If the key value(s)
// specified in the supplied RoutingPolicy_PolicyDefinition_Statement already exist in the list, an
// error is returned.
func (s *RoutingPolicy_PolicyDefinition) AppendStatement(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement.Append(v)
}

// GetStatement retrieves the value with the specified key from the
// Statement map field of RoutingPolicy_PolicyDefinition. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *RoutingPolicy_PolicyDefinition) GetStatement(Name string) *RoutingPolicy_PolicyDefinition_Statement {
	if s == nil {
		return nil
	}
	key := Name
	return s.Statement.Get(key)
}

// DeleteStatement deletes the value with the specified keys from
// the receiver RoutingPolicy_PolicyDefinition. If there is no such element, the
// function is a no-op.
func (s *RoutingPolicy_PolicyDefinition) DeleteStatement(Name string) bool {
	key := Name
	return s.Statement.Delete(key)
}

// RoutingPolicy_PolicyDefinition_Statement_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement.
type RoutingPolicy_PolicyDefinition_Statement_OrderedMap struct {
	keys     []string
	valueMap map[string]*RoutingPolicy_PolicyDefinition_Statement
}

// IsYANGOrderedList ensures that RoutingPolicy_PolicyDefinition_Statement_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*RoutingPolicy_PolicyDefinition_Statement_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*RoutingPolicy_PolicyDefinition_Statement{}
	}
}

// Keys returns a copy of the list's keys.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Values() []*RoutingPolicy_PolicyDefinition_Statement {
	if o == nil {
		return nil
	}
	var values []*RoutingPolicy_PolicyDefinition_Statement
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of RoutingPolicy_PolicyDefinition_Statement_OrderedMap
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Get(key string) *RoutingPolicy_PolicyDefinition_Statement {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a RoutingPolicy_PolicyDefinition_Statement, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Append(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append RoutingPolicy_PolicyDefinition_Statement")
	}
	if v == nil {
		return fmt.Errorf("nil RoutingPolicy_PolicyDefinition_Statement")
	}
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new RoutingPolicy_PolicyDefinition_Statement, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) AppendNew(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append RoutingPolicy_PolicyDefinition_Statement")
	}
	key := Name

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &RoutingPolicy_PolicyDefinition_Statement{
		Name: &Name,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Statement.Values() {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition.
func (*RoutingPolicy_PolicyDefinition) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement struct {
	Actions    *RoutingPolicy_PolicyDefinition_Statement_Actions    `path:"actions" module:"openconfig-routing-policy"`
	Conditions *RoutingPolicy_PolicyDefinition_Statement_Conditions `path:"conditions" module:"openconfig-routing-policy"`
	Name       *string                                              `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &RoutingPolicy_PolicyDefinition_Statement_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition_Statement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the RoutingPolicy_PolicyDefinition_Statement
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.Conditions.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition_Statement struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition_Statement) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement.
func (*RoutingPolicy_PolicyDefinition_Statement) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions struct {
	BgpActions   *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions  `path:"bgp-actions" module:"openconfig-bgp-policy"`
	IsisActions  *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions `path:"isis-actions" module:"openconfig-isis-policy"`
	OspfActions  *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions `path:"ospf-actions" module:"openconfig-ospf-policy"`
	PolicyResult E_RoutingPolicy_PolicyResultType                              `path:"state/policy-result" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/policy-result" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	SetTag       *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag      `path:"set-tag" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) IsYANGGoStruct() {}

// GetOrCreateBgpActions retrieves the value of the BgpActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t.BgpActions != nil {
		return t.BgpActions
	}
	t.BgpActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions{}
	return t.BgpActions
}

// GetOrCreateIsisActions retrieves the value of the IsisActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateIsisActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions {
	if t.IsisActions != nil {
		return t.IsisActions
	}
	t.IsisActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions{}
	return t.IsisActions
}

// GetOrCreateOspfActions retrieves the value of the OspfActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateOspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions {
	if t.OspfActions != nil {
		return t.OspfActions
	}
	t.OspfActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions{}
	return t.OspfActions
}

// GetOrCreateSetTag retrieves the value of the SetTag field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t.SetTag != nil {
		return t.SetTag
	}
	t.SetTag = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag{}
	return t.SetTag
}

// GetBgpActions returns the value of the BgpActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field BgpActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t != nil && t.BgpActions != nil {
		return t.BgpActions
	}
	return nil
}

// GetIsisActions returns the value of the IsisActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field IsisActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetIsisActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions {
	if t != nil && t.IsisActions != nil {
		return t.IsisActions
	}
	return nil
}

// GetOspfActions returns the value of the OspfActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field OspfActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions {
	if t != nil && t.OspfActions != nil {
		return t.OspfActions
	}
	return nil
}

// GetSetTag returns the value of the SetTag struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field SetTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t != nil && t.SetTag != nil {
		return t.SetTag
	}
	return nil
}

// GetPolicyResult retrieves the value of the leaf PolicyResult from the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyResult is set, it can
// safely use t.GetPolicyResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyResult == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetPolicyResult() E_RoutingPolicy_PolicyResultType {
	if t == nil || t.PolicyResult == 0 {
		return RoutingPolicy_PolicyResultType_NEXT_STATEMENT
	}
	return t.PolicyResult
}

// SetPolicyResult sets the value of the leaf PolicyResult in the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) SetPolicyResult(v E_RoutingPolicy_PolicyResultType) {
	t.PolicyResult = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PolicyResult == 0 {
		t.PolicyResult = RoutingPolicy_PolicyResultType_NEXT_STATEMENT
	}
	t.BgpActions.PopulateDefaults()
	t.IsisActions.PopulateDefaults()
	t.OspfActions.PopulateDefaults()
	t.SetTag.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions struct {
	SetAsPathPrepend *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend `path:"set-as-path-prepend" module:"openconfig-bgp-policy"`
	SetCommunity     *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity     `path:"set-community" module:"openconfig-bgp-policy"`
	SetExtCommunity  *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity  `path:"set-ext-community" module:"openconfig-bgp-policy"`
	SetLocalPref     *uint32                                                                       `path:"state/set-local-pref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-local-pref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetMed           RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union      `path:"state/set-med" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-med" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetMedAction     E_BgpPolicy_BgpSetMedAction                                                   `path:"state/set-med-action" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-med-action" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetNextHop       RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union  `path:"state/set-next-hop" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-next-hop" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetRouteOrigin   E_BgpTypes_BgpOriginAttrType                                                  `path:"state/set-route-origin" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-route-origin" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) IsYANGGoStruct() {}

// GetOrCreateSetAsPathPrepend retrieves the value of the SetAsPathPrepend field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	t.SetAsPathPrepend = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend{}
	return t.SetAsPathPrepend
}

// GetOrCreateSetCommunity retrieves the value of the SetCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t.SetCommunity != nil {
		return t.SetCommunity
	}
	t.SetCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity{}
	return t.SetCommunity
}

// GetOrCreateSetExtCommunity retrieves the value of the SetExtCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	t.SetExtCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity{}
	return t.SetExtCommunity
}

// GetSetAsPathPrepend returns the value of the SetAsPathPrepend struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetAsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t != nil && t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	return nil
}

// GetSetCommunity returns the value of the SetCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t != nil && t.SetCommunity != nil {
		return t.SetCommunity
	}
	return nil
}

// GetSetExtCommunity returns the value of the SetExtCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetExtCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t != nil && t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	return nil
}

// GetSetLocalPref retrieves the value of the leaf SetLocalPref from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetLocalPref is set, it can
// safely use t.GetSetLocalPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetLocalPref == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetLocalPref() uint32 {
	if t == nil || t.SetLocalPref == nil {
		return 0
	}
	return *t.SetLocalPref
}

// GetSetMed retrieves the value of the leaf SetMed from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMed is set, it can
// safely use t.GetSetMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMed == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetMed() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union {
	if t == nil || t.SetMed == nil {
		return nil
	}
	return t.SetMed
}

// GetSetMedAction retrieves the value of the leaf SetMedAction from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMedAction is set, it can
// safely use t.GetSetMedAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMedAction == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetMedAction() E_BgpPolicy_BgpSetMedAction {
	if t == nil || t.SetMedAction == 0 {
		return 0
	}
	return t.SetMedAction
}

// GetSetNextHop retrieves the value of the leaf SetNextHop from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetNextHop is set, it can
// safely use t.GetSetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetNextHop == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetNextHop() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union {
	if t == nil || t.SetNextHop == nil {
		return nil
	}
	return t.SetNextHop
}

// GetSetRouteOrigin retrieves the value of the leaf SetRouteOrigin from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetRouteOrigin is set, it can
// safely use t.GetSetRouteOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetRouteOrigin == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetRouteOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.SetRouteOrigin == 0 {
		return 0
	}
	return t.SetRouteOrigin
}

// SetSetLocalPref sets the value of the leaf SetLocalPref in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetLocalPref(v uint32) {
	t.SetLocalPref = &v
}

// SetSetMed sets the value of the leaf SetMed in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetMed(v RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union) {
	t.SetMed = v
}

// SetSetMedAction sets the value of the leaf SetMedAction in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetMedAction(v E_BgpPolicy_BgpSetMedAction) {
	t.SetMedAction = v
}

// SetSetNextHop sets the value of the leaf SetNextHop in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetNextHop(v RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union) {
	t.SetNextHop = v
}

// SetSetRouteOrigin sets the value of the leaf SetRouteOrigin in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetRouteOrigin(v E_BgpTypes_BgpOriginAttrType) {
	t.SetRouteOrigin = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SetAsPathPrepend.PopulateDefaults()
	t.SetCommunity.PopulateDefaults()
	t.SetExtCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend struct {
	Asn     *uint32 `path:"state/asn" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/asn" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RepeatN *uint8  `path:"state/repeat-n" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/repeat-n" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) IsYANGGoStruct() {
}

// GetAsn retrieves the value of the leaf Asn from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn is set, it can
// safely use t.GetAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetAsn() uint32 {
	if t == nil || t.Asn == nil {
		return 0
	}
	return *t.Asn
}

// GetRepeatN retrieves the value of the leaf RepeatN from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatN is set, it can
// safely use t.GetRepeatN() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatN == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetRepeatN() uint8 {
	if t == nil || t.RepeatN == nil {
		return 0
	}
	return *t.RepeatN
}

// SetAsn sets the value of the leaf Asn in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) SetAsn(v uint32) {
	t.Asn = &v
}

// SetRepeatN sets the value of the leaf RepeatN in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) SetRepeatN(v uint8) {
	t.RepeatN = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_SetCommunity_Method                                                               `path:"state/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                               `path:"state/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// SetMethod sets the value of the leaf Method in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) SetMethod(v E_SetCommunity_Method) {
	t.Method = v
}

// SetOptions sets the value of the leaf Options in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) SetOptions(v E_BgpPolicy_BgpSetCommunityOptionType) {
	t.Options = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union `path:"state/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// SetCommunities sets the value of the leaf Communities in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) SetCommunities(v []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union) {
	t.Communities = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference struct {
	CommunitySetRef  *string  `path:"state/community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySetRefs []string `path:"state/community-set-refs" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set-refs" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) IsYANGGoStruct() {
}

// GetCommunitySetRef retrieves the value of the leaf CommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRef is set, it can
// safely use t.GetCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRef() string {
	if t == nil || t.CommunitySetRef == nil {
		return ""
	}
	return *t.CommunitySetRef
}

// GetCommunitySetRefs retrieves the value of the leaf CommunitySetRefs from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRefs is set, it can
// safely use t.GetCommunitySetRefs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRefs == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRefs() []string {
	if t == nil || t.CommunitySetRefs == nil {
		return nil
	}
	return t.CommunitySetRefs
}

// SetCommunitySetRef sets the value of the leaf CommunitySetRef in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) SetCommunitySetRef(v string) {
	t.CommunitySetRef = &v
}

// SetCommunitySetRefs sets the value of the leaf CommunitySetRefs in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) SetCommunitySetRefs(v []string) {
	t.CommunitySetRefs = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_SetCommunity_Method                                                                  `path:"state/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                                  `path:"state/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) IsYANGGoStruct() {
}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// SetMethod sets the value of the leaf Method in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) SetMethod(v E_SetCommunity_Method) {
	t.Method = v
}

// SetOptions sets the value of the leaf Options in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) SetOptions(v E_BgpPolicy_BgpSetCommunityOptionType) {
	t.Options = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union `path:"state/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// SetCommunities sets the value of the leaf Communities in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) SetCommunities(v []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union) {
	t.Communities = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference struct {
	ExtCommunitySetRef  *string  `path:"state/ext-community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySetRefs []string `path:"state/ext-community-set-refs" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set-refs" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) IsYANGGoStruct() {
}

// GetExtCommunitySetRef retrieves the value of the leaf ExtCommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRef is set, it can
// safely use t.GetExtCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRef() string {
	if t == nil || t.ExtCommunitySetRef == nil {
		return ""
	}
	return *t.ExtCommunitySetRef
}

// GetExtCommunitySetRefs retrieves the value of the leaf ExtCommunitySetRefs from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRefs is set, it can
// safely use t.GetExtCommunitySetRefs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRefs == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRefs() []string {
	if t == nil || t.ExtCommunitySetRefs == nil {
		return nil
	}
	return t.ExtCommunitySetRefs
}

// SetExtCommunitySetRef sets the value of the leaf ExtCommunitySetRef in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) SetExtCommunitySetRef(v string) {
	t.ExtCommunitySetRef = &v
}

// SetExtCommunitySetRefs sets the value of the leaf ExtCommunitySetRefs in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) SetExtCommunitySetRefs(v []string) {
	t.ExtCommunitySetRefs = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions struct {
	SetLevel           *uint8                  `path:"state/set-level" module:"openconfig-isis-policy/openconfig-isis-policy" shadow-path:"config/set-level" shadow-module:"openconfig-isis-policy/openconfig-isis-policy"`
	SetMetric          *uint32                 `path:"state/set-metric" module:"openconfig-isis-policy/openconfig-isis-policy" shadow-path:"config/set-metric" shadow-module:"openconfig-isis-policy/openconfig-isis-policy"`
	SetMetricStyleType E_IsisTypes_MetricStyle `path:"state/set-metric-style-type" module:"openconfig-isis-policy/openconfig-isis-policy" shadow-path:"config/set-metric-style-type" shadow-module:"openconfig-isis-policy/openconfig-isis-policy"`
	SetMetricType      E_IsisTypes_MetricType  `path:"state/set-metric-type" module:"openconfig-isis-policy/openconfig-isis-policy" shadow-path:"config/set-metric-type" shadow-module:"openconfig-isis-policy/openconfig-isis-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) IsYANGGoStruct() {}

// GetSetLevel retrieves the value of the leaf SetLevel from the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetLevel is set, it can
// safely use t.GetSetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetLevel == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) GetSetLevel() uint8 {
	if t == nil || t.SetLevel == nil {
		return 0
	}
	return *t.SetLevel
}

// GetSetMetric retrieves the value of the leaf SetMetric from the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMetric is set, it can
// safely use t.GetSetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMetric == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) GetSetMetric() uint32 {
	if t == nil || t.SetMetric == nil {
		return 0
	}
	return *t.SetMetric
}

// GetSetMetricStyleType retrieves the value of the leaf SetMetricStyleType from the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMetricStyleType is set, it can
// safely use t.GetSetMetricStyleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMetricStyleType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) GetSetMetricStyleType() E_IsisTypes_MetricStyle {
	if t == nil || t.SetMetricStyleType == 0 {
		return 0
	}
	return t.SetMetricStyleType
}

// GetSetMetricType retrieves the value of the leaf SetMetricType from the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMetricType is set, it can
// safely use t.GetSetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMetricType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) GetSetMetricType() E_IsisTypes_MetricType {
	if t == nil || t.SetMetricType == 0 {
		return 0
	}
	return t.SetMetricType
}

// SetSetLevel sets the value of the leaf SetLevel in the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) SetSetLevel(v uint8) {
	t.SetLevel = &v
}

// SetSetMetric sets the value of the leaf SetMetric in the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) SetSetMetric(v uint32) {
	t.SetMetric = &v
}

// SetSetMetricStyleType sets the value of the leaf SetMetricStyleType in the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) SetSetMetricStyleType(v E_IsisTypes_MetricStyle) {
	t.SetMetricStyleType = v
}

// SetSetMetricType sets the value of the leaf SetMetricType in the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) SetSetMetricType(v E_IsisTypes_MetricType) {
	t.SetMetricType = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions) Î›BelongingModule() string {
	return "openconfig-isis-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions struct {
	SetArea   RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union `path:"state/set-area" module:"openconfig-ospf-policy/openconfig-ospf-policy" shadow-path:"config/set-area" shadow-module:"openconfig-ospf-policy/openconfig-ospf-policy"`
	SetMetric *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric    `path:"set-metric" module:"openconfig-ospf-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) IsYANGGoStruct() {}

// GetOrCreateSetMetric retrieves the value of the SetMetric field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) GetOrCreateSetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric {
	if t.SetMetric != nil {
		return t.SetMetric
	}
	t.SetMetric = &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric{}
	return t.SetMetric
}

// GetSetMetric returns the value of the SetMetric struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions. If the receiver or the field SetMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) GetSetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric {
	if t != nil && t.SetMetric != nil {
		return t.SetMetric
	}
	return nil
}

// GetSetArea retrieves the value of the leaf SetArea from the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetArea is set, it can
// safely use t.GetSetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetArea == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) GetSetArea() RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union {
	if t == nil || t.SetArea == nil {
		return nil
	}
	return t.SetArea
}

// SetSetArea sets the value of the leaf SetArea in the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) SetSetArea(v RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union) {
	t.SetArea = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SetMetric.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) Î›BelongingModule() string {
	return "openconfig-ospf-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric struct {
	Metric     *uint16                `path:"state/metric" module:"openconfig-ospf-policy/openconfig-ospf-policy" shadow-path:"config/metric" shadow-module:"openconfig-ospf-policy/openconfig-ospf-policy"`
	MetricType E_SetMetric_MetricType `path:"state/metric-type" module:"openconfig-ospf-policy/openconfig-ospf-policy" shadow-path:"config/metric-type" shadow-module:"openconfig-ospf-policy/openconfig-ospf-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) IsYANGGoStruct() {}

// GetMetric retrieves the value of the leaf Metric from the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMetricType retrieves the value of the leaf MetricType from the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) GetMetricType() E_SetMetric_MetricType {
	if t == nil || t.MetricType == 0 {
		return SetMetric_MetricType_EXTERNAL_TYPE_2
	}
	return t.MetricType
}

// SetMetric sets the value of the leaf Metric in the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) SetMetric(v uint16) {
	t.Metric = &v
}

// SetMetricType sets the value of the leaf MetricType in the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) SetMetricType(v E_SetMetric_MetricType) {
	t.MetricType = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MetricType == 0 {
		t.MetricType = SetMetric_MetricType_EXTERNAL_TYPE_2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) Î›BelongingModule() string {
	return "openconfig-ospf-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline    `path:"inline" module:"openconfig-routing-policy"`
	Mode      E_SetTag_Mode                                                      `path:"state/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference `path:"reference" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetMode() E_SetTag_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// SetMode sets the value of the leaf Mode in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) SetMode(v E_SetTag_Mode) {
	t.Mode = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline struct {
	Tag []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union `path:"state/tag" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) GetTag() []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// SetTag sets the value of the leaf Tag in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) SetTag(v []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union) {
	t.Tag = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference struct {
	TagSet *string `path:"state/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// SetTagSet sets the value of the leaf TagSet in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) SetTagSet(v string) {
	t.TagSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions struct {
	BgpConditions     *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions    `path:"bgp-conditions" module:"openconfig-bgp-policy"`
	CallPolicy        *string                                                               `path:"state/call-policy" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/call-policy" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	InstallProtocolEq E_PolicyTypes_INSTALL_PROTOCOL_TYPE                                   `path:"state/install-protocol-eq" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/install-protocol-eq" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	IsisConditions    *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions   `path:"isis-conditions" module:"openconfig-isis-policy"`
	MatchInterface    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface   `path:"match-interface" module:"openconfig-routing-policy"`
	MatchNeighborSet  *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet `path:"match-neighbor-set" module:"openconfig-routing-policy"`
	MatchPrefixSet    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet   `path:"match-prefix-set" module:"openconfig-routing-policy"`
	MatchTagSet       *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet      `path:"match-tag-set" module:"openconfig-routing-policy"`
	OspfConditions    *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions   `path:"ospf-conditions" module:"openconfig-ospf-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) IsYANGGoStruct() {}

// GetOrCreateBgpConditions retrieves the value of the BgpConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t.BgpConditions != nil {
		return t.BgpConditions
	}
	t.BgpConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions{}
	return t.BgpConditions
}

// GetOrCreateIsisConditions retrieves the value of the IsisConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateIsisConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions {
	if t.IsisConditions != nil {
		return t.IsisConditions
	}
	t.IsisConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions{}
	return t.IsisConditions
}

// GetOrCreateMatchInterface retrieves the value of the MatchInterface field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t.MatchInterface != nil {
		return t.MatchInterface
	}
	t.MatchInterface = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface{}
	return t.MatchInterface
}

// GetOrCreateMatchNeighborSet retrieves the value of the MatchNeighborSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	t.MatchNeighborSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet{}
	return t.MatchNeighborSet
}

// GetOrCreateMatchPrefixSet retrieves the value of the MatchPrefixSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	t.MatchPrefixSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet{}
	return t.MatchPrefixSet
}

// GetOrCreateMatchTagSet retrieves the value of the MatchTagSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	t.MatchTagSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet{}
	return t.MatchTagSet
}

// GetOrCreateOspfConditions retrieves the value of the OspfConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateOspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions {
	if t.OspfConditions != nil {
		return t.OspfConditions
	}
	t.OspfConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions{}
	return t.OspfConditions
}

// GetBgpConditions returns the value of the BgpConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field BgpConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t != nil && t.BgpConditions != nil {
		return t.BgpConditions
	}
	return nil
}

// GetIsisConditions returns the value of the IsisConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field IsisConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetIsisConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions {
	if t != nil && t.IsisConditions != nil {
		return t.IsisConditions
	}
	return nil
}

// GetMatchInterface returns the value of the MatchInterface struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t != nil && t.MatchInterface != nil {
		return t.MatchInterface
	}
	return nil
}

// GetMatchNeighborSet returns the value of the MatchNeighborSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchNeighborSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t != nil && t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	return nil
}

// GetMatchPrefixSet returns the value of the MatchPrefixSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchPrefixSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t != nil && t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	return nil
}

// GetMatchTagSet returns the value of the MatchTagSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchTagSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t != nil && t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	return nil
}

// GetOspfConditions returns the value of the OspfConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field OspfConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions {
	if t != nil && t.OspfConditions != nil {
		return t.OspfConditions
	}
	return nil
}

// GetCallPolicy retrieves the value of the leaf CallPolicy from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallPolicy is set, it can
// safely use t.GetCallPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallPolicy == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetCallPolicy() string {
	if t == nil || t.CallPolicy == nil {
		return ""
	}
	return *t.CallPolicy
}

// GetInstallProtocolEq retrieves the value of the leaf InstallProtocolEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallProtocolEq is set, it can
// safely use t.GetInstallProtocolEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallProtocolEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetInstallProtocolEq() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.InstallProtocolEq == 0 {
		return 0
	}
	return t.InstallProtocolEq
}

// SetCallPolicy sets the value of the leaf CallPolicy in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) SetCallPolicy(v string) {
	t.CallPolicy = &v
}

// SetInstallProtocolEq sets the value of the leaf InstallProtocolEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) SetInstallProtocolEq(v E_PolicyTypes_INSTALL_PROTOCOL_TYPE) {
	t.InstallProtocolEq = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpConditions.PopulateDefaults()
	t.IsisConditions.PopulateDefaults()
	t.MatchInterface.PopulateDefaults()
	t.MatchNeighborSet.PopulateDefaults()
	t.MatchPrefixSet.PopulateDefaults()
	t.MatchTagSet.PopulateDefaults()
	t.OspfConditions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions struct {
	AfiSafiIn            []E_BgpTypes_AFI_SAFI_TYPE                                                              `path:"state/afi-safi-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/afi-safi-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathLength         *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength         `path:"as-path-length" module:"openconfig-bgp-policy"`
	CommunityCount       *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount       `path:"community-count" module:"openconfig-bgp-policy"`
	CommunitySet         *string                                                                                 `path:"state/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunityCount    *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount    `path:"ext-community-count" module:"openconfig-bgp-policy"`
	ExtCommunitySet      *string                                                                                 `path:"state/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	LocalPrefEq          *uint32                                                                                 `path:"state/local-pref-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/local-pref-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchAsPathSet       *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet       `path:"match-as-path-set" module:"openconfig-bgp-policy"`
	MatchCommunitySet    *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet    `path:"match-community-set" module:"openconfig-bgp-policy"`
	MatchExtCommunitySet *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet `path:"match-ext-community-set" module:"openconfig-bgp-policy"`
	MedEq                *uint32                                                                                 `path:"state/med-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/med-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	NextHopIn            []string                                                                                `path:"state/next-hop-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/next-hop-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	OriginEq             E_BgpTypes_BgpOriginAttrType                                                            `path:"state/origin-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/origin-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RouteType            E_BgpConditions_RouteType                                                               `path:"state/route-type" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/route-type" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) IsYANGGoStruct() {}

// GetOrCreateAsPathLength retrieves the value of the AsPathLength field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t.AsPathLength != nil {
		return t.AsPathLength
	}
	t.AsPathLength = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength{}
	return t.AsPathLength
}

// GetOrCreateCommunityCount retrieves the value of the CommunityCount field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t.CommunityCount != nil {
		return t.CommunityCount
	}
	t.CommunityCount = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount{}
	return t.CommunityCount
}

// GetOrCreateExtCommunityCount retrieves the value of the ExtCommunityCount field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateExtCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount {
	if t.ExtCommunityCount != nil {
		return t.ExtCommunityCount
	}
	t.ExtCommunityCount = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount{}
	return t.ExtCommunityCount
}

// GetOrCreateMatchAsPathSet retrieves the value of the MatchAsPathSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	t.MatchAsPathSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet{}
	return t.MatchAsPathSet
}

// GetOrCreateMatchCommunitySet retrieves the value of the MatchCommunitySet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet {
	if t.MatchCommunitySet != nil {
		return t.MatchCommunitySet
	}
	t.MatchCommunitySet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet{}
	return t.MatchCommunitySet
}

// GetOrCreateMatchExtCommunitySet retrieves the value of the MatchExtCommunitySet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet {
	if t.MatchExtCommunitySet != nil {
		return t.MatchExtCommunitySet
	}
	t.MatchExtCommunitySet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet{}
	return t.MatchExtCommunitySet
}

// GetAsPathLength returns the value of the AsPathLength struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field AsPathLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t != nil && t.AsPathLength != nil {
		return t.AsPathLength
	}
	return nil
}

// GetCommunityCount returns the value of the CommunityCount struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field CommunityCount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t != nil && t.CommunityCount != nil {
		return t.CommunityCount
	}
	return nil
}

// GetExtCommunityCount returns the value of the ExtCommunityCount struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field ExtCommunityCount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetExtCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount {
	if t != nil && t.ExtCommunityCount != nil {
		return t.ExtCommunityCount
	}
	return nil
}

// GetMatchAsPathSet returns the value of the MatchAsPathSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchAsPathSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t != nil && t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	return nil
}

// GetMatchCommunitySet returns the value of the MatchCommunitySet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchCommunitySet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet {
	if t != nil && t.MatchCommunitySet != nil {
		return t.MatchCommunitySet
	}
	return nil
}

// GetMatchExtCommunitySet returns the value of the MatchExtCommunitySet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchExtCommunitySet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet {
	if t != nil && t.MatchExtCommunitySet != nil {
		return t.MatchExtCommunitySet
	}
	return nil
}

// GetAfiSafiIn retrieves the value of the leaf AfiSafiIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiIn is set, it can
// safely use t.GetAfiSafiIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAfiSafiIn() []E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiIn == nil {
		return nil
	}
	return t.AfiSafiIn
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// GetExtCommunitySet retrieves the value of the leaf ExtCommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySet is set, it can
// safely use t.GetExtCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetExtCommunitySet() string {
	if t == nil || t.ExtCommunitySet == nil {
		return ""
	}
	return *t.ExtCommunitySet
}

// GetLocalPrefEq retrieves the value of the leaf LocalPrefEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPrefEq is set, it can
// safely use t.GetLocalPrefEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPrefEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetLocalPrefEq() uint32 {
	if t == nil || t.LocalPrefEq == nil {
		return 0
	}
	return *t.LocalPrefEq
}

// GetMedEq retrieves the value of the leaf MedEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedEq is set, it can
// safely use t.GetMedEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMedEq() uint32 {
	if t == nil || t.MedEq == nil {
		return 0
	}
	return *t.MedEq
}

// GetNextHopIn retrieves the value of the leaf NextHopIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIn is set, it can
// safely use t.GetNextHopIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetNextHopIn() []string {
	if t == nil || t.NextHopIn == nil {
		return nil
	}
	return t.NextHopIn
}

// GetOriginEq retrieves the value of the leaf OriginEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginEq is set, it can
// safely use t.GetOriginEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOriginEq() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.OriginEq == 0 {
		return 0
	}
	return t.OriginEq
}

// GetRouteType retrieves the value of the leaf RouteType from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetRouteType() E_BgpConditions_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// SetAfiSafiIn sets the value of the leaf AfiSafiIn in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetAfiSafiIn(v []E_BgpTypes_AFI_SAFI_TYPE) {
	t.AfiSafiIn = v
}

// SetCommunitySet sets the value of the leaf CommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetCommunitySet(v string) {
	t.CommunitySet = &v
}

// SetExtCommunitySet sets the value of the leaf ExtCommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetExtCommunitySet(v string) {
	t.ExtCommunitySet = &v
}

// SetLocalPrefEq sets the value of the leaf LocalPrefEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetLocalPrefEq(v uint32) {
	t.LocalPrefEq = &v
}

// SetMedEq sets the value of the leaf MedEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetMedEq(v uint32) {
	t.MedEq = &v
}

// SetNextHopIn sets the value of the leaf NextHopIn in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetNextHopIn(v []string) {
	t.NextHopIn = v
}

// SetOriginEq sets the value of the leaf OriginEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetOriginEq(v E_BgpTypes_BgpOriginAttrType) {
	t.OriginEq = v
}

// SetRouteType sets the value of the leaf RouteType in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetRouteType(v E_BgpConditions_RouteType) {
	t.RouteType = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AsPathLength.PopulateDefaults()
	t.CommunityCount.PopulateDefaults()
	t.ExtCommunityCount.PopulateDefaults()
	t.MatchAsPathSet.PopulateDefaults()
	t.MatchCommunitySet.PopulateDefaults()
	t.MatchExtCommunitySet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet struct {
	AsPathSet       *string                           `path:"state/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/as-path-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) IsYANGGoStruct() {
}

// GetAsPathSet retrieves the value of the leaf AsPathSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSet is set, it can
// safely use t.GetAsPathSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetAsPathSet() string {
	if t == nil || t.AsPathSet == nil {
		return ""
	}
	return *t.AsPathSet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetAsPathSet sets the value of the leaf AsPathSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) SetAsPathSet(v string) {
	t.AsPathSet = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet struct {
	CommunitySet    *string                           `path:"state/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) IsYANGGoStruct() {
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetCommunitySet sets the value of the leaf CommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) SetCommunitySet(v string) {
	t.CommunitySet = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet struct {
	ExtCommunitySet *string                           `path:"state/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) IsYANGGoStruct() {
}

// GetExtCommunitySet retrieves the value of the leaf ExtCommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySet is set, it can
// safely use t.GetExtCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) GetExtCommunitySet() string {
	if t == nil || t.ExtCommunitySet == nil {
		return ""
	}
	return *t.ExtCommunitySet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetExtCommunitySet sets the value of the leaf ExtCommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) SetExtCommunitySet(v string) {
	t.ExtCommunitySet = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) Î›BelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions struct {
	LevelEq         *uint8                 `path:"state/level-eq" module:"openconfig-isis-policy/openconfig-isis-policy" shadow-path:"config/level-eq" shadow-module:"openconfig-isis-policy/openconfig-isis-policy"`
	MatchMetricType E_IsisTypes_MetricType `path:"state/match-metric-type" module:"openconfig-isis-policy/openconfig-isis-policy" shadow-path:"config/match-metric-type" shadow-module:"openconfig-isis-policy/openconfig-isis-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) IsYANGGoStruct() {}

// GetLevelEq retrieves the value of the leaf LevelEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelEq is set, it can
// safely use t.GetLevelEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) GetLevelEq() uint8 {
	if t == nil || t.LevelEq == nil {
		return 0
	}
	return *t.LevelEq
}

// GetMatchMetricType retrieves the value of the leaf MatchMetricType from the RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchMetricType is set, it can
// safely use t.GetMatchMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchMetricType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) GetMatchMetricType() E_IsisTypes_MetricType {
	if t == nil || t.MatchMetricType == 0 {
		return 0
	}
	return t.MatchMetricType
}

// SetLevelEq sets the value of the leaf LevelEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) SetLevelEq(v uint8) {
	t.LevelEq = &v
}

// SetMatchMetricType sets the value of the leaf MatchMetricType in the RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) SetMatchMetricType(v E_IsisTypes_MetricType) {
	t.MatchMetricType = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditions) Î›BelongingModule() string {
	return "openconfig-isis-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface struct {
	Interface    *string `path:"state/interface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/interface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/subinterface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	NeighborSet     *string                                     `path:"state/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/neighbor-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetNeighborSet retrieves the value of the leaf NeighborSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborSet is set, it can
// safely use t.GetNeighborSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetNeighborSet() string {
	if t == nil || t.NeighborSet == nil {
		return ""
	}
	return *t.NeighborSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetNeighborSet sets the value of the leaf NeighborSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) SetNeighborSet(v string) {
	t.NeighborSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	PrefixSet       *string                                     `path:"state/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/prefix-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetPrefixSet retrieves the value of the leaf PrefixSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixSet is set, it can
// safely use t.GetPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetPrefixSet() string {
	if t == nil || t.PrefixSet == nil {
		return ""
	}
	return *t.PrefixSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetPrefixSet sets the value of the leaf PrefixSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) SetPrefixSet(v string) {
	t.PrefixSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	TagSet          *string                                     `path:"state/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetTagSet sets the value of the leaf TagSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) SetTagSet(v string) {
	t.TagSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Î›BelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions struct {
	AreaEq RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union `path:"state/area-eq" module:"openconfig-ospf-policy/openconfig-ospf-policy" shadow-path:"config/area-eq" shadow-module:"openconfig-ospf-policy/openconfig-ospf-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) IsYANGGoStruct() {}

// GetAreaEq retrieves the value of the leaf AreaEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaEq is set, it can
// safely use t.GetAreaEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) GetAreaEq() RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union {
	if t == nil || t.AreaEq == nil {
		return nil
	}
	return t.AreaEq
}

// SetAreaEq sets the value of the leaf AreaEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) SetAreaEq(v RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union) {
	t.AreaEq = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) Î›BelongingModule() string {
	return "openconfig-ospf-policy"
}

// Sampling represents the /openconfig-sampling/sampling YANG schema element.
type Sampling struct {
	Sflow *Sampling_Sflow `path:"sflow" module:"openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling) IsYANGGoStruct() {}

// GetOrCreateSflow retrieves the value of the Sflow field
// or returns the existing field if it already exists.
func (t *Sampling) GetOrCreateSflow() *Sampling_Sflow {
	if t.Sflow != nil {
		return t.Sflow
	}
	t.Sflow = &Sampling_Sflow{}
	return t.Sflow
}

// GetSflow returns the value of the Sflow struct pointer
// from Sampling. If the receiver or the field Sflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Sampling) GetSflow() *Sampling_Sflow {
	if t != nil && t.Sflow != nil {
		return t.Sflow
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Sflow.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of Sampling.
func (*Sampling) Î›BelongingModule() string {
	return "openconfig-sampling"
}

// Sampling_Sflow represents the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_Sflow struct {
	AgentIdIpv4         *string                                                    `path:"state/agent-id-ipv4" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/agent-id-ipv4" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	AgentIdIpv6         *string                                                    `path:"state/agent-id-ipv6" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/agent-id-ipv6" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Collector           map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector `path:"collectors/collector" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Dscp                *uint8                                                     `path:"state/dscp" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/dscp" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	EgressSamplingRate  *uint32                                                    `path:"state/egress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/egress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Enabled             *bool                                                      `path:"state/enabled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/enabled" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	IngressSamplingRate *uint32                                                    `path:"state/ingress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/ingress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Interface           map[string]*Sampling_Sflow_Interface                       `path:"interfaces/interface" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PollingInterval     *uint16                                                    `path:"state/polling-interval" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/polling-interval" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	SampleSize          *uint16                                                    `path:"state/sample-size" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/sample-size" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow) IsYANGGoStruct() {}

// Sampling_Sflow_Collector_Key represents the key for list Collector of element /openconfig-sampling/sampling/sflow.
type Sampling_Sflow_Collector_Key struct {
	Address string `path:"address"`
	Port    uint16 `path:"port"`
}

// IsYANGGoKeyStruct ensures that Sampling_Sflow_Collector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Sampling_Sflow_Collector_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the Sampling_Sflow_Collector_Key key struct.
func (t Sampling_Sflow_Collector_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"address": t.Address,
		"port":    t.Port,
	}, nil
}

// NewCollector creates a new entry in the Collector list of the
// Sampling_Sflow struct. The keys of the list are populated from the input
// arguments.
func (t *Sampling_Sflow) NewCollector(Address string, Port uint16) (*Sampling_Sflow_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector)
	}

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &Sampling_Sflow_Collector{
		Address: &Address,
		Port:    &Port,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the Sampling_Sflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Sampling_Sflow) RenameCollector(oldK, newK Sampling_Sflow_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.Address = &newK.Address
	e.Port = &newK.Port

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollectorMap returns the list (map) from Sampling_Sflow.
//
// It initializes the field if not already initialized.
func (t *Sampling_Sflow) GetOrCreateCollectorMap() map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector {
	if t.Collector == nil {
		t.Collector = make(map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector)
	}
	return t.Collector
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver Sampling_Sflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Sampling_Sflow) GetOrCreateCollector(Address string, Port uint16) *Sampling_Sflow_Collector {

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of Sampling_Sflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Sampling_Sflow) GetCollector(Address string, Port uint16) *Sampling_Sflow_Collector {

	if t == nil {
		return nil
	}

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver Sampling_Sflow. If there is no such element, the function
// is a no-op.
func (t *Sampling_Sflow) DeleteCollector(Address string, Port uint16) {
	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied Sampling_Sflow_Collector struct to the
// list Collector of Sampling_Sflow. If the key value(s) specified in
// the supplied Sampling_Sflow_Collector already exist in the list, an error is
// returned.
func (t *Sampling_Sflow) AppendCollector(v *Sampling_Sflow_Collector) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := Sampling_Sflow_Collector_Key{
		Address: *v.Address,
		Port:    *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Sampling_Sflow struct. The keys of the list are populated from the input
// arguments.
func (t *Sampling_Sflow) NewInterface(Name string) (*Sampling_Sflow_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Sampling_Sflow_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Sampling_Sflow_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Sampling_Sflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Sampling_Sflow) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Sampling_Sflow.
//
// It initializes the field if not already initialized.
func (t *Sampling_Sflow) GetOrCreateInterfaceMap() map[string]*Sampling_Sflow_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Sampling_Sflow_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Sampling_Sflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Sampling_Sflow) GetOrCreateInterface(Name string) *Sampling_Sflow_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Sampling_Sflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Sampling_Sflow) GetInterface(Name string) *Sampling_Sflow_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Sampling_Sflow. If there is no such element, the function
// is a no-op.
func (t *Sampling_Sflow) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Sampling_Sflow_Interface struct to the
// list Interface of Sampling_Sflow. If the key value(s) specified in
// the supplied Sampling_Sflow_Interface already exist in the list, an error is
// returned.
func (t *Sampling_Sflow) AppendInterface(v *Sampling_Sflow_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Sampling_Sflow_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetAgentIdIpv4 retrieves the value of the leaf AgentIdIpv4 from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgentIdIpv4 is set, it can
// safely use t.GetAgentIdIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgentIdIpv4 == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetAgentIdIpv4() string {
	if t == nil || t.AgentIdIpv4 == nil {
		return ""
	}
	return *t.AgentIdIpv4
}

// GetAgentIdIpv6 retrieves the value of the leaf AgentIdIpv6 from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgentIdIpv6 is set, it can
// safely use t.GetAgentIdIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgentIdIpv6 == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetAgentIdIpv6() string {
	if t == nil || t.AgentIdIpv6 == nil {
		return ""
	}
	return *t.AgentIdIpv6
}

// GetDscp retrieves the value of the leaf Dscp from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetEgressSamplingRate retrieves the value of the leaf EgressSamplingRate from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressSamplingRate is set, it can
// safely use t.GetEgressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetEgressSamplingRate() uint32 {
	if t == nil || t.EgressSamplingRate == nil {
		return 0
	}
	return *t.EgressSamplingRate
}

// GetEnabled retrieves the value of the leaf Enabled from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetIngressSamplingRate retrieves the value of the leaf IngressSamplingRate from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressSamplingRate is set, it can
// safely use t.GetIngressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetIngressSamplingRate() uint32 {
	if t == nil || t.IngressSamplingRate == nil {
		return 0
	}
	return *t.IngressSamplingRate
}

// GetPollingInterval retrieves the value of the leaf PollingInterval from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollingInterval is set, it can
// safely use t.GetPollingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollingInterval == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetPollingInterval() uint16 {
	if t == nil || t.PollingInterval == nil {
		return 0
	}
	return *t.PollingInterval
}

// GetSampleSize retrieves the value of the leaf SampleSize from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleSize is set, it can
// safely use t.GetSampleSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleSize == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetSampleSize() uint16 {
	if t == nil || t.SampleSize == nil {
		return 128
	}
	return *t.SampleSize
}

// SetAgentIdIpv4 sets the value of the leaf AgentIdIpv4 in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetAgentIdIpv4(v string) {
	t.AgentIdIpv4 = &v
}

// SetAgentIdIpv6 sets the value of the leaf AgentIdIpv6 in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetAgentIdIpv6(v string) {
	t.AgentIdIpv6 = &v
}

// SetDscp sets the value of the leaf Dscp in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetDscp(v uint8) {
	t.Dscp = &v
}

// SetEgressSamplingRate sets the value of the leaf EgressSamplingRate in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetEgressSamplingRate(v uint32) {
	t.EgressSamplingRate = &v
}

// SetEnabled sets the value of the leaf Enabled in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetIngressSamplingRate sets the value of the leaf IngressSamplingRate in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetIngressSamplingRate(v uint32) {
	t.IngressSamplingRate = &v
}

// SetPollingInterval sets the value of the leaf PollingInterval in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetPollingInterval(v uint16) {
	t.PollingInterval = &v
}

// SetSampleSize sets the value of the leaf SampleSize in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetSampleSize(v uint16) {
	t.SampleSize = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling_Sflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling_Sflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	if t.SampleSize == nil {
		var v uint16 = 128
		t.SampleSize = &v
	}
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow.
func (*Sampling_Sflow) Î›BelongingModule() string {
	return "openconfig-sampling-sflow"
}

// Sampling_Sflow_Collector represents the /openconfig-sampling/sampling/sflow/collectors/collector YANG schema element.
type Sampling_Sflow_Collector struct {
	Address         *string `path:"state/address|address" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"config/address|address" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	NetworkInstance *string `path:"state/network-instance" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/network-instance" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PacketsSent     *uint64 `path:"state/packets-sent" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Port            *uint16 `path:"state/port|port" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"config/port|port" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	SourceAddress   *string `path:"state/source-address" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/source-address" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow_Collector) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetPacketsSent retrieves the value of the leaf PacketsSent from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketsSent is set, it can
// safely use t.GetPacketsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketsSent == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetPacketsSent() uint64 {
	if t == nil || t.PacketsSent == nil {
		return 0
	}
	return *t.PacketsSent
}

// GetPort retrieves the value of the leaf Port from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 6343
	}
	return *t.Port
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetAddress sets the value of the leaf Address in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetAddress(v string) {
	t.Address = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetPacketsSent sets the value of the leaf PacketsSent in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetPacketsSent(v uint64) {
	t.PacketsSent = &v
}

// SetPort sets the value of the leaf Port in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetPort(v uint16) {
	t.Port = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling_Sflow_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling_Sflow_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 6343
		t.Port = &v
	}
}

// Î›ListKeyMap returns the keys of the Sampling_Sflow_Collector struct, which is a YANG list entry.
func (t *Sampling_Sflow_Collector) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Collector) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Collector) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow_Collector) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow_Collector.
func (*Sampling_Sflow_Collector) Î›BelongingModule() string {
	return "openconfig-sampling-sflow"
}

// Sampling_Sflow_Interface represents the /openconfig-sampling/sampling/sflow/interfaces/interface YANG schema element.
type Sampling_Sflow_Interface struct {
	EgressSamplingRate  *uint32 `path:"state/egress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/egress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Enabled             *bool   `path:"state/enabled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/enabled" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	IngressSamplingRate *uint32 `path:"state/ingress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/ingress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Name                *string `path:"state/name|name" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"config/name|name" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	PacketsSampled      *uint64 `path:"state/packets-sampled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PollingInterval     *uint16 `path:"state/polling-interval" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/polling-interval" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow_Interface) IsYANGGoStruct() {}

// GetEgressSamplingRate retrieves the value of the leaf EgressSamplingRate from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressSamplingRate is set, it can
// safely use t.GetEgressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetEgressSamplingRate() uint32 {
	if t == nil || t.EgressSamplingRate == nil {
		return 0
	}
	return *t.EgressSamplingRate
}

// GetEnabled retrieves the value of the leaf Enabled from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetIngressSamplingRate retrieves the value of the leaf IngressSamplingRate from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressSamplingRate is set, it can
// safely use t.GetIngressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetIngressSamplingRate() uint32 {
	if t == nil || t.IngressSamplingRate == nil {
		return 0
	}
	return *t.IngressSamplingRate
}

// GetName retrieves the value of the leaf Name from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPacketsSampled retrieves the value of the leaf PacketsSampled from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketsSampled is set, it can
// safely use t.GetPacketsSampled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketsSampled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetPacketsSampled() uint64 {
	if t == nil || t.PacketsSampled == nil {
		return 0
	}
	return *t.PacketsSampled
}

// GetPollingInterval retrieves the value of the leaf PollingInterval from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollingInterval is set, it can
// safely use t.GetPollingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollingInterval == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetPollingInterval() uint16 {
	if t == nil || t.PollingInterval == nil {
		return 0
	}
	return *t.PollingInterval
}

// SetEgressSamplingRate sets the value of the leaf EgressSamplingRate in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetEgressSamplingRate(v uint32) {
	t.EgressSamplingRate = &v
}

// SetEnabled sets the value of the leaf Enabled in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetIngressSamplingRate sets the value of the leaf IngressSamplingRate in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetIngressSamplingRate(v uint32) {
	t.IngressSamplingRate = &v
}

// SetName sets the value of the leaf Name in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetName(v string) {
	t.Name = &v
}

// SetPacketsSampled sets the value of the leaf PacketsSampled in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetPacketsSampled(v uint64) {
	t.PacketsSampled = &v
}

// SetPollingInterval sets the value of the leaf PollingInterval in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetPollingInterval(v uint16) {
	t.PollingInterval = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling_Sflow_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling_Sflow_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the Sampling_Sflow_Interface struct, which is a YANG list entry.
func (t *Sampling_Sflow_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow_Interface) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow_Interface.
func (*Sampling_Sflow_Interface) Î›BelongingModule() string {
	return "openconfig-sampling-sflow"
}

// System represents the /openconfig-system/system YANG schema element.
type System struct {
	Aaa                        *System_Aaa                            `path:"aaa" module:"openconfig-system"`
	Alarm                      map[string]*System_Alarm               `path:"alarms/alarm" module:"openconfig-system/openconfig-system"`
	BootTime                   *uint64                                `path:"state/boot-time" module:"openconfig-system/openconfig-system"`
	Bootz                      *System_Bootz                          `path:"bootz" module:"openconfig-system-bootz"`
	Clock                      *System_Clock                          `path:"clock" module:"openconfig-system"`
	Console                    *System_Console                        `path:"console" module:"openconfig-gnsi-credentialz"`
	ControlPlaneTraffic        *System_ControlPlaneTraffic            `path:"control-plane-traffic" module:"openconfig-system-controlplane"`
	Cpu                        map[System_Cpu_Index_Union]*System_Cpu `path:"cpus/cpu" module:"openconfig-system/openconfig-system"`
	CurrentDatetime            *string                                `path:"state/current-datetime" module:"openconfig-system/openconfig-system"`
	Dns                        *System_Dns                            `path:"dns" module:"openconfig-system"`
	DomainName                 *string                                `path:"state/domain-name" module:"openconfig-system/openconfig-system" shadow-path:"config/domain-name" shadow-module:"openconfig-system/openconfig-system"`
	GnmiPathzPolicies          *System_GnmiPathzPolicies              `path:"gnmi-pathz-policies" module:"openconfig-gnsi-pathz"`
	GrpcServer                 map[string]*System_GrpcServer          `path:"grpc-servers/grpc-server" module:"openconfig-system-grpc/openconfig-system-grpc"`
	Hostname                   *string                                `path:"state/hostname" module:"openconfig-system/openconfig-system" shadow-path:"config/hostname" shadow-module:"openconfig-system/openconfig-system"`
	LastConfigurationTimestamp *uint64                                `path:"state/last-configuration-timestamp" module:"openconfig-system/openconfig-system"`
	License                    *System_License                        `path:"license" module:"openconfig-system"`
	Logging                    *System_Logging                        `path:"logging" module:"openconfig-system"`
	LoginBanner                *string                                `path:"state/login-banner" module:"openconfig-system/openconfig-system" shadow-path:"config/login-banner" shadow-module:"openconfig-system/openconfig-system"`
	MacAddress                 *System_MacAddress                     `path:"mac-address" module:"openconfig-system"`
	Memory                     *System_Memory                         `path:"memory" module:"openconfig-system"`
	Messages                   *System_Messages                       `path:"messages" module:"openconfig-system"`
	MotdBanner                 *string                                `path:"state/motd-banner" module:"openconfig-system/openconfig-system" shadow-path:"config/motd-banner" shadow-module:"openconfig-system/openconfig-system"`
	MountPoint                 map[string]*System_MountPoint          `path:"mount-points/mount-point" module:"openconfig-system/openconfig-system"`
	Ntp                        *System_Ntp                            `path:"ntp" module:"openconfig-system"`
	Process                    map[uint64]*System_Process             `path:"processes/process" module:"openconfig-system/openconfig-system"`
	SoftwareVersion            *string                                `path:"state/software-version" module:"openconfig-system/openconfig-system"`
	SshServer                  *System_SshServer                      `path:"ssh-server" module:"openconfig-system"`
	TelnetServer               *System_TelnetServer                   `path:"telnet-server" module:"openconfig-system"`
	UpTime                     *uint64                                `path:"state/up-time" module:"openconfig-system/openconfig-system"`
	Utilization                *System_Utilization                    `path:"utilization" module:"openconfig-system-utilization"`
}

// IsYANGGoStruct ensures that System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewAlarm(Id string) (*System_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &System_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarmMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateAlarmMap() map[string]*System_Alarm {
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}
	return t.Alarm
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateAlarm(Id string) *System_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetAlarm(Id string) *System_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteAlarm(Id string) {
	key := Id

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied System_Alarm struct to the
// list Alarm of System. If the key value(s) specified in
// the supplied System_Alarm already exist in the list, an error is
// returned.
func (t *System) AppendAlarm(v *System_Alarm) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// NewCpu creates a new entry in the Cpu list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewCpu(Index System_Cpu_Index_Union) (*System_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &System_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameCpu(oldK, newK System_Cpu_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpuMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateCpuMap() map[System_Cpu_Index_Union]*System_Cpu {
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}
	return t.Cpu
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateCpu(Index System_Cpu_Index_Union) *System_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetCpu(Index System_Cpu_Index_Union) *System_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpu deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteCpu(Index System_Cpu_Index_Union) {
	key := Index

	delete(t.Cpu, key)
}

// AppendCpu appends the supplied System_Cpu struct to the
// list Cpu of System. If the key value(s) specified in
// the supplied System_Cpu already exist in the list, an error is
// returned.
func (t *System) AppendCpu(v *System_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// NewGrpcServer creates a new entry in the GrpcServer list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewGrpcServer(Name string) (*System_GrpcServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GrpcServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GrpcServer", key)
	}

	t.GrpcServer[key] = &System_GrpcServer{
		Name: &Name,
	}

	return t.GrpcServer[key], nil
}

// RenameGrpcServer renames an entry in the list GrpcServer within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameGrpcServer(oldK, newK string) error {
	if _, ok := t.GrpcServer[newK]; ok {
		return fmt.Errorf("key %v already exists in GrpcServer", newK)
	}

	e, ok := t.GrpcServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GrpcServer", oldK)
	}
	e.Name = &newK

	t.GrpcServer[newK] = e
	delete(t.GrpcServer, oldK)
	return nil
}

// GetOrCreateGrpcServerMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateGrpcServerMap() map[string]*System_GrpcServer {
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}
	return t.GrpcServer
}

// GetOrCreateGrpcServer retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateGrpcServer(Name string) *System_GrpcServer {

	key := Name

	if v, ok := t.GrpcServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGrpcServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGrpcServer got unexpected error: %v", err))
	}
	return v
}

// GetGrpcServer retrieves the value with the specified key from
// the GrpcServer map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetGrpcServer(Name string) *System_GrpcServer {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.GrpcServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteGrpcServer deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteGrpcServer(Name string) {
	key := Name

	delete(t.GrpcServer, key)
}

// AppendGrpcServer appends the supplied System_GrpcServer struct to the
// list GrpcServer of System. If the key value(s) specified in
// the supplied System_GrpcServer already exist in the list, an error is
// returned.
func (t *System) AppendGrpcServer(v *System_GrpcServer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	if _, ok := t.GrpcServer[key]; ok {
		return fmt.Errorf("duplicate key for list GrpcServer %v", key)
	}

	t.GrpcServer[key] = v
	return nil
}

// NewMountPoint creates a new entry in the MountPoint list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewMountPoint(Name string) (*System_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &System_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameMountPoint(oldK, newK string) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Name = &newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPointMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateMountPointMap() map[string]*System_MountPoint {
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}
	return t.MountPoint
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateMountPoint(Name string) *System_MountPoint {

	key := Name

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetMountPoint(Name string) *System_MountPoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteMountPoint(Name string) {
	key := Name

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied System_MountPoint struct to the
// list MountPoint of System. If the key value(s) specified in
// the supplied System_MountPoint already exist in the list, an error is
// returned.
func (t *System) AppendMountPoint(v *System_MountPoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// NewProcess creates a new entry in the Process list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewProcess(Pid uint64) (*System_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &System_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcessMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateProcessMap() map[uint64]*System_Process {
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}
	return t.Process
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateProcess(Pid uint64) *System_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetProcess(Pid uint64) *System_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// DeleteProcess deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteProcess(Pid uint64) {
	key := Pid

	delete(t.Process, key)
}

// AppendProcess appends the supplied System_Process struct to the
// list Process of System. If the key value(s) specified in
// the supplied System_Process already exist in the list, an error is
// returned.
func (t *System) AppendProcess(v *System_Process) error {
	if v.Pid == nil {
		return fmt.Errorf("invalid nil key received for Pid")
	}

	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateAaa() *System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &System_Aaa{}
	return t.Aaa
}

// GetOrCreateBootz retrieves the value of the Bootz field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateBootz() *System_Bootz {
	if t.Bootz != nil {
		return t.Bootz
	}
	t.Bootz = &System_Bootz{}
	return t.Bootz
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateClock() *System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &System_Clock{}
	return t.Clock
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateConsole() *System_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &System_Console{}
	return t.Console
}

// GetOrCreateControlPlaneTraffic retrieves the value of the ControlPlaneTraffic field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateControlPlaneTraffic() *System_ControlPlaneTraffic {
	if t.ControlPlaneTraffic != nil {
		return t.ControlPlaneTraffic
	}
	t.ControlPlaneTraffic = &System_ControlPlaneTraffic{}
	return t.ControlPlaneTraffic
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateDns() *System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &System_Dns{}
	return t.Dns
}

// GetOrCreateGnmiPathzPolicies retrieves the value of the GnmiPathzPolicies field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateGnmiPathzPolicies() *System_GnmiPathzPolicies {
	if t.GnmiPathzPolicies != nil {
		return t.GnmiPathzPolicies
	}
	t.GnmiPathzPolicies = &System_GnmiPathzPolicies{}
	return t.GnmiPathzPolicies
}

// GetOrCreateLicense retrieves the value of the License field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLicense() *System_License {
	if t.License != nil {
		return t.License
	}
	t.License = &System_License{}
	return t.License
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLogging() *System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &System_Logging{}
	return t.Logging
}

// GetOrCreateMacAddress retrieves the value of the MacAddress field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMacAddress() *System_MacAddress {
	if t.MacAddress != nil {
		return t.MacAddress
	}
	t.MacAddress = &System_MacAddress{}
	return t.MacAddress
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMemory() *System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &System_Memory{}
	return t.Memory
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMessages() *System_Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &System_Messages{}
	return t.Messages
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateNtp() *System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &System_Ntp{}
	return t.Ntp
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateSshServer() *System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &System_SshServer{}
	return t.SshServer
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateTelnetServer() *System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &System_TelnetServer{}
	return t.TelnetServer
}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateUtilization() *System_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &System_Utilization{}
	return t.Utilization
}

// GetAaa returns the value of the Aaa struct pointer
// from System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetAaa() *System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetBootz returns the value of the Bootz struct pointer
// from System. If the receiver or the field Bootz is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetBootz() *System_Bootz {
	if t != nil && t.Bootz != nil {
		return t.Bootz
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetClock() *System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetConsole returns the value of the Console struct pointer
// from System. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetConsole() *System_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetControlPlaneTraffic returns the value of the ControlPlaneTraffic struct pointer
// from System. If the receiver or the field ControlPlaneTraffic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetControlPlaneTraffic() *System_ControlPlaneTraffic {
	if t != nil && t.ControlPlaneTraffic != nil {
		return t.ControlPlaneTraffic
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetDns() *System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetGnmiPathzPolicies returns the value of the GnmiPathzPolicies struct pointer
// from System. If the receiver or the field GnmiPathzPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetGnmiPathzPolicies() *System_GnmiPathzPolicies {
	if t != nil && t.GnmiPathzPolicies != nil {
		return t.GnmiPathzPolicies
	}
	return nil
}

// GetLicense returns the value of the License struct pointer
// from System. If the receiver or the field License is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLicense() *System_License {
	if t != nil && t.License != nil {
		return t.License
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLogging() *System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMacAddress returns the value of the MacAddress struct pointer
// from System. If the receiver or the field MacAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMacAddress() *System_MacAddress {
	if t != nil && t.MacAddress != nil {
		return t.MacAddress
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMemory() *System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from System. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMessages() *System_Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetNtp() *System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetSshServer() *System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetTelnetServer() *System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// GetUtilization returns the value of the Utilization struct pointer
// from System. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetUtilization() *System_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// GetBootTime retrieves the value of the leaf BootTime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTime is set, it can
// safely use t.GetBootTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTime == nil' before retrieving the leaf's value.
func (t *System) GetBootTime() uint64 {
	if t == nil || t.BootTime == nil {
		return 0
	}
	return *t.BootTime
}

// GetCurrentDatetime retrieves the value of the leaf CurrentDatetime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentDatetime is set, it can
// safely use t.GetCurrentDatetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentDatetime == nil' before retrieving the leaf's value.
func (t *System) GetCurrentDatetime() string {
	if t == nil || t.CurrentDatetime == nil {
		return ""
	}
	return *t.CurrentDatetime
}

// GetDomainName retrieves the value of the leaf DomainName from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *System) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLastConfigurationTimestamp retrieves the value of the leaf LastConfigurationTimestamp from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastConfigurationTimestamp is set, it can
// safely use t.GetLastConfigurationTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastConfigurationTimestamp == nil' before retrieving the leaf's value.
func (t *System) GetLastConfigurationTimestamp() uint64 {
	if t == nil || t.LastConfigurationTimestamp == nil {
		return 0
	}
	return *t.LastConfigurationTimestamp
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *System) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MotdBanner is set, it can
// safely use t.GetMotdBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MotdBanner == nil' before retrieving the leaf's value.
func (t *System) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareVersion is set, it can
// safely use t.GetSoftwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareVersion == nil' before retrieving the leaf's value.
func (t *System) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// GetUpTime retrieves the value of the leaf UpTime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpTime is set, it can
// safely use t.GetUpTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpTime == nil' before retrieving the leaf's value.
func (t *System) GetUpTime() uint64 {
	if t == nil || t.UpTime == nil {
		return 0
	}
	return *t.UpTime
}

// SetBootTime sets the value of the leaf BootTime in the System
// struct.
func (t *System) SetBootTime(v uint64) {
	t.BootTime = &v
}

// SetCurrentDatetime sets the value of the leaf CurrentDatetime in the System
// struct.
func (t *System) SetCurrentDatetime(v string) {
	t.CurrentDatetime = &v
}

// SetDomainName sets the value of the leaf DomainName in the System
// struct.
func (t *System) SetDomainName(v string) {
	t.DomainName = &v
}

// SetHostname sets the value of the leaf Hostname in the System
// struct.
func (t *System) SetHostname(v string) {
	t.Hostname = &v
}

// SetLastConfigurationTimestamp sets the value of the leaf LastConfigurationTimestamp in the System
// struct.
func (t *System) SetLastConfigurationTimestamp(v uint64) {
	t.LastConfigurationTimestamp = &v
}

// SetLoginBanner sets the value of the leaf LoginBanner in the System
// struct.
func (t *System) SetLoginBanner(v string) {
	t.LoginBanner = &v
}

// SetMotdBanner sets the value of the leaf MotdBanner in the System
// struct.
func (t *System) SetMotdBanner(v string) {
	t.MotdBanner = &v
}

// SetSoftwareVersion sets the value of the leaf SoftwareVersion in the System
// struct.
func (t *System) SetSoftwareVersion(v string) {
	t.SoftwareVersion = &v
}

// SetUpTime sets the value of the leaf UpTime in the System
// struct.
func (t *System) SetUpTime(v uint64) {
	t.UpTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aaa.PopulateDefaults()
	t.Bootz.PopulateDefaults()
	t.Clock.PopulateDefaults()
	t.Console.PopulateDefaults()
	t.ControlPlaneTraffic.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.GnmiPathzPolicies.PopulateDefaults()
	t.License.PopulateDefaults()
	t.Logging.PopulateDefaults()
	t.MacAddress.PopulateDefaults()
	t.Memory.PopulateDefaults()
	t.Messages.PopulateDefaults()
	t.Ntp.PopulateDefaults()
	t.SshServer.PopulateDefaults()
	t.TelnetServer.PopulateDefaults()
	t.Utilization.PopulateDefaults()
	for _, e := range t.Alarm {
		e.PopulateDefaults()
	}
	for _, e := range t.Cpu {
		e.PopulateDefaults()
	}
	for _, e := range t.GrpcServer {
		e.PopulateDefaults()
	}
	for _, e := range t.MountPoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Process {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System.
func (*System) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type System_Aaa struct {
	Accounting     *System_Aaa_Accounting             `path:"accounting" module:"openconfig-system"`
	Authentication *System_Aaa_Authentication         `path:"authentication" module:"openconfig-system"`
	Authorization  *System_Aaa_Authorization          `path:"authorization" module:"openconfig-system"`
	ServerGroup    map[string]*System_Aaa_ServerGroup `path:"server-groups/server-group" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// System_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa) NewServerGroup(Name string) (*System_Aaa_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &System_Aaa_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the System_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroupMap returns the list (map) from System_Aaa.
//
// It initializes the field if not already initialized.
func (t *System_Aaa) GetOrCreateServerGroupMap() map[string]*System_Aaa_ServerGroup {
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}
	return t.ServerGroup
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver System_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa) GetOrCreateServerGroup(Name string) *System_Aaa_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of System_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa) GetServerGroup(Name string) *System_Aaa_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerGroup deletes the value with the specified keys from
// the receiver System_Aaa. If there is no such element, the function
// is a no-op.
func (t *System_Aaa) DeleteServerGroup(Name string) {
	key := Name

	delete(t.ServerGroup, key)
}

// AppendServerGroup appends the supplied System_Aaa_ServerGroup struct to the
// list ServerGroup of System_Aaa. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup already exist in the list, an error is
// returned.
func (t *System_Aaa) AppendServerGroup(v *System_Aaa_ServerGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAccounting() *System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthentication() *System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthorization() *System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &System_Aaa_Authorization{}
	return t.Authorization
}

// GetAccounting returns the value of the Accounting struct pointer
// from System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAccounting() *System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthentication() *System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthorization() *System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	for _, e := range t.ServerGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa.
func (*System_Aaa) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_Accounting struct {
	AccountingMethod []System_Aaa_Accounting_AccountingMethod_Union                        `path:"state/accounting-method" module:"openconfig-system/openconfig-system" shadow-path:"config/accounting-method" shadow-module:"openconfig-system/openconfig-system"`
	Acctz            *System_Aaa_Accounting_Acctz                                          `path:"acctz" module:"openconfig-gnsi-acctz"`
	Event            map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Accounting struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Accounting) NewEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*System_Aaa_Accounting_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Accounting_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Accounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Accounting) RenameEvent(oldK, newK E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEventMap returns the list (map) from System_Aaa_Accounting.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_Accounting) GetOrCreateEventMap() map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event {
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}
	return t.Event
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Accounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Accounting) GetOrCreateEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Accounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Accounting) GetEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Accounting. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Accounting) DeleteEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Accounting_Event struct to the
// list Event of System_Aaa_Accounting. If the key value(s) specified in
// the supplied System_Aaa_Accounting_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Accounting) AppendEvent(v *System_Aaa_Accounting_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetOrCreateAcctz retrieves the value of the Acctz field
// or returns the existing field if it already exists.
func (t *System_Aaa_Accounting) GetOrCreateAcctz() *System_Aaa_Accounting_Acctz {
	if t.Acctz != nil {
		return t.Acctz
	}
	t.Acctz = &System_Aaa_Accounting_Acctz{}
	return t.Acctz
}

// GetAcctz returns the value of the Acctz struct pointer
// from System_Aaa_Accounting. If the receiver or the field Acctz is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_Accounting) GetAcctz() *System_Aaa_Accounting_Acctz {
	if t != nil && t.Acctz != nil {
		return t.Acctz
	}
	return nil
}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the System_Aaa_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingMethod is set, it can
// safely use t.GetAccountingMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting) GetAccountingMethod() []System_Aaa_Accounting_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// SetAccountingMethod sets the value of the leaf AccountingMethod in the System_Aaa_Accounting
// struct.
func (t *System_Aaa_Accounting) SetAccountingMethod(v []System_Aaa_Accounting_AccountingMethod_Union) {
	t.AccountingMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Acctz.PopulateDefaults()
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting.
func (*System_Aaa_Accounting) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting_Acctz represents the /openconfig-system/system/aaa/accounting/acctz YANG schema element.
type System_Aaa_Accounting_Acctz struct {
	SourceRecord map[System_Aaa_Accounting_Acctz_SourceRecord_Key]*System_Aaa_Accounting_Acctz_SourceRecord `path:"source-records/source-record" module:"openconfig-gnsi-acctz/openconfig-gnsi-acctz"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Acctz implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Acctz) IsYANGGoStruct() {}

// System_Aaa_Accounting_Acctz_SourceRecord_Key represents the key for list SourceRecord of element /openconfig-system/system/aaa/accounting/acctz.
type System_Aaa_Accounting_Acctz_SourceRecord_Key struct {
	Service E_GnsiAcctz_ServiceRequest                          `path:"service"`
	Type    System_Aaa_Accounting_Acctz_SourceRecord_Type_Union `path:"type"`
}

// IsYANGGoKeyStruct ensures that System_Aaa_Accounting_Acctz_SourceRecord_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Aaa_Accounting_Acctz_SourceRecord_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_Aaa_Accounting_Acctz_SourceRecord_Key key struct.
func (t System_Aaa_Accounting_Acctz_SourceRecord_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"service": t.Service,
		"type":    t.Type,
	}, nil
}

// NewSourceRecord creates a new entry in the SourceRecord list of the
// System_Aaa_Accounting_Acctz struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Accounting_Acctz) NewSourceRecord(Service E_GnsiAcctz_ServiceRequest, Type System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) (*System_Aaa_Accounting_Acctz_SourceRecord, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceRecord == nil {
		t.SourceRecord = make(map[System_Aaa_Accounting_Acctz_SourceRecord_Key]*System_Aaa_Accounting_Acctz_SourceRecord)
	}

	key := System_Aaa_Accounting_Acctz_SourceRecord_Key{
		Service: Service,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceRecord[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceRecord", key)
	}

	t.SourceRecord[key] = &System_Aaa_Accounting_Acctz_SourceRecord{
		Service: Service,
		Type:    Type,
	}

	return t.SourceRecord[key], nil
}

// RenameSourceRecord renames an entry in the list SourceRecord within
// the System_Aaa_Accounting_Acctz struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Accounting_Acctz) RenameSourceRecord(oldK, newK System_Aaa_Accounting_Acctz_SourceRecord_Key) error {
	if _, ok := t.SourceRecord[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceRecord", newK)
	}

	e, ok := t.SourceRecord[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceRecord", oldK)
	}
	e.Service = newK.Service
	e.Type = newK.Type

	t.SourceRecord[newK] = e
	delete(t.SourceRecord, oldK)
	return nil
}

// GetOrCreateSourceRecordMap returns the list (map) from System_Aaa_Accounting_Acctz.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_Accounting_Acctz) GetOrCreateSourceRecordMap() map[System_Aaa_Accounting_Acctz_SourceRecord_Key]*System_Aaa_Accounting_Acctz_SourceRecord {
	if t.SourceRecord == nil {
		t.SourceRecord = make(map[System_Aaa_Accounting_Acctz_SourceRecord_Key]*System_Aaa_Accounting_Acctz_SourceRecord)
	}
	return t.SourceRecord
}

// GetOrCreateSourceRecord retrieves the value with the specified keys from
// the receiver System_Aaa_Accounting_Acctz. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Accounting_Acctz) GetOrCreateSourceRecord(Service E_GnsiAcctz_ServiceRequest, Type System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) *System_Aaa_Accounting_Acctz_SourceRecord {

	key := System_Aaa_Accounting_Acctz_SourceRecord_Key{
		Service: Service,
		Type:    Type,
	}

	if v, ok := t.SourceRecord[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceRecord(Service, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceRecord got unexpected error: %v", err))
	}
	return v
}

// GetSourceRecord retrieves the value with the specified key from
// the SourceRecord map field of System_Aaa_Accounting_Acctz. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Accounting_Acctz) GetSourceRecord(Service E_GnsiAcctz_ServiceRequest, Type System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) *System_Aaa_Accounting_Acctz_SourceRecord {

	if t == nil {
		return nil
	}

	key := System_Aaa_Accounting_Acctz_SourceRecord_Key{
		Service: Service,
		Type:    Type,
	}

	if lm, ok := t.SourceRecord[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceRecord deletes the value with the specified keys from
// the receiver System_Aaa_Accounting_Acctz. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Accounting_Acctz) DeleteSourceRecord(Service E_GnsiAcctz_ServiceRequest, Type System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) {
	key := System_Aaa_Accounting_Acctz_SourceRecord_Key{
		Service: Service,
		Type:    Type,
	}

	delete(t.SourceRecord, key)
}

// AppendSourceRecord appends the supplied System_Aaa_Accounting_Acctz_SourceRecord struct to the
// list SourceRecord of System_Aaa_Accounting_Acctz. If the key value(s) specified in
// the supplied System_Aaa_Accounting_Acctz_SourceRecord already exist in the list, an error is
// returned.
func (t *System_Aaa_Accounting_Acctz) AppendSourceRecord(v *System_Aaa_Accounting_Acctz_SourceRecord) error {
	key := System_Aaa_Accounting_Acctz_SourceRecord_Key{
		Service: v.Service,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceRecord == nil {
		t.SourceRecord = make(map[System_Aaa_Accounting_Acctz_SourceRecord_Key]*System_Aaa_Accounting_Acctz_SourceRecord)
	}

	if _, ok := t.SourceRecord[key]; ok {
		return fmt.Errorf("duplicate key for list SourceRecord %v", key)
	}

	t.SourceRecord[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting_Acctz
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting_Acctz) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SourceRecord {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Acctz) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Acctz"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Acctz) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Acctz) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Acctz.
func (*System_Aaa_Accounting_Acctz) Î›BelongingModule() string {
	return "openconfig-gnsi-acctz"
}

// System_Aaa_Accounting_Acctz_SourceRecord represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord struct {
	Counters *System_Aaa_Accounting_Acctz_SourceRecord_Counters  `path:"state/counters" module:"openconfig-gnsi-acctz/openconfig-gnsi-acctz"`
	Service  E_GnsiAcctz_ServiceRequest                          `path:"state/service|service" module:"openconfig-gnsi-acctz/openconfig-gnsi-acctz|openconfig-gnsi-acctz" shadow-path:"service" shadow-module:"openconfig-gnsi-acctz"`
	Type     System_Aaa_Accounting_Acctz_SourceRecord_Type_Union `path:"state/type|type" module:"openconfig-gnsi-acctz/openconfig-gnsi-acctz|openconfig-gnsi-acctz" shadow-path:"type" shadow-module:"openconfig-gnsi-acctz"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Acctz_SourceRecord implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Acctz_SourceRecord) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) GetOrCreateCounters() *System_Aaa_Accounting_Acctz_SourceRecord_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Aaa_Accounting_Acctz_SourceRecord_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Aaa_Accounting_Acctz_SourceRecord. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) GetCounters() *System_Aaa_Accounting_Acctz_SourceRecord_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetService retrieves the value of the leaf Service from the System_Aaa_Accounting_Acctz_SourceRecord
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) GetService() E_GnsiAcctz_ServiceRequest {
	if t == nil || t.Service == 0 {
		return 0
	}
	return t.Service
}

// GetType retrieves the value of the leaf Type from the System_Aaa_Accounting_Acctz_SourceRecord
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) GetType() System_Aaa_Accounting_Acctz_SourceRecord_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// SetService sets the value of the leaf Service in the System_Aaa_Accounting_Acctz_SourceRecord
// struct.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) SetService(v E_GnsiAcctz_ServiceRequest) {
	t.Service = v
}

// SetType sets the value of the leaf Type in the System_Aaa_Accounting_Acctz_SourceRecord
// struct.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) SetType(v System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting_Acctz_SourceRecord
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the System_Aaa_Accounting_Acctz_SourceRecord struct, which is a YANG list entry.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
		"type":    t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Acctz_SourceRecord"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Acctz_SourceRecord) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Acctz_SourceRecord.
func (*System_Aaa_Accounting_Acctz_SourceRecord) Î›BelongingModule() string {
	return "openconfig-gnsi-acctz"
}

// System_Aaa_Accounting_Acctz_SourceRecord_Counters represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/counters YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_Counters struct {
	Records *uint64 `path:"records" module:"openconfig-gnsi-acctz"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Acctz_SourceRecord_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Acctz_SourceRecord_Counters) IsYANGGoStruct() {}

// GetRecords retrieves the value of the leaf Records from the System_Aaa_Accounting_Acctz_SourceRecord_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Records is set, it can
// safely use t.GetRecords() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Records == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Acctz_SourceRecord_Counters) GetRecords() uint64 {
	if t == nil || t.Records == nil {
		return 0
	}
	return *t.Records
}

// SetRecords sets the value of the leaf Records in the System_Aaa_Accounting_Acctz_SourceRecord_Counters
// struct.
func (t *System_Aaa_Accounting_Acctz_SourceRecord_Counters) SetRecords(v uint64) {
	t.Records = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting_Acctz_SourceRecord_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting_Acctz_SourceRecord_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Acctz_SourceRecord_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Acctz_SourceRecord_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Acctz_SourceRecord_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Acctz_SourceRecord_Counters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Acctz_SourceRecord_Counters.
func (*System_Aaa_Accounting_Acctz_SourceRecord_Counters) Î›BelongingModule() string {
	return "openconfig-gnsi-acctz"
}

// System_Aaa_Accounting_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_Event struct {
	EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE `path:"state/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Record    E_Event_Record                       `path:"state/record" module:"openconfig-system/openconfig-system" shadow-path:"config/record" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetEventType() E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetRecord() E_Event_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// SetEventType sets the value of the leaf EventType in the System_Aaa_Accounting_Event
// struct.
func (t *System_Aaa_Accounting_Event) SetEventType(v E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	t.EventType = v
}

// SetRecord sets the value of the leaf Record in the System_Aaa_Accounting_Event
// struct.
func (t *System_Aaa_Accounting_Event) SetRecord(v E_Event_Record) {
	t.Record = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Aaa_Accounting_Event struct, which is a YANG list entry.
func (t *System_Aaa_Accounting_Event) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Event) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Event.
func (*System_Aaa_Accounting_Event) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_Authentication struct {
	AdminUser            *System_Aaa_Authentication_AdminUser                   `path:"admin-user" module:"openconfig-system"`
	AuthenticationMethod []System_Aaa_Authentication_AuthenticationMethod_Union `path:"state/authentication-method" module:"openconfig-system/openconfig-system" shadow-path:"config/authentication-method" shadow-module:"openconfig-system/openconfig-system"`
	User                 map[string]*System_Aaa_Authentication_User             `path:"users/user" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// System_Aaa_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authentication) NewUser(Username string) (*System_Aaa_Authentication_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &System_Aaa_Authentication_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the System_Aaa_Authentication struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authentication) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUserMap returns the list (map) from System_Aaa_Authentication.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_Authentication) GetOrCreateUserMap() map[string]*System_Aaa_Authentication_User {
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}
	return t.User
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver System_Aaa_Authentication. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authentication) GetOrCreateUser(Username string) *System_Aaa_Authentication_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of System_Aaa_Authentication. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authentication) GetUser(Username string) *System_Aaa_Authentication_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver System_Aaa_Authentication. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authentication) DeleteUser(Username string) {
	key := Username

	delete(t.User, key)
}

// AppendUser appends the supplied System_Aaa_Authentication_User struct to the
// list User of System_Aaa_Authentication. If the key value(s) specified in
// the supplied System_Aaa_Authentication_User already exist in the list, an error is
// returned.
func (t *System_Aaa_Authentication) AppendUser(v *System_Aaa_Authentication_User) error {
	if v.Username == nil {
		return fmt.Errorf("invalid nil key received for Username")
	}

	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *System_Aaa_Authentication) GetOrCreateAdminUser() *System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_Authentication) GetAdminUser() *System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationMethod is set, it can
// safely use t.GetAuthenticationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication) GetAuthenticationMethod() []System_Aaa_Authentication_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// SetAuthenticationMethod sets the value of the leaf AuthenticationMethod in the System_Aaa_Authentication
// struct.
func (t *System_Aaa_Authentication) SetAuthenticationMethod(v []System_Aaa_Authentication_AuthenticationMethod_Union) {
	t.AuthenticationMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdminUser.PopulateDefaults()
	for _, e := range t.User {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication.
func (*System_Aaa_Authentication) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUser struct {
	AdminPassword                     *string `path:"state/admin-password" module:"openconfig-system/openconfig-system" shadow-path:"config/admin-password" shadow-module:"openconfig-system/openconfig-system"`
	AdminPasswordHashed               *string `path:"state/admin-password-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/admin-password-hashed" shadow-module:"openconfig-system/openconfig-system"`
	AdminUsername                     *string `path:"state/admin-username" module:"openconfig-system/openconfig-system"`
	AuthorizedKeysListCreatedOn       *uint64 `path:"state/authorized-keys-list-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	AuthorizedKeysListVersion         *string `path:"state/authorized-keys-list-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	AuthorizedPrincipalsListCreatedOn *uint64 `path:"state/authorized-principals-list-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	AuthorizedPrincipalsListVersion   *string `path:"state/authorized-principals-list-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	PasswordCreatedOn                 *uint64 `path:"state/password-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	PasswordVersion                   *string `path:"state/password-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPassword is set, it can
// safely use t.GetAdminPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPassword == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPasswordHashed is set, it can
// safely use t.GetAdminPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// GetAdminUsername retrieves the value of the leaf AdminUsername from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminUsername is set, it can
// safely use t.GetAdminUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminUsername == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminUsername() string {
	if t == nil || t.AdminUsername == nil {
		return ""
	}
	return *t.AdminUsername
}

// GetAuthorizedKeysListCreatedOn retrieves the value of the leaf AuthorizedKeysListCreatedOn from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedKeysListCreatedOn is set, it can
// safely use t.GetAuthorizedKeysListCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedKeysListCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAuthorizedKeysListCreatedOn() uint64 {
	if t == nil || t.AuthorizedKeysListCreatedOn == nil {
		return 0
	}
	return *t.AuthorizedKeysListCreatedOn
}

// GetAuthorizedKeysListVersion retrieves the value of the leaf AuthorizedKeysListVersion from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedKeysListVersion is set, it can
// safely use t.GetAuthorizedKeysListVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedKeysListVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAuthorizedKeysListVersion() string {
	if t == nil || t.AuthorizedKeysListVersion == nil {
		return ""
	}
	return *t.AuthorizedKeysListVersion
}

// GetAuthorizedPrincipalsListCreatedOn retrieves the value of the leaf AuthorizedPrincipalsListCreatedOn from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedPrincipalsListCreatedOn is set, it can
// safely use t.GetAuthorizedPrincipalsListCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedPrincipalsListCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAuthorizedPrincipalsListCreatedOn() uint64 {
	if t == nil || t.AuthorizedPrincipalsListCreatedOn == nil {
		return 0
	}
	return *t.AuthorizedPrincipalsListCreatedOn
}

// GetAuthorizedPrincipalsListVersion retrieves the value of the leaf AuthorizedPrincipalsListVersion from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedPrincipalsListVersion is set, it can
// safely use t.GetAuthorizedPrincipalsListVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedPrincipalsListVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAuthorizedPrincipalsListVersion() string {
	if t == nil || t.AuthorizedPrincipalsListVersion == nil {
		return ""
	}
	return *t.AuthorizedPrincipalsListVersion
}

// GetPasswordCreatedOn retrieves the value of the leaf PasswordCreatedOn from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordCreatedOn is set, it can
// safely use t.GetPasswordCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetPasswordCreatedOn() uint64 {
	if t == nil || t.PasswordCreatedOn == nil {
		return 0
	}
	return *t.PasswordCreatedOn
}

// GetPasswordVersion retrieves the value of the leaf PasswordVersion from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordVersion is set, it can
// safely use t.GetPasswordVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetPasswordVersion() string {
	if t == nil || t.PasswordVersion == nil {
		return ""
	}
	return *t.PasswordVersion
}

// SetAdminPassword sets the value of the leaf AdminPassword in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminPassword(v string) {
	t.AdminPassword = &v
}

// SetAdminPasswordHashed sets the value of the leaf AdminPasswordHashed in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminPasswordHashed(v string) {
	t.AdminPasswordHashed = &v
}

// SetAdminUsername sets the value of the leaf AdminUsername in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminUsername(v string) {
	t.AdminUsername = &v
}

// SetAuthorizedKeysListCreatedOn sets the value of the leaf AuthorizedKeysListCreatedOn in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAuthorizedKeysListCreatedOn(v uint64) {
	t.AuthorizedKeysListCreatedOn = &v
}

// SetAuthorizedKeysListVersion sets the value of the leaf AuthorizedKeysListVersion in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAuthorizedKeysListVersion(v string) {
	t.AuthorizedKeysListVersion = &v
}

// SetAuthorizedPrincipalsListCreatedOn sets the value of the leaf AuthorizedPrincipalsListCreatedOn in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAuthorizedPrincipalsListCreatedOn(v uint64) {
	t.AuthorizedPrincipalsListCreatedOn = &v
}

// SetAuthorizedPrincipalsListVersion sets the value of the leaf AuthorizedPrincipalsListVersion in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAuthorizedPrincipalsListVersion(v string) {
	t.AuthorizedPrincipalsListVersion = &v
}

// SetPasswordCreatedOn sets the value of the leaf PasswordCreatedOn in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetPasswordCreatedOn(v uint64) {
	t.PasswordCreatedOn = &v
}

// SetPasswordVersion sets the value of the leaf PasswordVersion in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetPasswordVersion(v string) {
	t.PasswordVersion = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_AdminUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_AdminUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_AdminUser) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_AdminUser.
func (*System_Aaa_Authentication_AdminUser) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_User struct {
	AuthorizedKeysListCreatedOn       *uint64                                   `path:"state/authorized-keys-list-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	AuthorizedKeysListVersion         *string                                   `path:"state/authorized-keys-list-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	AuthorizedPrincipalsListCreatedOn *uint64                                   `path:"state/authorized-principals-list-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	AuthorizedPrincipalsListVersion   *string                                   `path:"state/authorized-principals-list-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	Password                          *string                                   `path:"state/password" module:"openconfig-system/openconfig-system" shadow-path:"config/password" shadow-module:"openconfig-system/openconfig-system"`
	PasswordCreatedOn                 *uint64                                   `path:"state/password-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	PasswordHashed                    *string                                   `path:"state/password-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/password-hashed" shadow-module:"openconfig-system/openconfig-system"`
	PasswordVersion                   *string                                   `path:"state/password-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	Role                              System_Aaa_Authentication_User_Role_Union `path:"state/role" module:"openconfig-system/openconfig-system" shadow-path:"config/role" shadow-module:"openconfig-system/openconfig-system"`
	SshKey                            *string                                   `path:"state/ssh-key" module:"openconfig-system/openconfig-system" shadow-path:"config/ssh-key" shadow-module:"openconfig-system/openconfig-system"`
	Username                          *string                                   `path:"state/username|username" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/username|username" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_User) IsYANGGoStruct() {}

// GetAuthorizedKeysListCreatedOn retrieves the value of the leaf AuthorizedKeysListCreatedOn from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedKeysListCreatedOn is set, it can
// safely use t.GetAuthorizedKeysListCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedKeysListCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedKeysListCreatedOn() uint64 {
	if t == nil || t.AuthorizedKeysListCreatedOn == nil {
		return 0
	}
	return *t.AuthorizedKeysListCreatedOn
}

// GetAuthorizedKeysListVersion retrieves the value of the leaf AuthorizedKeysListVersion from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedKeysListVersion is set, it can
// safely use t.GetAuthorizedKeysListVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedKeysListVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedKeysListVersion() string {
	if t == nil || t.AuthorizedKeysListVersion == nil {
		return ""
	}
	return *t.AuthorizedKeysListVersion
}

// GetAuthorizedPrincipalsListCreatedOn retrieves the value of the leaf AuthorizedPrincipalsListCreatedOn from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedPrincipalsListCreatedOn is set, it can
// safely use t.GetAuthorizedPrincipalsListCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedPrincipalsListCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedPrincipalsListCreatedOn() uint64 {
	if t == nil || t.AuthorizedPrincipalsListCreatedOn == nil {
		return 0
	}
	return *t.AuthorizedPrincipalsListCreatedOn
}

// GetAuthorizedPrincipalsListVersion retrieves the value of the leaf AuthorizedPrincipalsListVersion from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedPrincipalsListVersion is set, it can
// safely use t.GetAuthorizedPrincipalsListVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedPrincipalsListVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedPrincipalsListVersion() string {
	if t == nil || t.AuthorizedPrincipalsListVersion == nil {
		return ""
	}
	return *t.AuthorizedPrincipalsListVersion
}

// GetPassword retrieves the value of the leaf Password from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordCreatedOn retrieves the value of the leaf PasswordCreatedOn from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordCreatedOn is set, it can
// safely use t.GetPasswordCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordCreatedOn() uint64 {
	if t == nil || t.PasswordCreatedOn == nil {
		return 0
	}
	return *t.PasswordCreatedOn
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordHashed is set, it can
// safely use t.GetPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetPasswordVersion retrieves the value of the leaf PasswordVersion from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordVersion is set, it can
// safely use t.GetPasswordVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordVersion() string {
	if t == nil || t.PasswordVersion == nil {
		return ""
	}
	return *t.PasswordVersion
}

// GetRole retrieves the value of the leaf Role from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetRole() System_Aaa_Authentication_User_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshKey is set, it can
// safely use t.GetSshKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// SetAuthorizedKeysListCreatedOn sets the value of the leaf AuthorizedKeysListCreatedOn in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedKeysListCreatedOn(v uint64) {
	t.AuthorizedKeysListCreatedOn = &v
}

// SetAuthorizedKeysListVersion sets the value of the leaf AuthorizedKeysListVersion in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedKeysListVersion(v string) {
	t.AuthorizedKeysListVersion = &v
}

// SetAuthorizedPrincipalsListCreatedOn sets the value of the leaf AuthorizedPrincipalsListCreatedOn in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedPrincipalsListCreatedOn(v uint64) {
	t.AuthorizedPrincipalsListCreatedOn = &v
}

// SetAuthorizedPrincipalsListVersion sets the value of the leaf AuthorizedPrincipalsListVersion in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedPrincipalsListVersion(v string) {
	t.AuthorizedPrincipalsListVersion = &v
}

// SetPassword sets the value of the leaf Password in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPassword(v string) {
	t.Password = &v
}

// SetPasswordCreatedOn sets the value of the leaf PasswordCreatedOn in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPasswordCreatedOn(v uint64) {
	t.PasswordCreatedOn = &v
}

// SetPasswordHashed sets the value of the leaf PasswordHashed in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPasswordHashed(v string) {
	t.PasswordHashed = &v
}

// SetPasswordVersion sets the value of the leaf PasswordVersion in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPasswordVersion(v string) {
	t.PasswordVersion = &v
}

// SetRole sets the value of the leaf Role in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetRole(v System_Aaa_Authentication_User_Role_Union) {
	t.Role = v
}

// SetSshKey sets the value of the leaf SshKey in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetSshKey(v string) {
	t.SshKey = &v
}

// SetUsername sets the value of the leaf Username in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetUsername(v string) {
	t.Username = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Aaa_Authentication_User struct, which is a YANG list entry.
func (t *System_Aaa_Authentication_User) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_User) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_User.
func (*System_Aaa_Authentication_User) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_Authorization struct {
	AuthorizationMethod      []System_Aaa_Authorization_AuthorizationMethod_Union                        `path:"state/authorization-method" module:"openconfig-system/openconfig-system" shadow-path:"config/authorization-method" shadow-module:"openconfig-system/openconfig-system"`
	Event                    map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
	GrpcAuthzPolicyCreatedOn *uint64                                                                     `path:"state/grpc-authz-policy-created-on" module:"openconfig-system/openconfig-gnsi-authz"`
	GrpcAuthzPolicyVersion   *string                                                                     `path:"state/grpc-authz-policy-version" module:"openconfig-system/openconfig-gnsi-authz"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Authorization struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authorization) NewEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*System_Aaa_Authorization_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Authorization_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Authorization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authorization) RenameEvent(oldK, newK E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEventMap returns the list (map) from System_Aaa_Authorization.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_Authorization) GetOrCreateEventMap() map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event {
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}
	return t.Event
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Authorization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authorization) GetOrCreateEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Authorization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authorization) GetEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Authorization. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authorization) DeleteEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Authorization_Event struct to the
// list Event of System_Aaa_Authorization. If the key value(s) specified in
// the supplied System_Aaa_Authorization_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Authorization) AppendEvent(v *System_Aaa_Authorization_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the System_Aaa_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizationMethod is set, it can
// safely use t.GetAuthorizationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization) GetAuthorizationMethod() []System_Aaa_Authorization_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// GetGrpcAuthzPolicyCreatedOn retrieves the value of the leaf GrpcAuthzPolicyCreatedOn from the System_Aaa_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrpcAuthzPolicyCreatedOn is set, it can
// safely use t.GetGrpcAuthzPolicyCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrpcAuthzPolicyCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization) GetGrpcAuthzPolicyCreatedOn() uint64 {
	if t == nil || t.GrpcAuthzPolicyCreatedOn == nil {
		return 0
	}
	return *t.GrpcAuthzPolicyCreatedOn
}

// GetGrpcAuthzPolicyVersion retrieves the value of the leaf GrpcAuthzPolicyVersion from the System_Aaa_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrpcAuthzPolicyVersion is set, it can
// safely use t.GetGrpcAuthzPolicyVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrpcAuthzPolicyVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization) GetGrpcAuthzPolicyVersion() string {
	if t == nil || t.GrpcAuthzPolicyVersion == nil {
		return ""
	}
	return *t.GrpcAuthzPolicyVersion
}

// SetAuthorizationMethod sets the value of the leaf AuthorizationMethod in the System_Aaa_Authorization
// struct.
func (t *System_Aaa_Authorization) SetAuthorizationMethod(v []System_Aaa_Authorization_AuthorizationMethod_Union) {
	t.AuthorizationMethod = v
}

// SetGrpcAuthzPolicyCreatedOn sets the value of the leaf GrpcAuthzPolicyCreatedOn in the System_Aaa_Authorization
// struct.
func (t *System_Aaa_Authorization) SetGrpcAuthzPolicyCreatedOn(v uint64) {
	t.GrpcAuthzPolicyCreatedOn = &v
}

// SetGrpcAuthzPolicyVersion sets the value of the leaf GrpcAuthzPolicyVersion in the System_Aaa_Authorization
// struct.
func (t *System_Aaa_Authorization) SetGrpcAuthzPolicyVersion(v string) {
	t.GrpcAuthzPolicyVersion = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization.
func (*System_Aaa_Authorization) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_Event struct {
	EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"state/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Authorization_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization_Event) GetEventType() E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// SetEventType sets the value of the leaf EventType in the System_Aaa_Authorization_Event
// struct.
func (t *System_Aaa_Authorization_Event) SetEventType(v E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	t.EventType = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Aaa_Authorization_Event struct, which is a YANG list entry.
func (t *System_Aaa_Authorization_Event) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization_Event) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization_Event.
func (*System_Aaa_Authorization_Event) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroup struct {
	Name   *string                                   `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/name|name" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Server map[string]*System_Aaa_ServerGroup_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
	Type   E_AaaTypes_AAA_SERVER_TYPE                `path:"state/type" module:"openconfig-system/openconfig-system" shadow-path:"config/type" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// System_Aaa_ServerGroup struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_ServerGroup) NewServer(Address string) (*System_Aaa_ServerGroup_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Aaa_ServerGroup_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Aaa_ServerGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_ServerGroup) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServerMap returns the list (map) from System_Aaa_ServerGroup.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_ServerGroup) GetOrCreateServerMap() map[string]*System_Aaa_ServerGroup_Server {
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}
	return t.Server
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_ServerGroup) GetOrCreateServer(Address string) *System_Aaa_ServerGroup_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Aaa_ServerGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_ServerGroup) GetServer(Address string) *System_Aaa_ServerGroup_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_ServerGroup) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Aaa_ServerGroup_Server struct to the
// list Server of System_Aaa_ServerGroup. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup_Server already exist in the list, an error is
// returned.
func (t *System_Aaa_ServerGroup) AppendServer(v *System_Aaa_ServerGroup_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetType() E_AaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetName sets the value of the leaf Name in the System_Aaa_ServerGroup
// struct.
func (t *System_Aaa_ServerGroup) SetName(v string) {
	t.Name = &v
}

// SetType sets the value of the leaf Type in the System_Aaa_ServerGroup
// struct.
func (t *System_Aaa_ServerGroup) SetType(v E_AaaTypes_AAA_SERVER_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the System_Aaa_ServerGroup struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup.
func (*System_Aaa_ServerGroup) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_Server struct {
	Address            *string                               `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	ConnectionAborts   *uint64                               `path:"state/connection-aborts" module:"openconfig-system/openconfig-system"`
	ConnectionCloses   *uint64                               `path:"state/connection-closes" module:"openconfig-system/openconfig-system"`
	ConnectionFailures *uint64                               `path:"state/connection-failures" module:"openconfig-system/openconfig-system"`
	ConnectionOpens    *uint64                               `path:"state/connection-opens" module:"openconfig-system/openconfig-system"`
	ConnectionTimeouts *uint64                               `path:"state/connection-timeouts" module:"openconfig-system/openconfig-system"`
	ErrorsReceived     *uint64                               `path:"state/errors-received" module:"openconfig-system/openconfig-system"`
	MessagesReceived   *uint64                               `path:"state/messages-received" module:"openconfig-system/openconfig-system"`
	MessagesSent       *uint64                               `path:"state/messages-sent" module:"openconfig-system/openconfig-system"`
	Name               *string                               `path:"state/name" module:"openconfig-system/openconfig-system" shadow-path:"config/name" shadow-module:"openconfig-system/openconfig-system"`
	Radius             *System_Aaa_ServerGroup_Server_Radius `path:"radius" module:"openconfig-system"`
	Tacacs             *System_Aaa_ServerGroup_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	Timeout            *uint16                               `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server) IsYANGGoStruct() {}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &System_Aaa_ServerGroup_Server_Radius{}
	return t.Radius
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &System_Aaa_ServerGroup_Server_Tacacs{}
	return t.Tacacs
}

// GetRadius returns the value of the Radius struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetConnectionAborts retrieves the value of the leaf ConnectionAborts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionAborts is set, it can
// safely use t.GetConnectionAborts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionAborts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionAborts() uint64 {
	if t == nil || t.ConnectionAborts == nil {
		return 0
	}
	return *t.ConnectionAborts
}

// GetConnectionCloses retrieves the value of the leaf ConnectionCloses from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionCloses is set, it can
// safely use t.GetConnectionCloses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionCloses == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionCloses() uint64 {
	if t == nil || t.ConnectionCloses == nil {
		return 0
	}
	return *t.ConnectionCloses
}

// GetConnectionFailures retrieves the value of the leaf ConnectionFailures from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionFailures is set, it can
// safely use t.GetConnectionFailures() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionFailures == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionFailures() uint64 {
	if t == nil || t.ConnectionFailures == nil {
		return 0
	}
	return *t.ConnectionFailures
}

// GetConnectionOpens retrieves the value of the leaf ConnectionOpens from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionOpens is set, it can
// safely use t.GetConnectionOpens() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionOpens == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionOpens() uint64 {
	if t == nil || t.ConnectionOpens == nil {
		return 0
	}
	return *t.ConnectionOpens
}

// GetConnectionTimeouts retrieves the value of the leaf ConnectionTimeouts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeouts is set, it can
// safely use t.GetConnectionTimeouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeouts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionTimeouts() uint64 {
	if t == nil || t.ConnectionTimeouts == nil {
		return 0
	}
	return *t.ConnectionTimeouts
}

// GetErrorsReceived retrieves the value of the leaf ErrorsReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorsReceived is set, it can
// safely use t.GetErrorsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorsReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetErrorsReceived() uint64 {
	if t == nil || t.ErrorsReceived == nil {
		return 0
	}
	return *t.ErrorsReceived
}

// GetMessagesReceived retrieves the value of the leaf MessagesReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesReceived is set, it can
// safely use t.GetMessagesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesReceived() uint64 {
	if t == nil || t.MessagesReceived == nil {
		return 0
	}
	return *t.MessagesReceived
}

// GetMessagesSent retrieves the value of the leaf MessagesSent from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesSent is set, it can
// safely use t.GetMessagesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesSent == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesSent() uint64 {
	if t == nil || t.MessagesSent == nil {
		return 0
	}
	return *t.MessagesSent
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetAddress sets the value of the leaf Address in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetAddress(v string) {
	t.Address = &v
}

// SetConnectionAborts sets the value of the leaf ConnectionAborts in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionAborts(v uint64) {
	t.ConnectionAborts = &v
}

// SetConnectionCloses sets the value of the leaf ConnectionCloses in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionCloses(v uint64) {
	t.ConnectionCloses = &v
}

// SetConnectionFailures sets the value of the leaf ConnectionFailures in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionFailures(v uint64) {
	t.ConnectionFailures = &v
}

// SetConnectionOpens sets the value of the leaf ConnectionOpens in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionOpens(v uint64) {
	t.ConnectionOpens = &v
}

// SetConnectionTimeouts sets the value of the leaf ConnectionTimeouts in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionTimeouts(v uint64) {
	t.ConnectionTimeouts = &v
}

// SetErrorsReceived sets the value of the leaf ErrorsReceived in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetErrorsReceived(v uint64) {
	t.ErrorsReceived = &v
}

// SetMessagesReceived sets the value of the leaf MessagesReceived in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetMessagesReceived(v uint64) {
	t.MessagesReceived = &v
}

// SetMessagesSent sets the value of the leaf MessagesSent in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetMessagesSent(v uint64) {
	t.MessagesSent = &v
}

// SetName sets the value of the leaf Name in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetName(v string) {
	t.Name = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Radius.PopulateDefaults()
	t.Tacacs.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the System_Aaa_ServerGroup_Server struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup_Server) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server.
func (*System_Aaa_ServerGroup_Server) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_Radius struct {
	AcctPort           *uint16                                        `path:"state/acct-port" module:"openconfig-system/openconfig-system" shadow-path:"config/acct-port" shadow-module:"openconfig-system/openconfig-system"`
	AuthPort           *uint16                                        `path:"state/auth-port" module:"openconfig-system/openconfig-system" shadow-path:"config/auth-port" shadow-module:"openconfig-system/openconfig-system"`
	Counters           *System_Aaa_ServerGroup_Server_Radius_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	RetransmitAttempts *uint8                                         `path:"state/retransmit-attempts" module:"openconfig-system/openconfig-system" shadow-path:"config/retransmit-attempts" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey          *string                                        `path:"state/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed    *string                                        `path:"state/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress      *string                                        `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server_Radius) GetOrCreateCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Aaa_ServerGroup_Server_Radius_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Aaa_ServerGroup_Server_Radius. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server_Radius) GetCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAcctPort retrieves the value of the leaf AcctPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitAttempts is set, it can
// safely use t.GetRetransmitAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitAttempts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetAcctPort sets the value of the leaf AcctPort in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetAcctPort(v uint16) {
	t.AcctPort = &v
}

// SetAuthPort sets the value of the leaf AuthPort in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetAuthPort(v uint16) {
	t.AuthPort = &v
}

// SetRetransmitAttempts sets the value of the leaf RetransmitAttempts in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetRetransmitAttempts(v uint8) {
	t.RetransmitAttempts = &v
}

// SetSecretKey sets the value of the leaf SecretKey in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSecretKey(v string) {
	t.SecretKey = &v
}

// SetSecretKeyHashed sets the value of the leaf SecretKeyHashed in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSecretKeyHashed(v string) {
	t.SecretKeyHashed = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctPort == nil {
		var v uint16 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v uint16 = 1812
		t.AuthPort = &v
	}
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius.
func (*System_Aaa_ServerGroup_Server_Radius) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters struct {
	AccessAccepts         *uint64 `path:"access-accepts" module:"openconfig-system"`
	AccessRejects         *uint64 `path:"access-rejects" module:"openconfig-system"`
	RetriedAccessRequests *uint64 `path:"retried-access-requests" module:"openconfig-system"`
	TimeoutAccessRequests *uint64 `path:"timeout-access-requests" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetRetriedAccessRequests retrieves the value of the leaf RetriedAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetriedAccessRequests is set, it can
// safely use t.GetRetriedAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetriedAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetRetriedAccessRequests() uint64 {
	if t == nil || t.RetriedAccessRequests == nil {
		return 0
	}
	return *t.RetriedAccessRequests
}

// GetTimeoutAccessRequests retrieves the value of the leaf TimeoutAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAccessRequests is set, it can
// safely use t.GetTimeoutAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetTimeoutAccessRequests() uint64 {
	if t == nil || t.TimeoutAccessRequests == nil {
		return 0
	}
	return *t.TimeoutAccessRequests
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetRetriedAccessRequests sets the value of the leaf RetriedAccessRequests in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetRetriedAccessRequests(v uint64) {
	t.RetriedAccessRequests = &v
}

// SetTimeoutAccessRequests sets the value of the leaf TimeoutAccessRequests in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetTimeoutAccessRequests(v uint64) {
	t.TimeoutAccessRequests = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius_Counters.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs struct {
	Port            *uint16 `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey       *string `path:"state/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed *string `path:"state/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress   *string `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Tacacs) IsYANGGoStruct() {}

// GetPort retrieves the value of the leaf Port from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetPort sets the value of the leaf Port in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetPort(v uint16) {
	t.Port = &v
}

// SetSecretKey sets the value of the leaf SecretKey in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSecretKey(v string) {
	t.SecretKey = &v
}

// SetSecretKeyHashed sets the value of the leaf SecretKeyHashed in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSecretKeyHashed(v string) {
	t.SecretKeyHashed = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Tacacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Tacacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 49
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Tacacs) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Tacacs.
func (*System_Aaa_ServerGroup_Server_Tacacs) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_Alarm struct {
	Id          *string                                `path:"state/id|id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"id" shadow-module:"openconfig-system"`
	Resource    *string                                `path:"state/resource" module:"openconfig-system/openconfig-system"`
	Severity    E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"state/severity" module:"openconfig-system/openconfig-system"`
	Text        *string                                `path:"state/text" module:"openconfig-system/openconfig-system"`
	TimeCreated *uint64                                `path:"state/time-created" module:"openconfig-system/openconfig-system"`
	TypeId      System_Alarm_TypeId_Union              `path:"state/type-id" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Alarm) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetResource retrieves the value of the leaf Resource from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resource is set, it can
// safely use t.GetResource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resource == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetResource() string {
	if t == nil || t.Resource == nil {
		return ""
	}
	return *t.Resource
}

// GetSeverity retrieves the value of the leaf Severity from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetText retrieves the value of the leaf Text from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Text is set, it can
// safely use t.GetText() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Text == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetTimeCreated retrieves the value of the leaf TimeCreated from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeCreated is set, it can
// safely use t.GetTimeCreated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeCreated == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTimeCreated() uint64 {
	if t == nil || t.TimeCreated == nil {
		return 0
	}
	return *t.TimeCreated
}

// GetTypeId retrieves the value of the leaf TypeId from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeId is set, it can
// safely use t.GetTypeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeId == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTypeId() System_Alarm_TypeId_Union {
	if t == nil || t.TypeId == nil {
		return nil
	}
	return t.TypeId
}

// SetId sets the value of the leaf Id in the System_Alarm
// struct.
func (t *System_Alarm) SetId(v string) {
	t.Id = &v
}

// SetResource sets the value of the leaf Resource in the System_Alarm
// struct.
func (t *System_Alarm) SetResource(v string) {
	t.Resource = &v
}

// SetSeverity sets the value of the leaf Severity in the System_Alarm
// struct.
func (t *System_Alarm) SetSeverity(v E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	t.Severity = v
}

// SetText sets the value of the leaf Text in the System_Alarm
// struct.
func (t *System_Alarm) SetText(v string) {
	t.Text = &v
}

// SetTimeCreated sets the value of the leaf TimeCreated in the System_Alarm
// struct.
func (t *System_Alarm) SetTimeCreated(v uint64) {
	t.TimeCreated = &v
}

// SetTypeId sets the value of the leaf TypeId in the System_Alarm
// struct.
func (t *System_Alarm) SetTypeId(v System_Alarm_TypeId_Union) {
	t.TypeId = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Alarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Alarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Alarm struct, which is a YANG list entry.
func (t *System_Alarm) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Alarm) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Alarm.
func (*System_Alarm) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Bootz represents the /openconfig-system/system/bootz YANG schema element.
type System_Bootz struct {
	Checksum        *string        `path:"state/checksum" module:"openconfig-system-bootz/openconfig-system-bootz"`
	ErrorCount      *uint64        `path:"state/error-count" module:"openconfig-system-bootz/openconfig-system-bootz"`
	LastBootAttempt *uint64        `path:"state/last-boot-attempt" module:"openconfig-system-bootz/openconfig-system-bootz"`
	Status          E_Bootz_Status `path:"state/status" module:"openconfig-system-bootz/openconfig-system-bootz"`
}

// IsYANGGoStruct ensures that System_Bootz implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Bootz) IsYANGGoStruct() {}

// GetChecksum retrieves the value of the leaf Checksum from the System_Bootz
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Checksum is set, it can
// safely use t.GetChecksum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Checksum == nil' before retrieving the leaf's value.
func (t *System_Bootz) GetChecksum() string {
	if t == nil || t.Checksum == nil {
		return ""
	}
	return *t.Checksum
}

// GetErrorCount retrieves the value of the leaf ErrorCount from the System_Bootz
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorCount is set, it can
// safely use t.GetErrorCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorCount == nil' before retrieving the leaf's value.
func (t *System_Bootz) GetErrorCount() uint64 {
	if t == nil || t.ErrorCount == nil {
		return 0
	}
	return *t.ErrorCount
}

// GetLastBootAttempt retrieves the value of the leaf LastBootAttempt from the System_Bootz
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastBootAttempt is set, it can
// safely use t.GetLastBootAttempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastBootAttempt == nil' before retrieving the leaf's value.
func (t *System_Bootz) GetLastBootAttempt() uint64 {
	if t == nil || t.LastBootAttempt == nil {
		return 0
	}
	return *t.LastBootAttempt
}

// GetStatus retrieves the value of the leaf Status from the System_Bootz
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Status is set, it can
// safely use t.GetStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Status == nil' before retrieving the leaf's value.
func (t *System_Bootz) GetStatus() E_Bootz_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// SetChecksum sets the value of the leaf Checksum in the System_Bootz
// struct.
func (t *System_Bootz) SetChecksum(v string) {
	t.Checksum = &v
}

// SetErrorCount sets the value of the leaf ErrorCount in the System_Bootz
// struct.
func (t *System_Bootz) SetErrorCount(v uint64) {
	t.ErrorCount = &v
}

// SetLastBootAttempt sets the value of the leaf LastBootAttempt in the System_Bootz
// struct.
func (t *System_Bootz) SetLastBootAttempt(v uint64) {
	t.LastBootAttempt = &v
}

// SetStatus sets the value of the leaf Status in the System_Bootz
// struct.
func (t *System_Bootz) SetStatus(v E_Bootz_Status) {
	t.Status = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Bootz
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Bootz) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Checksum == nil {
		var v string = ""
		t.Checksum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Bootz) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Bootz"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Bootz) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Bootz) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Bootz.
func (*System_Bootz) Î›BelongingModule() string {
	return "openconfig-system-bootz"
}

// System_Clock represents the /openconfig-system/system/clock YANG schema element.
type System_Clock struct {
	TimezoneName *string `path:"state/timezone-name" module:"openconfig-system/openconfig-system" shadow-path:"config/timezone-name" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Clock) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the System_Clock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimezoneName is set, it can
// safely use t.GetTimezoneName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimezoneName == nil' before retrieving the leaf's value.
func (t *System_Clock) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// SetTimezoneName sets the value of the leaf TimezoneName in the System_Clock
// struct.
func (t *System_Clock) SetTimezoneName(v string) {
	t.TimezoneName = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Clock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Clock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Clock) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Clock.
func (*System_Clock) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Console represents the /openconfig-system/system/console YANG schema element.
type System_Console struct {
	Counters *System_Console_Counters `path:"state/counters" module:"openconfig-gnsi-credentialz/openconfig-gnsi-credentialz"`
	Enabled  *bool                    `path:"state/enabled" module:"openconfig-gnsi-credentialz/openconfig-gnsi-credentialz"`
}

// IsYANGGoStruct ensures that System_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Console) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Console) GetOrCreateCounters() *System_Console_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Console_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Console. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Console) GetCounters() *System_Console_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the System_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Console) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetEnabled sets the value of the leaf Enabled in the System_Console
// struct.
func (t *System_Console) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Console) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Console) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Console) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Console.
func (*System_Console) Î›BelongingModule() string {
	return "openconfig-gnsi-credentialz"
}

// System_Console_Counters represents the /openconfig-system/system/console/state/counters YANG schema element.
type System_Console_Counters struct {
	AccessAccepts    *uint64 `path:"access-accepts" module:"openconfig-gnsi-credentialz"`
	AccessRejects    *uint64 `path:"access-rejects" module:"openconfig-gnsi-credentialz"`
	LastAccessAccept *uint64 `path:"last-access-accept" module:"openconfig-gnsi-credentialz"`
	LastAccessReject *uint64 `path:"last-access-reject" module:"openconfig-gnsi-credentialz"`
}

// IsYANGGoStruct ensures that System_Console_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Console_Counters) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_Console_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_Console_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_Console_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_Console_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetLastAccessAccept retrieves the value of the leaf LastAccessAccept from the System_Console_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessAccept is set, it can
// safely use t.GetLastAccessAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessAccept == nil' before retrieving the leaf's value.
func (t *System_Console_Counters) GetLastAccessAccept() uint64 {
	if t == nil || t.LastAccessAccept == nil {
		return 0
	}
	return *t.LastAccessAccept
}

// GetLastAccessReject retrieves the value of the leaf LastAccessReject from the System_Console_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessReject is set, it can
// safely use t.GetLastAccessReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessReject == nil' before retrieving the leaf's value.
func (t *System_Console_Counters) GetLastAccessReject() uint64 {
	if t == nil || t.LastAccessReject == nil {
		return 0
	}
	return *t.LastAccessReject
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_Console_Counters
// struct.
func (t *System_Console_Counters) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_Console_Counters
// struct.
func (t *System_Console_Counters) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetLastAccessAccept sets the value of the leaf LastAccessAccept in the System_Console_Counters
// struct.
func (t *System_Console_Counters) SetLastAccessAccept(v uint64) {
	t.LastAccessAccept = &v
}

// SetLastAccessReject sets the value of the leaf LastAccessReject in the System_Console_Counters
// struct.
func (t *System_Console_Counters) SetLastAccessReject(v uint64) {
	t.LastAccessReject = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Console_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Console_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Console_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Console_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Console_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Console_Counters) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Console_Counters.
func (*System_Console_Counters) Î›BelongingModule() string {
	return "openconfig-gnsi-credentialz"
}

// System_ControlPlaneTraffic represents the /openconfig-system/system/control-plane-traffic YANG schema element.
type System_ControlPlaneTraffic struct {
	Egress  *System_ControlPlaneTraffic_Egress  `path:"egress" module:"openconfig-system-controlplane"`
	Ingress *System_ControlPlaneTraffic_Ingress `path:"ingress" module:"openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *System_ControlPlaneTraffic) GetOrCreateEgress() *System_ControlPlaneTraffic_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &System_ControlPlaneTraffic_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *System_ControlPlaneTraffic) GetOrCreateIngress() *System_ControlPlaneTraffic_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &System_ControlPlaneTraffic_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from System_ControlPlaneTraffic. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_ControlPlaneTraffic) GetEgress() *System_ControlPlaneTraffic_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from System_ControlPlaneTraffic. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_ControlPlaneTraffic) GetIngress() *System_ControlPlaneTraffic_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic.
func (*System_ControlPlaneTraffic) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Egress represents the /openconfig-system/system/control-plane-traffic/egress YANG schema element.
type System_ControlPlaneTraffic_Egress struct {
	AclSet map[System_ControlPlaneTraffic_Egress_AclSet_Key]*System_ControlPlaneTraffic_Egress_AclSet `path:"acl/acl-set" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Egress) IsYANGGoStruct() {}

// System_ControlPlaneTraffic_Egress_AclSet_Key represents the key for list AclSet of element /openconfig-system/system/control-plane-traffic/egress.
type System_ControlPlaneTraffic_Egress_AclSet_Key struct {
	SetName string         `path:"set-name"`
	Type    E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that System_ControlPlaneTraffic_Egress_AclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_ControlPlaneTraffic_Egress_AclSet_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_ControlPlaneTraffic_Egress_AclSet_Key key struct.
func (t System_ControlPlaneTraffic_Egress_AclSet_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// NewAclSet creates a new entry in the AclSet list of the
// System_ControlPlaneTraffic_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *System_ControlPlaneTraffic_Egress) NewAclSet(SetName string, Type E_Acl_ACL_TYPE) (*System_ControlPlaneTraffic_Egress_AclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[System_ControlPlaneTraffic_Egress_AclSet_Key]*System_ControlPlaneTraffic_Egress_AclSet)
	}

	key := System_ControlPlaneTraffic_Egress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclSet", key)
	}

	t.AclSet[key] = &System_ControlPlaneTraffic_Egress_AclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.AclSet[key], nil
}

// RenameAclSet renames an entry in the list AclSet within
// the System_ControlPlaneTraffic_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_ControlPlaneTraffic_Egress) RenameAclSet(oldK, newK System_ControlPlaneTraffic_Egress_AclSet_Key) error {
	if _, ok := t.AclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AclSet", newK)
	}

	e, ok := t.AclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.AclSet[newK] = e
	delete(t.AclSet, oldK)
	return nil
}

// GetOrCreateAclSetMap returns the list (map) from System_ControlPlaneTraffic_Egress.
//
// It initializes the field if not already initialized.
func (t *System_ControlPlaneTraffic_Egress) GetOrCreateAclSetMap() map[System_ControlPlaneTraffic_Egress_AclSet_Key]*System_ControlPlaneTraffic_Egress_AclSet {
	if t.AclSet == nil {
		t.AclSet = make(map[System_ControlPlaneTraffic_Egress_AclSet_Key]*System_ControlPlaneTraffic_Egress_AclSet)
	}
	return t.AclSet
}

// GetOrCreateAclSet retrieves the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_ControlPlaneTraffic_Egress) GetOrCreateAclSet(SetName string, Type E_Acl_ACL_TYPE) *System_ControlPlaneTraffic_Egress_AclSet {

	key := System_ControlPlaneTraffic_Egress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.AclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclSet got unexpected error: %v", err))
	}
	return v
}

// GetAclSet retrieves the value with the specified key from
// the AclSet map field of System_ControlPlaneTraffic_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_ControlPlaneTraffic_Egress) GetAclSet(SetName string, Type E_Acl_ACL_TYPE) *System_ControlPlaneTraffic_Egress_AclSet {

	if t == nil {
		return nil
	}

	key := System_ControlPlaneTraffic_Egress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.AclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclSet deletes the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Egress. If there is no such element, the function
// is a no-op.
func (t *System_ControlPlaneTraffic_Egress) DeleteAclSet(SetName string, Type E_Acl_ACL_TYPE) {
	key := System_ControlPlaneTraffic_Egress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.AclSet, key)
}

// AppendAclSet appends the supplied System_ControlPlaneTraffic_Egress_AclSet struct to the
// list AclSet of System_ControlPlaneTraffic_Egress. If the key value(s) specified in
// the supplied System_ControlPlaneTraffic_Egress_AclSet already exist in the list, an error is
// returned.
func (t *System_ControlPlaneTraffic_Egress) AppendAclSet(v *System_ControlPlaneTraffic_Egress_AclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := System_ControlPlaneTraffic_Egress_AclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[System_ControlPlaneTraffic_Egress_AclSet_Key]*System_ControlPlaneTraffic_Egress_AclSet)
	}

	if _, ok := t.AclSet[key]; ok {
		return fmt.Errorf("duplicate key for list AclSet %v", key)
	}

	t.AclSet[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclSet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Egress) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Egress) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Egress) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Egress.
func (*System_ControlPlaneTraffic_Egress) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Egress_AclSet represents the /openconfig-system/system/control-plane-traffic/egress/acl/acl-set YANG schema element.
type System_ControlPlaneTraffic_Egress_AclSet struct {
	AclEntry map[uint32]*System_ControlPlaneTraffic_Egress_AclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	SetName  *string                                                       `path:"state/set-name|set-name" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"config/set-name|set-name" shadow-module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane"`
	Type     E_Acl_ACL_TYPE                                                `path:"state/type|type" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"config/type|type" shadow-module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Egress_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Egress_AclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// System_ControlPlaneTraffic_Egress_AclSet struct. The keys of the list are populated from the input
// arguments.
func (t *System_ControlPlaneTraffic_Egress_AclSet) NewAclEntry(SequenceId uint32) (*System_ControlPlaneTraffic_Egress_AclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*System_ControlPlaneTraffic_Egress_AclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &System_ControlPlaneTraffic_Egress_AclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the System_ControlPlaneTraffic_Egress_AclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_ControlPlaneTraffic_Egress_AclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from System_ControlPlaneTraffic_Egress_AclSet.
//
// It initializes the field if not already initialized.
func (t *System_ControlPlaneTraffic_Egress_AclSet) GetOrCreateAclEntryMap() map[uint32]*System_ControlPlaneTraffic_Egress_AclSet_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*System_ControlPlaneTraffic_Egress_AclSet_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Egress_AclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_ControlPlaneTraffic_Egress_AclSet) GetOrCreateAclEntry(SequenceId uint32) *System_ControlPlaneTraffic_Egress_AclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of System_ControlPlaneTraffic_Egress_AclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_ControlPlaneTraffic_Egress_AclSet) GetAclEntry(SequenceId uint32) *System_ControlPlaneTraffic_Egress_AclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Egress_AclSet. If there is no such element, the function
// is a no-op.
func (t *System_ControlPlaneTraffic_Egress_AclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied System_ControlPlaneTraffic_Egress_AclSet_AclEntry struct to the
// list AclEntry of System_ControlPlaneTraffic_Egress_AclSet. If the key value(s) specified in
// the supplied System_ControlPlaneTraffic_Egress_AclSet_AclEntry already exist in the list, an error is
// returned.
func (t *System_ControlPlaneTraffic_Egress_AclSet) AppendAclEntry(v *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*System_ControlPlaneTraffic_Egress_AclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetSetName retrieves the value of the leaf SetName from the System_ControlPlaneTraffic_Egress_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetName is set, it can
// safely use t.GetSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetName == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Egress_AclSet) GetSetName() string {
	if t == nil || t.SetName == nil {
		return ""
	}
	return *t.SetName
}

// GetType retrieves the value of the leaf Type from the System_ControlPlaneTraffic_Egress_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Egress_AclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetSetName sets the value of the leaf SetName in the System_ControlPlaneTraffic_Egress_AclSet
// struct.
func (t *System_ControlPlaneTraffic_Egress_AclSet) SetSetName(v string) {
	t.SetName = &v
}

// SetType sets the value of the leaf Type in the System_ControlPlaneTraffic_Egress_AclSet
// struct.
func (t *System_ControlPlaneTraffic_Egress_AclSet) SetType(v E_Acl_ACL_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Egress_AclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Egress_AclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the System_ControlPlaneTraffic_Egress_AclSet struct, which is a YANG list entry.
func (t *System_ControlPlaneTraffic_Egress_AclSet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Egress_AclSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Egress_AclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Egress_AclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Egress_AclSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Egress_AclSet.
func (*System_ControlPlaneTraffic_Egress_AclSet) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Egress_AclSet_AclEntry represents the /openconfig-system/system/control-plane-traffic/egress/acl/acl-set/acl-entries/acl-entry YANG schema element.
type System_ControlPlaneTraffic_Egress_AclSet_AclEntry struct {
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	SequenceId     *uint32 `path:"state/sequence-id|sequence-id" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"sequence-id" shadow-module:"openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Egress_AclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Egress_AclSet_AclEntry) IsYANGGoStruct() {}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the System_ControlPlaneTraffic_Egress_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the System_ControlPlaneTraffic_Egress_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the System_ControlPlaneTraffic_Egress_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the System_ControlPlaneTraffic_Egress_AclSet_AclEntry
// struct.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the System_ControlPlaneTraffic_Egress_AclSet_AclEntry
// struct.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// SetSequenceId sets the value of the leaf SequenceId in the System_ControlPlaneTraffic_Egress_AclSet_AclEntry
// struct.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) SetSequenceId(v uint32) {
	t.SequenceId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Egress_AclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_ControlPlaneTraffic_Egress_AclSet_AclEntry struct, which is a YANG list entry.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Egress_AclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Egress_AclSet_AclEntry) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Egress_AclSet_AclEntry.
func (*System_ControlPlaneTraffic_Egress_AclSet_AclEntry) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress represents the /openconfig-system/system/control-plane-traffic/ingress YANG schema element.
type System_ControlPlaneTraffic_Ingress struct {
	AclSet map[System_ControlPlaneTraffic_Ingress_AclSet_Key]*System_ControlPlaneTraffic_Ingress_AclSet `path:"acl/acl-set" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	Qos    *System_ControlPlaneTraffic_Ingress_Qos                                                      `path:"qos" module:"openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress) IsYANGGoStruct() {}

// System_ControlPlaneTraffic_Ingress_AclSet_Key represents the key for list AclSet of element /openconfig-system/system/control-plane-traffic/ingress.
type System_ControlPlaneTraffic_Ingress_AclSet_Key struct {
	SetName string         `path:"set-name"`
	Type    E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that System_ControlPlaneTraffic_Ingress_AclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_ControlPlaneTraffic_Ingress_AclSet_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_ControlPlaneTraffic_Ingress_AclSet_Key key struct.
func (t System_ControlPlaneTraffic_Ingress_AclSet_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// NewAclSet creates a new entry in the AclSet list of the
// System_ControlPlaneTraffic_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *System_ControlPlaneTraffic_Ingress) NewAclSet(SetName string, Type E_Acl_ACL_TYPE) (*System_ControlPlaneTraffic_Ingress_AclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[System_ControlPlaneTraffic_Ingress_AclSet_Key]*System_ControlPlaneTraffic_Ingress_AclSet)
	}

	key := System_ControlPlaneTraffic_Ingress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclSet", key)
	}

	t.AclSet[key] = &System_ControlPlaneTraffic_Ingress_AclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.AclSet[key], nil
}

// RenameAclSet renames an entry in the list AclSet within
// the System_ControlPlaneTraffic_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_ControlPlaneTraffic_Ingress) RenameAclSet(oldK, newK System_ControlPlaneTraffic_Ingress_AclSet_Key) error {
	if _, ok := t.AclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AclSet", newK)
	}

	e, ok := t.AclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.AclSet[newK] = e
	delete(t.AclSet, oldK)
	return nil
}

// GetOrCreateAclSetMap returns the list (map) from System_ControlPlaneTraffic_Ingress.
//
// It initializes the field if not already initialized.
func (t *System_ControlPlaneTraffic_Ingress) GetOrCreateAclSetMap() map[System_ControlPlaneTraffic_Ingress_AclSet_Key]*System_ControlPlaneTraffic_Ingress_AclSet {
	if t.AclSet == nil {
		t.AclSet = make(map[System_ControlPlaneTraffic_Ingress_AclSet_Key]*System_ControlPlaneTraffic_Ingress_AclSet)
	}
	return t.AclSet
}

// GetOrCreateAclSet retrieves the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_ControlPlaneTraffic_Ingress) GetOrCreateAclSet(SetName string, Type E_Acl_ACL_TYPE) *System_ControlPlaneTraffic_Ingress_AclSet {

	key := System_ControlPlaneTraffic_Ingress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.AclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclSet got unexpected error: %v", err))
	}
	return v
}

// GetAclSet retrieves the value with the specified key from
// the AclSet map field of System_ControlPlaneTraffic_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_ControlPlaneTraffic_Ingress) GetAclSet(SetName string, Type E_Acl_ACL_TYPE) *System_ControlPlaneTraffic_Ingress_AclSet {

	if t == nil {
		return nil
	}

	key := System_ControlPlaneTraffic_Ingress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.AclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclSet deletes the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress. If there is no such element, the function
// is a no-op.
func (t *System_ControlPlaneTraffic_Ingress) DeleteAclSet(SetName string, Type E_Acl_ACL_TYPE) {
	key := System_ControlPlaneTraffic_Ingress_AclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.AclSet, key)
}

// AppendAclSet appends the supplied System_ControlPlaneTraffic_Ingress_AclSet struct to the
// list AclSet of System_ControlPlaneTraffic_Ingress. If the key value(s) specified in
// the supplied System_ControlPlaneTraffic_Ingress_AclSet already exist in the list, an error is
// returned.
func (t *System_ControlPlaneTraffic_Ingress) AppendAclSet(v *System_ControlPlaneTraffic_Ingress_AclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := System_ControlPlaneTraffic_Ingress_AclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[System_ControlPlaneTraffic_Ingress_AclSet_Key]*System_ControlPlaneTraffic_Ingress_AclSet)
	}

	if _, ok := t.AclSet[key]; ok {
		return fmt.Errorf("duplicate key for list AclSet %v", key)
	}

	t.AclSet[key] = v
	return nil
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *System_ControlPlaneTraffic_Ingress) GetOrCreateQos() *System_ControlPlaneTraffic_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &System_ControlPlaneTraffic_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from System_ControlPlaneTraffic_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_ControlPlaneTraffic_Ingress) GetQos() *System_ControlPlaneTraffic_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
	for _, e := range t.AclSet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress.
func (*System_ControlPlaneTraffic_Ingress) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress_AclSet represents the /openconfig-system/system/control-plane-traffic/ingress/acl/acl-set YANG schema element.
type System_ControlPlaneTraffic_Ingress_AclSet struct {
	AclEntry map[uint32]*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	SetName  *string                                                        `path:"state/set-name|set-name" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"config/set-name|set-name" shadow-module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane"`
	Type     E_Acl_ACL_TYPE                                                 `path:"state/type|type" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"config/type|type" shadow-module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress_AclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// System_ControlPlaneTraffic_Ingress_AclSet struct. The keys of the list are populated from the input
// arguments.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) NewAclEntry(SequenceId uint32) (*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &System_ControlPlaneTraffic_Ingress_AclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the System_ControlPlaneTraffic_Ingress_AclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from System_ControlPlaneTraffic_Ingress_AclSet.
//
// It initializes the field if not already initialized.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) GetOrCreateAclEntryMap() map[uint32]*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress_AclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) GetOrCreateAclEntry(SequenceId uint32) *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of System_ControlPlaneTraffic_Ingress_AclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) GetAclEntry(SequenceId uint32) *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress_AclSet. If there is no such element, the function
// is a no-op.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied System_ControlPlaneTraffic_Ingress_AclSet_AclEntry struct to the
// list AclEntry of System_ControlPlaneTraffic_Ingress_AclSet. If the key value(s) specified in
// the supplied System_ControlPlaneTraffic_Ingress_AclSet_AclEntry already exist in the list, an error is
// returned.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) AppendAclEntry(v *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetSetName retrieves the value of the leaf SetName from the System_ControlPlaneTraffic_Ingress_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetName is set, it can
// safely use t.GetSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetName == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) GetSetName() string {
	if t == nil || t.SetName == nil {
		return ""
	}
	return *t.SetName
}

// GetType retrieves the value of the leaf Type from the System_ControlPlaneTraffic_Ingress_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetSetName sets the value of the leaf SetName in the System_ControlPlaneTraffic_Ingress_AclSet
// struct.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) SetSetName(v string) {
	t.SetName = &v
}

// SetType sets the value of the leaf Type in the System_ControlPlaneTraffic_Ingress_AclSet
// struct.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) SetType(v E_Acl_ACL_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress_AclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the System_ControlPlaneTraffic_Ingress_AclSet struct, which is a YANG list entry.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress_AclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress_AclSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress_AclSet.
func (*System_ControlPlaneTraffic_Ingress_AclSet) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress_AclSet_AclEntry represents the /openconfig-system/system/control-plane-traffic/ingress/acl/acl-set/acl-entries/acl-entry YANG schema element.
type System_ControlPlaneTraffic_Ingress_AclSet_AclEntry struct {
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	SequenceId     *uint32 `path:"state/sequence-id|sequence-id" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"sequence-id" shadow-module:"openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress_AclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) IsYANGGoStruct() {}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry
// struct.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry
// struct.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// SetSequenceId sets the value of the leaf SequenceId in the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry
// struct.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) SetSequenceId(v uint32) {
	t.SequenceId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_ControlPlaneTraffic_Ingress_AclSet_AclEntry struct, which is a YANG list entry.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress_AclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress_AclSet_AclEntry.
func (*System_ControlPlaneTraffic_Ingress_AclSet_AclEntry) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress_Qos represents the /openconfig-system/system/control-plane-traffic/ingress/qos YANG schema element.
type System_ControlPlaneTraffic_Ingress_Qos struct {
	Classifier      *System_ControlPlaneTraffic_Ingress_Qos_Classifier      `path:"classifier" module:"openconfig-system-controlplane"`
	SchedulerPolicy *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy `path:"scheduler-policy" module:"openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateClassifier retrieves the value of the Classifier field
// or returns the existing field if it already exists.
func (t *System_ControlPlaneTraffic_Ingress_Qos) GetOrCreateClassifier() *System_ControlPlaneTraffic_Ingress_Qos_Classifier {
	if t.Classifier != nil {
		return t.Classifier
	}
	t.Classifier = &System_ControlPlaneTraffic_Ingress_Qos_Classifier{}
	return t.Classifier
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *System_ControlPlaneTraffic_Ingress_Qos) GetOrCreateSchedulerPolicy() *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetClassifier returns the value of the Classifier struct pointer
// from System_ControlPlaneTraffic_Ingress_Qos. If the receiver or the field Classifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_ControlPlaneTraffic_Ingress_Qos) GetClassifier() *System_ControlPlaneTraffic_Ingress_Qos_Classifier {
	if t != nil && t.Classifier != nil {
		return t.Classifier
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from System_ControlPlaneTraffic_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_ControlPlaneTraffic_Ingress_Qos) GetSchedulerPolicy() *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Classifier.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress_Qos) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress_Qos.
func (*System_ControlPlaneTraffic_Ingress_Qos) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress_Qos_Classifier represents the /openconfig-system/system/control-plane-traffic/ingress/qos/classifier YANG schema element.
type System_ControlPlaneTraffic_Ingress_Qos_Classifier struct {
	Name *string                                                            `path:"state/name" module:"openconfig-system-controlplane/openconfig-system-controlplane" shadow-path:"config/name" shadow-module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	Term map[string]*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term `path:"terms/term" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress_Qos_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress_Qos_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// System_ControlPlaneTraffic_Ingress_Qos_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) NewTerm(Id string) (*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the System_ControlPlaneTraffic_Ingress_Qos_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTermMap returns the list (map) from System_ControlPlaneTraffic_Ingress_Qos_Classifier.
//
// It initializes the field if not already initialized.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) GetOrCreateTermMap() map[string]*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term {
	if t.Term == nil {
		t.Term = make(map[string]*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term)
	}
	return t.Term
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress_Qos_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) GetOrCreateTerm(Id string) *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of System_ControlPlaneTraffic_Ingress_Qos_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) GetTerm(Id string) *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress_Qos_Classifier. If there is no such element, the function
// is a no-op.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term struct to the
// list Term of System_ControlPlaneTraffic_Ingress_Qos_Classifier. If the key value(s) specified in
// the supplied System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term already exist in the list, an error is
// returned.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) AppendTerm(v *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the System_ControlPlaneTraffic_Ingress_Qos_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the System_ControlPlaneTraffic_Ingress_Qos_Classifier
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress_Qos_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Term {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress_Qos_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress_Qos_Classifier.
func (*System_ControlPlaneTraffic_Ingress_Qos_Classifier) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term represents the /openconfig-system/system/control-plane-traffic/ingress/qos/classifier/terms/term YANG schema element.
type System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term struct {
	Id             *string `path:"state/id|id" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"id" shadow-module:"openconfig-system-controlplane"`
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// SetId sets the value of the leaf Id in the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) SetId(v string) {
	t.Id = &v
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term struct, which is a YANG list entry.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term.
func (*System_ControlPlaneTraffic_Ingress_Qos_Classifier_Term) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy represents the /openconfig-system/system/control-plane-traffic/ingress/qos/scheduler-policy YANG schema element.
type System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy struct {
	Name      *string                                                                      `path:"state/name" module:"openconfig-system-controlplane/openconfig-system-controlplane" shadow-path:"config/name" shadow-module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	Scheduler map[uint32]*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler `path:"scheduler-statistics/scheduler" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) NewScheduler(Sequence uint32) (*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateSchedulerMap returns the list (map) from System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy.
//
// It initializes the field if not already initialized.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) GetOrCreateSchedulerMap() map[uint32]*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler {
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler)
	}
	return t.Scheduler
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) GetScheduler(Sequence uint32) *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler struct to the
// list Scheduler of System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy. If the key value(s) specified in
// the supplied System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) AppendScheduler(v *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy.
func (*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler represents the /openconfig-system/system/control-plane-traffic/ingress/qos/scheduler-policy/scheduler-statistics/scheduler YANG schema element.
type System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler struct {
	ConformingOctets *uint64 `path:"state/conforming-octets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	ConformingPkts   *uint64 `path:"state/conforming-pkts" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	ExceedingOctets  *uint64 `path:"state/exceeding-octets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	ExceedingPkts    *uint64 `path:"state/exceeding-pkts" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	Sequence         *uint32 `path:"state/sequence|sequence" module:"openconfig-system-controlplane/openconfig-system-controlplane|openconfig-system-controlplane" shadow-path:"sequence" shadow-module:"openconfig-system-controlplane"`
	ViolatingOctets  *uint64 `path:"state/violating-octets" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
	ViolatingPkts    *uint64 `path:"state/violating-pkts" module:"openconfig-system-controlplane/openconfig-system-controlplane"`
}

// IsYANGGoStruct ensures that System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// GetConformingOctets retrieves the value of the leaf ConformingOctets from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingOctets is set, it can
// safely use t.GetConformingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingOctets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) GetConformingOctets() uint64 {
	if t == nil || t.ConformingOctets == nil {
		return 0
	}
	return *t.ConformingOctets
}

// GetConformingPkts retrieves the value of the leaf ConformingPkts from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingPkts is set, it can
// safely use t.GetConformingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingPkts == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) GetConformingPkts() uint64 {
	if t == nil || t.ConformingPkts == nil {
		return 0
	}
	return *t.ConformingPkts
}

// GetExceedingOctets retrieves the value of the leaf ExceedingOctets from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingOctets is set, it can
// safely use t.GetExceedingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingOctets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) GetExceedingOctets() uint64 {
	if t == nil || t.ExceedingOctets == nil {
		return 0
	}
	return *t.ExceedingOctets
}

// GetExceedingPkts retrieves the value of the leaf ExceedingPkts from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingPkts is set, it can
// safely use t.GetExceedingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingPkts == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) GetExceedingPkts() uint64 {
	if t == nil || t.ExceedingPkts == nil {
		return 0
	}
	return *t.ExceedingPkts
}

// GetSequence retrieves the value of the leaf Sequence from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetViolatingOctets retrieves the value of the leaf ViolatingOctets from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingOctets is set, it can
// safely use t.GetViolatingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingOctets == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) GetViolatingOctets() uint64 {
	if t == nil || t.ViolatingOctets == nil {
		return 0
	}
	return *t.ViolatingOctets
}

// GetViolatingPkts retrieves the value of the leaf ViolatingPkts from the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingPkts is set, it can
// safely use t.GetViolatingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingPkts == nil' before retrieving the leaf's value.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) GetViolatingPkts() uint64 {
	if t == nil || t.ViolatingPkts == nil {
		return 0
	}
	return *t.ViolatingPkts
}

// SetConformingOctets sets the value of the leaf ConformingOctets in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) SetConformingOctets(v uint64) {
	t.ConformingOctets = &v
}

// SetConformingPkts sets the value of the leaf ConformingPkts in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) SetConformingPkts(v uint64) {
	t.ConformingPkts = &v
}

// SetExceedingOctets sets the value of the leaf ExceedingOctets in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) SetExceedingOctets(v uint64) {
	t.ExceedingOctets = &v
}

// SetExceedingPkts sets the value of the leaf ExceedingPkts in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) SetExceedingPkts(v uint64) {
	t.ExceedingPkts = &v
}

// SetSequence sets the value of the leaf Sequence in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) SetSequence(v uint32) {
	t.Sequence = &v
}

// SetViolatingOctets sets the value of the leaf ViolatingOctets in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) SetViolatingOctets(v uint64) {
	t.ViolatingOctets = &v
}

// SetViolatingPkts sets the value of the leaf ViolatingPkts in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// struct.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) SetViolatingPkts(v uint64) {
	t.ViolatingPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler.
func (*System_ControlPlaneTraffic_Ingress_Qos_SchedulerPolicy_Scheduler) Î›BelongingModule() string {
	return "openconfig-system-controlplane"
}

// System_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_Cpu struct {
	HardwareInterrupt *System_Cpu_HardwareInterrupt `path:"state/hardware-interrupt" module:"openconfig-system/openconfig-system"`
	Idle              *System_Cpu_Idle              `path:"state/idle" module:"openconfig-system/openconfig-system"`
	Index             System_Cpu_Index_Union        `path:"state/index|index" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"index" shadow-module:"openconfig-system"`
	Kernel            *System_Cpu_Kernel            `path:"state/kernel" module:"openconfig-system/openconfig-system"`
	Nice              *System_Cpu_Nice              `path:"state/nice" module:"openconfig-system/openconfig-system"`
	SoftwareInterrupt *System_Cpu_SoftwareInterrupt `path:"state/software-interrupt" module:"openconfig-system/openconfig-system"`
	Total             *System_Cpu_Total             `path:"state/total" module:"openconfig-system/openconfig-system"`
	User              *System_Cpu_User              `path:"state/user" module:"openconfig-system/openconfig-system"`
	Wait              *System_Cpu_Wait              `path:"state/wait" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &System_Cpu_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateIdle() *System_Cpu_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &System_Cpu_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateKernel() *System_Cpu_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &System_Cpu_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateNice() *System_Cpu_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &System_Cpu_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &System_Cpu_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateTotal() *System_Cpu_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &System_Cpu_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateUser() *System_Cpu_User {
	if t.User != nil {
		return t.User
	}
	t.User = &System_Cpu_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateWait() *System_Cpu_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &System_Cpu_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from System_Cpu. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetIdle() *System_Cpu_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from System_Cpu. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetKernel() *System_Cpu_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from System_Cpu. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetNice() *System_Cpu_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from System_Cpu. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetTotal() *System_Cpu_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from System_Cpu. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetUser() *System_Cpu_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from System_Cpu. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetWait() *System_Cpu_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the System_Cpu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *System_Cpu) GetIndex() System_Cpu_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// SetIndex sets the value of the leaf Index in the System_Cpu
// struct.
func (t *System_Cpu) SetIndex(v System_Cpu_Index_Union) {
	t.Index = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HardwareInterrupt.PopulateDefaults()
	t.Idle.PopulateDefaults()
	t.Kernel.PopulateDefaults()
	t.Nice.PopulateDefaults()
	t.SoftwareInterrupt.PopulateDefaults()
	t.Total.PopulateDefaults()
	t.User.PopulateDefaults()
	t.Wait.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the System_Cpu struct, which is a YANG list entry.
func (t *System_Cpu) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu.
func (*System_Cpu) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_HardwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_HardwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_HardwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_HardwareInterrupt) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_HardwareInterrupt.
func (*System_Cpu_HardwareInterrupt) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_Idle struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Idle) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Idle
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Idle) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Idle) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Idle.
func (*System_Cpu_Idle) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_Kernel struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Kernel) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Kernel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Kernel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Kernel) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Kernel.
func (*System_Cpu_Kernel) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_Nice struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Nice) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Nice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Nice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Nice) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Nice.
func (*System_Cpu_Nice) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_SoftwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_SoftwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_SoftwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_SoftwareInterrupt) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_SoftwareInterrupt.
func (*System_Cpu_SoftwareInterrupt) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_Total struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Total) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Total
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Total) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Total) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Total.
func (*System_Cpu_Total) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_User struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_User) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_User) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_User.
func (*System_Cpu_User) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_Wait struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Wait) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Wait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Wait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Wait) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Wait.
func (*System_Cpu_Wait) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Dns represents the /openconfig-system/system/dns YANG schema element.
type System_Dns struct {
	HostEntry map[string]*System_Dns_HostEntry `path:"host-entries/host-entry" module:"openconfig-system/openconfig-system"`
	Search    []string                         `path:"state/search" module:"openconfig-system/openconfig-system" shadow-path:"config/search" shadow-module:"openconfig-system/openconfig-system"`
	Server    *System_Dns_Server_OrderedMap    `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// System_Dns struct. The keys of the list are populated from the input
// arguments.
func (t *System_Dns) NewHostEntry(Hostname string) (*System_Dns_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &System_Dns_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the System_Dns struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Dns) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntryMap returns the list (map) from System_Dns.
//
// It initializes the field if not already initialized.
func (t *System_Dns) GetOrCreateHostEntryMap() map[string]*System_Dns_HostEntry {
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}
	return t.HostEntry
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver System_Dns. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Dns) GetOrCreateHostEntry(Hostname string) *System_Dns_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of System_Dns. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Dns) GetHostEntry(Hostname string) *System_Dns_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostEntry deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the function
// is a no-op.
func (t *System_Dns) DeleteHostEntry(Hostname string) {
	key := Hostname

	delete(t.HostEntry, key)
}

// AppendHostEntry appends the supplied System_Dns_HostEntry struct to the
// list HostEntry of System_Dns. If the key value(s) specified in
// the supplied System_Dns_HostEntry already exist in the list, an error is
// returned.
func (t *System_Dns) AppendHostEntry(v *System_Dns_HostEntry) error {
	if v.Hostname == nil {
		return fmt.Errorf("invalid nil key received for Hostname")
	}

	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// GetSearch retrieves the value of the leaf Search from the System_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Search is set, it can
// safely use t.GetSearch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Search == nil' before retrieving the leaf's value.
func (t *System_Dns) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// SetSearch sets the value of the leaf Search in the System_Dns
// struct.
func (t *System_Dns) SetSearch(v []string) {
	t.Search = v
}

// GetOrCreateServerMap returns the ordered map field
// Server from System_Dns.
//
// It initializes the field if not already initialized.
func (s *System_Dns) GetOrCreateServerMap() *System_Dns_Server_OrderedMap {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server
}

// AppendNewServer creates a new entry in the Server
// ordered map of the System_Dns struct. The keys of the list are
// populated from the input arguments.
func (s *System_Dns) AppendNewServer(Address string) (*System_Dns_Server, error) {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server.AppendNew(Address)
}

// AppendServer appends the supplied System_Dns_Server struct
// to the list Server of System_Dns. If the key value(s)
// specified in the supplied System_Dns_Server already exist in the list, an
// error is returned.
func (s *System_Dns) AppendServer(v *System_Dns_Server) error {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server.Append(v)
}

// GetServer retrieves the value with the specified key from the
// Server map field of System_Dns. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *System_Dns) GetServer(Address string) *System_Dns_Server {
	if s == nil {
		return nil
	}
	key := Address
	return s.Server.Get(key)
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the
// function is a no-op.
func (s *System_Dns) DeleteServer(Address string) bool {
	key := Address
	return s.Server.Delete(key)
}

// System_Dns_Server_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-system/system/dns/servers/server.
type System_Dns_Server_OrderedMap struct {
	keys     []string
	valueMap map[string]*System_Dns_Server
}

// IsYANGOrderedList ensures that System_Dns_Server_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*System_Dns_Server_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *System_Dns_Server_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*System_Dns_Server{}
	}
}

// Keys returns a copy of the list's keys.
func (o *System_Dns_Server_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *System_Dns_Server_OrderedMap) Values() []*System_Dns_Server {
	if o == nil {
		return nil
	}
	var values []*System_Dns_Server
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of System_Dns_Server_OrderedMap
func (o *System_Dns_Server_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *System_Dns_Server_OrderedMap) Get(key string) *System_Dns_Server {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *System_Dns_Server_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a System_Dns_Server, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *System_Dns_Server_OrderedMap) Append(v *System_Dns_Server) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append System_Dns_Server")
	}
	if v == nil {
		return fmt.Errorf("nil System_Dns_Server")
	}
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new System_Dns_Server, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *System_Dns_Server_OrderedMap) AppendNew(Address string) (*System_Dns_Server, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append System_Dns_Server")
	}
	key := Address

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &System_Dns_Server{
		Address: &Address,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.HostEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.Server.Values() {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Dns.
func (*System_Dns) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Dns_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntry struct {
	Alias       []string `path:"state/alias" module:"openconfig-system/openconfig-system" shadow-path:"config/alias" shadow-module:"openconfig-system/openconfig-system"`
	Hostname    *string  `path:"state/hostname|hostname" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/hostname|hostname" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Ipv4Address []string `path:"state/ipv4-address" module:"openconfig-system/openconfig-system" shadow-path:"config/ipv4-address" shadow-module:"openconfig-system/openconfig-system"`
	Ipv6Address []string `path:"state/ipv6-address" module:"openconfig-system/openconfig-system" shadow-path:"config/ipv6-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_HostEntry) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alias is set, it can
// safely use t.GetAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alias == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// SetAlias sets the value of the leaf Alias in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetAlias(v []string) {
	t.Alias = v
}

// SetHostname sets the value of the leaf Hostname in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetHostname(v string) {
	t.Hostname = &v
}

// SetIpv4Address sets the value of the leaf Ipv4Address in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetIpv4Address(v []string) {
	t.Ipv4Address = v
}

// SetIpv6Address sets the value of the leaf Ipv6Address in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetIpv6Address(v []string) {
	t.Ipv6Address = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_HostEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_HostEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Dns_HostEntry struct, which is a YANG list entry.
func (t *System_Dns_HostEntry) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_HostEntry) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Dns_HostEntry.
func (*System_Dns_HostEntry) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Dns_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_Server struct {
	Address *string `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Port    *uint16 `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// SetAddress sets the value of the leaf Address in the System_Dns_Server
// struct.
func (t *System_Dns_Server) SetAddress(v string) {
	t.Address = &v
}

// SetPort sets the value of the leaf Port in the System_Dns_Server
// struct.
func (t *System_Dns_Server) SetPort(v uint16) {
	t.Port = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 53
		t.Port = &v
	}
}

// Î›ListKeyMap returns the keys of the System_Dns_Server struct, which is a YANG list entry.
func (t *System_Dns_Server) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_Server) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Dns_Server.
func (*System_Dns_Server) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_GnmiPathzPolicies represents the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPolicies struct {
	Policy map[E_Policy_Instance]*System_GnmiPathzPolicies_Policy `path:"policies/policy" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GnmiPathzPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GnmiPathzPolicies) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// System_GnmiPathzPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *System_GnmiPathzPolicies) NewPolicy(Instance E_Policy_Instance) (*System_GnmiPathzPolicies_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[E_Policy_Instance]*System_GnmiPathzPolicies_Policy)
	}

	key := Instance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &System_GnmiPathzPolicies_Policy{
		Instance: Instance,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the System_GnmiPathzPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_GnmiPathzPolicies) RenamePolicy(oldK, newK E_Policy_Instance) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.Instance = newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicyMap returns the list (map) from System_GnmiPathzPolicies.
//
// It initializes the field if not already initialized.
func (t *System_GnmiPathzPolicies) GetOrCreatePolicyMap() map[E_Policy_Instance]*System_GnmiPathzPolicies_Policy {
	if t.Policy == nil {
		t.Policy = make(map[E_Policy_Instance]*System_GnmiPathzPolicies_Policy)
	}
	return t.Policy
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver System_GnmiPathzPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_GnmiPathzPolicies) GetOrCreatePolicy(Instance E_Policy_Instance) *System_GnmiPathzPolicies_Policy {

	key := Instance

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(Instance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of System_GnmiPathzPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_GnmiPathzPolicies) GetPolicy(Instance E_Policy_Instance) *System_GnmiPathzPolicies_Policy {

	if t == nil {
		return nil
	}

	key := Instance

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver System_GnmiPathzPolicies. If there is no such element, the function
// is a no-op.
func (t *System_GnmiPathzPolicies) DeletePolicy(Instance E_Policy_Instance) {
	key := Instance

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied System_GnmiPathzPolicies_Policy struct to the
// list Policy of System_GnmiPathzPolicies. If the key value(s) specified in
// the supplied System_GnmiPathzPolicies_Policy already exist in the list, an error is
// returned.
func (t *System_GnmiPathzPolicies) AppendPolicy(v *System_GnmiPathzPolicies_Policy) error {
	key := v.Instance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[E_Policy_Instance]*System_GnmiPathzPolicies_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_GnmiPathzPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GnmiPathzPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GnmiPathzPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GnmiPathzPolicies) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GnmiPathzPolicies.
func (*System_GnmiPathzPolicies) Î›BelongingModule() string {
	return "openconfig-gnsi-pathz"
}

// System_GnmiPathzPolicies_Policy represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_Policy struct {
	CreatedOn *uint64           `path:"state/created-on" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz"`
	Instance  E_Policy_Instance `path:"state/instance|instance" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz|openconfig-gnsi-pathz" shadow-path:"instance" shadow-module:"openconfig-gnsi-pathz"`
	Version   *string           `path:"state/version" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GnmiPathzPolicies_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GnmiPathzPolicies_Policy) IsYANGGoStruct() {}

// GetCreatedOn retrieves the value of the leaf CreatedOn from the System_GnmiPathzPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreatedOn is set, it can
// safely use t.GetCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreatedOn == nil' before retrieving the leaf's value.
func (t *System_GnmiPathzPolicies_Policy) GetCreatedOn() uint64 {
	if t == nil || t.CreatedOn == nil {
		return 0
	}
	return *t.CreatedOn
}

// GetInstance retrieves the value of the leaf Instance from the System_GnmiPathzPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *System_GnmiPathzPolicies_Policy) GetInstance() E_Policy_Instance {
	if t == nil || t.Instance == 0 {
		return 0
	}
	return t.Instance
}

// GetVersion retrieves the value of the leaf Version from the System_GnmiPathzPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_GnmiPathzPolicies_Policy) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// SetCreatedOn sets the value of the leaf CreatedOn in the System_GnmiPathzPolicies_Policy
// struct.
func (t *System_GnmiPathzPolicies_Policy) SetCreatedOn(v uint64) {
	t.CreatedOn = &v
}

// SetInstance sets the value of the leaf Instance in the System_GnmiPathzPolicies_Policy
// struct.
func (t *System_GnmiPathzPolicies_Policy) SetInstance(v E_Policy_Instance) {
	t.Instance = v
}

// SetVersion sets the value of the leaf Version in the System_GnmiPathzPolicies_Policy
// struct.
func (t *System_GnmiPathzPolicies_Policy) SetVersion(v string) {
	t.Version = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GnmiPathzPolicies_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GnmiPathzPolicies_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_GnmiPathzPolicies_Policy struct, which is a YANG list entry.
func (t *System_GnmiPathzPolicies_Policy) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"instance": t.Instance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies_Policy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GnmiPathzPolicies_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GnmiPathzPolicies_Policy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GnmiPathzPolicies_Policy.
func (*System_GnmiPathzPolicies_Policy) Î›BelongingModule() string {
	return "openconfig-gnsi-pathz"
}

// System_GrpcServer represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServer struct {
	Acctz                                    *System_GrpcServer_Acctz                                           `path:"acctz" module:"openconfig-gnsi-acctz"`
	AuthenticationPolicyCreatedOn            *uint64                                                            `path:"state/authentication-policy-created-on" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	AuthenticationPolicyVersion              *string                                                            `path:"state/authentication-policy-version" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	AuthzPolicyCounters                      *System_GrpcServer_AuthzPolicyCounters                             `path:"authz-policy-counters" module:"openconfig-gnsi-authz"`
	CaTrustBundleCreatedOn                   *uint64                                                            `path:"state/ca-trust-bundle-created-on" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	CaTrustBundleVersion                     *string                                                            `path:"state/ca-trust-bundle-version" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	CertificateCreatedOn                     *uint64                                                            `path:"state/certificate-created-on" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	CertificateId                            *string                                                            `path:"state/certificate-id" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/certificate-id" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	CertificateRevocationListBundleCreatedOn *uint64                                                            `path:"state/certificate-revocation-list-bundle-created-on" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	CertificateRevocationListBundleVersion   *string                                                            `path:"state/certificate-revocation-list-bundle-version" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	CertificateVersion                       *string                                                            `path:"state/certificate-version" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	Connection                               map[System_GrpcServer_Connection_Key]*System_GrpcServer_Connection `path:"connections/connection" module:"openconfig-system-grpc/openconfig-system-grpc"`
	Counters                                 *System_GrpcServer_Counters                                        `path:"state/counters" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	Enable                                   *bool                                                              `path:"state/enable" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/enable" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	GnmiPathzPolicyCounters                  *System_GrpcServer_GnmiPathzPolicyCounters                         `path:"gnmi-pathz-policy-counters" module:"openconfig-gnsi-pathz"`
	GnmiPathzPolicyCreatedOn                 *uint64                                                            `path:"state/gnmi-pathz-policy-created-on" module:"openconfig-system-grpc/openconfig-gnsi-pathz"`
	GnmiPathzPolicyVersion                   *string                                                            `path:"state/gnmi-pathz-policy-version" module:"openconfig-system-grpc/openconfig-gnsi-pathz"`
	ListenAddresses                          []System_GrpcServer_ListenAddresses_Union                          `path:"state/listen-addresses" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/listen-addresses" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	MetadataAuthentication                   *bool                                                              `path:"state/metadata-authentication" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/metadata-authentication" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Name                                     *string                                                            `path:"state/name|name" module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc" shadow-path:"config/name|name" shadow-module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc"`
	NetworkInstance                          *string                                                            `path:"state/network-instance" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/network-instance" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Port                                     *uint16                                                            `path:"state/port" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/port" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Services                                 []E_SystemGrpc_GRPC_SERVICE                                        `path:"state/services" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/services" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	SslProfileId                             *string                                                            `path:"state/ssl-profile-id" module:"openconfig-system-grpc/openconfig-gnsi-certz"`
	TransportSecurity                        *bool                                                              `path:"state/transport-security" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/transport-security" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
}

// IsYANGGoStruct ensures that System_GrpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer) IsYANGGoStruct() {}

// System_GrpcServer_Connection_Key represents the key for list Connection of element /openconfig-system/system/grpc-servers/grpc-server.
type System_GrpcServer_Connection_Key struct {
	Address string `path:"address"`
	Port    uint16 `path:"port"`
}

// IsYANGGoKeyStruct ensures that System_GrpcServer_Connection_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_GrpcServer_Connection_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_GrpcServer_Connection_Key key struct.
func (t System_GrpcServer_Connection_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"address": t.Address,
		"port":    t.Port,
	}, nil
}

// NewConnection creates a new entry in the Connection list of the
// System_GrpcServer struct. The keys of the list are populated from the input
// arguments.
func (t *System_GrpcServer) NewConnection(Address string, Port uint16) (*System_GrpcServer_Connection, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Connection == nil {
		t.Connection = make(map[System_GrpcServer_Connection_Key]*System_GrpcServer_Connection)
	}

	key := System_GrpcServer_Connection_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Connection[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Connection", key)
	}

	t.Connection[key] = &System_GrpcServer_Connection{
		Address: &Address,
		Port:    &Port,
	}

	return t.Connection[key], nil
}

// RenameConnection renames an entry in the list Connection within
// the System_GrpcServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_GrpcServer) RenameConnection(oldK, newK System_GrpcServer_Connection_Key) error {
	if _, ok := t.Connection[newK]; ok {
		return fmt.Errorf("key %v already exists in Connection", newK)
	}

	e, ok := t.Connection[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Connection", oldK)
	}
	e.Address = &newK.Address
	e.Port = &newK.Port

	t.Connection[newK] = e
	delete(t.Connection, oldK)
	return nil
}

// GetOrCreateConnectionMap returns the list (map) from System_GrpcServer.
//
// It initializes the field if not already initialized.
func (t *System_GrpcServer) GetOrCreateConnectionMap() map[System_GrpcServer_Connection_Key]*System_GrpcServer_Connection {
	if t.Connection == nil {
		t.Connection = make(map[System_GrpcServer_Connection_Key]*System_GrpcServer_Connection)
	}
	return t.Connection
}

// GetOrCreateConnection retrieves the value with the specified keys from
// the receiver System_GrpcServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_GrpcServer) GetOrCreateConnection(Address string, Port uint16) *System_GrpcServer_Connection {

	key := System_GrpcServer_Connection_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Connection[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewConnection(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateConnection got unexpected error: %v", err))
	}
	return v
}

// GetConnection retrieves the value with the specified key from
// the Connection map field of System_GrpcServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_GrpcServer) GetConnection(Address string, Port uint16) *System_GrpcServer_Connection {

	if t == nil {
		return nil
	}

	key := System_GrpcServer_Connection_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Connection[key]; ok {
		return lm
	}
	return nil
}

// DeleteConnection deletes the value with the specified keys from
// the receiver System_GrpcServer. If there is no such element, the function
// is a no-op.
func (t *System_GrpcServer) DeleteConnection(Address string, Port uint16) {
	key := System_GrpcServer_Connection_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Connection, key)
}

// AppendConnection appends the supplied System_GrpcServer_Connection struct to the
// list Connection of System_GrpcServer. If the key value(s) specified in
// the supplied System_GrpcServer_Connection already exist in the list, an error is
// returned.
func (t *System_GrpcServer) AppendConnection(v *System_GrpcServer_Connection) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := System_GrpcServer_Connection_Key{
		Address: *v.Address,
		Port:    *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Connection == nil {
		t.Connection = make(map[System_GrpcServer_Connection_Key]*System_GrpcServer_Connection)
	}

	if _, ok := t.Connection[key]; ok {
		return fmt.Errorf("duplicate key for list Connection %v", key)
	}

	t.Connection[key] = v
	return nil
}

// GetOrCreateAcctz retrieves the value of the Acctz field
// or returns the existing field if it already exists.
func (t *System_GrpcServer) GetOrCreateAcctz() *System_GrpcServer_Acctz {
	if t.Acctz != nil {
		return t.Acctz
	}
	t.Acctz = &System_GrpcServer_Acctz{}
	return t.Acctz
}

// GetOrCreateAuthzPolicyCounters retrieves the value of the AuthzPolicyCounters field
// or returns the existing field if it already exists.
func (t *System_GrpcServer) GetOrCreateAuthzPolicyCounters() *System_GrpcServer_AuthzPolicyCounters {
	if t.AuthzPolicyCounters != nil {
		return t.AuthzPolicyCounters
	}
	t.AuthzPolicyCounters = &System_GrpcServer_AuthzPolicyCounters{}
	return t.AuthzPolicyCounters
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_GrpcServer) GetOrCreateCounters() *System_GrpcServer_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_GrpcServer_Counters{}
	return t.Counters
}

// GetOrCreateGnmiPathzPolicyCounters retrieves the value of the GnmiPathzPolicyCounters field
// or returns the existing field if it already exists.
func (t *System_GrpcServer) GetOrCreateGnmiPathzPolicyCounters() *System_GrpcServer_GnmiPathzPolicyCounters {
	if t.GnmiPathzPolicyCounters != nil {
		return t.GnmiPathzPolicyCounters
	}
	t.GnmiPathzPolicyCounters = &System_GrpcServer_GnmiPathzPolicyCounters{}
	return t.GnmiPathzPolicyCounters
}

// GetAcctz returns the value of the Acctz struct pointer
// from System_GrpcServer. If the receiver or the field Acctz is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer) GetAcctz() *System_GrpcServer_Acctz {
	if t != nil && t.Acctz != nil {
		return t.Acctz
	}
	return nil
}

// GetAuthzPolicyCounters returns the value of the AuthzPolicyCounters struct pointer
// from System_GrpcServer. If the receiver or the field AuthzPolicyCounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer) GetAuthzPolicyCounters() *System_GrpcServer_AuthzPolicyCounters {
	if t != nil && t.AuthzPolicyCounters != nil {
		return t.AuthzPolicyCounters
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from System_GrpcServer. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer) GetCounters() *System_GrpcServer_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetGnmiPathzPolicyCounters returns the value of the GnmiPathzPolicyCounters struct pointer
// from System_GrpcServer. If the receiver or the field GnmiPathzPolicyCounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer) GetGnmiPathzPolicyCounters() *System_GrpcServer_GnmiPathzPolicyCounters {
	if t != nil && t.GnmiPathzPolicyCounters != nil {
		return t.GnmiPathzPolicyCounters
	}
	return nil
}

// GetAuthenticationPolicyCreatedOn retrieves the value of the leaf AuthenticationPolicyCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicyCreatedOn is set, it can
// safely use t.GetAuthenticationPolicyCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicyCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetAuthenticationPolicyCreatedOn() uint64 {
	if t == nil || t.AuthenticationPolicyCreatedOn == nil {
		return 0
	}
	return *t.AuthenticationPolicyCreatedOn
}

// GetAuthenticationPolicyVersion retrieves the value of the leaf AuthenticationPolicyVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicyVersion is set, it can
// safely use t.GetAuthenticationPolicyVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicyVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetAuthenticationPolicyVersion() string {
	if t == nil || t.AuthenticationPolicyVersion == nil {
		return ""
	}
	return *t.AuthenticationPolicyVersion
}

// GetCaTrustBundleCreatedOn retrieves the value of the leaf CaTrustBundleCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaTrustBundleCreatedOn is set, it can
// safely use t.GetCaTrustBundleCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaTrustBundleCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCaTrustBundleCreatedOn() uint64 {
	if t == nil || t.CaTrustBundleCreatedOn == nil {
		return 0
	}
	return *t.CaTrustBundleCreatedOn
}

// GetCaTrustBundleVersion retrieves the value of the leaf CaTrustBundleVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaTrustBundleVersion is set, it can
// safely use t.GetCaTrustBundleVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaTrustBundleVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCaTrustBundleVersion() string {
	if t == nil || t.CaTrustBundleVersion == nil {
		return ""
	}
	return *t.CaTrustBundleVersion
}

// GetCertificateCreatedOn retrieves the value of the leaf CertificateCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateCreatedOn is set, it can
// safely use t.GetCertificateCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateCreatedOn() uint64 {
	if t == nil || t.CertificateCreatedOn == nil {
		return 0
	}
	return *t.CertificateCreatedOn
}

// GetCertificateId retrieves the value of the leaf CertificateId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateId is set, it can
// safely use t.GetCertificateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetCertificateRevocationListBundleCreatedOn retrieves the value of the leaf CertificateRevocationListBundleCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateRevocationListBundleCreatedOn is set, it can
// safely use t.GetCertificateRevocationListBundleCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateRevocationListBundleCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateRevocationListBundleCreatedOn() uint64 {
	if t == nil || t.CertificateRevocationListBundleCreatedOn == nil {
		return 0
	}
	return *t.CertificateRevocationListBundleCreatedOn
}

// GetCertificateRevocationListBundleVersion retrieves the value of the leaf CertificateRevocationListBundleVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateRevocationListBundleVersion is set, it can
// safely use t.GetCertificateRevocationListBundleVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateRevocationListBundleVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateRevocationListBundleVersion() string {
	if t == nil || t.CertificateRevocationListBundleVersion == nil {
		return ""
	}
	return *t.CertificateRevocationListBundleVersion
}

// GetCertificateVersion retrieves the value of the leaf CertificateVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateVersion is set, it can
// safely use t.GetCertificateVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateVersion() string {
	if t == nil || t.CertificateVersion == nil {
		return ""
	}
	return *t.CertificateVersion
}

// GetEnable retrieves the value of the leaf Enable from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetGnmiPathzPolicyCreatedOn retrieves the value of the leaf GnmiPathzPolicyCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiPathzPolicyCreatedOn is set, it can
// safely use t.GetGnmiPathzPolicyCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiPathzPolicyCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetGnmiPathzPolicyCreatedOn() uint64 {
	if t == nil || t.GnmiPathzPolicyCreatedOn == nil {
		return 0
	}
	return *t.GnmiPathzPolicyCreatedOn
}

// GetGnmiPathzPolicyVersion retrieves the value of the leaf GnmiPathzPolicyVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiPathzPolicyVersion is set, it can
// safely use t.GetGnmiPathzPolicyVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiPathzPolicyVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetGnmiPathzPolicyVersion() string {
	if t == nil || t.GnmiPathzPolicyVersion == nil {
		return ""
	}
	return *t.GnmiPathzPolicyVersion
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListenAddresses is set, it can
// safely use t.GetListenAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListenAddresses == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetListenAddresses() []System_GrpcServer_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetMetadataAuthentication retrieves the value of the leaf MetadataAuthentication from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetadataAuthentication is set, it can
// safely use t.GetMetadataAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetadataAuthentication == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetMetadataAuthentication() bool {
	if t == nil || t.MetadataAuthentication == nil {
		return false
	}
	return *t.MetadataAuthentication
}

// GetName retrieves the value of the leaf Name from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetName() string {
	if t == nil || t.Name == nil {
		return "DEFAULT"
	}
	return *t.Name
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetPort retrieves the value of the leaf Port from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetServices retrieves the value of the leaf Services from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Services is set, it can
// safely use t.GetServices() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Services == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetServices() []E_SystemGrpc_GRPC_SERVICE {
	if t == nil || t.Services == nil {
		return nil
	}
	return t.Services
}

// GetSslProfileId retrieves the value of the leaf SslProfileId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SslProfileId is set, it can
// safely use t.GetSslProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SslProfileId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetSslProfileId() string {
	if t == nil || t.SslProfileId == nil {
		return ""
	}
	return *t.SslProfileId
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportSecurity is set, it can
// safely use t.GetTransportSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportSecurity == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return true
	}
	return *t.TransportSecurity
}

// SetAuthenticationPolicyCreatedOn sets the value of the leaf AuthenticationPolicyCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetAuthenticationPolicyCreatedOn(v uint64) {
	t.AuthenticationPolicyCreatedOn = &v
}

// SetAuthenticationPolicyVersion sets the value of the leaf AuthenticationPolicyVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetAuthenticationPolicyVersion(v string) {
	t.AuthenticationPolicyVersion = &v
}

// SetCaTrustBundleCreatedOn sets the value of the leaf CaTrustBundleCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCaTrustBundleCreatedOn(v uint64) {
	t.CaTrustBundleCreatedOn = &v
}

// SetCaTrustBundleVersion sets the value of the leaf CaTrustBundleVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCaTrustBundleVersion(v string) {
	t.CaTrustBundleVersion = &v
}

// SetCertificateCreatedOn sets the value of the leaf CertificateCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateCreatedOn(v uint64) {
	t.CertificateCreatedOn = &v
}

// SetCertificateId sets the value of the leaf CertificateId in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateId(v string) {
	t.CertificateId = &v
}

// SetCertificateRevocationListBundleCreatedOn sets the value of the leaf CertificateRevocationListBundleCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateRevocationListBundleCreatedOn(v uint64) {
	t.CertificateRevocationListBundleCreatedOn = &v
}

// SetCertificateRevocationListBundleVersion sets the value of the leaf CertificateRevocationListBundleVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateRevocationListBundleVersion(v string) {
	t.CertificateRevocationListBundleVersion = &v
}

// SetCertificateVersion sets the value of the leaf CertificateVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateVersion(v string) {
	t.CertificateVersion = &v
}

// SetEnable sets the value of the leaf Enable in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetGnmiPathzPolicyCreatedOn sets the value of the leaf GnmiPathzPolicyCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetGnmiPathzPolicyCreatedOn(v uint64) {
	t.GnmiPathzPolicyCreatedOn = &v
}

// SetGnmiPathzPolicyVersion sets the value of the leaf GnmiPathzPolicyVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetGnmiPathzPolicyVersion(v string) {
	t.GnmiPathzPolicyVersion = &v
}

// SetListenAddresses sets the value of the leaf ListenAddresses in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetListenAddresses(v []System_GrpcServer_ListenAddresses_Union) {
	t.ListenAddresses = v
}

// SetMetadataAuthentication sets the value of the leaf MetadataAuthentication in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetMetadataAuthentication(v bool) {
	t.MetadataAuthentication = &v
}

// SetName sets the value of the leaf Name in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetName(v string) {
	t.Name = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetPort sets the value of the leaf Port in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetPort(v uint16) {
	t.Port = &v
}

// SetServices sets the value of the leaf Services in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetServices(v []E_SystemGrpc_GRPC_SERVICE) {
	t.Services = v
}

// SetSslProfileId sets the value of the leaf SslProfileId in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetSslProfileId(v string) {
	t.SslProfileId = &v
}

// SetTransportSecurity sets the value of the leaf TransportSecurity in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetTransportSecurity(v bool) {
	t.TransportSecurity = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v string = "DEFAULT"
		t.Name = &v
	}
	if t.TransportSecurity == nil {
		var v bool = true
		t.TransportSecurity = &v
	}
	t.Acctz.PopulateDefaults()
	t.AuthzPolicyCounters.PopulateDefaults()
	t.Counters.PopulateDefaults()
	t.GnmiPathzPolicyCounters.PopulateDefaults()
	for _, e := range t.Connection {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the System_GrpcServer struct, which is a YANG list entry.
func (t *System_GrpcServer) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer.
func (*System_GrpcServer) Î›BelongingModule() string {
	return "openconfig-system-grpc"
}

// System_GrpcServer_Acctz represents the /openconfig-system/system/grpc-servers/grpc-server/acctz YANG schema element.
type System_GrpcServer_Acctz struct {
	Counters *System_GrpcServer_Acctz_Counters `path:"state/counters" module:"openconfig-gnsi-acctz/openconfig-gnsi-acctz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_Acctz implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_Acctz) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_GrpcServer_Acctz) GetOrCreateCounters() *System_GrpcServer_Acctz_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_GrpcServer_Acctz_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_GrpcServer_Acctz. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer_Acctz) GetCounters() *System_GrpcServer_Acctz_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_Acctz
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_Acctz) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Acctz) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_Acctz"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Acctz) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_Acctz) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_Acctz.
func (*System_GrpcServer_Acctz) Î›BelongingModule() string {
	return "openconfig-gnsi-acctz"
}

// System_GrpcServer_Acctz_Counters represents the /openconfig-system/system/grpc-servers/grpc-server/acctz/state/counters YANG schema element.
type System_GrpcServer_Acctz_Counters struct {
	HistoryIstruncated *uint64 `path:"history-istruncated" module:"openconfig-gnsi-acctz"`
	RecordRequests     *uint64 `path:"record-requests" module:"openconfig-gnsi-acctz"`
	RecordResponses    *uint64 `path:"record-responses" module:"openconfig-gnsi-acctz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_Acctz_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_Acctz_Counters) IsYANGGoStruct() {}

// GetHistoryIstruncated retrieves the value of the leaf HistoryIstruncated from the System_GrpcServer_Acctz_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HistoryIstruncated is set, it can
// safely use t.GetHistoryIstruncated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HistoryIstruncated == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Acctz_Counters) GetHistoryIstruncated() uint64 {
	if t == nil || t.HistoryIstruncated == nil {
		return 0
	}
	return *t.HistoryIstruncated
}

// GetRecordRequests retrieves the value of the leaf RecordRequests from the System_GrpcServer_Acctz_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordRequests is set, it can
// safely use t.GetRecordRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordRequests == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Acctz_Counters) GetRecordRequests() uint64 {
	if t == nil || t.RecordRequests == nil {
		return 0
	}
	return *t.RecordRequests
}

// GetRecordResponses retrieves the value of the leaf RecordResponses from the System_GrpcServer_Acctz_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordResponses is set, it can
// safely use t.GetRecordResponses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordResponses == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Acctz_Counters) GetRecordResponses() uint64 {
	if t == nil || t.RecordResponses == nil {
		return 0
	}
	return *t.RecordResponses
}

// SetHistoryIstruncated sets the value of the leaf HistoryIstruncated in the System_GrpcServer_Acctz_Counters
// struct.
func (t *System_GrpcServer_Acctz_Counters) SetHistoryIstruncated(v uint64) {
	t.HistoryIstruncated = &v
}

// SetRecordRequests sets the value of the leaf RecordRequests in the System_GrpcServer_Acctz_Counters
// struct.
func (t *System_GrpcServer_Acctz_Counters) SetRecordRequests(v uint64) {
	t.RecordRequests = &v
}

// SetRecordResponses sets the value of the leaf RecordResponses in the System_GrpcServer_Acctz_Counters
// struct.
func (t *System_GrpcServer_Acctz_Counters) SetRecordResponses(v uint64) {
	t.RecordResponses = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_Acctz_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_Acctz_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Acctz_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_Acctz_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Acctz_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_Acctz_Counters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_Acctz_Counters.
func (*System_GrpcServer_Acctz_Counters) Î›BelongingModule() string {
	return "openconfig-gnsi-acctz"
}

// System_GrpcServer_AuthzPolicyCounters represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters YANG schema element.
type System_GrpcServer_AuthzPolicyCounters struct {
	Rpc map[string]*System_GrpcServer_AuthzPolicyCounters_Rpc `path:"rpcs/rpc" module:"openconfig-gnsi-authz/openconfig-gnsi-authz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_AuthzPolicyCounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_AuthzPolicyCounters) IsYANGGoStruct() {}

// NewRpc creates a new entry in the Rpc list of the
// System_GrpcServer_AuthzPolicyCounters struct. The keys of the list are populated from the input
// arguments.
func (t *System_GrpcServer_AuthzPolicyCounters) NewRpc(Name string) (*System_GrpcServer_AuthzPolicyCounters_Rpc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rpc == nil {
		t.Rpc = make(map[string]*System_GrpcServer_AuthzPolicyCounters_Rpc)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rpc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rpc", key)
	}

	t.Rpc[key] = &System_GrpcServer_AuthzPolicyCounters_Rpc{
		Name: &Name,
	}

	return t.Rpc[key], nil
}

// RenameRpc renames an entry in the list Rpc within
// the System_GrpcServer_AuthzPolicyCounters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_GrpcServer_AuthzPolicyCounters) RenameRpc(oldK, newK string) error {
	if _, ok := t.Rpc[newK]; ok {
		return fmt.Errorf("key %v already exists in Rpc", newK)
	}

	e, ok := t.Rpc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Rpc", oldK)
	}
	e.Name = &newK

	t.Rpc[newK] = e
	delete(t.Rpc, oldK)
	return nil
}

// GetOrCreateRpcMap returns the list (map) from System_GrpcServer_AuthzPolicyCounters.
//
// It initializes the field if not already initialized.
func (t *System_GrpcServer_AuthzPolicyCounters) GetOrCreateRpcMap() map[string]*System_GrpcServer_AuthzPolicyCounters_Rpc {
	if t.Rpc == nil {
		t.Rpc = make(map[string]*System_GrpcServer_AuthzPolicyCounters_Rpc)
	}
	return t.Rpc
}

// GetOrCreateRpc retrieves the value with the specified keys from
// the receiver System_GrpcServer_AuthzPolicyCounters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_GrpcServer_AuthzPolicyCounters) GetOrCreateRpc(Name string) *System_GrpcServer_AuthzPolicyCounters_Rpc {

	key := Name

	if v, ok := t.Rpc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRpc(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRpc got unexpected error: %v", err))
	}
	return v
}

// GetRpc retrieves the value with the specified key from
// the Rpc map field of System_GrpcServer_AuthzPolicyCounters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_GrpcServer_AuthzPolicyCounters) GetRpc(Name string) *System_GrpcServer_AuthzPolicyCounters_Rpc {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Rpc[key]; ok {
		return lm
	}
	return nil
}

// DeleteRpc deletes the value with the specified keys from
// the receiver System_GrpcServer_AuthzPolicyCounters. If there is no such element, the function
// is a no-op.
func (t *System_GrpcServer_AuthzPolicyCounters) DeleteRpc(Name string) {
	key := Name

	delete(t.Rpc, key)
}

// AppendRpc appends the supplied System_GrpcServer_AuthzPolicyCounters_Rpc struct to the
// list Rpc of System_GrpcServer_AuthzPolicyCounters. If the key value(s) specified in
// the supplied System_GrpcServer_AuthzPolicyCounters_Rpc already exist in the list, an error is
// returned.
func (t *System_GrpcServer_AuthzPolicyCounters) AppendRpc(v *System_GrpcServer_AuthzPolicyCounters_Rpc) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rpc == nil {
		t.Rpc = make(map[string]*System_GrpcServer_AuthzPolicyCounters_Rpc)
	}

	if _, ok := t.Rpc[key]; ok {
		return fmt.Errorf("duplicate key for list Rpc %v", key)
	}

	t.Rpc[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_AuthzPolicyCounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_AuthzPolicyCounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Rpc {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_AuthzPolicyCounters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_AuthzPolicyCounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_AuthzPolicyCounters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_AuthzPolicyCounters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_AuthzPolicyCounters.
func (*System_GrpcServer_AuthzPolicyCounters) Î›BelongingModule() string {
	return "openconfig-gnsi-authz"
}

// System_GrpcServer_AuthzPolicyCounters_Rpc represents the /openconfig-system/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc YANG schema element.
type System_GrpcServer_AuthzPolicyCounters_Rpc struct {
	AccessAccepts    *uint64 `path:"state/access-accepts" module:"openconfig-gnsi-authz/openconfig-gnsi-authz"`
	AccessRejects    *uint64 `path:"state/access-rejects" module:"openconfig-gnsi-authz/openconfig-gnsi-authz"`
	LastAccessAccept *uint64 `path:"state/last-access-accept" module:"openconfig-gnsi-authz/openconfig-gnsi-authz"`
	LastAccessReject *uint64 `path:"state/last-access-reject" module:"openconfig-gnsi-authz/openconfig-gnsi-authz"`
	Name             *string `path:"state/name|name" module:"openconfig-gnsi-authz/openconfig-gnsi-authz|openconfig-gnsi-authz" shadow-path:"name" shadow-module:"openconfig-gnsi-authz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_AuthzPolicyCounters_Rpc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_AuthzPolicyCounters_Rpc) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetLastAccessAccept retrieves the value of the leaf LastAccessAccept from the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessAccept is set, it can
// safely use t.GetLastAccessAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessAccept == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) GetLastAccessAccept() uint64 {
	if t == nil || t.LastAccessAccept == nil {
		return 0
	}
	return *t.LastAccessAccept
}

// GetLastAccessReject retrieves the value of the leaf LastAccessReject from the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessReject is set, it can
// safely use t.GetLastAccessReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessReject == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) GetLastAccessReject() uint64 {
	if t == nil || t.LastAccessReject == nil {
		return 0
	}
	return *t.LastAccessReject
}

// GetName retrieves the value of the leaf Name from the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetLastAccessAccept sets the value of the leaf LastAccessAccept in the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) SetLastAccessAccept(v uint64) {
	t.LastAccessAccept = &v
}

// SetLastAccessReject sets the value of the leaf LastAccessReject in the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) SetLastAccessReject(v uint64) {
	t.LastAccessReject = &v
}

// SetName sets the value of the leaf Name in the System_GrpcServer_AuthzPolicyCounters_Rpc
// struct.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_AuthzPolicyCounters_Rpc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_GrpcServer_AuthzPolicyCounters_Rpc struct, which is a YANG list entry.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_AuthzPolicyCounters_Rpc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_AuthzPolicyCounters_Rpc) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_AuthzPolicyCounters_Rpc.
func (*System_GrpcServer_AuthzPolicyCounters_Rpc) Î›BelongingModule() string {
	return "openconfig-gnsi-authz"
}

// System_GrpcServer_Connection represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection YANG schema element.
type System_GrpcServer_Connection struct {
	Address  *string                                `path:"state/address|address" module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc" shadow-path:"address" shadow-module:"openconfig-system-grpc"`
	Counters *System_GrpcServer_Connection_Counters `path:"state/counters" module:"openconfig-system-grpc/openconfig-system-grpc"`
	Port     *uint16                                `path:"state/port|port" module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc" shadow-path:"port" shadow-module:"openconfig-system-grpc"`
}

// IsYANGGoStruct ensures that System_GrpcServer_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_Connection) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_GrpcServer_Connection) GetOrCreateCounters() *System_GrpcServer_Connection_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_GrpcServer_Connection_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_GrpcServer_Connection. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer_Connection) GetCounters() *System_GrpcServer_Connection_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the System_GrpcServer_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Connection) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the System_GrpcServer_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Connection) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// SetAddress sets the value of the leaf Address in the System_GrpcServer_Connection
// struct.
func (t *System_GrpcServer_Connection) SetAddress(v string) {
	t.Address = &v
}

// SetPort sets the value of the leaf Port in the System_GrpcServer_Connection
// struct.
func (t *System_GrpcServer_Connection) SetPort(v uint16) {
	t.Port = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the System_GrpcServer_Connection struct, which is a YANG list entry.
func (t *System_GrpcServer_Connection) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Connection) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Connection) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_Connection) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_Connection.
func (*System_GrpcServer_Connection) Î›BelongingModule() string {
	return "openconfig-system-grpc"
}

// System_GrpcServer_Connection_Counters represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters YANG schema element.
type System_GrpcServer_Connection_Counters struct {
	BytesSent     *uint64 `path:"bytes-sent" module:"openconfig-system-grpc"`
	DataSendError *uint64 `path:"data-send-error" module:"openconfig-system-grpc"`
	PacketsSent   *uint64 `path:"packets-sent" module:"openconfig-system-grpc"`
}

// IsYANGGoStruct ensures that System_GrpcServer_Connection_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_Connection_Counters) IsYANGGoStruct() {}

// GetBytesSent retrieves the value of the leaf BytesSent from the System_GrpcServer_Connection_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BytesSent is set, it can
// safely use t.GetBytesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BytesSent == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Connection_Counters) GetBytesSent() uint64 {
	if t == nil || t.BytesSent == nil {
		return 0
	}
	return *t.BytesSent
}

// GetDataSendError retrieves the value of the leaf DataSendError from the System_GrpcServer_Connection_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataSendError is set, it can
// safely use t.GetDataSendError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataSendError == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Connection_Counters) GetDataSendError() uint64 {
	if t == nil || t.DataSendError == nil {
		return 0
	}
	return *t.DataSendError
}

// GetPacketsSent retrieves the value of the leaf PacketsSent from the System_GrpcServer_Connection_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketsSent is set, it can
// safely use t.GetPacketsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketsSent == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Connection_Counters) GetPacketsSent() uint64 {
	if t == nil || t.PacketsSent == nil {
		return 0
	}
	return *t.PacketsSent
}

// SetBytesSent sets the value of the leaf BytesSent in the System_GrpcServer_Connection_Counters
// struct.
func (t *System_GrpcServer_Connection_Counters) SetBytesSent(v uint64) {
	t.BytesSent = &v
}

// SetDataSendError sets the value of the leaf DataSendError in the System_GrpcServer_Connection_Counters
// struct.
func (t *System_GrpcServer_Connection_Counters) SetDataSendError(v uint64) {
	t.DataSendError = &v
}

// SetPacketsSent sets the value of the leaf PacketsSent in the System_GrpcServer_Connection_Counters
// struct.
func (t *System_GrpcServer_Connection_Counters) SetPacketsSent(v uint64) {
	t.PacketsSent = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_Connection_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_Connection_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Connection_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_Connection_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Connection_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_Connection_Counters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_Connection_Counters.
func (*System_GrpcServer_Connection_Counters) Î›BelongingModule() string {
	return "openconfig-system-grpc"
}

// System_GrpcServer_Counters represents the /openconfig-system/system/grpc-servers/grpc-server/state/counters YANG schema element.
type System_GrpcServer_Counters struct {
	ConnectionAccepts    *uint64 `path:"connection-accepts" module:"openconfig-gnsi-certz"`
	ConnectionRejects    *uint64 `path:"connection-rejects" module:"openconfig-gnsi-certz"`
	LastConnectionAccept *uint64 `path:"last-connection-accept" module:"openconfig-gnsi-certz"`
	LastConnectionReject *uint64 `path:"last-connection-reject" module:"openconfig-gnsi-certz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_Counters) IsYANGGoStruct() {}

// GetConnectionAccepts retrieves the value of the leaf ConnectionAccepts from the System_GrpcServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionAccepts is set, it can
// safely use t.GetConnectionAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionAccepts == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Counters) GetConnectionAccepts() uint64 {
	if t == nil || t.ConnectionAccepts == nil {
		return 0
	}
	return *t.ConnectionAccepts
}

// GetConnectionRejects retrieves the value of the leaf ConnectionRejects from the System_GrpcServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionRejects is set, it can
// safely use t.GetConnectionRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionRejects == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Counters) GetConnectionRejects() uint64 {
	if t == nil || t.ConnectionRejects == nil {
		return 0
	}
	return *t.ConnectionRejects
}

// GetLastConnectionAccept retrieves the value of the leaf LastConnectionAccept from the System_GrpcServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastConnectionAccept is set, it can
// safely use t.GetLastConnectionAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastConnectionAccept == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Counters) GetLastConnectionAccept() uint64 {
	if t == nil || t.LastConnectionAccept == nil {
		return 0
	}
	return *t.LastConnectionAccept
}

// GetLastConnectionReject retrieves the value of the leaf LastConnectionReject from the System_GrpcServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastConnectionReject is set, it can
// safely use t.GetLastConnectionReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastConnectionReject == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_Counters) GetLastConnectionReject() uint64 {
	if t == nil || t.LastConnectionReject == nil {
		return 0
	}
	return *t.LastConnectionReject
}

// SetConnectionAccepts sets the value of the leaf ConnectionAccepts in the System_GrpcServer_Counters
// struct.
func (t *System_GrpcServer_Counters) SetConnectionAccepts(v uint64) {
	t.ConnectionAccepts = &v
}

// SetConnectionRejects sets the value of the leaf ConnectionRejects in the System_GrpcServer_Counters
// struct.
func (t *System_GrpcServer_Counters) SetConnectionRejects(v uint64) {
	t.ConnectionRejects = &v
}

// SetLastConnectionAccept sets the value of the leaf LastConnectionAccept in the System_GrpcServer_Counters
// struct.
func (t *System_GrpcServer_Counters) SetLastConnectionAccept(v uint64) {
	t.LastConnectionAccept = &v
}

// SetLastConnectionReject sets the value of the leaf LastConnectionReject in the System_GrpcServer_Counters
// struct.
func (t *System_GrpcServer_Counters) SetLastConnectionReject(v uint64) {
	t.LastConnectionReject = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_Counters) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_Counters.
func (*System_GrpcServer_Counters) Î›BelongingModule() string {
	return "openconfig-gnsi-certz"
}

// System_GrpcServer_GnmiPathzPolicyCounters represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters struct {
	Path map[string]*System_GrpcServer_GnmiPathzPolicyCounters_Path `path:"paths/path" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_GnmiPathzPolicyCounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_GnmiPathzPolicyCounters) IsYANGGoStruct() {}

// NewPath creates a new entry in the Path list of the
// System_GrpcServer_GnmiPathzPolicyCounters struct. The keys of the list are populated from the input
// arguments.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) NewPath(Name string) (*System_GrpcServer_GnmiPathzPolicyCounters_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*System_GrpcServer_GnmiPathzPolicyCounters_Path)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &System_GrpcServer_GnmiPathzPolicyCounters_Path{
		Name: &Name,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the System_GrpcServer_GnmiPathzPolicyCounters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.Name = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePathMap returns the list (map) from System_GrpcServer_GnmiPathzPolicyCounters.
//
// It initializes the field if not already initialized.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) GetOrCreatePathMap() map[string]*System_GrpcServer_GnmiPathzPolicyCounters_Path {
	if t.Path == nil {
		t.Path = make(map[string]*System_GrpcServer_GnmiPathzPolicyCounters_Path)
	}
	return t.Path
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver System_GrpcServer_GnmiPathzPolicyCounters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) GetOrCreatePath(Name string) *System_GrpcServer_GnmiPathzPolicyCounters_Path {

	key := Name

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of System_GrpcServer_GnmiPathzPolicyCounters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) GetPath(Name string) *System_GrpcServer_GnmiPathzPolicyCounters_Path {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver System_GrpcServer_GnmiPathzPolicyCounters. If there is no such element, the function
// is a no-op.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) DeletePath(Name string) {
	key := Name

	delete(t.Path, key)
}

// AppendPath appends the supplied System_GrpcServer_GnmiPathzPolicyCounters_Path struct to the
// list Path of System_GrpcServer_GnmiPathzPolicyCounters. If the key value(s) specified in
// the supplied System_GrpcServer_GnmiPathzPolicyCounters_Path already exist in the list, an error is
// returned.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) AppendPath(v *System_GrpcServer_GnmiPathzPolicyCounters_Path) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*System_GrpcServer_GnmiPathzPolicyCounters_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_GnmiPathzPolicyCounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_GnmiPathzPolicyCounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_GnmiPathzPolicyCounters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_GnmiPathzPolicyCounters.
func (*System_GrpcServer_GnmiPathzPolicyCounters) Î›BelongingModule() string {
	return "openconfig-gnsi-pathz"
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path struct {
	Name   *string                                                `path:"state/name|name" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz|openconfig-gnsi-pathz" shadow-path:"name" shadow-module:"openconfig-gnsi-pathz"`
	Reads  *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads  `path:"state/reads" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz"`
	Writes *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes `path:"state/writes" module:"openconfig-gnsi-pathz/openconfig-gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_GnmiPathzPolicyCounters_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_GnmiPathzPolicyCounters_Path) IsYANGGoStruct() {}

// GetOrCreateReads retrieves the value of the Reads field
// or returns the existing field if it already exists.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) GetOrCreateReads() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads {
	if t.Reads != nil {
		return t.Reads
	}
	t.Reads = &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads{}
	return t.Reads
}

// GetOrCreateWrites retrieves the value of the Writes field
// or returns the existing field if it already exists.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) GetOrCreateWrites() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes {
	if t.Writes != nil {
		return t.Writes
	}
	t.Writes = &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes{}
	return t.Writes
}

// GetReads returns the value of the Reads struct pointer
// from System_GrpcServer_GnmiPathzPolicyCounters_Path. If the receiver or the field Reads is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) GetReads() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads {
	if t != nil && t.Reads != nil {
		return t.Reads
	}
	return nil
}

// GetWrites returns the value of the Writes struct pointer
// from System_GrpcServer_GnmiPathzPolicyCounters_Path. If the receiver or the field Writes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) GetWrites() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes {
	if t != nil && t.Writes != nil {
		return t.Writes
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the System_GrpcServer_GnmiPathzPolicyCounters_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the System_GrpcServer_GnmiPathzPolicyCounters_Path
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_GnmiPathzPolicyCounters_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Reads.PopulateDefaults()
	t.Writes.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the System_GrpcServer_GnmiPathzPolicyCounters_Path struct, which is a YANG list entry.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_GnmiPathzPolicyCounters_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_GnmiPathzPolicyCounters_Path.
func (*System_GrpcServer_GnmiPathzPolicyCounters_Path) Î›BelongingModule() string {
	return "openconfig-gnsi-pathz"
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads struct {
	AccessAccepts    *uint64 `path:"access-accepts" module:"openconfig-gnsi-pathz"`
	AccessRejects    *uint64 `path:"access-rejects" module:"openconfig-gnsi-pathz"`
	LastAccessAccept *uint64 `path:"last-access-accept" module:"openconfig-gnsi-pathz"`
	LastAccessReject *uint64 `path:"last-access-reject" module:"openconfig-gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetLastAccessAccept retrieves the value of the leaf LastAccessAccept from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessAccept is set, it can
// safely use t.GetLastAccessAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessAccept == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) GetLastAccessAccept() uint64 {
	if t == nil || t.LastAccessAccept == nil {
		return 0
	}
	return *t.LastAccessAccept
}

// GetLastAccessReject retrieves the value of the leaf LastAccessReject from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessReject is set, it can
// safely use t.GetLastAccessReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessReject == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) GetLastAccessReject() uint64 {
	if t == nil || t.LastAccessReject == nil {
		return 0
	}
	return *t.LastAccessReject
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetLastAccessAccept sets the value of the leaf LastAccessAccept in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) SetLastAccessAccept(v uint64) {
	t.LastAccessAccept = &v
}

// SetLastAccessReject sets the value of the leaf LastAccessReject in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) SetLastAccessReject(v uint64) {
	t.LastAccessReject = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads.
func (*System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) Î›BelongingModule() string {
	return "openconfig-gnsi-pathz"
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes struct {
	AccessAccepts    *uint64 `path:"access-accepts" module:"openconfig-gnsi-pathz"`
	AccessRejects    *uint64 `path:"access-rejects" module:"openconfig-gnsi-pathz"`
	LastAccessAccept *uint64 `path:"last-access-accept" module:"openconfig-gnsi-pathz"`
	LastAccessReject *uint64 `path:"last-access-reject" module:"openconfig-gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetLastAccessAccept retrieves the value of the leaf LastAccessAccept from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessAccept is set, it can
// safely use t.GetLastAccessAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessAccept == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) GetLastAccessAccept() uint64 {
	if t == nil || t.LastAccessAccept == nil {
		return 0
	}
	return *t.LastAccessAccept
}

// GetLastAccessReject retrieves the value of the leaf LastAccessReject from the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessReject is set, it can
// safely use t.GetLastAccessReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessReject == nil' before retrieving the leaf's value.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) GetLastAccessReject() uint64 {
	if t == nil || t.LastAccessReject == nil {
		return 0
	}
	return *t.LastAccessReject
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetLastAccessAccept sets the value of the leaf LastAccessAccept in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) SetLastAccessAccept(v uint64) {
	t.LastAccessAccept = &v
}

// SetLastAccessReject sets the value of the leaf LastAccessReject in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// struct.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) SetLastAccessReject(v uint64) {
	t.LastAccessReject = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes.
func (*System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) Î›BelongingModule() string {
	return "openconfig-gnsi-pathz"
}

// System_License represents the /openconfig-system/system/license YANG schema element.
type System_License struct {
	License map[string]*System_License_License `path:"licenses/license" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// System_License struct. The keys of the list are populated from the input
// arguments.
func (t *System_License) NewLicense(LicenseId string) (*System_License_License, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &System_License_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// RenameLicense renames an entry in the list License within
// the System_License struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_License) RenameLicense(oldK, newK string) error {
	if _, ok := t.License[newK]; ok {
		return fmt.Errorf("key %v already exists in License", newK)
	}

	e, ok := t.License[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in License", oldK)
	}
	e.LicenseId = &newK

	t.License[newK] = e
	delete(t.License, oldK)
	return nil
}

// GetOrCreateLicenseMap returns the list (map) from System_License.
//
// It initializes the field if not already initialized.
func (t *System_License) GetOrCreateLicenseMap() map[string]*System_License_License {
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}
	return t.License
}

// GetOrCreateLicense retrieves the value with the specified keys from
// the receiver System_License. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_License) GetOrCreateLicense(LicenseId string) *System_License_License {

	key := LicenseId

	if v, ok := t.License[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLicense(LicenseId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLicense got unexpected error: %v", err))
	}
	return v
}

// GetLicense retrieves the value with the specified key from
// the License map field of System_License. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_License) GetLicense(LicenseId string) *System_License_License {

	if t == nil {
		return nil
	}

	key := LicenseId

	if lm, ok := t.License[key]; ok {
		return lm
	}
	return nil
}

// DeleteLicense deletes the value with the specified keys from
// the receiver System_License. If there is no such element, the function
// is a no-op.
func (t *System_License) DeleteLicense(LicenseId string) {
	key := LicenseId

	delete(t.License, key)
}

// AppendLicense appends the supplied System_License_License struct to the
// list License of System_License. If the key value(s) specified in
// the supplied System_License_License already exist in the list, an error is
// returned.
func (t *System_License) AppendLicense(v *System_License_License) error {
	if v.LicenseId == nil {
		return fmt.Errorf("invalid nil key received for LicenseId")
	}

	key := *v.LicenseId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	if _, ok := t.License[key]; ok {
		return fmt.Errorf("duplicate key for list License %v", key)
	}

	t.License[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.License {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_License.
func (*System_License) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_License_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_License struct {
	Active         *bool                                    `path:"state/active" module:"openconfig-system/openconfig-system" shadow-path:"config/active" shadow-module:"openconfig-system/openconfig-system"`
	Description    *string                                  `path:"state/description" module:"openconfig-system/openconfig-system"`
	ExpirationDate *uint64                                  `path:"state/expiration-date" module:"openconfig-system/openconfig-system"`
	Expired        *bool                                    `path:"state/expired" module:"openconfig-system/openconfig-system"`
	InUse          *bool                                    `path:"state/in-use" module:"openconfig-system/openconfig-system"`
	IssueDate      *uint64                                  `path:"state/issue-date" module:"openconfig-system/openconfig-system"`
	LicenseData    System_License_License_LicenseData_Union `path:"state/license-data" module:"openconfig-system/openconfig-system" shadow-path:"config/license-data" shadow-module:"openconfig-system/openconfig-system"`
	LicenseId      *string                                  `path:"state/license-id|license-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/license-id|license-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Valid          *bool                                    `path:"state/valid" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License_License) IsYANGGoStruct() {}

// GetActive retrieves the value of the leaf Active from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *System_License_License) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetDescription retrieves the value of the leaf Description from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *System_License_License) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExpirationDate retrieves the value of the leaf ExpirationDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpirationDate is set, it can
// safely use t.GetExpirationDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpirationDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpirationDate() uint64 {
	if t == nil || t.ExpirationDate == nil {
		return 0
	}
	return *t.ExpirationDate
}

// GetExpired retrieves the value of the leaf Expired from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expired is set, it can
// safely use t.GetExpired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expired == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpired() bool {
	if t == nil || t.Expired == nil {
		return false
	}
	return *t.Expired
}

// GetInUse retrieves the value of the leaf InUse from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUse is set, it can
// safely use t.GetInUse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUse == nil' before retrieving the leaf's value.
func (t *System_License_License) GetInUse() bool {
	if t == nil || t.InUse == nil {
		return false
	}
	return *t.InUse
}

// GetIssueDate retrieves the value of the leaf IssueDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IssueDate is set, it can
// safely use t.GetIssueDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IssueDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetIssueDate() uint64 {
	if t == nil || t.IssueDate == nil {
		return 0
	}
	return *t.IssueDate
}

// GetLicenseData retrieves the value of the leaf LicenseData from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseData is set, it can
// safely use t.GetLicenseData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseData == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseData() System_License_License_LicenseData_Union {
	if t == nil || t.LicenseData == nil {
		return nil
	}
	return t.LicenseData
}

// GetLicenseId retrieves the value of the leaf LicenseId from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseId is set, it can
// safely use t.GetLicenseId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseId == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseId() string {
	if t == nil || t.LicenseId == nil {
		return ""
	}
	return *t.LicenseId
}

// GetValid retrieves the value of the leaf Valid from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *System_License_License) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// SetActive sets the value of the leaf Active in the System_License_License
// struct.
func (t *System_License_License) SetActive(v bool) {
	t.Active = &v
}

// SetDescription sets the value of the leaf Description in the System_License_License
// struct.
func (t *System_License_License) SetDescription(v string) {
	t.Description = &v
}

// SetExpirationDate sets the value of the leaf ExpirationDate in the System_License_License
// struct.
func (t *System_License_License) SetExpirationDate(v uint64) {
	t.ExpirationDate = &v
}

// SetExpired sets the value of the leaf Expired in the System_License_License
// struct.
func (t *System_License_License) SetExpired(v bool) {
	t.Expired = &v
}

// SetInUse sets the value of the leaf InUse in the System_License_License
// struct.
func (t *System_License_License) SetInUse(v bool) {
	t.InUse = &v
}

// SetIssueDate sets the value of the leaf IssueDate in the System_License_License
// struct.
func (t *System_License_License) SetIssueDate(v uint64) {
	t.IssueDate = &v
}

// SetLicenseData sets the value of the leaf LicenseData in the System_License_License
// struct.
func (t *System_License_License) SetLicenseData(v System_License_License_LicenseData_Union) {
	t.LicenseData = v
}

// SetLicenseId sets the value of the leaf LicenseId in the System_License_License
// struct.
func (t *System_License_License) SetLicenseId(v string) {
	t.LicenseId = &v
}

// SetValid sets the value of the leaf Valid in the System_License_License
// struct.
func (t *System_License_License) SetValid(v bool) {
	t.Valid = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_License_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v bool = false
		t.Active = &v
	}
}

// Î›ListKeyMap returns the keys of the System_License_License struct, which is a YANG list entry.
func (t *System_License_License) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License_License) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_License_License.
func (*System_License_License) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging represents the /openconfig-system/system/logging YANG schema element.
type System_Logging struct {
	Console      *System_Logging_Console                          `path:"console" module:"openconfig-system"`
	File         map[System_Logging_File_Key]*System_Logging_File `path:"files/file" module:"openconfig-system/openconfig-system"`
	RemoteServer map[string]*System_Logging_RemoteServer          `path:"remote-servers/remote-server" module:"openconfig-system/openconfig-system"`
	Vty          *System_Logging_Vty                              `path:"vty" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging) IsYANGGoStruct() {}

// System_Logging_File_Key represents the key for list File of element /openconfig-system/system/logging.
type System_Logging_File_Key struct {
	Path           string `path:"path"`
	FilenamePrefix string `path:"filename-prefix"`
}

// IsYANGGoKeyStruct ensures that System_Logging_File_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_File_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_Logging_File_Key key struct.
func (t System_Logging_File_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path":            t.Path,
		"filename-prefix": t.FilenamePrefix,
	}, nil
}

// NewFile creates a new entry in the File list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewFile(Path string, FilenamePrefix string) (*System_Logging_File, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.File[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list File", key)
	}

	t.File[key] = &System_Logging_File{
		Path:           &Path,
		FilenamePrefix: &FilenamePrefix,
	}

	return t.File[key], nil
}

// RenameFile renames an entry in the list File within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameFile(oldK, newK System_Logging_File_Key) error {
	if _, ok := t.File[newK]; ok {
		return fmt.Errorf("key %v already exists in File", newK)
	}

	e, ok := t.File[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in File", oldK)
	}
	e.Path = &newK.Path
	e.FilenamePrefix = &newK.FilenamePrefix

	t.File[newK] = e
	delete(t.File, oldK)
	return nil
}

// GetOrCreateFileMap returns the list (map) from System_Logging.
//
// It initializes the field if not already initialized.
func (t *System_Logging) GetOrCreateFileMap() map[System_Logging_File_Key]*System_Logging_File {
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}
	return t.File
}

// GetOrCreateFile retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateFile(Path string, FilenamePrefix string) *System_Logging_File {

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if v, ok := t.File[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFile(Path, FilenamePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFile got unexpected error: %v", err))
	}
	return v
}

// GetFile retrieves the value with the specified key from
// the File map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetFile(Path string, FilenamePrefix string) *System_Logging_File {

	if t == nil {
		return nil
	}

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if lm, ok := t.File[key]; ok {
		return lm
	}
	return nil
}

// DeleteFile deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteFile(Path string, FilenamePrefix string) {
	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	delete(t.File, key)
}

// AppendFile appends the supplied System_Logging_File struct to the
// list File of System_Logging. If the key value(s) specified in
// the supplied System_Logging_File already exist in the list, an error is
// returned.
func (t *System_Logging) AppendFile(v *System_Logging_File) error {
	if v.Path == nil {
		return fmt.Errorf("invalid nil key for Path")
	}

	if v.FilenamePrefix == nil {
		return fmt.Errorf("invalid nil key for FilenamePrefix")
	}

	key := System_Logging_File_Key{
		Path:           *v.Path,
		FilenamePrefix: *v.FilenamePrefix,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}

	if _, ok := t.File[key]; ok {
		return fmt.Errorf("duplicate key for list File %v", key)
	}

	t.File[key] = v
	return nil
}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewRemoteServer(Host string) (*System_Logging_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &System_Logging_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServerMap returns the list (map) from System_Logging.
//
// It initializes the field if not already initialized.
func (t *System_Logging) GetOrCreateRemoteServerMap() map[string]*System_Logging_RemoteServer {
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}
	return t.RemoteServer
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateRemoteServer(Host string) *System_Logging_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetRemoteServer(Host string) *System_Logging_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteServer deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteRemoteServer(Host string) {
	key := Host

	delete(t.RemoteServer, key)
}

// AppendRemoteServer appends the supplied System_Logging_RemoteServer struct to the
// list RemoteServer of System_Logging. If the key value(s) specified in
// the supplied System_Logging_RemoteServer already exist in the list, an error is
// returned.
func (t *System_Logging) AppendRemoteServer(v *System_Logging_RemoteServer) error {
	if v.Host == nil {
		return fmt.Errorf("invalid nil key received for Host")
	}

	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateConsole() *System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &System_Logging_Console{}
	return t.Console
}

// GetOrCreateVty retrieves the value of the Vty field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateVty() *System_Logging_Vty {
	if t.Vty != nil {
		return t.Vty
	}
	t.Vty = &System_Logging_Vty{}
	return t.Vty
}

// GetConsole returns the value of the Console struct pointer
// from System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetConsole() *System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetVty returns the value of the Vty struct pointer
// from System_Logging. If the receiver or the field Vty is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetVty() *System_Logging_Vty {
	if t != nil && t.Vty != nil {
		return t.Vty
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Console.PopulateDefaults()
	t.Vty.PopulateDefaults()
	for _, e := range t.File {
		e.PopulateDefaults()
	}
	for _, e := range t.RemoteServer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging.
func (*System_Logging) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_Console struct {
	Selector map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console) IsYANGGoStruct() {}

// System_Logging_Console_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console.
type System_Logging_Console_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_Console_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_Console_Selector_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_Logging_Console_Selector_Key key struct.
func (t System_Logging_Console_Selector_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Console struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Console) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Console_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Console_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Console struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Console) RenameSelector(oldK, newK System_Logging_Console_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_Console.
//
// It initializes the field if not already initialized.
func (t *System_Logging_Console) GetOrCreateSelectorMap() map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Console. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Console) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Console. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Console) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Console. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Console) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Console_Selector struct to the
// list Selector of System_Logging_Console. If the key value(s) specified in
// the supplied System_Logging_Console_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Console) AppendSelector(v *System_Logging_Console_Selector) error {
	key := System_Logging_Console_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console.
func (*System_Logging_Console) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_Console_Selector
// struct.
func (t *System_Logging_Console_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_Console_Selector
// struct.
func (t *System_Logging_Console_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Logging_Console_Selector struct, which is a YANG list entry.
func (t *System_Logging_Console_Selector) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console_Selector) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console_Selector.
func (*System_Logging_Console_Selector) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_File represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_File struct {
	FilenamePrefix *string                                                            `path:"state/filename-prefix|filename-prefix" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/filename-prefix|filename-prefix" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	MaxOpenTime    *uint32                                                            `path:"state/max-open-time" module:"openconfig-system/openconfig-system" shadow-path:"config/max-open-time" shadow-module:"openconfig-system/openconfig-system"`
	MaxSize        *uint32                                                            `path:"state/max-size" module:"openconfig-system/openconfig-system" shadow-path:"config/max-size" shadow-module:"openconfig-system/openconfig-system"`
	OpenLogfile    *string                                                            `path:"state/open-logfile" module:"openconfig-system/openconfig-system"`
	Path           *string                                                            `path:"state/path|path" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/path|path" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Rotate         *uint32                                                            `path:"state/rotate" module:"openconfig-system/openconfig-system" shadow-path:"config/rotate" shadow-module:"openconfig-system/openconfig-system"`
	Selector       map[System_Logging_File_Selector_Key]*System_Logging_File_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_File implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_File) IsYANGGoStruct() {}

// System_Logging_File_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/files/file.
type System_Logging_File_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_File_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_File_Selector_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_Logging_File_Selector_Key key struct.
func (t System_Logging_File_Selector_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_File struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_File) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_File_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_File_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_File struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_File) RenameSelector(oldK, newK System_Logging_File_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_File.
//
// It initializes the field if not already initialized.
func (t *System_Logging_File) GetOrCreateSelectorMap() map[System_Logging_File_Selector_Key]*System_Logging_File_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_File. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_File) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_Selector {

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_File. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_File) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_File. If there is no such element, the function
// is a no-op.
func (t *System_Logging_File) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_File_Selector struct to the
// list Selector of System_Logging_File. If the key value(s) specified in
// the supplied System_Logging_File_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_File) AppendSelector(v *System_Logging_File_Selector) error {
	key := System_Logging_File_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetFilenamePrefix retrieves the value of the leaf FilenamePrefix from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilenamePrefix is set, it can
// safely use t.GetFilenamePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilenamePrefix == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetFilenamePrefix() string {
	if t == nil || t.FilenamePrefix == nil {
		return ""
	}
	return *t.FilenamePrefix
}

// GetMaxOpenTime retrieves the value of the leaf MaxOpenTime from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxOpenTime is set, it can
// safely use t.GetMaxOpenTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxOpenTime == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetMaxOpenTime() uint32 {
	if t == nil || t.MaxOpenTime == nil {
		return 1440
	}
	return *t.MaxOpenTime
}

// GetMaxSize retrieves the value of the leaf MaxSize from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSize is set, it can
// safely use t.GetMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSize == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetMaxSize() uint32 {
	if t == nil || t.MaxSize == nil {
		return 1000
	}
	return *t.MaxSize
}

// GetOpenLogfile retrieves the value of the leaf OpenLogfile from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpenLogfile is set, it can
// safely use t.GetOpenLogfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpenLogfile == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetOpenLogfile() string {
	if t == nil || t.OpenLogfile == nil {
		return ""
	}
	return *t.OpenLogfile
}

// GetPath retrieves the value of the leaf Path from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetPath() string {
	if t == nil || t.Path == nil {
		return ""
	}
	return *t.Path
}

// GetRotate retrieves the value of the leaf Rotate from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rotate is set, it can
// safely use t.GetRotate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rotate == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetRotate() uint32 {
	if t == nil || t.Rotate == nil {
		return 0
	}
	return *t.Rotate
}

// SetFilenamePrefix sets the value of the leaf FilenamePrefix in the System_Logging_File
// struct.
func (t *System_Logging_File) SetFilenamePrefix(v string) {
	t.FilenamePrefix = &v
}

// SetMaxOpenTime sets the value of the leaf MaxOpenTime in the System_Logging_File
// struct.
func (t *System_Logging_File) SetMaxOpenTime(v uint32) {
	t.MaxOpenTime = &v
}

// SetMaxSize sets the value of the leaf MaxSize in the System_Logging_File
// struct.
func (t *System_Logging_File) SetMaxSize(v uint32) {
	t.MaxSize = &v
}

// SetOpenLogfile sets the value of the leaf OpenLogfile in the System_Logging_File
// struct.
func (t *System_Logging_File) SetOpenLogfile(v string) {
	t.OpenLogfile = &v
}

// SetPath sets the value of the leaf Path in the System_Logging_File
// struct.
func (t *System_Logging_File) SetPath(v string) {
	t.Path = &v
}

// SetRotate sets the value of the leaf Rotate in the System_Logging_File
// struct.
func (t *System_Logging_File) SetRotate(v uint32) {
	t.Rotate = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_File
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_File) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxOpenTime == nil {
		var v uint32 = 1440
		t.MaxOpenTime = &v
	}
	if t.MaxSize == nil {
		var v uint32 = 1000
		t.MaxSize = &v
	}
	if t.Rotate == nil {
		var v uint32 = 0
		t.Rotate = &v
	}
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the System_Logging_File struct, which is a YANG list entry.
func (t *System_Logging_File) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.FilenamePrefix == nil {
		return nil, fmt.Errorf("nil value for key FilenamePrefix")
	}

	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"filename-prefix": *t.FilenamePrefix,
		"path":            *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_File"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_File) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_File.
func (*System_Logging_File) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_File_Selector represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_File_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_File_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_File_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_File_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_File_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_File_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_File_Selector
// struct.
func (t *System_Logging_File_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_File_Selector
// struct.
func (t *System_Logging_File_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_File_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_File_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Logging_File_Selector struct, which is a YANG list entry.
func (t *System_Logging_File_Selector) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File_Selector) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_File_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_File_Selector) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_File_Selector.
func (*System_Logging_File_Selector) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServer struct {
	Host              *string                                                                            `path:"state/host|host" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/host|host" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	NetworkInstance   *string                                                                            `path:"state/network-instance" module:"openconfig-system/openconfig-system" shadow-path:"config/network-instance" shadow-module:"openconfig-system/openconfig-system"`
	RemotePort        *uint16                                                                            `path:"state/remote-port" module:"openconfig-system/openconfig-system" shadow-path:"config/remote-port" shadow-module:"openconfig-system/openconfig-system"`
	Selector          map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	SourceAddress     *string                                                                            `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
	TlsProfileId      *string                                                                            `path:"state/tls-profile-id" module:"openconfig-system/openconfig-system" shadow-path:"config/tls-profile-id" shadow-module:"openconfig-system/openconfig-system"`
	TransportSecurity *bool                                                                              `path:"state/transport-security" module:"openconfig-system/openconfig-system" shadow-path:"config/transport-security" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer) IsYANGGoStruct() {}

// System_Logging_RemoteServer_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server.
type System_Logging_RemoteServer_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_RemoteServer_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_RemoteServer_Selector_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_Logging_RemoteServer_Selector_Key key struct.
func (t System_Logging_RemoteServer_Selector_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_RemoteServer struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_RemoteServer) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_RemoteServer_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_RemoteServer_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_RemoteServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_RemoteServer) RenameSelector(oldK, newK System_Logging_RemoteServer_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_RemoteServer.
//
// It initializes the field if not already initialized.
func (t *System_Logging_RemoteServer) GetOrCreateSelectorMap() map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_RemoteServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_RemoteServer) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_RemoteServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_RemoteServer) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_RemoteServer. If there is no such element, the function
// is a no-op.
func (t *System_Logging_RemoteServer) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_RemoteServer_Selector struct to the
// list Selector of System_Logging_RemoteServer. If the key value(s) specified in
// the supplied System_Logging_RemoteServer_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_RemoteServer) AppendSelector(v *System_Logging_RemoteServer_Selector) error {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetHost retrieves the value of the leaf Host from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Host is set, it can
// safely use t.GetHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Host == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetRemotePort retrieves the value of the leaf RemotePort from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemotePort is set, it can
// safely use t.GetRemotePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemotePort == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTlsProfileId retrieves the value of the leaf TlsProfileId from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsProfileId is set, it can
// safely use t.GetTlsProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsProfileId == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetTlsProfileId() string {
	if t == nil || t.TlsProfileId == nil {
		return ""
	}
	return *t.TlsProfileId
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportSecurity is set, it can
// safely use t.GetTransportSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportSecurity == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return false
	}
	return *t.TransportSecurity
}

// SetHost sets the value of the leaf Host in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetHost(v string) {
	t.Host = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetRemotePort sets the value of the leaf RemotePort in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetRemotePort(v uint16) {
	t.RemotePort = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetTlsProfileId sets the value of the leaf TlsProfileId in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetTlsProfileId(v string) {
	t.TlsProfileId = &v
}

// SetTransportSecurity sets the value of the leaf TransportSecurity in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetTransportSecurity(v bool) {
	t.TransportSecurity = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemotePort == nil {
		var v uint16 = 514
		t.RemotePort = &v
	}
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the System_Logging_RemoteServer struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer.
func (*System_Logging_RemoteServer) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_RemoteServer_Selector
// struct.
func (t *System_Logging_RemoteServer_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_RemoteServer_Selector
// struct.
func (t *System_Logging_RemoteServer_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Logging_RemoteServer_Selector struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer_Selector) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer_Selector) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer_Selector.
func (*System_Logging_RemoteServer_Selector) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Vty represents the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_Vty struct {
	Selector map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Vty implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Vty) IsYANGGoStruct() {}

// System_Logging_Vty_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/vty.
type System_Logging_Vty_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_Vty_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_Vty_Selector_Key) IsYANGGoKeyStruct() {}

// Î›ListKeyMap returns the values of the System_Logging_Vty_Selector_Key key struct.
func (t System_Logging_Vty_Selector_Key) Î›ListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Vty struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Vty) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Vty_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Vty_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Vty struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Vty) RenameSelector(oldK, newK System_Logging_Vty_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_Vty.
//
// It initializes the field if not already initialized.
func (t *System_Logging_Vty) GetOrCreateSelectorMap() map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Vty. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Vty) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_Selector {

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Vty. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Vty) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Vty. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Vty) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Vty_Selector struct to the
// list Selector of System_Logging_Vty. If the key value(s) specified in
// the supplied System_Logging_Vty_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Vty) AppendSelector(v *System_Logging_Vty_Selector) error {
	key := System_Logging_Vty_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Vty
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Vty) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Vty"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Vty) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_Vty.
func (*System_Logging_Vty) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Vty_Selector represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Vty_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Vty_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Vty_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Vty_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Vty_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Vty_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_Vty_Selector
// struct.
func (t *System_Logging_Vty_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_Vty_Selector
// struct.
func (t *System_Logging_Vty_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Vty_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Vty_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Logging_Vty_Selector struct, which is a YANG list entry.
func (t *System_Logging_Vty_Selector) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty_Selector) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Vty_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Vty_Selector) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Logging_Vty_Selector.
func (*System_Logging_Vty_Selector) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_MacAddress represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddress struct {
	RoutingMac *string `path:"state/routing-mac" module:"openconfig-system/openconfig-system" shadow-path:"config/routing-mac" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MacAddress) IsYANGGoStruct() {}

// GetRoutingMac retrieves the value of the leaf RoutingMac from the System_MacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutingMac is set, it can
// safely use t.GetRoutingMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutingMac == nil' before retrieving the leaf's value.
func (t *System_MacAddress) GetRoutingMac() string {
	if t == nil || t.RoutingMac == nil {
		return ""
	}
	return *t.RoutingMac
}

// SetRoutingMac sets the value of the leaf RoutingMac in the System_MacAddress
// struct.
func (t *System_MacAddress) SetRoutingMac(v string) {
	t.RoutingMac = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_MacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MacAddress) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_MacAddress.
func (*System_MacAddress) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Memory represents the /openconfig-system/system/memory YANG schema element.
type System_Memory struct {
	Counters *System_Memory_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	Free     *uint64                 `path:"state/free" module:"openconfig-system/openconfig-system"`
	Physical *uint64                 `path:"state/physical" module:"openconfig-system/openconfig-system"`
	Reserved *uint64                 `path:"state/reserved" module:"openconfig-system/openconfig-system"`
	Used     *uint64                 `path:"state/used" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Memory) GetOrCreateCounters() *System_Memory_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Memory_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Memory. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Memory) GetCounters() *System_Memory_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetFree retrieves the value of the leaf Free from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *System_Memory) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetPhysical retrieves the value of the leaf Physical from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Physical is set, it can
// safely use t.GetPhysical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Physical == nil' before retrieving the leaf's value.
func (t *System_Memory) GetPhysical() uint64 {
	if t == nil || t.Physical == nil {
		return 0
	}
	return *t.Physical
}

// GetReserved retrieves the value of the leaf Reserved from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *System_Memory) GetReserved() uint64 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetUsed retrieves the value of the leaf Used from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *System_Memory) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// SetFree sets the value of the leaf Free in the System_Memory
// struct.
func (t *System_Memory) SetFree(v uint64) {
	t.Free = &v
}

// SetPhysical sets the value of the leaf Physical in the System_Memory
// struct.
func (t *System_Memory) SetPhysical(v uint64) {
	t.Physical = &v
}

// SetReserved sets the value of the leaf Reserved in the System_Memory
// struct.
func (t *System_Memory) SetReserved(v uint64) {
	t.Reserved = &v
}

// SetUsed sets the value of the leaf Used in the System_Memory
// struct.
func (t *System_Memory) SetUsed(v uint64) {
	t.Used = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Memory.
func (*System_Memory) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Memory_Counters represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_Counters struct {
	CorrectableEccErrors   *uint64 `path:"correctable-ecc-errors" module:"openconfig-system"`
	TotalEccErrors         *uint64 `path:"total-ecc-errors" module:"openconfig-system"`
	UncorrectableEccErrors *uint64 `path:"uncorrectable-ecc-errors" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory_Counters) IsYANGGoStruct() {}

// GetCorrectableEccErrors retrieves the value of the leaf CorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CorrectableEccErrors is set, it can
// safely use t.GetCorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetCorrectableEccErrors() uint64 {
	if t == nil || t.CorrectableEccErrors == nil {
		return 0
	}
	return *t.CorrectableEccErrors
}

// GetTotalEccErrors retrieves the value of the leaf TotalEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalEccErrors is set, it can
// safely use t.GetTotalEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetTotalEccErrors() uint64 {
	if t == nil || t.TotalEccErrors == nil {
		return 0
	}
	return *t.TotalEccErrors
}

// GetUncorrectableEccErrors retrieves the value of the leaf UncorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncorrectableEccErrors is set, it can
// safely use t.GetUncorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetUncorrectableEccErrors() uint64 {
	if t == nil || t.UncorrectableEccErrors == nil {
		return 0
	}
	return *t.UncorrectableEccErrors
}

// SetCorrectableEccErrors sets the value of the leaf CorrectableEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetCorrectableEccErrors(v uint64) {
	t.CorrectableEccErrors = &v
}

// SetTotalEccErrors sets the value of the leaf TotalEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetTotalEccErrors(v uint64) {
	t.TotalEccErrors = &v
}

// SetUncorrectableEccErrors sets the value of the leaf UncorrectableEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetUncorrectableEccErrors(v uint64) {
	t.UncorrectableEccErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory_Counters) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Memory_Counters.
func (*System_Memory_Counters) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Messages represents the /openconfig-system/system/messages YANG schema element.
type System_Messages struct {
	DebugService map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService `path:"debug-entries/debug-service" module:"openconfig-system/openconfig-system"`
	Message      *System_Messages_Message                                   `path:"state/message" module:"openconfig-system/openconfig-system"`
	Severity     E_SystemLogging_SyslogSeverity                             `path:"state/severity" module:"openconfig-system/openconfig-system" shadow-path:"config/severity" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// System_Messages struct. The keys of the list are populated from the input
// arguments.
func (t *System_Messages) NewDebugService(Service E_Messages_DEBUG_SERVICE) (*System_Messages_DebugService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &System_Messages_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// RenameDebugService renames an entry in the list DebugService within
// the System_Messages struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Messages) RenameDebugService(oldK, newK E_Messages_DEBUG_SERVICE) error {
	if _, ok := t.DebugService[newK]; ok {
		return fmt.Errorf("key %v already exists in DebugService", newK)
	}

	e, ok := t.DebugService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DebugService", oldK)
	}
	e.Service = newK

	t.DebugService[newK] = e
	delete(t.DebugService, oldK)
	return nil
}

// GetOrCreateDebugServiceMap returns the list (map) from System_Messages.
//
// It initializes the field if not already initialized.
func (t *System_Messages) GetOrCreateDebugServiceMap() map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService {
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}
	return t.DebugService
}

// GetOrCreateDebugService retrieves the value with the specified keys from
// the receiver System_Messages. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Messages) GetOrCreateDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	key := Service

	if v, ok := t.DebugService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDebugService(Service)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDebugService got unexpected error: %v", err))
	}
	return v
}

// GetDebugService retrieves the value with the specified key from
// the DebugService map field of System_Messages. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Messages) GetDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	if t == nil {
		return nil
	}

	key := Service

	if lm, ok := t.DebugService[key]; ok {
		return lm
	}
	return nil
}

// DeleteDebugService deletes the value with the specified keys from
// the receiver System_Messages. If there is no such element, the function
// is a no-op.
func (t *System_Messages) DeleteDebugService(Service E_Messages_DEBUG_SERVICE) {
	key := Service

	delete(t.DebugService, key)
}

// AppendDebugService appends the supplied System_Messages_DebugService struct to the
// list DebugService of System_Messages. If the key value(s) specified in
// the supplied System_Messages_DebugService already exist in the list, an error is
// returned.
func (t *System_Messages) AppendDebugService(v *System_Messages_DebugService) error {
	key := v.Service

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	if _, ok := t.DebugService[key]; ok {
		return fmt.Errorf("duplicate key for list DebugService %v", key)
	}

	t.DebugService[key] = v
	return nil
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *System_Messages) GetOrCreateMessage() *System_Messages_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &System_Messages_Message{}
	return t.Message
}

// GetMessage returns the value of the Message struct pointer
// from System_Messages. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Messages) GetMessage() *System_Messages_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity retrieves the value of the leaf Severity from the System_Messages
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Messages) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetSeverity sets the value of the leaf Severity in the System_Messages
// struct.
func (t *System_Messages) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Message.PopulateDefaults()
	for _, e := range t.DebugService {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Messages.
func (*System_Messages) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Messages_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugService struct {
	Enabled *bool                    `path:"state/enabled" module:"openconfig-system/openconfig-system" shadow-path:"config/enabled" shadow-module:"openconfig-system/openconfig-system"`
	Service E_Messages_DEBUG_SERVICE `path:"state/service|service" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/service|service" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_DebugService) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetService retrieves the value of the leaf Service from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetService() E_Messages_DEBUG_SERVICE {
	if t == nil || t.Service == 0 {
		return 0
	}
	return t.Service
}

// SetEnabled sets the value of the leaf Enabled in the System_Messages_DebugService
// struct.
func (t *System_Messages_DebugService) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetService sets the value of the leaf Service in the System_Messages_DebugService
// struct.
func (t *System_Messages_DebugService) SetService(v E_Messages_DEBUG_SERVICE) {
	t.Service = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_DebugService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_DebugService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// Î›ListKeyMap returns the keys of the System_Messages_DebugService struct, which is a YANG list entry.
func (t *System_Messages_DebugService) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_DebugService) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Messages_DebugService.
func (*System_Messages_DebugService) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Messages_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_Message struct {
	AppName  *string `path:"app-name" module:"openconfig-system"`
	Msg      *string `path:"msg" module:"openconfig-system"`
	Msgid    *string `path:"msgid" module:"openconfig-system"`
	Priority *uint8  `path:"priority" module:"openconfig-system"`
	Procid   *string `path:"procid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_Message) IsYANGGoStruct() {}

// GetAppName retrieves the value of the leaf AppName from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppName is set, it can
// safely use t.GetAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppName == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetAppName() string {
	if t == nil || t.AppName == nil {
		return ""
	}
	return *t.AppName
}

// GetMsg retrieves the value of the leaf Msg from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msg is set, it can
// safely use t.GetMsg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msg == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsg() string {
	if t == nil || t.Msg == nil {
		return ""
	}
	return *t.Msg
}

// GetMsgid retrieves the value of the leaf Msgid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msgid is set, it can
// safely use t.GetMsgid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msgid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsgid() string {
	if t == nil || t.Msgid == nil {
		return ""
	}
	return *t.Msgid
}

// GetPriority retrieves the value of the leaf Priority from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetProcid retrieves the value of the leaf Procid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Procid is set, it can
// safely use t.GetProcid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Procid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetProcid() string {
	if t == nil || t.Procid == nil {
		return ""
	}
	return *t.Procid
}

// SetAppName sets the value of the leaf AppName in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetAppName(v string) {
	t.AppName = &v
}

// SetMsg sets the value of the leaf Msg in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetMsg(v string) {
	t.Msg = &v
}

// SetMsgid sets the value of the leaf Msgid in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetMsgid(v string) {
	t.Msgid = &v
}

// SetPriority sets the value of the leaf Priority in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetPriority(v uint8) {
	t.Priority = &v
}

// SetProcid sets the value of the leaf Procid in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetProcid(v string) {
	t.Procid = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_Message) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Messages_Message.
func (*System_Messages_Message) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_MountPoint represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPoint struct {
	Available        *uint64 `path:"state/available" module:"openconfig-system/openconfig-system"`
	Name             *string `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"name" shadow-module:"openconfig-system"`
	Size             *uint64 `path:"state/size" module:"openconfig-system/openconfig-system"`
	StorageComponent *string `path:"state/storage-component" module:"openconfig-system/openconfig-system"`
	Type             *string `path:"state/type" module:"openconfig-system/openconfig-system"`
	Utilized         *uint64 `path:"state/utilized" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MountPoint) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Available is set, it can
// safely use t.GetAvailable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Available == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetName retrieves the value of the leaf Name from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSize retrieves the value of the leaf Size from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetSize() uint64 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// GetStorageComponent retrieves the value of the leaf StorageComponent from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StorageComponent is set, it can
// safely use t.GetStorageComponent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StorageComponent == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetStorageComponent() string {
	if t == nil || t.StorageComponent == nil {
		return ""
	}
	return *t.StorageComponent
}

// GetType retrieves the value of the leaf Type from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetType() string {
	if t == nil || t.Type == nil {
		return ""
	}
	return *t.Type
}

// GetUtilized retrieves the value of the leaf Utilized from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Utilized is set, it can
// safely use t.GetUtilized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Utilized == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// SetAvailable sets the value of the leaf Available in the System_MountPoint
// struct.
func (t *System_MountPoint) SetAvailable(v uint64) {
	t.Available = &v
}

// SetName sets the value of the leaf Name in the System_MountPoint
// struct.
func (t *System_MountPoint) SetName(v string) {
	t.Name = &v
}

// SetSize sets the value of the leaf Size in the System_MountPoint
// struct.
func (t *System_MountPoint) SetSize(v uint64) {
	t.Size = &v
}

// SetStorageComponent sets the value of the leaf StorageComponent in the System_MountPoint
// struct.
func (t *System_MountPoint) SetStorageComponent(v string) {
	t.StorageComponent = &v
}

// SetType sets the value of the leaf Type in the System_MountPoint
// struct.
func (t *System_MountPoint) SetType(v string) {
	t.Type = &v
}

// SetUtilized sets the value of the leaf Utilized in the System_MountPoint
// struct.
func (t *System_MountPoint) SetUtilized(v uint64) {
	t.Utilized = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_MountPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MountPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_MountPoint struct, which is a YANG list entry.
func (t *System_MountPoint) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MountPoint) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_MountPoint.
func (*System_MountPoint) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type System_Ntp struct {
	AuthMismatch  *uint64                       `path:"state/auth-mismatch" module:"openconfig-system/openconfig-system"`
	EnableNtpAuth *bool                         `path:"state/enable-ntp-auth" module:"openconfig-system/openconfig-system" shadow-path:"config/enable-ntp-auth" shadow-module:"openconfig-system/openconfig-system"`
	Enabled       *bool                         `path:"state/enabled" module:"openconfig-system/openconfig-system" shadow-path:"config/enabled" shadow-module:"openconfig-system/openconfig-system"`
	NtpKey        map[uint16]*System_Ntp_NtpKey `path:"ntp-keys/ntp-key" module:"openconfig-system/openconfig-system"`
	Server        map[string]*System_Ntp_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewNtpKey(KeyId uint16) (*System_Ntp_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &System_Ntp_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKeyMap returns the list (map) from System_Ntp.
//
// It initializes the field if not already initialized.
func (t *System_Ntp) GetOrCreateNtpKeyMap() map[uint16]*System_Ntp_NtpKey {
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}
	return t.NtpKey
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteNtpKey deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteNtpKey(KeyId uint16) {
	key := KeyId

	delete(t.NtpKey, key)
}

// AppendNtpKey appends the supplied System_Ntp_NtpKey struct to the
// list NtpKey of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_NtpKey already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendNtpKey(v *System_Ntp_NtpKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewServer(Address string) (*System_Ntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Ntp_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServerMap returns the list (map) from System_Ntp.
//
// It initializes the field if not already initialized.
func (t *System_Ntp) GetOrCreateServerMap() map[string]*System_Ntp_Server {
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}
	return t.Server
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateServer(Address string) *System_Ntp_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetServer(Address string) *System_Ntp_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Ntp_Server struct to the
// list Server of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_Server already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendServer(v *System_Ntp_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAuthMismatch retrieves the value of the leaf AuthMismatch from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthMismatch is set, it can
// safely use t.GetAuthMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthMismatch == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetAuthMismatch() uint64 {
	if t == nil || t.AuthMismatch == nil {
		return 0
	}
	return *t.AuthMismatch
}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableNtpAuth is set, it can
// safely use t.GetEnableNtpAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableNtpAuth == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetAuthMismatch sets the value of the leaf AuthMismatch in the System_Ntp
// struct.
func (t *System_Ntp) SetAuthMismatch(v uint64) {
	t.AuthMismatch = &v
}

// SetEnableNtpAuth sets the value of the leaf EnableNtpAuth in the System_Ntp
// struct.
func (t *System_Ntp) SetEnableNtpAuth(v bool) {
	t.EnableNtpAuth = &v
}

// SetEnabled sets the value of the leaf Enabled in the System_Ntp
// struct.
func (t *System_Ntp) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableNtpAuth == nil {
		var v bool = false
		t.EnableNtpAuth = &v
	}
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	for _, e := range t.NtpKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Ntp.
func (*System_Ntp) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKey struct {
	KeyId    *uint16                `path:"state/key-id|key-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/key-id|key-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	KeyType  E_System_NTP_AUTH_TYPE `path:"state/key-type" module:"openconfig-system/openconfig-system" shadow-path:"config/key-type" shadow-module:"openconfig-system/openconfig-system"`
	KeyValue *string                `path:"state/key-value" module:"openconfig-system/openconfig-system" shadow-path:"config/key-value" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_NtpKey) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyType is set, it can
// safely use t.GetKeyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyType == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyType() E_System_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// SetKeyId sets the value of the leaf KeyId in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyId(v uint16) {
	t.KeyId = &v
}

// SetKeyType sets the value of the leaf KeyType in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyType(v E_System_NTP_AUTH_TYPE) {
	t.KeyType = v
}

// SetKeyValue sets the value of the leaf KeyValue in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyValue(v string) {
	t.KeyValue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_NtpKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_NtpKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Ntp_NtpKey struct, which is a YANG list entry.
func (t *System_Ntp_NtpKey) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_NtpKey) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Ntp_NtpKey.
func (*System_Ntp_NtpKey) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_Server struct {
	Address         *string                  `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	AssociationType E_Server_AssociationType `path:"state/association-type" module:"openconfig-system/openconfig-system" shadow-path:"config/association-type" shadow-module:"openconfig-system/openconfig-system"`
	Iburst          *bool                    `path:"state/iburst" module:"openconfig-system/openconfig-system" shadow-path:"config/iburst" shadow-module:"openconfig-system/openconfig-system"`
	KeyId           *uint16                  `path:"state/key-id" module:"openconfig-system/openconfig-system" shadow-path:"config/key-id" shadow-module:"openconfig-system/openconfig-system"`
	NetworkInstance *string                  `path:"state/network-instance" module:"openconfig-system/openconfig-system" shadow-path:"config/network-instance" shadow-module:"openconfig-system/openconfig-system"`
	Offset          *int64                   `path:"state/offset" module:"openconfig-system/openconfig-system"`
	PollInterval    *uint32                  `path:"state/poll-interval" module:"openconfig-system/openconfig-system"`
	Port            *uint16                  `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
	Prefer          *bool                    `path:"state/prefer" module:"openconfig-system/openconfig-system" shadow-path:"config/prefer" shadow-module:"openconfig-system/openconfig-system"`
	RootDelay       *int64                   `path:"state/root-delay" module:"openconfig-system/openconfig-system"`
	RootDispersion  *int64                   `path:"state/root-dispersion" module:"openconfig-system/openconfig-system"`
	SourceAddress   *string                  `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
	Stratum         *uint8                   `path:"state/stratum" module:"openconfig-system/openconfig-system"`
	Version         *uint8                   `path:"state/version" module:"openconfig-system/openconfig-system" shadow-path:"config/version" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationType is set, it can
// safely use t.GetAssociationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationType == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAssociationType() E_Server_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return Server_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iburst is set, it can
// safely use t.GetIburst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iburst == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetKeyId retrieves the value of the leaf KeyId from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetOffset retrieves the value of the leaf Offset from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetOffset() int64 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetPollInterval retrieves the value of the leaf PollInterval from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 0
	}
	return *t.PollInterval
}

// GetPort retrieves the value of the leaf Port from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRootDelay retrieves the value of the leaf RootDelay from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDelay is set, it can
// safely use t.GetRootDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDelay == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDelay() int64 {
	if t == nil || t.RootDelay == nil {
		return 0
	}
	return *t.RootDelay
}

// GetRootDispersion retrieves the value of the leaf RootDispersion from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDispersion is set, it can
// safely use t.GetRootDispersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDispersion == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDispersion() int64 {
	if t == nil || t.RootDispersion == nil {
		return 0
	}
	return *t.RootDispersion
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetStratum retrieves the value of the leaf Stratum from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stratum is set, it can
// safely use t.GetStratum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stratum == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetStratum() uint8 {
	if t == nil || t.Stratum == nil {
		return 0
	}
	return *t.Stratum
}

// GetVersion retrieves the value of the leaf Version from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// SetAddress sets the value of the leaf Address in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetAddress(v string) {
	t.Address = &v
}

// SetAssociationType sets the value of the leaf AssociationType in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetAssociationType(v E_Server_AssociationType) {
	t.AssociationType = v
}

// SetIburst sets the value of the leaf Iburst in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetIburst(v bool) {
	t.Iburst = &v
}

// SetKeyId sets the value of the leaf KeyId in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetKeyId(v uint16) {
	t.KeyId = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetOffset sets the value of the leaf Offset in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetOffset(v int64) {
	t.Offset = &v
}

// SetPollInterval sets the value of the leaf PollInterval in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPollInterval(v uint32) {
	t.PollInterval = &v
}

// SetPort sets the value of the leaf Port in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPort(v uint16) {
	t.Port = &v
}

// SetPrefer sets the value of the leaf Prefer in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPrefer(v bool) {
	t.Prefer = &v
}

// SetRootDelay sets the value of the leaf RootDelay in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetRootDelay(v int64) {
	t.RootDelay = &v
}

// SetRootDispersion sets the value of the leaf RootDispersion in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetRootDispersion(v int64) {
	t.RootDispersion = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetStratum sets the value of the leaf Stratum in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetStratum(v uint8) {
	t.Stratum = &v
}

// SetVersion sets the value of the leaf Version in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetVersion(v uint8) {
	t.Version = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AssociationType == 0 {
		t.AssociationType = Server_AssociationType_SERVER
	}
	if t.Iburst == nil {
		var v bool = false
		t.Iburst = &v
	}
	if t.Port == nil {
		var v uint16 = 123
		t.Port = &v
	}
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint8 = 4
		t.Version = &v
	}
}

// Î›ListKeyMap returns the keys of the System_Ntp_Server struct, which is a YANG list entry.
func (t *System_Ntp_Server) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_Server) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Ntp_Server.
func (*System_Ntp_Server) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Process represents the /openconfig-system/system/processes/process YANG schema element.
type System_Process struct {
	Args              []string `path:"state/args" module:"openconfig-system/openconfig-system"`
	CpuUsageSystem    *uint64  `path:"state/cpu-usage-system" module:"openconfig-system/openconfig-system"`
	CpuUsageUser      *uint64  `path:"state/cpu-usage-user" module:"openconfig-system/openconfig-system"`
	CpuUtilization    *uint8   `path:"state/cpu-utilization" module:"openconfig-system/openconfig-system"`
	MemoryUsage       *uint64  `path:"state/memory-usage" module:"openconfig-system/openconfig-system"`
	MemoryUtilization *uint8   `path:"state/memory-utilization" module:"openconfig-system/openconfig-system"`
	Name              *string  `path:"state/name" module:"openconfig-system/openconfig-system"`
	Pid               *uint64  `path:"state/pid|pid" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"pid" shadow-module:"openconfig-system"`
	StartTime         *uint64  `path:"state/start-time" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Process) IsYANGGoStruct() {}

// GetArgs retrieves the value of the leaf Args from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Args is set, it can
// safely use t.GetArgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Args == nil' before retrieving the leaf's value.
func (t *System_Process) GetArgs() []string {
	if t == nil || t.Args == nil {
		return nil
	}
	return t.Args
}

// GetCpuUsageSystem retrieves the value of the leaf CpuUsageSystem from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageSystem is set, it can
// safely use t.GetCpuUsageSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageSystem == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageSystem() uint64 {
	if t == nil || t.CpuUsageSystem == nil {
		return 0
	}
	return *t.CpuUsageSystem
}

// GetCpuUsageUser retrieves the value of the leaf CpuUsageUser from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageUser is set, it can
// safely use t.GetCpuUsageUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageUser == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageUser() uint64 {
	if t == nil || t.CpuUsageUser == nil {
		return 0
	}
	return *t.CpuUsageUser
}

// GetCpuUtilization retrieves the value of the leaf CpuUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUtilization is set, it can
// safely use t.GetCpuUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUtilization() uint8 {
	if t == nil || t.CpuUtilization == nil {
		return 0
	}
	return *t.CpuUtilization
}

// GetMemoryUsage retrieves the value of the leaf MemoryUsage from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUsage is set, it can
// safely use t.GetMemoryUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUsage == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUsage() uint64 {
	if t == nil || t.MemoryUsage == nil {
		return 0
	}
	return *t.MemoryUsage
}

// GetMemoryUtilization retrieves the value of the leaf MemoryUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUtilization is set, it can
// safely use t.GetMemoryUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUtilization() uint8 {
	if t == nil || t.MemoryUtilization == nil {
		return 0
	}
	return *t.MemoryUtilization
}

// GetName retrieves the value of the leaf Name from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Process) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPid retrieves the value of the leaf Pid from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pid is set, it can
// safely use t.GetPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pid == nil' before retrieving the leaf's value.
func (t *System_Process) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// GetStartTime retrieves the value of the leaf StartTime from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *System_Process) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// SetArgs sets the value of the leaf Args in the System_Process
// struct.
func (t *System_Process) SetArgs(v []string) {
	t.Args = v
}

// SetCpuUsageSystem sets the value of the leaf CpuUsageSystem in the System_Process
// struct.
func (t *System_Process) SetCpuUsageSystem(v uint64) {
	t.CpuUsageSystem = &v
}

// SetCpuUsageUser sets the value of the leaf CpuUsageUser in the System_Process
// struct.
func (t *System_Process) SetCpuUsageUser(v uint64) {
	t.CpuUsageUser = &v
}

// SetCpuUtilization sets the value of the leaf CpuUtilization in the System_Process
// struct.
func (t *System_Process) SetCpuUtilization(v uint8) {
	t.CpuUtilization = &v
}

// SetMemoryUsage sets the value of the leaf MemoryUsage in the System_Process
// struct.
func (t *System_Process) SetMemoryUsage(v uint64) {
	t.MemoryUsage = &v
}

// SetMemoryUtilization sets the value of the leaf MemoryUtilization in the System_Process
// struct.
func (t *System_Process) SetMemoryUtilization(v uint8) {
	t.MemoryUtilization = &v
}

// SetName sets the value of the leaf Name in the System_Process
// struct.
func (t *System_Process) SetName(v string) {
	t.Name = &v
}

// SetPid sets the value of the leaf Pid in the System_Process
// struct.
func (t *System_Process) SetPid(v uint64) {
	t.Pid = &v
}

// SetStartTime sets the value of the leaf StartTime in the System_Process
// struct.
func (t *System_Process) SetStartTime(v uint64) {
	t.StartTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Process
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Process) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Process struct, which is a YANG list entry.
func (t *System_Process) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Process) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Process.
func (*System_Process) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServer struct {
	ActiveHostCertificateCreatedOn   *uint64                     `path:"state/active-host-certificate-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	ActiveHostCertificateVersion     *string                     `path:"state/active-host-certificate-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	ActiveHostKeyCreatedOn           *uint64                     `path:"state/active-host-key-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	ActiveHostKeyVersion             *string                     `path:"state/active-host-key-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	ActiveTrustedUserCaKeysCreatedOn *uint64                     `path:"state/active-trusted-user-ca-keys-created-on" module:"openconfig-system/openconfig-gnsi-credentialz"`
	ActiveTrustedUserCaKeysVersion   *string                     `path:"state/active-trusted-user-ca-keys-version" module:"openconfig-system/openconfig-gnsi-credentialz"`
	Counters                         *System_SshServer_Counters  `path:"state/counters" module:"openconfig-system/openconfig-gnsi-credentialz"`
	Enable                           *bool                       `path:"state/enable" module:"openconfig-system/openconfig-system" shadow-path:"config/enable" shadow-module:"openconfig-system/openconfig-system"`
	ProtocolVersion                  E_SshServer_ProtocolVersion `path:"state/protocol-version" module:"openconfig-system/openconfig-system" shadow-path:"config/protocol-version" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit                        *uint16                     `path:"state/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit                     *uint16                     `path:"state/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout                          *uint16                     `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_SshServer) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_SshServer) GetOrCreateCounters() *System_SshServer_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_SshServer_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_SshServer. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_SshServer) GetCounters() *System_SshServer_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActiveHostCertificateCreatedOn retrieves the value of the leaf ActiveHostCertificateCreatedOn from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveHostCertificateCreatedOn is set, it can
// safely use t.GetActiveHostCertificateCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveHostCertificateCreatedOn == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveHostCertificateCreatedOn() uint64 {
	if t == nil || t.ActiveHostCertificateCreatedOn == nil {
		return 0
	}
	return *t.ActiveHostCertificateCreatedOn
}

// GetActiveHostCertificateVersion retrieves the value of the leaf ActiveHostCertificateVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveHostCertificateVersion is set, it can
// safely use t.GetActiveHostCertificateVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveHostCertificateVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveHostCertificateVersion() string {
	if t == nil || t.ActiveHostCertificateVersion == nil {
		return ""
	}
	return *t.ActiveHostCertificateVersion
}

// GetActiveHostKeyCreatedOn retrieves the value of the leaf ActiveHostKeyCreatedOn from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveHostKeyCreatedOn is set, it can
// safely use t.GetActiveHostKeyCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveHostKeyCreatedOn == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveHostKeyCreatedOn() uint64 {
	if t == nil || t.ActiveHostKeyCreatedOn == nil {
		return 0
	}
	return *t.ActiveHostKeyCreatedOn
}

// GetActiveHostKeyVersion retrieves the value of the leaf ActiveHostKeyVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveHostKeyVersion is set, it can
// safely use t.GetActiveHostKeyVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveHostKeyVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveHostKeyVersion() string {
	if t == nil || t.ActiveHostKeyVersion == nil {
		return ""
	}
	return *t.ActiveHostKeyVersion
}

// GetActiveTrustedUserCaKeysCreatedOn retrieves the value of the leaf ActiveTrustedUserCaKeysCreatedOn from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTrustedUserCaKeysCreatedOn is set, it can
// safely use t.GetActiveTrustedUserCaKeysCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTrustedUserCaKeysCreatedOn == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveTrustedUserCaKeysCreatedOn() uint64 {
	if t == nil || t.ActiveTrustedUserCaKeysCreatedOn == nil {
		return 0
	}
	return *t.ActiveTrustedUserCaKeysCreatedOn
}

// GetActiveTrustedUserCaKeysVersion retrieves the value of the leaf ActiveTrustedUserCaKeysVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTrustedUserCaKeysVersion is set, it can
// safely use t.GetActiveTrustedUserCaKeysVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTrustedUserCaKeysVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveTrustedUserCaKeysVersion() string {
	if t == nil || t.ActiveTrustedUserCaKeysVersion == nil {
		return ""
	}
	return *t.ActiveTrustedUserCaKeysVersion
}

// GetEnable retrieves the value of the leaf Enable from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolVersion is set, it can
// safely use t.GetProtocolVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetProtocolVersion() E_SshServer_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return SshServer_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetActiveHostCertificateCreatedOn sets the value of the leaf ActiveHostCertificateCreatedOn in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveHostCertificateCreatedOn(v uint64) {
	t.ActiveHostCertificateCreatedOn = &v
}

// SetActiveHostCertificateVersion sets the value of the leaf ActiveHostCertificateVersion in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveHostCertificateVersion(v string) {
	t.ActiveHostCertificateVersion = &v
}

// SetActiveHostKeyCreatedOn sets the value of the leaf ActiveHostKeyCreatedOn in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveHostKeyCreatedOn(v uint64) {
	t.ActiveHostKeyCreatedOn = &v
}

// SetActiveHostKeyVersion sets the value of the leaf ActiveHostKeyVersion in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveHostKeyVersion(v string) {
	t.ActiveHostKeyVersion = &v
}

// SetActiveTrustedUserCaKeysCreatedOn sets the value of the leaf ActiveTrustedUserCaKeysCreatedOn in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveTrustedUserCaKeysCreatedOn(v uint64) {
	t.ActiveTrustedUserCaKeysCreatedOn = &v
}

// SetActiveTrustedUserCaKeysVersion sets the value of the leaf ActiveTrustedUserCaKeysVersion in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveTrustedUserCaKeysVersion(v string) {
	t.ActiveTrustedUserCaKeysVersion = &v
}

// SetEnable sets the value of the leaf Enable in the System_SshServer
// struct.
func (t *System_SshServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetProtocolVersion sets the value of the leaf ProtocolVersion in the System_SshServer
// struct.
func (t *System_SshServer) SetProtocolVersion(v E_SshServer_ProtocolVersion) {
	t.ProtocolVersion = v
}

// SetRateLimit sets the value of the leaf RateLimit in the System_SshServer
// struct.
func (t *System_SshServer) SetRateLimit(v uint16) {
	t.RateLimit = &v
}

// SetSessionLimit sets the value of the leaf SessionLimit in the System_SshServer
// struct.
func (t *System_SshServer) SetSessionLimit(v uint16) {
	t.SessionLimit = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_SshServer
// struct.
func (t *System_SshServer) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_SshServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_SshServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = true
		t.Enable = &v
	}
	if t.ProtocolVersion == 0 {
		t.ProtocolVersion = SshServer_ProtocolVersion_V2
	}
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_SshServer) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_SshServer.
func (*System_SshServer) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_SshServer_Counters represents the /openconfig-system/system/ssh-server/state/counters YANG schema element.
type System_SshServer_Counters struct {
	AccessAccepts    *uint64 `path:"access-accepts" module:"openconfig-gnsi-credentialz"`
	AccessRejects    *uint64 `path:"access-rejects" module:"openconfig-gnsi-credentialz"`
	LastAccessAccept *uint64 `path:"last-access-accept" module:"openconfig-gnsi-credentialz"`
	LastAccessReject *uint64 `path:"last-access-reject" module:"openconfig-gnsi-credentialz"`
}

// IsYANGGoStruct ensures that System_SshServer_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_SshServer_Counters) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_SshServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_SshServer_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_SshServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_SshServer_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetLastAccessAccept retrieves the value of the leaf LastAccessAccept from the System_SshServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessAccept is set, it can
// safely use t.GetLastAccessAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessAccept == nil' before retrieving the leaf's value.
func (t *System_SshServer_Counters) GetLastAccessAccept() uint64 {
	if t == nil || t.LastAccessAccept == nil {
		return 0
	}
	return *t.LastAccessAccept
}

// GetLastAccessReject retrieves the value of the leaf LastAccessReject from the System_SshServer_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastAccessReject is set, it can
// safely use t.GetLastAccessReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastAccessReject == nil' before retrieving the leaf's value.
func (t *System_SshServer_Counters) GetLastAccessReject() uint64 {
	if t == nil || t.LastAccessReject == nil {
		return 0
	}
	return *t.LastAccessReject
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_SshServer_Counters
// struct.
func (t *System_SshServer_Counters) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_SshServer_Counters
// struct.
func (t *System_SshServer_Counters) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetLastAccessAccept sets the value of the leaf LastAccessAccept in the System_SshServer_Counters
// struct.
func (t *System_SshServer_Counters) SetLastAccessAccept(v uint64) {
	t.LastAccessAccept = &v
}

// SetLastAccessReject sets the value of the leaf LastAccessReject in the System_SshServer_Counters
// struct.
func (t *System_SshServer_Counters) SetLastAccessReject(v uint64) {
	t.LastAccessReject = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_SshServer_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_SshServer_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer_Counters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_SshServer_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_SshServer_Counters) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_SshServer_Counters.
func (*System_SshServer_Counters) Î›BelongingModule() string {
	return "openconfig-gnsi-credentialz"
}

// System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServer struct {
	Enable       *bool   `path:"state/enable" module:"openconfig-system/openconfig-system" shadow-path:"config/enable" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit    *uint16 `path:"state/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit *uint16 `path:"state/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout      *uint16 `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_TelnetServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetEnable sets the value of the leaf Enable in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetRateLimit sets the value of the leaf RateLimit in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetRateLimit(v uint16) {
	t.RateLimit = &v
}

// SetSessionLimit sets the value of the leaf SessionLimit in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetSessionLimit(v uint16) {
	t.SessionLimit = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_TelnetServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_TelnetServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_TelnetServer) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_TelnetServer.
func (*System_TelnetServer) Î›BelongingModule() string {
	return "openconfig-system"
}

// System_Utilization represents the /openconfig-system/system/utilization YANG schema element.
type System_Utilization struct {
	Resource map[string]*System_Utilization_Resource `path:"resources/resource" module:"openconfig-system-utilization/openconfig-system-utilization"`
}

// IsYANGGoStruct ensures that System_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Utilization) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// System_Utilization struct. The keys of the list are populated from the input
// arguments.
func (t *System_Utilization) NewResource(Name string) (*System_Utilization_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*System_Utilization_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &System_Utilization_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the System_Utilization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Utilization) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResourceMap returns the list (map) from System_Utilization.
//
// It initializes the field if not already initialized.
func (t *System_Utilization) GetOrCreateResourceMap() map[string]*System_Utilization_Resource {
	if t.Resource == nil {
		t.Resource = make(map[string]*System_Utilization_Resource)
	}
	return t.Resource
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver System_Utilization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Utilization) GetOrCreateResource(Name string) *System_Utilization_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of System_Utilization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Utilization) GetResource(Name string) *System_Utilization_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver System_Utilization. If there is no such element, the function
// is a no-op.
func (t *System_Utilization) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied System_Utilization_Resource struct to the
// list Resource of System_Utilization. If the key value(s) specified in
// the supplied System_Utilization_Resource already exist in the list, an error is
// returned.
func (t *System_Utilization) AppendResource(v *System_Utilization_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*System_Utilization_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Utilization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Utilization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Utilization) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Utilization) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Utilization.
func (*System_Utilization) Î›BelongingModule() string {
	return "openconfig-system-utilization"
}

// System_Utilization_Resource represents the /openconfig-system/system/utilization/resources/resource YANG schema element.
type System_Utilization_Resource struct {
	ActiveComponentList     []string `path:"state/active-component-list" module:"openconfig-system-utilization/openconfig-system-utilization"`
	Name                    *string  `path:"state/name|name" module:"openconfig-system-utilization/openconfig-system-utilization|openconfig-system-utilization" shadow-path:"config/name|name" shadow-module:"openconfig-system-utilization/openconfig-system-utilization|openconfig-system-utilization"`
	UsedThresholdUpper      *uint8   `path:"state/used-threshold-upper" module:"openconfig-system-utilization/openconfig-system-utilization" shadow-path:"config/used-threshold-upper" shadow-module:"openconfig-system-utilization/openconfig-system-utilization"`
	UsedThresholdUpperClear *uint8   `path:"state/used-threshold-upper-clear" module:"openconfig-system-utilization/openconfig-system-utilization" shadow-path:"config/used-threshold-upper-clear" shadow-module:"openconfig-system-utilization/openconfig-system-utilization"`
}

// IsYANGGoStruct ensures that System_Utilization_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Utilization_Resource) IsYANGGoStruct() {}

// GetActiveComponentList retrieves the value of the leaf ActiveComponentList from the System_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveComponentList is set, it can
// safely use t.GetActiveComponentList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveComponentList == nil' before retrieving the leaf's value.
func (t *System_Utilization_Resource) GetActiveComponentList() []string {
	if t == nil || t.ActiveComponentList == nil {
		return nil
	}
	return t.ActiveComponentList
}

// GetName retrieves the value of the leaf Name from the System_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Utilization_Resource) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUsedThresholdUpper retrieves the value of the leaf UsedThresholdUpper from the System_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpper is set, it can
// safely use t.GetUsedThresholdUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpper == nil' before retrieving the leaf's value.
func (t *System_Utilization_Resource) GetUsedThresholdUpper() uint8 {
	if t == nil || t.UsedThresholdUpper == nil {
		return 0
	}
	return *t.UsedThresholdUpper
}

// GetUsedThresholdUpperClear retrieves the value of the leaf UsedThresholdUpperClear from the System_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperClear is set, it can
// safely use t.GetUsedThresholdUpperClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperClear == nil' before retrieving the leaf's value.
func (t *System_Utilization_Resource) GetUsedThresholdUpperClear() uint8 {
	if t == nil || t.UsedThresholdUpperClear == nil {
		return 0
	}
	return *t.UsedThresholdUpperClear
}

// SetActiveComponentList sets the value of the leaf ActiveComponentList in the System_Utilization_Resource
// struct.
func (t *System_Utilization_Resource) SetActiveComponentList(v []string) {
	t.ActiveComponentList = v
}

// SetName sets the value of the leaf Name in the System_Utilization_Resource
// struct.
func (t *System_Utilization_Resource) SetName(v string) {
	t.Name = &v
}

// SetUsedThresholdUpper sets the value of the leaf UsedThresholdUpper in the System_Utilization_Resource
// struct.
func (t *System_Utilization_Resource) SetUsedThresholdUpper(v uint8) {
	t.UsedThresholdUpper = &v
}

// SetUsedThresholdUpperClear sets the value of the leaf UsedThresholdUpperClear in the System_Utilization_Resource
// struct.
func (t *System_Utilization_Resource) SetUsedThresholdUpperClear(v uint8) {
	t.UsedThresholdUpperClear = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Utilization_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Utilization_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the System_Utilization_Resource struct, which is a YANG list entry.
func (t *System_Utilization_Resource) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Utilization_Resource) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Utilization_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Utilization_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Utilization_Resource) Î›EnumTypeMap() map[string][]reflect.Type { return Î›EnumTypes }

// Î›BelongingModule returns the name of the module that defines the namespace
// of System_Utilization_Resource.
func (*System_Utilization_Resource) Î›BelongingModule() string {
	return "openconfig-system-utilization"
}
