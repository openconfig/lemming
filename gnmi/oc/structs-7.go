/*
Package oc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package oc

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Vlan represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_Vlan struct {
	Member []*NetworkInstance_Vlan_Member `path:"members/member" module:"openconfig-network-instance/openconfig-network-instance"`
	Name   *string                        `path:"state/name" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"config/name" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Status E_Vlan_Status                  `path:"state/status" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"config/status" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	VlanId *uint16                        `path:"state/vlan-id|vlan-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"config/vlan-id|vlan-id" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Vlan) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStatus retrieves the value of the leaf Status from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Status is set, it can
// safely use t.GetStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Status == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetStatus() E_Vlan_Status {
	if t == nil || t.Status == 0 {
		return Vlan_Status_ACTIVE
	}
	return t.Status
}

// GetVlanId retrieves the value of the leaf VlanId from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// SetName sets the value of the leaf Name in the NetworkInstance_Vlan
// struct.
func (t *NetworkInstance_Vlan) SetName(v string) {
	t.Name = &v
}

// SetStatus sets the value of the leaf Status in the NetworkInstance_Vlan
// struct.
func (t *NetworkInstance_Vlan) SetStatus(v E_Vlan_Status) {
	t.Status = v
}

// SetVlanId sets the value of the leaf VlanId in the NetworkInstance_Vlan
// struct.
func (t *NetworkInstance_Vlan) SetVlanId(v uint16) {
	t.VlanId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Status == 0 {
		t.Status = Vlan_Status_ACTIVE
	}
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Vlan struct, which is a YANG list entry.
func (t *NetworkInstance_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Vlan.
func (*NetworkInstance_Vlan) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Vlan_Member represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type NetworkInstance_Vlan_Member struct {
	Interface *string `path:"state/interface" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Vlan_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Vlan_Member) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Vlan_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan_Member) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// SetInterface sets the value of the leaf Interface in the NetworkInstance_Vlan_Member
// struct.
func (t *NetworkInstance_Vlan_Member) SetInterface(v string) {
	t.Interface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Vlan_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Vlan_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Vlan_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan_Member) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Vlan_Member) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Vlan_Member.
func (*NetworkInstance_Vlan_Member) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// Qos represents the /openconfig-qos/qos YANG schema element.
type Qos struct {
	BufferAllocationProfile map[string]*Qos_BufferAllocationProfile `path:"buffer-allocation-profiles/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	Classifier              map[string]*Qos_Classifier              `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	ForwardingGroup         map[string]*Qos_ForwardingGroup         `path:"forwarding-groups/forwarding-group" module:"openconfig-qos/openconfig-qos"`
	Interface               map[string]*Qos_Interface               `path:"interfaces/interface" module:"openconfig-qos/openconfig-qos"`
	Queue                   map[string]*Qos_Queue                   `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	QueueManagementProfile  map[string]*Qos_QueueManagementProfile  `path:"queue-management-profiles/queue-management-profile" module:"openconfig-qos/openconfig-qos"`
	SchedulerPolicy         map[string]*Qos_SchedulerPolicy         `path:"scheduler-policies/scheduler-policy" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos) IsYANGGoStruct() {}

// NewBufferAllocationProfile creates a new entry in the BufferAllocationProfile list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewBufferAllocationProfile(Name string) (*Qos_BufferAllocationProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*Qos_BufferAllocationProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BufferAllocationProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BufferAllocationProfile", key)
	}

	t.BufferAllocationProfile[key] = &Qos_BufferAllocationProfile{
		Name: &Name,
	}

	return t.BufferAllocationProfile[key], nil
}

// RenameBufferAllocationProfile renames an entry in the list BufferAllocationProfile within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameBufferAllocationProfile(oldK, newK string) error {
	if _, ok := t.BufferAllocationProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in BufferAllocationProfile", newK)
	}

	e, ok := t.BufferAllocationProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BufferAllocationProfile", oldK)
	}
	e.Name = &newK

	t.BufferAllocationProfile[newK] = e
	delete(t.BufferAllocationProfile, oldK)
	return nil
}

// GetOrCreateBufferAllocationProfileMap returns the list (map) from Qos.
//
// It initializes the field if not already initialized.
func (t *Qos) GetOrCreateBufferAllocationProfileMap() map[string]*Qos_BufferAllocationProfile {
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*Qos_BufferAllocationProfile)
	}
	return t.BufferAllocationProfile
}

// GetOrCreateBufferAllocationProfile retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateBufferAllocationProfile(Name string) *Qos_BufferAllocationProfile {

	key := Name

	if v, ok := t.BufferAllocationProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBufferAllocationProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBufferAllocationProfile got unexpected error: %v", err))
	}
	return v
}

// GetBufferAllocationProfile retrieves the value with the specified key from
// the BufferAllocationProfile map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetBufferAllocationProfile(Name string) *Qos_BufferAllocationProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BufferAllocationProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteBufferAllocationProfile deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteBufferAllocationProfile(Name string) {
	key := Name

	delete(t.BufferAllocationProfile, key)
}

// AppendBufferAllocationProfile appends the supplied Qos_BufferAllocationProfile struct to the
// list BufferAllocationProfile of Qos. If the key value(s) specified in
// the supplied Qos_BufferAllocationProfile already exist in the list, an error is
// returned.
func (t *Qos) AppendBufferAllocationProfile(v *Qos_BufferAllocationProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*Qos_BufferAllocationProfile)
	}

	if _, ok := t.BufferAllocationProfile[key]; ok {
		return fmt.Errorf("duplicate key for list BufferAllocationProfile %v", key)
	}

	t.BufferAllocationProfile[key] = v
	return nil
}

// NewClassifier creates a new entry in the Classifier list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewClassifier(Name string) (*Qos_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Classifier{
		Name: &Name,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameClassifier(oldK, newK string) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Name = &newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifierMap returns the list (map) from Qos.
//
// It initializes the field if not already initialized.
func (t *Qos) GetOrCreateClassifierMap() map[string]*Qos_Classifier {
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}
	return t.Classifier
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateClassifier(Name string) *Qos_Classifier {

	key := Name

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetClassifier(Name string) *Qos_Classifier {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteClassifier(Name string) {
	key := Name

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Classifier struct to the
// list Classifier of Qos. If the key value(s) specified in
// the supplied Qos_Classifier already exist in the list, an error is
// returned.
func (t *Qos) AppendClassifier(v *Qos_Classifier) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewForwardingGroup creates a new entry in the ForwardingGroup list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewForwardingGroup(Name string) (*Qos_ForwardingGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroup", key)
	}

	t.ForwardingGroup[key] = &Qos_ForwardingGroup{
		Name: &Name,
	}

	return t.ForwardingGroup[key], nil
}

// RenameForwardingGroup renames an entry in the list ForwardingGroup within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameForwardingGroup(oldK, newK string) error {
	if _, ok := t.ForwardingGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroup", newK)
	}

	e, ok := t.ForwardingGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroup", oldK)
	}
	e.Name = &newK

	t.ForwardingGroup[newK] = e
	delete(t.ForwardingGroup, oldK)
	return nil
}

// GetOrCreateForwardingGroupMap returns the list (map) from Qos.
//
// It initializes the field if not already initialized.
func (t *Qos) GetOrCreateForwardingGroupMap() map[string]*Qos_ForwardingGroup {
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}
	return t.ForwardingGroup
}

// GetOrCreateForwardingGroup retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateForwardingGroup(Name string) *Qos_ForwardingGroup {

	key := Name

	if v, ok := t.ForwardingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroup got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroup retrieves the value with the specified key from
// the ForwardingGroup map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetForwardingGroup(Name string) *Qos_ForwardingGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ForwardingGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroup deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteForwardingGroup(Name string) {
	key := Name

	delete(t.ForwardingGroup, key)
}

// AppendForwardingGroup appends the supplied Qos_ForwardingGroup struct to the
// list ForwardingGroup of Qos. If the key value(s) specified in
// the supplied Qos_ForwardingGroup already exist in the list, an error is
// returned.
func (t *Qos) AppendForwardingGroup(v *Qos_ForwardingGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}

	if _, ok := t.ForwardingGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroup %v", key)
	}

	t.ForwardingGroup[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewInterface(InterfaceId string) (*Qos_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Qos_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Qos.
//
// It initializes the field if not already initialized.
func (t *Qos) GetOrCreateInterfaceMap() map[string]*Qos_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateInterface(InterfaceId string) *Qos_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetInterface(InterfaceId string) *Qos_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Qos_Interface struct to the
// list Interface of Qos. If the key value(s) specified in
// the supplied Qos_Interface already exist in the list, an error is
// returned.
func (t *Qos) AppendInterface(v *Qos_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewQueue(Name string) (*Qos_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueueMap returns the list (map) from Qos.
//
// It initializes the field if not already initialized.
func (t *Qos) GetOrCreateQueueMap() map[string]*Qos_Queue {
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}
	return t.Queue
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateQueue(Name string) *Qos_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetQueue(Name string) *Qos_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Queue struct to the
// list Queue of Qos. If the key value(s) specified in
// the supplied Qos_Queue already exist in the list, an error is
// returned.
func (t *Qos) AppendQueue(v *Qos_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewQueueManagementProfile creates a new entry in the QueueManagementProfile list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewQueueManagementProfile(Name string) (*Qos_QueueManagementProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*Qos_QueueManagementProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueManagementProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueManagementProfile", key)
	}

	t.QueueManagementProfile[key] = &Qos_QueueManagementProfile{
		Name: &Name,
	}

	return t.QueueManagementProfile[key], nil
}

// RenameQueueManagementProfile renames an entry in the list QueueManagementProfile within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameQueueManagementProfile(oldK, newK string) error {
	if _, ok := t.QueueManagementProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueManagementProfile", newK)
	}

	e, ok := t.QueueManagementProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueManagementProfile", oldK)
	}
	e.Name = &newK

	t.QueueManagementProfile[newK] = e
	delete(t.QueueManagementProfile, oldK)
	return nil
}

// GetOrCreateQueueManagementProfileMap returns the list (map) from Qos.
//
// It initializes the field if not already initialized.
func (t *Qos) GetOrCreateQueueManagementProfileMap() map[string]*Qos_QueueManagementProfile {
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*Qos_QueueManagementProfile)
	}
	return t.QueueManagementProfile
}

// GetOrCreateQueueManagementProfile retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateQueueManagementProfile(Name string) *Qos_QueueManagementProfile {

	key := Name

	if v, ok := t.QueueManagementProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueManagementProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueManagementProfile got unexpected error: %v", err))
	}
	return v
}

// GetQueueManagementProfile retrieves the value with the specified key from
// the QueueManagementProfile map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetQueueManagementProfile(Name string) *Qos_QueueManagementProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.QueueManagementProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueManagementProfile deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteQueueManagementProfile(Name string) {
	key := Name

	delete(t.QueueManagementProfile, key)
}

// AppendQueueManagementProfile appends the supplied Qos_QueueManagementProfile struct to the
// list QueueManagementProfile of Qos. If the key value(s) specified in
// the supplied Qos_QueueManagementProfile already exist in the list, an error is
// returned.
func (t *Qos) AppendQueueManagementProfile(v *Qos_QueueManagementProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*Qos_QueueManagementProfile)
	}

	if _, ok := t.QueueManagementProfile[key]; ok {
		return fmt.Errorf("duplicate key for list QueueManagementProfile %v", key)
	}

	t.QueueManagementProfile[key] = v
	return nil
}

// NewSchedulerPolicy creates a new entry in the SchedulerPolicy list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewSchedulerPolicy(Name string) (*Qos_SchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulerPolicy", key)
	}

	t.SchedulerPolicy[key] = &Qos_SchedulerPolicy{
		Name: &Name,
	}

	return t.SchedulerPolicy[key], nil
}

// RenameSchedulerPolicy renames an entry in the list SchedulerPolicy within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.SchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulerPolicy", newK)
	}

	e, ok := t.SchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.SchedulerPolicy[newK] = e
	delete(t.SchedulerPolicy, oldK)
	return nil
}

// GetOrCreateSchedulerPolicyMap returns the list (map) from Qos.
//
// It initializes the field if not already initialized.
func (t *Qos) GetOrCreateSchedulerPolicyMap() map[string]*Qos_SchedulerPolicy {
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}
	return t.SchedulerPolicy
}

// GetOrCreateSchedulerPolicy retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateSchedulerPolicy(Name string) *Qos_SchedulerPolicy {

	key := Name

	if v, ok := t.SchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSchedulerPolicy retrieves the value with the specified key from
// the SchedulerPolicy map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetSchedulerPolicy(Name string) *Qos_SchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulerPolicy deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteSchedulerPolicy(Name string) {
	key := Name

	delete(t.SchedulerPolicy, key)
}

// AppendSchedulerPolicy appends the supplied Qos_SchedulerPolicy struct to the
// list SchedulerPolicy of Qos. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy already exist in the list, an error is
// returned.
func (t *Qos) AppendSchedulerPolicy(v *Qos_SchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}

	if _, ok := t.SchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulerPolicy %v", key)
	}

	t.SchedulerPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BufferAllocationProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.ForwardingGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueManagementProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulerPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos.
func (*Qos) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_BufferAllocationProfile represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfile struct {
	Name  *string                                       `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Queue map[string]*Qos_BufferAllocationProfile_Queue `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_BufferAllocationProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_BufferAllocationProfile) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Qos_BufferAllocationProfile struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_BufferAllocationProfile) NewQueue(Name string) (*Qos_BufferAllocationProfile_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_BufferAllocationProfile_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_BufferAllocationProfile_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_BufferAllocationProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_BufferAllocationProfile) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueueMap returns the list (map) from Qos_BufferAllocationProfile.
//
// It initializes the field if not already initialized.
func (t *Qos_BufferAllocationProfile) GetOrCreateQueueMap() map[string]*Qos_BufferAllocationProfile_Queue {
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_BufferAllocationProfile_Queue)
	}
	return t.Queue
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_BufferAllocationProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_BufferAllocationProfile) GetOrCreateQueue(Name string) *Qos_BufferAllocationProfile_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_BufferAllocationProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_BufferAllocationProfile) GetQueue(Name string) *Qos_BufferAllocationProfile_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_BufferAllocationProfile. If there is no such element, the function
// is a no-op.
func (t *Qos_BufferAllocationProfile) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_BufferAllocationProfile_Queue struct to the
// list Queue of Qos_BufferAllocationProfile. If the key value(s) specified in
// the supplied Qos_BufferAllocationProfile_Queue already exist in the list, an error is
// returned.
func (t *Qos_BufferAllocationProfile) AppendQueue(v *Qos_BufferAllocationProfile_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_BufferAllocationProfile_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_BufferAllocationProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Qos_BufferAllocationProfile
// struct.
func (t *Qos_BufferAllocationProfile) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_BufferAllocationProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_BufferAllocationProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_BufferAllocationProfile struct, which is a YANG list entry.
func (t *Qos_BufferAllocationProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_BufferAllocationProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_BufferAllocationProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_BufferAllocationProfile.
func (*Qos_BufferAllocationProfile) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_BufferAllocationProfile_Queue represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_Queue struct {
	DedicatedBuffer                 *uint64                        `path:"state/dedicated-buffer" module:"openconfig-qos/openconfig-qos" shadow-path:"config/dedicated-buffer" shadow-module:"openconfig-qos/openconfig-qos"`
	DedicatedBufferTemporal         *uint64                        `path:"state/dedicated-buffer-temporal" module:"openconfig-qos/openconfig-qos" shadow-path:"config/dedicated-buffer-temporal" shadow-module:"openconfig-qos/openconfig-qos"`
	DynamicLimitScalingFactor       *int32                         `path:"state/dynamic-limit-scaling-factor" module:"openconfig-qos/openconfig-qos" shadow-path:"config/dynamic-limit-scaling-factor" shadow-module:"openconfig-qos/openconfig-qos"`
	Name                            *string                        `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	SharedBufferLimitType           E_Qos_SHARED_BUFFER_LIMIT_TYPE `path:"state/shared-buffer-limit-type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/shared-buffer-limit-type" shadow-module:"openconfig-qos/openconfig-qos"`
	StaticSharedBufferLimit         *uint32                        `path:"state/static-shared-buffer-limit" module:"openconfig-qos/openconfig-qos" shadow-path:"config/static-shared-buffer-limit" shadow-module:"openconfig-qos/openconfig-qos"`
	StaticSharedBufferLimitTemporal *uint32                        `path:"state/static-shared-buffer-limit-temporal" module:"openconfig-qos/openconfig-qos" shadow-path:"config/static-shared-buffer-limit-temporal" shadow-module:"openconfig-qos/openconfig-qos"`
	UseSharedBuffer                 *bool                          `path:"state/use-shared-buffer" module:"openconfig-qos/openconfig-qos" shadow-path:"config/use-shared-buffer" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_BufferAllocationProfile_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_BufferAllocationProfile_Queue) IsYANGGoStruct() {}

// GetDedicatedBuffer retrieves the value of the leaf DedicatedBuffer from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DedicatedBuffer is set, it can
// safely use t.GetDedicatedBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DedicatedBuffer == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDedicatedBuffer() uint64 {
	if t == nil || t.DedicatedBuffer == nil {
		return 0
	}
	return *t.DedicatedBuffer
}

// GetDedicatedBufferTemporal retrieves the value of the leaf DedicatedBufferTemporal from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DedicatedBufferTemporal is set, it can
// safely use t.GetDedicatedBufferTemporal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DedicatedBufferTemporal == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDedicatedBufferTemporal() uint64 {
	if t == nil || t.DedicatedBufferTemporal == nil {
		return 0
	}
	return *t.DedicatedBufferTemporal
}

// GetDynamicLimitScalingFactor retrieves the value of the leaf DynamicLimitScalingFactor from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLimitScalingFactor is set, it can
// safely use t.GetDynamicLimitScalingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLimitScalingFactor == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDynamicLimitScalingFactor() int32 {
	if t == nil || t.DynamicLimitScalingFactor == nil {
		return 0
	}
	return *t.DynamicLimitScalingFactor
}

// GetName retrieves the value of the leaf Name from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSharedBufferLimitType retrieves the value of the leaf SharedBufferLimitType from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SharedBufferLimitType is set, it can
// safely use t.GetSharedBufferLimitType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SharedBufferLimitType == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetSharedBufferLimitType() E_Qos_SHARED_BUFFER_LIMIT_TYPE {
	if t == nil || t.SharedBufferLimitType == 0 {
		return 0
	}
	return t.SharedBufferLimitType
}

// GetStaticSharedBufferLimit retrieves the value of the leaf StaticSharedBufferLimit from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticSharedBufferLimit is set, it can
// safely use t.GetStaticSharedBufferLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticSharedBufferLimit == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetStaticSharedBufferLimit() uint32 {
	if t == nil || t.StaticSharedBufferLimit == nil {
		return 0
	}
	return *t.StaticSharedBufferLimit
}

// GetStaticSharedBufferLimitTemporal retrieves the value of the leaf StaticSharedBufferLimitTemporal from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticSharedBufferLimitTemporal is set, it can
// safely use t.GetStaticSharedBufferLimitTemporal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticSharedBufferLimitTemporal == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetStaticSharedBufferLimitTemporal() uint32 {
	if t == nil || t.StaticSharedBufferLimitTemporal == nil {
		return 0
	}
	return *t.StaticSharedBufferLimitTemporal
}

// GetUseSharedBuffer retrieves the value of the leaf UseSharedBuffer from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSharedBuffer is set, it can
// safely use t.GetUseSharedBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSharedBuffer == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetUseSharedBuffer() bool {
	if t == nil || t.UseSharedBuffer == nil {
		return false
	}
	return *t.UseSharedBuffer
}

// SetDedicatedBuffer sets the value of the leaf DedicatedBuffer in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetDedicatedBuffer(v uint64) {
	t.DedicatedBuffer = &v
}

// SetDedicatedBufferTemporal sets the value of the leaf DedicatedBufferTemporal in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetDedicatedBufferTemporal(v uint64) {
	t.DedicatedBufferTemporal = &v
}

// SetDynamicLimitScalingFactor sets the value of the leaf DynamicLimitScalingFactor in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetDynamicLimitScalingFactor(v int32) {
	t.DynamicLimitScalingFactor = &v
}

// SetName sets the value of the leaf Name in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetName(v string) {
	t.Name = &v
}

// SetSharedBufferLimitType sets the value of the leaf SharedBufferLimitType in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetSharedBufferLimitType(v E_Qos_SHARED_BUFFER_LIMIT_TYPE) {
	t.SharedBufferLimitType = v
}

// SetStaticSharedBufferLimit sets the value of the leaf StaticSharedBufferLimit in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetStaticSharedBufferLimit(v uint32) {
	t.StaticSharedBufferLimit = &v
}

// SetStaticSharedBufferLimitTemporal sets the value of the leaf StaticSharedBufferLimitTemporal in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetStaticSharedBufferLimitTemporal(v uint32) {
	t.StaticSharedBufferLimitTemporal = &v
}

// SetUseSharedBuffer sets the value of the leaf UseSharedBuffer in the Qos_BufferAllocationProfile_Queue
// struct.
func (t *Qos_BufferAllocationProfile_Queue) SetUseSharedBuffer(v bool) {
	t.UseSharedBuffer = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_BufferAllocationProfile_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_BufferAllocationProfile_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_BufferAllocationProfile_Queue struct, which is a YANG list entry.
func (t *Qos_BufferAllocationProfile_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_BufferAllocationProfile_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_BufferAllocationProfile_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_BufferAllocationProfile_Queue.
func (*Qos_BufferAllocationProfile_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_Classifier struct {
	Name *string                         `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Term map[string]*Qos_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	Type E_Qos_Classifier_Type           `path:"state/type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Classifier) NewTerm(Id string) (*Qos_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTermMap returns the list (map) from Qos_Classifier.
//
// It initializes the field if not already initialized.
func (t *Qos_Classifier) GetOrCreateTermMap() map[string]*Qos_Classifier_Term {
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}
	return t.Term
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Classifier) GetOrCreateTerm(Id string) *Qos_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Classifier) GetTerm(Id string) *Qos_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Classifier_Term struct to the
// list Term of Qos_Classifier. If the key value(s) specified in
// the supplied Qos_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Classifier) AppendTerm(v *Qos_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Classifier) GetType() E_Qos_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetName sets the value of the leaf Name in the Qos_Classifier
// struct.
func (t *Qos_Classifier) SetName(v string) {
	t.Name = &v
}

// SetType sets the value of the leaf Type in the Qos_Classifier
// struct.
func (t *Qos_Classifier) SetType(v E_Qos_Classifier_Type) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Term {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Classifier struct, which is a YANG list entry.
func (t *Qos_Classifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier.
func (*Qos_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_Term struct {
	Actions    *Qos_Classifier_Term_Actions    `path:"actions" module:"openconfig-qos"`
	Conditions *Qos_Classifier_Term_Conditions `path:"conditions" module:"openconfig-qos"`
	Id         *string                         `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/id|id" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateActions() *Qos_Classifier_Term_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &Qos_Classifier_Term_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateConditions() *Qos_Classifier_Term_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &Qos_Classifier_Term_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetActions() *Qos_Classifier_Term_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetConditions() *Qos_Classifier_Term_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the Qos_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// SetId sets the value of the leaf Id in the Qos_Classifier_Term
// struct.
func (t *Qos_Classifier_Term) SetId(v string) {
	t.Id = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.Conditions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Qos_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term.
func (*Qos_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Actions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_Actions struct {
	Remark      *Qos_Classifier_Term_Actions_Remark `path:"remark" module:"openconfig-qos"`
	TargetGroup *string                             `path:"state/target-group" module:"openconfig-qos/openconfig-qos" shadow-path:"config/target-group" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions) IsYANGGoStruct() {}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Actions) GetOrCreateRemark() *Qos_Classifier_Term_Actions_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &Qos_Classifier_Term_Actions_Remark{}
	return t.Remark
}

// GetRemark returns the value of the Remark struct pointer
// from Qos_Classifier_Term_Actions. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Actions) GetRemark() *Qos_Classifier_Term_Actions_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetTargetGroup retrieves the value of the leaf TargetGroup from the Qos_Classifier_Term_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetGroup is set, it can
// safely use t.GetTargetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetGroup == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions) GetTargetGroup() string {
	if t == nil || t.TargetGroup == nil {
		return ""
	}
	return *t.TargetGroup
}

// SetTargetGroup sets the value of the leaf TargetGroup in the Qos_Classifier_Term_Actions
// struct.
func (t *Qos_Classifier_Term_Actions) SetTargetGroup(v string) {
	t.TargetGroup = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Remark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Actions.
func (*Qos_Classifier_Term_Actions) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Actions_Remark represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_Remark struct {
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions_Remark) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_Classifier_Term_Actions_Remark
// struct.
func (t *Qos_Classifier_Term_Actions_Remark) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_Classifier_Term_Actions_Remark
// struct.
func (t *Qos_Classifier_Term_Actions_Remark) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_Classifier_Term_Actions_Remark
// struct.
func (t *Qos_Classifier_Term_Actions_Remark) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Actions_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Actions_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions_Remark) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Actions_Remark.
func (*Qos_Classifier_Term_Actions_Remark) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_Conditions struct {
	Ipv4      *Qos_Classifier_Term_Conditions_Ipv4      `path:"ipv4" module:"openconfig-qos"`
	Ipv6      *Qos_Classifier_Term_Conditions_Ipv6      `path:"ipv6" module:"openconfig-qos"`
	L2        *Qos_Classifier_Term_Conditions_L2        `path:"l2" module:"openconfig-qos"`
	Mpls      *Qos_Classifier_Term_Conditions_Mpls      `path:"mpls" module:"openconfig-qos"`
	Transport *Qos_Classifier_Term_Conditions_Transport `path:"transport" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Qos_Classifier_Term_Conditions_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Qos_Classifier_Term_Conditions_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateL2() *Qos_Classifier_Term_Conditions_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &Qos_Classifier_Term_Conditions_L2{}
	return t.L2
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &Qos_Classifier_Term_Conditions_Mpls{}
	return t.Mpls
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Qos_Classifier_Term_Conditions_Transport{}
	return t.Transport
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetL2() *Qos_Classifier_Term_Conditions_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.L2.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions.
func (*Qos_Classifier_Term_Conditions) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv4 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4 struct {
	DestinationAddress          *string                                            `path:"state/destination-address" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-address" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationAddressPrefixSet *string                                            `path:"state/destination-address-prefix-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-address-prefix-set" shadow-module:"openconfig-qos/openconfig-qos"`
	Dscp                        *uint8                                             `path:"state/dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	DscpSet                     []uint8                                            `path:"state/dscp-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/dscp-set" shadow-module:"openconfig-qos/openconfig-qos"`
	HopLimit                    *uint8                                             `path:"state/hop-limit" module:"openconfig-qos/openconfig-qos" shadow-path:"config/hop-limit" shadow-module:"openconfig-qos/openconfig-qos"`
	Icmpv4                      *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4        `path:"icmpv4" module:"openconfig-qos"`
	Length                      *uint16                                            `path:"state/length" module:"openconfig-qos/openconfig-qos" shadow-path:"config/length" shadow-module:"openconfig-qos/openconfig-qos"`
	Protocol                    Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union `path:"state/protocol" module:"openconfig-qos/openconfig-qos" shadow-path:"config/protocol" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceAddress               *string                                            `path:"state/source-address" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-address" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceAddressPrefixSet      *string                                            `path:"state/source-address-prefix-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-address-prefix-set" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv4) IsYANGGoStruct() {}

// GetOrCreateIcmpv4 retrieves the value of the Icmpv4 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetOrCreateIcmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 {
	if t.Icmpv4 != nil {
		return t.Icmpv4
	}
	t.Icmpv4 = &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4{}
	return t.Icmpv4
}

// GetIcmpv4 returns the value of the Icmpv4 struct pointer
// from Qos_Classifier_Term_Conditions_Ipv4. If the receiver or the field Icmpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetIcmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 {
	if t != nil && t.Icmpv4 != nil {
		return t.Icmpv4
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDscp retrieves the value of the leaf Dscp from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetProtocol() Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// SetDestinationAddress sets the value of the leaf DestinationAddress in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetDestinationAddress(v string) {
	t.DestinationAddress = &v
}

// SetDestinationAddressPrefixSet sets the value of the leaf DestinationAddressPrefixSet in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetDestinationAddressPrefixSet(v string) {
	t.DestinationAddressPrefixSet = &v
}

// SetDscp sets the value of the leaf Dscp in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetDscp(v uint8) {
	t.Dscp = &v
}

// SetDscpSet sets the value of the leaf DscpSet in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetDscpSet(v []uint8) {
	t.DscpSet = v
}

// SetHopLimit sets the value of the leaf HopLimit in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetHopLimit(v uint8) {
	t.HopLimit = &v
}

// SetLength sets the value of the leaf Length in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetLength(v uint16) {
	t.Length = &v
}

// SetProtocol sets the value of the leaf Protocol in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetProtocol(v Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union) {
	t.Protocol = v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetSourceAddressPrefixSet sets the value of the leaf SourceAddressPrefixSet in the Qos_Classifier_Term_Conditions_Ipv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4) SetSourceAddressPrefixSet(v string) {
	t.SourceAddressPrefixSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv4.
func (*Qos_Classifier_Term_Conditions_Ipv4) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 struct {
	Code E_Icmpv4Types_CODE `path:"state/code" module:"openconfig-qos/openconfig-qos" shadow-path:"config/code" shadow-module:"openconfig-qos/openconfig-qos"`
	Type E_Icmpv4Types_TYPE `path:"state/type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) GetCode() E_Icmpv4Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) GetType() E_Icmpv4Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetCode sets the value of the leaf Code in the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) SetCode(v E_Icmpv4Types_CODE) {
	t.Code = v
}

// SetType sets the value of the leaf Type in the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) SetType(v E_Icmpv4Types_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv4_Icmpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv4_Icmpv4.
func (*Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv6 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6 struct {
	DestinationAddress          *string                                            `path:"state/destination-address" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-address" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationAddressPrefixSet *string                                            `path:"state/destination-address-prefix-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-address-prefix-set" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationFlowLabel        *uint32                                            `path:"state/destination-flow-label" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-flow-label" shadow-module:"openconfig-qos/openconfig-qos"`
	Dscp                        *uint8                                             `path:"state/dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	DscpSet                     []uint8                                            `path:"state/dscp-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/dscp-set" shadow-module:"openconfig-qos/openconfig-qos"`
	HopLimit                    *uint8                                             `path:"state/hop-limit" module:"openconfig-qos/openconfig-qos" shadow-path:"config/hop-limit" shadow-module:"openconfig-qos/openconfig-qos"`
	Icmpv6                      *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6        `path:"icmpv6" module:"openconfig-qos"`
	Length                      *uint16                                            `path:"state/length" module:"openconfig-qos/openconfig-qos" shadow-path:"config/length" shadow-module:"openconfig-qos/openconfig-qos"`
	Protocol                    Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union `path:"state/protocol" module:"openconfig-qos/openconfig-qos" shadow-path:"config/protocol" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceAddress               *string                                            `path:"state/source-address" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-address" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceAddressPrefixSet      *string                                            `path:"state/source-address-prefix-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-address-prefix-set" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceFlowLabel             *uint32                                            `path:"state/source-flow-label" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-flow-label" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv6) IsYANGGoStruct() {}

// GetOrCreateIcmpv6 retrieves the value of the Icmpv6 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetOrCreateIcmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 {
	if t.Icmpv6 != nil {
		return t.Icmpv6
	}
	t.Icmpv6 = &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6{}
	return t.Icmpv6
}

// GetIcmpv6 returns the value of the Icmpv6 struct pointer
// from Qos_Classifier_Term_Conditions_Ipv6. If the receiver or the field Icmpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetIcmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 {
	if t != nil && t.Icmpv6 != nil {
		return t.Icmpv6
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDestinationFlowLabel retrieves the value of the leaf DestinationFlowLabel from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationFlowLabel is set, it can
// safely use t.GetDestinationFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationFlowLabel == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationFlowLabel() uint32 {
	if t == nil || t.DestinationFlowLabel == nil {
		return 0
	}
	return *t.DestinationFlowLabel
}

// GetDscp retrieves the value of the leaf Dscp from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetProtocol() Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// GetSourceFlowLabel retrieves the value of the leaf SourceFlowLabel from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceFlowLabel is set, it can
// safely use t.GetSourceFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceFlowLabel == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceFlowLabel() uint32 {
	if t == nil || t.SourceFlowLabel == nil {
		return 0
	}
	return *t.SourceFlowLabel
}

// SetDestinationAddress sets the value of the leaf DestinationAddress in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetDestinationAddress(v string) {
	t.DestinationAddress = &v
}

// SetDestinationAddressPrefixSet sets the value of the leaf DestinationAddressPrefixSet in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetDestinationAddressPrefixSet(v string) {
	t.DestinationAddressPrefixSet = &v
}

// SetDestinationFlowLabel sets the value of the leaf DestinationFlowLabel in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetDestinationFlowLabel(v uint32) {
	t.DestinationFlowLabel = &v
}

// SetDscp sets the value of the leaf Dscp in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetDscp(v uint8) {
	t.Dscp = &v
}

// SetDscpSet sets the value of the leaf DscpSet in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetDscpSet(v []uint8) {
	t.DscpSet = v
}

// SetHopLimit sets the value of the leaf HopLimit in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetHopLimit(v uint8) {
	t.HopLimit = &v
}

// SetLength sets the value of the leaf Length in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetLength(v uint16) {
	t.Length = &v
}

// SetProtocol sets the value of the leaf Protocol in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetProtocol(v Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union) {
	t.Protocol = v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetSourceAddressPrefixSet sets the value of the leaf SourceAddressPrefixSet in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetSourceAddressPrefixSet(v string) {
	t.SourceAddressPrefixSet = &v
}

// SetSourceFlowLabel sets the value of the leaf SourceFlowLabel in the Qos_Classifier_Term_Conditions_Ipv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6) SetSourceFlowLabel(v uint32) {
	t.SourceFlowLabel = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv6.
func (*Qos_Classifier_Term_Conditions_Ipv6) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 struct {
	Code E_Icmpv6Types_CODE `path:"state/code" module:"openconfig-qos/openconfig-qos" shadow-path:"config/code" shadow-module:"openconfig-qos/openconfig-qos"`
	Type E_Icmpv6Types_TYPE `path:"state/type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) GetCode() E_Icmpv6Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) GetType() E_Icmpv6Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetCode sets the value of the leaf Code in the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) SetCode(v E_Icmpv6Types_CODE) {
	t.Code = v
}

// SetType sets the value of the leaf Type in the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// struct.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) SetType(v E_Icmpv6Types_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv6_Icmpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv6_Icmpv6.
func (*Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_L2 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2 struct {
	DestinationMac     *string                                           `path:"state/destination-mac" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-mac" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationMacMask *string                                           `path:"state/destination-mac-mask" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-mac-mask" shadow-module:"openconfig-qos/openconfig-qos"`
	Ethertype          Qos_Classifier_Term_Conditions_L2_Ethertype_Union `path:"state/ethertype" module:"openconfig-qos/openconfig-qos" shadow-path:"config/ethertype" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceMac          *string                                           `path:"state/source-mac" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-mac" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceMacMask      *string                                           `path:"state/source-mac-mask" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-mac-mask" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_L2) IsYANGGoStruct() {}

// GetDestinationMac retrieves the value of the leaf DestinationMac from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMac is set, it can
// safely use t.GetDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMac == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetDestinationMac() string {
	if t == nil || t.DestinationMac == nil {
		return ""
	}
	return *t.DestinationMac
}

// GetDestinationMacMask retrieves the value of the leaf DestinationMacMask from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMacMask is set, it can
// safely use t.GetDestinationMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMacMask == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetDestinationMacMask() string {
	if t == nil || t.DestinationMacMask == nil {
		return ""
	}
	return *t.DestinationMacMask
}

// GetEthertype retrieves the value of the leaf Ethertype from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethertype is set, it can
// safely use t.GetEthertype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethertype == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetEthertype() Qos_Classifier_Term_Conditions_L2_Ethertype_Union {
	if t == nil || t.Ethertype == nil {
		return nil
	}
	return t.Ethertype
}

// GetSourceMac retrieves the value of the leaf SourceMac from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// GetSourceMacMask retrieves the value of the leaf SourceMacMask from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMacMask is set, it can
// safely use t.GetSourceMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMacMask == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetSourceMacMask() string {
	if t == nil || t.SourceMacMask == nil {
		return ""
	}
	return *t.SourceMacMask
}

// SetDestinationMac sets the value of the leaf DestinationMac in the Qos_Classifier_Term_Conditions_L2
// struct.
func (t *Qos_Classifier_Term_Conditions_L2) SetDestinationMac(v string) {
	t.DestinationMac = &v
}

// SetDestinationMacMask sets the value of the leaf DestinationMacMask in the Qos_Classifier_Term_Conditions_L2
// struct.
func (t *Qos_Classifier_Term_Conditions_L2) SetDestinationMacMask(v string) {
	t.DestinationMacMask = &v
}

// SetEthertype sets the value of the leaf Ethertype in the Qos_Classifier_Term_Conditions_L2
// struct.
func (t *Qos_Classifier_Term_Conditions_L2) SetEthertype(v Qos_Classifier_Term_Conditions_L2_Ethertype_Union) {
	t.Ethertype = v
}

// SetSourceMac sets the value of the leaf SourceMac in the Qos_Classifier_Term_Conditions_L2
// struct.
func (t *Qos_Classifier_Term_Conditions_L2) SetSourceMac(v string) {
	t.SourceMac = &v
}

// SetSourceMacMask sets the value of the leaf SourceMacMask in the Qos_Classifier_Term_Conditions_L2
// struct.
func (t *Qos_Classifier_Term_Conditions_L2) SetSourceMacMask(v string) {
	t.SourceMacMask = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_L2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_L2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_L2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_L2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_L2.
func (*Qos_Classifier_Term_Conditions_L2) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Mpls represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls struct {
	EndLabelValue   Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union   `path:"state/end-label-value" module:"openconfig-qos/openconfig-qos" shadow-path:"config/end-label-value" shadow-module:"openconfig-qos/openconfig-qos"`
	StartLabelValue Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union `path:"state/start-label-value" module:"openconfig-qos/openconfig-qos" shadow-path:"config/start-label-value" shadow-module:"openconfig-qos/openconfig-qos"`
	TrafficClass    *uint8                                                    `path:"state/traffic-class" module:"openconfig-qos/openconfig-qos" shadow-path:"config/traffic-class" shadow-module:"openconfig-qos/openconfig-qos"`
	TtlValue        *uint8                                                    `path:"state/ttl-value" module:"openconfig-qos/openconfig-qos" shadow-path:"config/ttl-value" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Mpls) IsYANGGoStruct() {}

// GetEndLabelValue retrieves the value of the leaf EndLabelValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabelValue is set, it can
// safely use t.GetEndLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabelValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetEndLabelValue() Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union {
	if t == nil || t.EndLabelValue == nil {
		return nil
	}
	return t.EndLabelValue
}

// GetStartLabelValue retrieves the value of the leaf StartLabelValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabelValue is set, it can
// safely use t.GetStartLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabelValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetStartLabelValue() Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union {
	if t == nil || t.StartLabelValue == nil {
		return nil
	}
	return t.StartLabelValue
}

// GetTrafficClass retrieves the value of the leaf TrafficClass from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficClass is set, it can
// safely use t.GetTrafficClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficClass == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetTrafficClass() uint8 {
	if t == nil || t.TrafficClass == nil {
		return 0
	}
	return *t.TrafficClass
}

// GetTtlValue retrieves the value of the leaf TtlValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlValue is set, it can
// safely use t.GetTtlValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetTtlValue() uint8 {
	if t == nil || t.TtlValue == nil {
		return 0
	}
	return *t.TtlValue
}

// SetEndLabelValue sets the value of the leaf EndLabelValue in the Qos_Classifier_Term_Conditions_Mpls
// struct.
func (t *Qos_Classifier_Term_Conditions_Mpls) SetEndLabelValue(v Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union) {
	t.EndLabelValue = v
}

// SetStartLabelValue sets the value of the leaf StartLabelValue in the Qos_Classifier_Term_Conditions_Mpls
// struct.
func (t *Qos_Classifier_Term_Conditions_Mpls) SetStartLabelValue(v Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union) {
	t.StartLabelValue = v
}

// SetTrafficClass sets the value of the leaf TrafficClass in the Qos_Classifier_Term_Conditions_Mpls
// struct.
func (t *Qos_Classifier_Term_Conditions_Mpls) SetTrafficClass(v uint8) {
	t.TrafficClass = &v
}

// SetTtlValue sets the value of the leaf TtlValue in the Qos_Classifier_Term_Conditions_Mpls
// struct.
func (t *Qos_Classifier_Term_Conditions_Mpls) SetTtlValue(v uint8) {
	t.TtlValue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Mpls.
func (*Qos_Classifier_Term_Conditions_Mpls) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Transport represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_Transport struct {
	BuiltinDetail           E_Transport_BuiltinDetail                                      `path:"state/builtin-detail" module:"openconfig-qos/openconfig-qos" shadow-path:"config/builtin-detail" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationPort         Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union `path:"state/destination-port" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-port" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationPortSet      *string                                                        `path:"state/destination-port-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/destination-port-set" shadow-module:"openconfig-qos/openconfig-qos"`
	DetailMode              E_Transport_DetailMode                                         `path:"state/detail-mode" module:"openconfig-qos/openconfig-qos" shadow-path:"config/detail-mode" shadow-module:"openconfig-qos/openconfig-qos"`
	ExplicitDetailMatchMode E_Transport_ExplicitDetailMatchMode                            `path:"state/explicit-detail-match-mode" module:"openconfig-qos/openconfig-qos" shadow-path:"config/explicit-detail-match-mode" shadow-module:"openconfig-qos/openconfig-qos"`
	ExplicitTcpFlags        []E_PacketMatchTypes_TCP_FLAGS                                 `path:"state/explicit-tcp-flags" module:"openconfig-qos/openconfig-qos" shadow-path:"config/explicit-tcp-flags" shadow-module:"openconfig-qos/openconfig-qos"`
	SourcePort              Qos_Classifier_Term_Conditions_Transport_SourcePort_Union      `path:"state/source-port" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-port" shadow-module:"openconfig-qos/openconfig-qos"`
	SourcePortSet           *string                                                        `path:"state/source-port-set" module:"openconfig-qos/openconfig-qos" shadow-path:"config/source-port-set" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Transport) IsYANGGoStruct() {}

// GetBuiltinDetail retrieves the value of the leaf BuiltinDetail from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BuiltinDetail is set, it can
// safely use t.GetBuiltinDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BuiltinDetail == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetBuiltinDetail() E_Transport_BuiltinDetail {
	if t == nil || t.BuiltinDetail == 0 {
		return 0
	}
	return t.BuiltinDetail
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetDestinationPort() Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union {
	if t == nil || t.DestinationPort == nil {
		return nil
	}
	return t.DestinationPort
}

// GetDestinationPortSet retrieves the value of the leaf DestinationPortSet from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPortSet is set, it can
// safely use t.GetDestinationPortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPortSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetDestinationPortSet() string {
	if t == nil || t.DestinationPortSet == nil {
		return ""
	}
	return *t.DestinationPortSet
}

// GetDetailMode retrieves the value of the leaf DetailMode from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetailMode is set, it can
// safely use t.GetDetailMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetailMode == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetDetailMode() E_Transport_DetailMode {
	if t == nil || t.DetailMode == 0 {
		return 0
	}
	return t.DetailMode
}

// GetExplicitDetailMatchMode retrieves the value of the leaf ExplicitDetailMatchMode from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitDetailMatchMode is set, it can
// safely use t.GetExplicitDetailMatchMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitDetailMatchMode == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetExplicitDetailMatchMode() E_Transport_ExplicitDetailMatchMode {
	if t == nil || t.ExplicitDetailMatchMode == 0 {
		return 0
	}
	return t.ExplicitDetailMatchMode
}

// GetExplicitTcpFlags retrieves the value of the leaf ExplicitTcpFlags from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitTcpFlags is set, it can
// safely use t.GetExplicitTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitTcpFlags == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetExplicitTcpFlags() []E_PacketMatchTypes_TCP_FLAGS {
	if t == nil || t.ExplicitTcpFlags == nil {
		return nil
	}
	return t.ExplicitTcpFlags
}

// GetSourcePort retrieves the value of the leaf SourcePort from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetSourcePort() Qos_Classifier_Term_Conditions_Transport_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// GetSourcePortSet retrieves the value of the leaf SourcePortSet from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePortSet is set, it can
// safely use t.GetSourcePortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePortSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetSourcePortSet() string {
	if t == nil || t.SourcePortSet == nil {
		return ""
	}
	return *t.SourcePortSet
}

// SetBuiltinDetail sets the value of the leaf BuiltinDetail in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetBuiltinDetail(v E_Transport_BuiltinDetail) {
	t.BuiltinDetail = v
}

// SetDestinationPort sets the value of the leaf DestinationPort in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetDestinationPort(v Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union) {
	t.DestinationPort = v
}

// SetDestinationPortSet sets the value of the leaf DestinationPortSet in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetDestinationPortSet(v string) {
	t.DestinationPortSet = &v
}

// SetDetailMode sets the value of the leaf DetailMode in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetDetailMode(v E_Transport_DetailMode) {
	t.DetailMode = v
}

// SetExplicitDetailMatchMode sets the value of the leaf ExplicitDetailMatchMode in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetExplicitDetailMatchMode(v E_Transport_ExplicitDetailMatchMode) {
	t.ExplicitDetailMatchMode = v
}

// SetExplicitTcpFlags sets the value of the leaf ExplicitTcpFlags in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetExplicitTcpFlags(v []E_PacketMatchTypes_TCP_FLAGS) {
	t.ExplicitTcpFlags = v
}

// SetSourcePort sets the value of the leaf SourcePort in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetSourcePort(v Qos_Classifier_Term_Conditions_Transport_SourcePort_Union) {
	t.SourcePort = v
}

// SetSourcePortSet sets the value of the leaf SourcePortSet in the Qos_Classifier_Term_Conditions_Transport
// struct.
func (t *Qos_Classifier_Term_Conditions_Transport) SetSourcePortSet(v string) {
	t.SourcePortSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Transport.
func (*Qos_Classifier_Term_Conditions_Transport) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_ForwardingGroup represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroup struct {
	FabricPriority       *uint8  `path:"state/fabric-priority" module:"openconfig-qos/openconfig-qos" shadow-path:"config/fabric-priority" shadow-module:"openconfig-qos/openconfig-qos"`
	MulticastOutputQueue *string `path:"state/multicast-output-queue" module:"openconfig-qos/openconfig-qos" shadow-path:"config/multicast-output-queue" shadow-module:"openconfig-qos/openconfig-qos"`
	Name                 *string `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	OutputQueue          *string `path:"state/output-queue" module:"openconfig-qos/openconfig-qos" shadow-path:"config/output-queue" shadow-module:"openconfig-qos/openconfig-qos"`
	UnicastOutputQueue   *string `path:"state/unicast-output-queue" module:"openconfig-qos/openconfig-qos" shadow-path:"config/unicast-output-queue" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_ForwardingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_ForwardingGroup) IsYANGGoStruct() {}

// GetFabricPriority retrieves the value of the leaf FabricPriority from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FabricPriority is set, it can
// safely use t.GetFabricPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FabricPriority == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetFabricPriority() uint8 {
	if t == nil || t.FabricPriority == nil {
		return 0
	}
	return *t.FabricPriority
}

// GetMulticastOutputQueue retrieves the value of the leaf MulticastOutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastOutputQueue is set, it can
// safely use t.GetMulticastOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastOutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetMulticastOutputQueue() string {
	if t == nil || t.MulticastOutputQueue == nil {
		return ""
	}
	return *t.MulticastOutputQueue
}

// GetName retrieves the value of the leaf Name from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutputQueue retrieves the value of the leaf OutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputQueue is set, it can
// safely use t.GetOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetOutputQueue() string {
	if t == nil || t.OutputQueue == nil {
		return ""
	}
	return *t.OutputQueue
}

// GetUnicastOutputQueue retrieves the value of the leaf UnicastOutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastOutputQueue is set, it can
// safely use t.GetUnicastOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastOutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetUnicastOutputQueue() string {
	if t == nil || t.UnicastOutputQueue == nil {
		return ""
	}
	return *t.UnicastOutputQueue
}

// SetFabricPriority sets the value of the leaf FabricPriority in the Qos_ForwardingGroup
// struct.
func (t *Qos_ForwardingGroup) SetFabricPriority(v uint8) {
	t.FabricPriority = &v
}

// SetMulticastOutputQueue sets the value of the leaf MulticastOutputQueue in the Qos_ForwardingGroup
// struct.
func (t *Qos_ForwardingGroup) SetMulticastOutputQueue(v string) {
	t.MulticastOutputQueue = &v
}

// SetName sets the value of the leaf Name in the Qos_ForwardingGroup
// struct.
func (t *Qos_ForwardingGroup) SetName(v string) {
	t.Name = &v
}

// SetOutputQueue sets the value of the leaf OutputQueue in the Qos_ForwardingGroup
// struct.
func (t *Qos_ForwardingGroup) SetOutputQueue(v string) {
	t.OutputQueue = &v
}

// SetUnicastOutputQueue sets the value of the leaf UnicastOutputQueue in the Qos_ForwardingGroup
// struct.
func (t *Qos_ForwardingGroup) SetUnicastOutputQueue(v string) {
	t.UnicastOutputQueue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_ForwardingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_ForwardingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_ForwardingGroup struct, which is a YANG list entry.
func (t *Qos_ForwardingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_ForwardingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_ForwardingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_ForwardingGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_ForwardingGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_ForwardingGroup.
func (*Qos_ForwardingGroup) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_Interface struct {
	Input        *Qos_Interface_Input        `path:"input" module:"openconfig-qos"`
	InterfaceId  *string                     `path:"state/interface-id|interface-id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/interface-id|interface-id" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	InterfaceRef *Qos_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-qos"`
	Output       *Qos_Interface_Output       `path:"output" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface) IsYANGGoStruct() {}

// GetOrCreateInput retrieves the value of the Input field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInput() *Qos_Interface_Input {
	if t.Input != nil {
		return t.Input
	}
	t.Input = &Qos_Interface_Input{}
	return t.Input
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInterfaceRef() *Qos_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Qos_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateOutput() *Qos_Interface_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_Interface_Output{}
	return t.Output
}

// GetInput returns the value of the Input struct pointer
// from Qos_Interface. If the receiver or the field Input is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInput() *Qos_Interface_Input {
	if t != nil && t.Input != nil {
		return t.Input
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Qos_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInterfaceRef() *Qos_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_Interface. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetOutput() *Qos_Interface_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the Qos_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *Qos_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// SetInterfaceId sets the value of the leaf InterfaceId in the Qos_Interface
// struct.
func (t *Qos_Interface) SetInterfaceId(v string) {
	t.InterfaceId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Input.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Output.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Qos_Interface struct, which is a YANG list entry.
func (t *Qos_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface.
func (*Qos_Interface) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input represents the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_Input struct {
	BufferAllocationProfile          *string                                                     `path:"state/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Classifier                       map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	MulticastBufferAllocationProfile *string                                                     `path:"state/multicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/multicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Queue                            map[string]*Qos_Interface_Input_Queue                       `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	SchedulerPolicy                  *Qos_Interface_Input_SchedulerPolicy                        `path:"scheduler-policy" module:"openconfig-qos"`
	UnicastBufferAllocationProfile   *string                                                     `path:"state/unicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/unicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	VoqInterface                     map[string]*Qos_Interface_Input_VoqInterface                `path:"virtual-output-queues/voq-interface" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Input_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Input_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameClassifier(oldK, newK E_Input_Classifier_Type) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Type = newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifierMap returns the list (map) from Qos_Interface_Input.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Input) GetOrCreateClassifierMap() map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier {
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}
	return t.Classifier
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Input_Classifier {

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Input_Classifier {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteClassifier(Type E_Input_Classifier_Type) {
	key := Type

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Interface_Input_Classifier struct to the
// list Classifier of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_Classifier already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendClassifier(v *Qos_Interface_Input_Classifier) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewQueue(Name string) (*Qos_Interface_Input_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueueMap returns the list (map) from Qos_Interface_Input.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Input) GetOrCreateQueueMap() map[string]*Qos_Interface_Input_Queue {
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}
	return t.Queue
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateQueue(Name string) *Qos_Interface_Input_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetQueue(Name string) *Qos_Interface_Input_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Input_Queue struct to the
// list Queue of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendQueue(v *Qos_Interface_Input_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewVoqInterface creates a new entry in the VoqInterface list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewVoqInterface(Name string) (*Qos_Interface_Input_VoqInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VoqInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VoqInterface", key)
	}

	t.VoqInterface[key] = &Qos_Interface_Input_VoqInterface{
		Name: &Name,
	}

	return t.VoqInterface[key], nil
}

// RenameVoqInterface renames an entry in the list VoqInterface within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameVoqInterface(oldK, newK string) error {
	if _, ok := t.VoqInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VoqInterface", newK)
	}

	e, ok := t.VoqInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VoqInterface", oldK)
	}
	e.Name = &newK

	t.VoqInterface[newK] = e
	delete(t.VoqInterface, oldK)
	return nil
}

// GetOrCreateVoqInterfaceMap returns the list (map) from Qos_Interface_Input.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Input) GetOrCreateVoqInterfaceMap() map[string]*Qos_Interface_Input_VoqInterface {
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}
	return t.VoqInterface
}

// GetOrCreateVoqInterface retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateVoqInterface(Name string) *Qos_Interface_Input_VoqInterface {

	key := Name

	if v, ok := t.VoqInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVoqInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVoqInterface got unexpected error: %v", err))
	}
	return v
}

// GetVoqInterface retrieves the value with the specified key from
// the VoqInterface map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetVoqInterface(Name string) *Qos_Interface_Input_VoqInterface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.VoqInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVoqInterface deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteVoqInterface(Name string) {
	key := Name

	delete(t.VoqInterface, key)
}

// AppendVoqInterface appends the supplied Qos_Interface_Input_VoqInterface struct to the
// list VoqInterface of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_VoqInterface already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendVoqInterface(v *Qos_Interface_Input_VoqInterface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}

	if _, ok := t.VoqInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VoqInterface %v", key)
	}

	t.VoqInterface[key] = v
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Input) GetOrCreateSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Input_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Input. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Input) GetSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetBufferAllocationProfile retrieves the value of the leaf BufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocationProfile is set, it can
// safely use t.GetBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetBufferAllocationProfile() string {
	if t == nil || t.BufferAllocationProfile == nil {
		return ""
	}
	return *t.BufferAllocationProfile
}

// GetMulticastBufferAllocationProfile retrieves the value of the leaf MulticastBufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastBufferAllocationProfile is set, it can
// safely use t.GetMulticastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetMulticastBufferAllocationProfile() string {
	if t == nil || t.MulticastBufferAllocationProfile == nil {
		return ""
	}
	return *t.MulticastBufferAllocationProfile
}

// GetUnicastBufferAllocationProfile retrieves the value of the leaf UnicastBufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastBufferAllocationProfile is set, it can
// safely use t.GetUnicastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetUnicastBufferAllocationProfile() string {
	if t == nil || t.UnicastBufferAllocationProfile == nil {
		return ""
	}
	return *t.UnicastBufferAllocationProfile
}

// SetBufferAllocationProfile sets the value of the leaf BufferAllocationProfile in the Qos_Interface_Input
// struct.
func (t *Qos_Interface_Input) SetBufferAllocationProfile(v string) {
	t.BufferAllocationProfile = &v
}

// SetMulticastBufferAllocationProfile sets the value of the leaf MulticastBufferAllocationProfile in the Qos_Interface_Input
// struct.
func (t *Qos_Interface_Input) SetMulticastBufferAllocationProfile(v string) {
	t.MulticastBufferAllocationProfile = &v
}

// SetUnicastBufferAllocationProfile sets the value of the leaf UnicastBufferAllocationProfile in the Qos_Interface_Input
// struct.
func (t *Qos_Interface_Input) SetUnicastBufferAllocationProfile(v string) {
	t.UnicastBufferAllocationProfile = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SchedulerPolicy.PopulateDefaults()
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.VoqInterface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input.
func (*Qos_Interface_Input) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Classifier represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_Classifier struct {
	Name *string                                         `path:"state/name" module:"openconfig-qos/openconfig-qos" shadow-path:"config/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Term map[string]*Qos_Interface_Input_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	Type E_Input_Classifier_Type                         `path:"state/type|type" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/type|type" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Input_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_Classifier) NewTerm(Id string) (*Qos_Interface_Input_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Input_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Interface_Input_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTermMap returns the list (map) from Qos_Interface_Input_Classifier.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Input_Classifier) GetOrCreateTermMap() map[string]*Qos_Interface_Input_Classifier_Term {
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}
	return t.Term
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_Classifier) GetOrCreateTerm(Id string) *Qos_Interface_Input_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Input_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_Classifier) GetTerm(Id string) *Qos_Interface_Input_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Interface_Input_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Interface_Input_Classifier_Term struct to the
// list Term of Qos_Interface_Input_Classifier. If the key value(s) specified in
// the supplied Qos_Interface_Input_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_Classifier) AppendTerm(v *Qos_Interface_Input_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Interface_Input_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier) GetType() E_Input_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetName sets the value of the leaf Name in the Qos_Interface_Input_Classifier
// struct.
func (t *Qos_Interface_Input_Classifier) SetName(v string) {
	t.Name = &v
}

// SetType sets the value of the leaf Type in the Qos_Interface_Input_Classifier
// struct.
func (t *Qos_Interface_Input_Classifier) SetType(v E_Input_Classifier_Type) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Term {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Classifier.
func (*Qos_Interface_Input_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_Term struct {
	Id             *string `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"id" shadow-module:"openconfig-qos"`
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-qos/openconfig-qos"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier_Term) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// SetId sets the value of the leaf Id in the Qos_Interface_Input_Classifier_Term
// struct.
func (t *Qos_Interface_Input_Classifier_Term) SetId(v string) {
	t.Id = &v
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the Qos_Interface_Input_Classifier_Term
// struct.
func (t *Qos_Interface_Input_Classifier_Term) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the Qos_Interface_Input_Classifier_Term
// struct.
func (t *Qos_Interface_Input_Classifier_Term) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_Classifier_Term
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_Classifier_Term) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Classifier_Term.
func (*Qos_Interface_Input_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Queue represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_Queue struct {
	AvgQueueLen            *uint64 `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	DroppedOctets          *uint64 `path:"state/dropped-octets" module:"openconfig-qos/openconfig-qos"`
	DroppedPkts            *uint64 `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	EcnMarkedOctets        *uint64 `path:"state/ecn-marked-octets" module:"openconfig-qos/openconfig-qos"`
	EcnMarkedPkts          *uint64 `path:"state/ecn-marked-pkts" module:"openconfig-qos/openconfig-qos"`
	EcnSelectedOctets      *uint64 `path:"state/ecn-selected-octets" module:"openconfig-qos/openconfig-qos"`
	EcnSelectedPkts        *uint64 `path:"state/ecn-selected-pkts" module:"openconfig-qos/openconfig-qos"`
	MaxQueueLen            *uint64 `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	Name                   *string `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	QueueManagementProfile *string `path:"state/queue-management-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/queue-management-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	TransmitOctets         *uint64 `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	TransmitPkts           *uint64 `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedOctets retrieves the value of the leaf DroppedOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedOctets is set, it can
// safely use t.GetDroppedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetDroppedOctets() uint64 {
	if t == nil || t.DroppedOctets == nil {
		return 0
	}
	return *t.DroppedOctets
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetEcnMarkedOctets retrieves the value of the leaf EcnMarkedOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedOctets is set, it can
// safely use t.GetEcnMarkedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnMarkedOctets() uint64 {
	if t == nil || t.EcnMarkedOctets == nil {
		return 0
	}
	return *t.EcnMarkedOctets
}

// GetEcnMarkedPkts retrieves the value of the leaf EcnMarkedPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedPkts is set, it can
// safely use t.GetEcnMarkedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnMarkedPkts() uint64 {
	if t == nil || t.EcnMarkedPkts == nil {
		return 0
	}
	return *t.EcnMarkedPkts
}

// GetEcnSelectedOctets retrieves the value of the leaf EcnSelectedOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedOctets is set, it can
// safely use t.GetEcnSelectedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnSelectedOctets() uint64 {
	if t == nil || t.EcnSelectedOctets == nil {
		return 0
	}
	return *t.EcnSelectedOctets
}

// GetEcnSelectedPkts retrieves the value of the leaf EcnSelectedPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedPkts is set, it can
// safely use t.GetEcnSelectedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnSelectedPkts() uint64 {
	if t == nil || t.EcnSelectedPkts == nil {
		return 0
	}
	return *t.EcnSelectedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueManagementProfile retrieves the value of the leaf QueueManagementProfile from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueManagementProfile is set, it can
// safely use t.GetQueueManagementProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueManagementProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetQueueManagementProfile() string {
	if t == nil || t.QueueManagementProfile == nil {
		return ""
	}
	return *t.QueueManagementProfile
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// SetAvgQueueLen sets the value of the leaf AvgQueueLen in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetAvgQueueLen(v uint64) {
	t.AvgQueueLen = &v
}

// SetDroppedOctets sets the value of the leaf DroppedOctets in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetDroppedOctets(v uint64) {
	t.DroppedOctets = &v
}

// SetDroppedPkts sets the value of the leaf DroppedPkts in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetDroppedPkts(v uint64) {
	t.DroppedPkts = &v
}

// SetEcnMarkedOctets sets the value of the leaf EcnMarkedOctets in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetEcnMarkedOctets(v uint64) {
	t.EcnMarkedOctets = &v
}

// SetEcnMarkedPkts sets the value of the leaf EcnMarkedPkts in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetEcnMarkedPkts(v uint64) {
	t.EcnMarkedPkts = &v
}

// SetEcnSelectedOctets sets the value of the leaf EcnSelectedOctets in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetEcnSelectedOctets(v uint64) {
	t.EcnSelectedOctets = &v
}

// SetEcnSelectedPkts sets the value of the leaf EcnSelectedPkts in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetEcnSelectedPkts(v uint64) {
	t.EcnSelectedPkts = &v
}

// SetMaxQueueLen sets the value of the leaf MaxQueueLen in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetMaxQueueLen(v uint64) {
	t.MaxQueueLen = &v
}

// SetName sets the value of the leaf Name in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetName(v string) {
	t.Name = &v
}

// SetQueueManagementProfile sets the value of the leaf QueueManagementProfile in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetQueueManagementProfile(v string) {
	t.QueueManagementProfile = &v
}

// SetTransmitOctets sets the value of the leaf TransmitOctets in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetTransmitOctets(v uint64) {
	t.TransmitOctets = &v
}

// SetTransmitPkts sets the value of the leaf TransmitPkts in the Qos_Interface_Input_Queue
// struct.
func (t *Qos_Interface_Input_Queue) SetTransmitPkts(v uint64) {
	t.TransmitPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Queue.
func (*Qos_Interface_Input_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy YANG schema element.
type Qos_Interface_Input_SchedulerPolicy struct {
	Name      *string                                                   `path:"state/name" module:"openconfig-qos/openconfig-qos" shadow-path:"config/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Scheduler map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Input_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Input_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Input_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_Interface_Input_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateSchedulerMap returns the list (map) from Qos_Interface_Input_SchedulerPolicy.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Input_SchedulerPolicy) GetOrCreateSchedulerMap() map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler {
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}
	return t.Scheduler
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Input_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_Interface_Input_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_Interface_Input_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_Interface_Input_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_Interface_Input_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_SchedulerPolicy) AppendScheduler(v *Qos_Interface_Input_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Qos_Interface_Input_SchedulerPolicy
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_SchedulerPolicy.
func (*Qos_Interface_Input_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler struct {
	ConformingOctets *uint64 `path:"state/conforming-octets" module:"openconfig-qos/openconfig-qos"`
	ConformingPkts   *uint64 `path:"state/conforming-pkts" module:"openconfig-qos/openconfig-qos"`
	ExceedingOctets  *uint64 `path:"state/exceeding-octets" module:"openconfig-qos/openconfig-qos"`
	ExceedingPkts    *uint64 `path:"state/exceeding-pkts" module:"openconfig-qos/openconfig-qos"`
	Sequence         *uint32 `path:"state/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"sequence" shadow-module:"openconfig-qos"`
	ViolatingOctets  *uint64 `path:"state/violating-octets" module:"openconfig-qos/openconfig-qos"`
	ViolatingPkts    *uint64 `path:"state/violating-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// GetConformingOctets retrieves the value of the leaf ConformingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingOctets is set, it can
// safely use t.GetConformingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetConformingOctets() uint64 {
	if t == nil || t.ConformingOctets == nil {
		return 0
	}
	return *t.ConformingOctets
}

// GetConformingPkts retrieves the value of the leaf ConformingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingPkts is set, it can
// safely use t.GetConformingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetConformingPkts() uint64 {
	if t == nil || t.ConformingPkts == nil {
		return 0
	}
	return *t.ConformingPkts
}

// GetExceedingOctets retrieves the value of the leaf ExceedingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingOctets is set, it can
// safely use t.GetExceedingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetExceedingOctets() uint64 {
	if t == nil || t.ExceedingOctets == nil {
		return 0
	}
	return *t.ExceedingOctets
}

// GetExceedingPkts retrieves the value of the leaf ExceedingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingPkts is set, it can
// safely use t.GetExceedingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetExceedingPkts() uint64 {
	if t == nil || t.ExceedingPkts == nil {
		return 0
	}
	return *t.ExceedingPkts
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetViolatingOctets retrieves the value of the leaf ViolatingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingOctets is set, it can
// safely use t.GetViolatingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetViolatingOctets() uint64 {
	if t == nil || t.ViolatingOctets == nil {
		return 0
	}
	return *t.ViolatingOctets
}

// GetViolatingPkts retrieves the value of the leaf ViolatingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingPkts is set, it can
// safely use t.GetViolatingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetViolatingPkts() uint64 {
	if t == nil || t.ViolatingPkts == nil {
		return 0
	}
	return *t.ViolatingPkts
}

// SetConformingOctets sets the value of the leaf ConformingOctets in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) SetConformingOctets(v uint64) {
	t.ConformingOctets = &v
}

// SetConformingPkts sets the value of the leaf ConformingPkts in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) SetConformingPkts(v uint64) {
	t.ConformingPkts = &v
}

// SetExceedingOctets sets the value of the leaf ExceedingOctets in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) SetExceedingOctets(v uint64) {
	t.ExceedingOctets = &v
}

// SetExceedingPkts sets the value of the leaf ExceedingPkts in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) SetExceedingPkts(v uint64) {
	t.ExceedingPkts = &v
}

// SetSequence sets the value of the leaf Sequence in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) SetSequence(v uint32) {
	t.Sequence = &v
}

// SetViolatingOctets sets the value of the leaf ViolatingOctets in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) SetViolatingOctets(v uint64) {
	t.ViolatingOctets = &v
}

// SetViolatingPkts sets the value of the leaf ViolatingPkts in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) SetViolatingPkts(v uint64) {
	t.ViolatingPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_SchedulerPolicy_Scheduler.
func (*Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_VoqInterface represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterface struct {
	Name  *string                                            `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Queue map[string]*Qos_Interface_Input_VoqInterface_Queue `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input_VoqInterface struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_VoqInterface) NewQueue(Name string) (*Qos_Interface_Input_VoqInterface_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_VoqInterface_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Input_VoqInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_VoqInterface) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueueMap returns the list (map) from Qos_Interface_Input_VoqInterface.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Input_VoqInterface) GetOrCreateQueueMap() map[string]*Qos_Interface_Input_VoqInterface_Queue {
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}
	return t.Queue
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_VoqInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_VoqInterface) GetOrCreateQueue(Name string) *Qos_Interface_Input_VoqInterface_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input_VoqInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_VoqInterface) GetQueue(Name string) *Qos_Interface_Input_VoqInterface_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Input_VoqInterface. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_VoqInterface) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Input_VoqInterface_Queue struct to the
// list Queue of Qos_Interface_Input_VoqInterface. If the key value(s) specified in
// the supplied Qos_Interface_Input_VoqInterface_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_VoqInterface) AppendQueue(v *Qos_Interface_Input_VoqInterface_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_VoqInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Qos_Interface_Input_VoqInterface
// struct.
func (t *Qos_Interface_Input_VoqInterface) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_VoqInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_VoqInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_VoqInterface.
func (*Qos_Interface_Input_VoqInterface) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_VoqInterface_Queue represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue struct {
	AvgQueueLen       *uint64 `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	DroppedOctets     *uint64 `path:"state/dropped-octets" module:"openconfig-qos/openconfig-qos"`
	DroppedPkts       *uint64 `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	EcnMarkedOctets   *uint64 `path:"state/ecn-marked-octets" module:"openconfig-qos/openconfig-qos"`
	EcnMarkedPkts     *uint64 `path:"state/ecn-marked-pkts" module:"openconfig-qos/openconfig-qos"`
	EcnSelectedOctets *uint64 `path:"state/ecn-selected-octets" module:"openconfig-qos/openconfig-qos"`
	EcnSelectedPkts   *uint64 `path:"state/ecn-selected-pkts" module:"openconfig-qos/openconfig-qos"`
	MaxQueueLen       *uint64 `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	Name              *string `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	TransmitOctets    *uint64 `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	TransmitPkts      *uint64 `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedOctets retrieves the value of the leaf DroppedOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedOctets is set, it can
// safely use t.GetDroppedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetDroppedOctets() uint64 {
	if t == nil || t.DroppedOctets == nil {
		return 0
	}
	return *t.DroppedOctets
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetEcnMarkedOctets retrieves the value of the leaf EcnMarkedOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedOctets is set, it can
// safely use t.GetEcnMarkedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnMarkedOctets() uint64 {
	if t == nil || t.EcnMarkedOctets == nil {
		return 0
	}
	return *t.EcnMarkedOctets
}

// GetEcnMarkedPkts retrieves the value of the leaf EcnMarkedPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedPkts is set, it can
// safely use t.GetEcnMarkedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnMarkedPkts() uint64 {
	if t == nil || t.EcnMarkedPkts == nil {
		return 0
	}
	return *t.EcnMarkedPkts
}

// GetEcnSelectedOctets retrieves the value of the leaf EcnSelectedOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedOctets is set, it can
// safely use t.GetEcnSelectedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnSelectedOctets() uint64 {
	if t == nil || t.EcnSelectedOctets == nil {
		return 0
	}
	return *t.EcnSelectedOctets
}

// GetEcnSelectedPkts retrieves the value of the leaf EcnSelectedPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedPkts is set, it can
// safely use t.GetEcnSelectedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnSelectedPkts() uint64 {
	if t == nil || t.EcnSelectedPkts == nil {
		return 0
	}
	return *t.EcnSelectedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// SetAvgQueueLen sets the value of the leaf AvgQueueLen in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetAvgQueueLen(v uint64) {
	t.AvgQueueLen = &v
}

// SetDroppedOctets sets the value of the leaf DroppedOctets in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetDroppedOctets(v uint64) {
	t.DroppedOctets = &v
}

// SetDroppedPkts sets the value of the leaf DroppedPkts in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetDroppedPkts(v uint64) {
	t.DroppedPkts = &v
}

// SetEcnMarkedOctets sets the value of the leaf EcnMarkedOctets in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetEcnMarkedOctets(v uint64) {
	t.EcnMarkedOctets = &v
}

// SetEcnMarkedPkts sets the value of the leaf EcnMarkedPkts in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetEcnMarkedPkts(v uint64) {
	t.EcnMarkedPkts = &v
}

// SetEcnSelectedOctets sets the value of the leaf EcnSelectedOctets in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetEcnSelectedOctets(v uint64) {
	t.EcnSelectedOctets = &v
}

// SetEcnSelectedPkts sets the value of the leaf EcnSelectedPkts in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetEcnSelectedPkts(v uint64) {
	t.EcnSelectedPkts = &v
}

// SetMaxQueueLen sets the value of the leaf MaxQueueLen in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetMaxQueueLen(v uint64) {
	t.MaxQueueLen = &v
}

// SetName sets the value of the leaf Name in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetName(v string) {
	t.Name = &v
}

// SetTransmitOctets sets the value of the leaf TransmitOctets in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetTransmitOctets(v uint64) {
	t.TransmitOctets = &v
}

// SetTransmitPkts sets the value of the leaf TransmitPkts in the Qos_Interface_Input_VoqInterface_Queue
// struct.
func (t *Qos_Interface_Input_VoqInterface_Queue) SetTransmitPkts(v uint64) {
	t.TransmitPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_VoqInterface_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_VoqInterface_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_VoqInterface_Queue.
func (*Qos_Interface_Input_VoqInterface_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_InterfaceRef represents the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-qos/openconfig-qos" shadow-path:"config/interface" shadow-module:"openconfig-qos/openconfig-qos"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-qos/openconfig-qos" shadow-path:"config/subinterface" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Qos_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Qos_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the Qos_Interface_InterfaceRef
// struct.
func (t *Qos_Interface_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the Qos_Interface_InterfaceRef
// struct.
func (t *Qos_Interface_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_InterfaceRef.
func (*Qos_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output represents the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_Output struct {
	BufferAllocationProfile          *string                                                      `path:"state/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Classifier                       map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	MulticastBufferAllocationProfile *string                                                      `path:"state/multicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/multicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Queue                            map[string]*Qos_Interface_Output_Queue                       `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	SchedulerPolicy                  *Qos_Interface_Output_SchedulerPolicy                        `path:"scheduler-policy" module:"openconfig-qos"`
	UnicastBufferAllocationProfile   *string                                                      `path:"state/unicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/unicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Output_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Output_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos_Interface_Output struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output) RenameClassifier(oldK, newK E_Input_Classifier_Type) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Type = newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifierMap returns the list (map) from Qos_Interface_Output.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Output) GetOrCreateClassifierMap() map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier {
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}
	return t.Classifier
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Output_Classifier {

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Output_Classifier {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos_Interface_Output. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output) DeleteClassifier(Type E_Input_Classifier_Type) {
	key := Type

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Interface_Output_Classifier struct to the
// list Classifier of Qos_Interface_Output. If the key value(s) specified in
// the supplied Qos_Interface_Output_Classifier already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output) AppendClassifier(v *Qos_Interface_Output_Classifier) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewQueue(Name string) (*Qos_Interface_Output_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Output_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Output struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueueMap returns the list (map) from Qos_Interface_Output.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Output) GetOrCreateQueueMap() map[string]*Qos_Interface_Output_Queue {
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}
	return t.Queue
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateQueue(Name string) *Qos_Interface_Output_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetQueue(Name string) *Qos_Interface_Output_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Output. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Output_Queue struct to the
// list Queue of Qos_Interface_Output. If the key value(s) specified in
// the supplied Qos_Interface_Output_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output) AppendQueue(v *Qos_Interface_Output_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Output) GetOrCreateSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Output_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Output. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Output) GetSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetBufferAllocationProfile retrieves the value of the leaf BufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocationProfile is set, it can
// safely use t.GetBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetBufferAllocationProfile() string {
	if t == nil || t.BufferAllocationProfile == nil {
		return ""
	}
	return *t.BufferAllocationProfile
}

// GetMulticastBufferAllocationProfile retrieves the value of the leaf MulticastBufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastBufferAllocationProfile is set, it can
// safely use t.GetMulticastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetMulticastBufferAllocationProfile() string {
	if t == nil || t.MulticastBufferAllocationProfile == nil {
		return ""
	}
	return *t.MulticastBufferAllocationProfile
}

// GetUnicastBufferAllocationProfile retrieves the value of the leaf UnicastBufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastBufferAllocationProfile is set, it can
// safely use t.GetUnicastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetUnicastBufferAllocationProfile() string {
	if t == nil || t.UnicastBufferAllocationProfile == nil {
		return ""
	}
	return *t.UnicastBufferAllocationProfile
}

// SetBufferAllocationProfile sets the value of the leaf BufferAllocationProfile in the Qos_Interface_Output
// struct.
func (t *Qos_Interface_Output) SetBufferAllocationProfile(v string) {
	t.BufferAllocationProfile = &v
}

// SetMulticastBufferAllocationProfile sets the value of the leaf MulticastBufferAllocationProfile in the Qos_Interface_Output
// struct.
func (t *Qos_Interface_Output) SetMulticastBufferAllocationProfile(v string) {
	t.MulticastBufferAllocationProfile = &v
}

// SetUnicastBufferAllocationProfile sets the value of the leaf UnicastBufferAllocationProfile in the Qos_Interface_Output
// struct.
func (t *Qos_Interface_Output) SetUnicastBufferAllocationProfile(v string) {
	t.UnicastBufferAllocationProfile = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SchedulerPolicy.PopulateDefaults()
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output.
func (*Qos_Interface_Output) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Classifier represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_Classifier struct {
	Name *string                                          `path:"state/name" module:"openconfig-qos/openconfig-qos" shadow-path:"config/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Term map[string]*Qos_Interface_Output_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	Type E_Input_Classifier_Type                          `path:"state/type|type" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/type|type" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Output_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_Classifier) NewTerm(Id string) (*Qos_Interface_Output_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Output_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Interface_Output_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTermMap returns the list (map) from Qos_Interface_Output_Classifier.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Output_Classifier) GetOrCreateTermMap() map[string]*Qos_Interface_Output_Classifier_Term {
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}
	return t.Term
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_Classifier) GetOrCreateTerm(Id string) *Qos_Interface_Output_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Output_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_Classifier) GetTerm(Id string) *Qos_Interface_Output_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Interface_Output_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Interface_Output_Classifier_Term struct to the
// list Term of Qos_Interface_Output_Classifier. If the key value(s) specified in
// the supplied Qos_Interface_Output_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output_Classifier) AppendTerm(v *Qos_Interface_Output_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Interface_Output_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier) GetType() E_Input_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetName sets the value of the leaf Name in the Qos_Interface_Output_Classifier
// struct.
func (t *Qos_Interface_Output_Classifier) SetName(v string) {
	t.Name = &v
}

// SetType sets the value of the leaf Type in the Qos_Interface_Output_Classifier
// struct.
func (t *Qos_Interface_Output_Classifier) SetType(v E_Input_Classifier_Type) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Term {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Classifier.
func (*Qos_Interface_Output_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_Term struct {
	Id             *string `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"id" shadow-module:"openconfig-qos"`
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-qos/openconfig-qos"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier_Term) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// SetId sets the value of the leaf Id in the Qos_Interface_Output_Classifier_Term
// struct.
func (t *Qos_Interface_Output_Classifier_Term) SetId(v string) {
	t.Id = &v
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the Qos_Interface_Output_Classifier_Term
// struct.
func (t *Qos_Interface_Output_Classifier_Term) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the Qos_Interface_Output_Classifier_Term
// struct.
func (t *Qos_Interface_Output_Classifier_Term) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_Classifier_Term
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_Classifier_Term) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Classifier_Term.
func (*Qos_Interface_Output_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Queue represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_Queue struct {
	AvgQueueLen            *uint64 `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	DroppedOctets          *uint64 `path:"state/dropped-octets" module:"openconfig-qos/openconfig-qos"`
	DroppedPkts            *uint64 `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	EcnMarkedOctets        *uint64 `path:"state/ecn-marked-octets" module:"openconfig-qos/openconfig-qos"`
	EcnMarkedPkts          *uint64 `path:"state/ecn-marked-pkts" module:"openconfig-qos/openconfig-qos"`
	EcnSelectedOctets      *uint64 `path:"state/ecn-selected-octets" module:"openconfig-qos/openconfig-qos"`
	EcnSelectedPkts        *uint64 `path:"state/ecn-selected-pkts" module:"openconfig-qos/openconfig-qos"`
	MaxQueueLen            *uint64 `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	Name                   *string `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	QueueManagementProfile *string `path:"state/queue-management-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"config/queue-management-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	TransmitOctets         *uint64 `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	TransmitPkts           *uint64 `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedOctets retrieves the value of the leaf DroppedOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedOctets is set, it can
// safely use t.GetDroppedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetDroppedOctets() uint64 {
	if t == nil || t.DroppedOctets == nil {
		return 0
	}
	return *t.DroppedOctets
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetEcnMarkedOctets retrieves the value of the leaf EcnMarkedOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedOctets is set, it can
// safely use t.GetEcnMarkedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnMarkedOctets() uint64 {
	if t == nil || t.EcnMarkedOctets == nil {
		return 0
	}
	return *t.EcnMarkedOctets
}

// GetEcnMarkedPkts retrieves the value of the leaf EcnMarkedPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedPkts is set, it can
// safely use t.GetEcnMarkedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnMarkedPkts() uint64 {
	if t == nil || t.EcnMarkedPkts == nil {
		return 0
	}
	return *t.EcnMarkedPkts
}

// GetEcnSelectedOctets retrieves the value of the leaf EcnSelectedOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedOctets is set, it can
// safely use t.GetEcnSelectedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnSelectedOctets() uint64 {
	if t == nil || t.EcnSelectedOctets == nil {
		return 0
	}
	return *t.EcnSelectedOctets
}

// GetEcnSelectedPkts retrieves the value of the leaf EcnSelectedPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedPkts is set, it can
// safely use t.GetEcnSelectedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnSelectedPkts() uint64 {
	if t == nil || t.EcnSelectedPkts == nil {
		return 0
	}
	return *t.EcnSelectedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueManagementProfile retrieves the value of the leaf QueueManagementProfile from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueManagementProfile is set, it can
// safely use t.GetQueueManagementProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueManagementProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetQueueManagementProfile() string {
	if t == nil || t.QueueManagementProfile == nil {
		return ""
	}
	return *t.QueueManagementProfile
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// SetAvgQueueLen sets the value of the leaf AvgQueueLen in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetAvgQueueLen(v uint64) {
	t.AvgQueueLen = &v
}

// SetDroppedOctets sets the value of the leaf DroppedOctets in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetDroppedOctets(v uint64) {
	t.DroppedOctets = &v
}

// SetDroppedPkts sets the value of the leaf DroppedPkts in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetDroppedPkts(v uint64) {
	t.DroppedPkts = &v
}

// SetEcnMarkedOctets sets the value of the leaf EcnMarkedOctets in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetEcnMarkedOctets(v uint64) {
	t.EcnMarkedOctets = &v
}

// SetEcnMarkedPkts sets the value of the leaf EcnMarkedPkts in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetEcnMarkedPkts(v uint64) {
	t.EcnMarkedPkts = &v
}

// SetEcnSelectedOctets sets the value of the leaf EcnSelectedOctets in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetEcnSelectedOctets(v uint64) {
	t.EcnSelectedOctets = &v
}

// SetEcnSelectedPkts sets the value of the leaf EcnSelectedPkts in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetEcnSelectedPkts(v uint64) {
	t.EcnSelectedPkts = &v
}

// SetMaxQueueLen sets the value of the leaf MaxQueueLen in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetMaxQueueLen(v uint64) {
	t.MaxQueueLen = &v
}

// SetName sets the value of the leaf Name in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetName(v string) {
	t.Name = &v
}

// SetQueueManagementProfile sets the value of the leaf QueueManagementProfile in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetQueueManagementProfile(v string) {
	t.QueueManagementProfile = &v
}

// SetTransmitOctets sets the value of the leaf TransmitOctets in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetTransmitOctets(v uint64) {
	t.TransmitOctets = &v
}

// SetTransmitPkts sets the value of the leaf TransmitPkts in the Qos_Interface_Output_Queue
// struct.
func (t *Qos_Interface_Output_Queue) SetTransmitPkts(v uint64) {
	t.TransmitPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Queue.
func (*Qos_Interface_Output_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicy struct {
	Name      *string                                                    `path:"state/name" module:"openconfig-qos/openconfig-qos" shadow-path:"config/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Scheduler map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Output_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Output_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Output_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_Interface_Output_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateSchedulerMap returns the list (map) from Qos_Interface_Output_SchedulerPolicy.
//
// It initializes the field if not already initialized.
func (t *Qos_Interface_Output_SchedulerPolicy) GetOrCreateSchedulerMap() map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler {
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}
	return t.Scheduler
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Output_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_Interface_Output_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_Interface_Output_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_Interface_Output_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_Interface_Output_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output_SchedulerPolicy) AppendScheduler(v *Qos_Interface_Output_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Qos_Interface_Output_SchedulerPolicy
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_SchedulerPolicy.
func (*Qos_Interface_Output_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler struct {
	ConformingOctets *uint64 `path:"state/conforming-octets" module:"openconfig-qos/openconfig-qos"`
	ConformingPkts   *uint64 `path:"state/conforming-pkts" module:"openconfig-qos/openconfig-qos"`
	ExceedingOctets  *uint64 `path:"state/exceeding-octets" module:"openconfig-qos/openconfig-qos"`
	ExceedingPkts    *uint64 `path:"state/exceeding-pkts" module:"openconfig-qos/openconfig-qos"`
	Sequence         *uint32 `path:"state/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"sequence" shadow-module:"openconfig-qos"`
	ViolatingOctets  *uint64 `path:"state/violating-octets" module:"openconfig-qos/openconfig-qos"`
	ViolatingPkts    *uint64 `path:"state/violating-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// GetConformingOctets retrieves the value of the leaf ConformingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingOctets is set, it can
// safely use t.GetConformingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetConformingOctets() uint64 {
	if t == nil || t.ConformingOctets == nil {
		return 0
	}
	return *t.ConformingOctets
}

// GetConformingPkts retrieves the value of the leaf ConformingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingPkts is set, it can
// safely use t.GetConformingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetConformingPkts() uint64 {
	if t == nil || t.ConformingPkts == nil {
		return 0
	}
	return *t.ConformingPkts
}

// GetExceedingOctets retrieves the value of the leaf ExceedingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingOctets is set, it can
// safely use t.GetExceedingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetExceedingOctets() uint64 {
	if t == nil || t.ExceedingOctets == nil {
		return 0
	}
	return *t.ExceedingOctets
}

// GetExceedingPkts retrieves the value of the leaf ExceedingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingPkts is set, it can
// safely use t.GetExceedingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetExceedingPkts() uint64 {
	if t == nil || t.ExceedingPkts == nil {
		return 0
	}
	return *t.ExceedingPkts
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetViolatingOctets retrieves the value of the leaf ViolatingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingOctets is set, it can
// safely use t.GetViolatingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetViolatingOctets() uint64 {
	if t == nil || t.ViolatingOctets == nil {
		return 0
	}
	return *t.ViolatingOctets
}

// GetViolatingPkts retrieves the value of the leaf ViolatingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingPkts is set, it can
// safely use t.GetViolatingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetViolatingPkts() uint64 {
	if t == nil || t.ViolatingPkts == nil {
		return 0
	}
	return *t.ViolatingPkts
}

// SetConformingOctets sets the value of the leaf ConformingOctets in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) SetConformingOctets(v uint64) {
	t.ConformingOctets = &v
}

// SetConformingPkts sets the value of the leaf ConformingPkts in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) SetConformingPkts(v uint64) {
	t.ConformingPkts = &v
}

// SetExceedingOctets sets the value of the leaf ExceedingOctets in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) SetExceedingOctets(v uint64) {
	t.ExceedingOctets = &v
}

// SetExceedingPkts sets the value of the leaf ExceedingPkts in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) SetExceedingPkts(v uint64) {
	t.ExceedingPkts = &v
}

// SetSequence sets the value of the leaf Sequence in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) SetSequence(v uint32) {
	t.Sequence = &v
}

// SetViolatingOctets sets the value of the leaf ViolatingOctets in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) SetViolatingOctets(v uint64) {
	t.ViolatingOctets = &v
}

// SetViolatingPkts sets the value of the leaf ViolatingPkts in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) SetViolatingPkts(v uint64) {
	t.ViolatingPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_SchedulerPolicy_Scheduler.
func (*Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Queue represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_Queue struct {
	Name    *string `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	QueueId *uint8  `path:"state/queue-id" module:"openconfig-qos/openconfig-qos" shadow-path:"config/queue-id" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Queue) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the Qos_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueId retrieves the value of the leaf QueueId from the Qos_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *Qos_Queue) GetQueueId() uint8 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// SetName sets the value of the leaf Name in the Qos_Queue
// struct.
func (t *Qos_Queue) SetName(v string) {
	t.Name = &v
}

// SetQueueId sets the value of the leaf QueueId in the Qos_Queue
// struct.
func (t *Qos_Queue) SetQueueId(v uint8) {
	t.QueueId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Queue struct, which is a YANG list entry.
func (t *Qos_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Queue.
func (*Qos_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfile struct {
	Name *string                          `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Red  *Qos_QueueManagementProfile_Red  `path:"red" module:"openconfig-qos"`
	Wred *Qos_QueueManagementProfile_Wred `path:"wred" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile) IsYANGGoStruct() {}

// GetOrCreateRed retrieves the value of the Red field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile) GetOrCreateRed() *Qos_QueueManagementProfile_Red {
	if t.Red != nil {
		return t.Red
	}
	t.Red = &Qos_QueueManagementProfile_Red{}
	return t.Red
}

// GetOrCreateWred retrieves the value of the Wred field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile) GetOrCreateWred() *Qos_QueueManagementProfile_Wred {
	if t.Wred != nil {
		return t.Wred
	}
	t.Wred = &Qos_QueueManagementProfile_Wred{}
	return t.Wred
}

// GetRed returns the value of the Red struct pointer
// from Qos_QueueManagementProfile. If the receiver or the field Red is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile) GetRed() *Qos_QueueManagementProfile_Red {
	if t != nil && t.Red != nil {
		return t.Red
	}
	return nil
}

// GetWred returns the value of the Wred struct pointer
// from Qos_QueueManagementProfile. If the receiver or the field Wred is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile) GetWred() *Qos_QueueManagementProfile_Wred {
	if t != nil && t.Wred != nil {
		return t.Wred
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_QueueManagementProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Qos_QueueManagementProfile
// struct.
func (t *Qos_QueueManagementProfile) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Red.PopulateDefaults()
	t.Wred.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Qos_QueueManagementProfile struct, which is a YANG list entry.
func (t *Qos_QueueManagementProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile.
func (*Qos_QueueManagementProfile) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Red represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_Red struct {
	Uniform *Qos_QueueManagementProfile_Red_Uniform `path:"uniform" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Red implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Red) IsYANGGoStruct() {}

// GetOrCreateUniform retrieves the value of the Uniform field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile_Red) GetOrCreateUniform() *Qos_QueueManagementProfile_Red_Uniform {
	if t.Uniform != nil {
		return t.Uniform
	}
	t.Uniform = &Qos_QueueManagementProfile_Red_Uniform{}
	return t.Uniform
}

// GetUniform returns the value of the Uniform struct pointer
// from Qos_QueueManagementProfile_Red. If the receiver or the field Uniform is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile_Red) GetUniform() *Qos_QueueManagementProfile_Red_Uniform {
	if t != nil && t.Uniform != nil {
		return t.Uniform
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Red
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Red) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Uniform.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Red"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Red) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Red.
func (*Qos_QueueManagementProfile_Red) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Red_Uniform represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform struct {
	Drop                *bool   `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	EnableEcn           *bool   `path:"state/enable-ecn" module:"openconfig-qos/openconfig-qos" shadow-path:"config/enable-ecn" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxThreshold        *uint64 `path:"state/max-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxThresholdPercent *uint64 `path:"state/max-threshold-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-threshold-percent" shadow-module:"openconfig-qos/openconfig-qos"`
	MinThreshold        *uint64 `path:"state/min-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"config/min-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
	MinThresholdPercent *uint64 `path:"state/min-threshold-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"config/min-threshold-percent" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Red_Uniform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Red_Uniform) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetEnableEcn retrieves the value of the leaf EnableEcn from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableEcn is set, it can
// safely use t.GetEnableEcn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableEcn == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetEnableEcn() bool {
	if t == nil || t.EnableEcn == nil {
		return false
	}
	return *t.EnableEcn
}

// GetMaxThreshold retrieves the value of the leaf MaxThreshold from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThreshold is set, it can
// safely use t.GetMaxThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMaxThreshold() uint64 {
	if t == nil || t.MaxThreshold == nil {
		return 0
	}
	return *t.MaxThreshold
}

// GetMaxThresholdPercent retrieves the value of the leaf MaxThresholdPercent from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThresholdPercent is set, it can
// safely use t.GetMaxThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMaxThresholdPercent() uint64 {
	if t == nil || t.MaxThresholdPercent == nil {
		return 0
	}
	return *t.MaxThresholdPercent
}

// GetMinThreshold retrieves the value of the leaf MinThreshold from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshold is set, it can
// safely use t.GetMinThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMinThreshold() uint64 {
	if t == nil || t.MinThreshold == nil {
		return 0
	}
	return *t.MinThreshold
}

// GetMinThresholdPercent retrieves the value of the leaf MinThresholdPercent from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdPercent is set, it can
// safely use t.GetMinThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMinThresholdPercent() uint64 {
	if t == nil || t.MinThresholdPercent == nil {
		return 0
	}
	return *t.MinThresholdPercent
}

// SetDrop sets the value of the leaf Drop in the Qos_QueueManagementProfile_Red_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Red_Uniform) SetDrop(v bool) {
	t.Drop = &v
}

// SetEnableEcn sets the value of the leaf EnableEcn in the Qos_QueueManagementProfile_Red_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Red_Uniform) SetEnableEcn(v bool) {
	t.EnableEcn = &v
}

// SetMaxThreshold sets the value of the leaf MaxThreshold in the Qos_QueueManagementProfile_Red_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Red_Uniform) SetMaxThreshold(v uint64) {
	t.MaxThreshold = &v
}

// SetMaxThresholdPercent sets the value of the leaf MaxThresholdPercent in the Qos_QueueManagementProfile_Red_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Red_Uniform) SetMaxThresholdPercent(v uint64) {
	t.MaxThresholdPercent = &v
}

// SetMinThreshold sets the value of the leaf MinThreshold in the Qos_QueueManagementProfile_Red_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Red_Uniform) SetMinThreshold(v uint64) {
	t.MinThreshold = &v
}

// SetMinThresholdPercent sets the value of the leaf MinThresholdPercent in the Qos_QueueManagementProfile_Red_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Red_Uniform) SetMinThresholdPercent(v uint64) {
	t.MinThresholdPercent = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Red_Uniform
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Red_Uniform) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drop == nil {
		var v bool = false
		t.Drop = &v
	}
	if t.EnableEcn == nil {
		var v bool = false
		t.EnableEcn = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red_Uniform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Red_Uniform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red_Uniform) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Red_Uniform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Red_Uniform.
func (*Qos_QueueManagementProfile_Red_Uniform) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Wred represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_Wred struct {
	Uniform *Qos_QueueManagementProfile_Wred_Uniform `path:"uniform" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Wred implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Wred) IsYANGGoStruct() {}

// GetOrCreateUniform retrieves the value of the Uniform field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile_Wred) GetOrCreateUniform() *Qos_QueueManagementProfile_Wred_Uniform {
	if t.Uniform != nil {
		return t.Uniform
	}
	t.Uniform = &Qos_QueueManagementProfile_Wred_Uniform{}
	return t.Uniform
}

// GetUniform returns the value of the Uniform struct pointer
// from Qos_QueueManagementProfile_Wred. If the receiver or the field Uniform is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile_Wred) GetUniform() *Qos_QueueManagementProfile_Wred_Uniform {
	if t != nil && t.Uniform != nil {
		return t.Uniform
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Wred
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Wred) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Uniform.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Wred"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Wred) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Wred.
func (*Qos_QueueManagementProfile_Wred) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Wred_Uniform represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform struct {
	Drop                      *bool   `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	EnableEcn                 *bool   `path:"state/enable-ecn" module:"openconfig-qos/openconfig-qos" shadow-path:"config/enable-ecn" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxDropProbabilityPercent *uint8  `path:"state/max-drop-probability-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-drop-probability-percent" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxThreshold              *uint64 `path:"state/max-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxThresholdPercent       *uint64 `path:"state/max-threshold-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-threshold-percent" shadow-module:"openconfig-qos/openconfig-qos"`
	MinThreshold              *uint64 `path:"state/min-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"config/min-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
	MinThresholdPercent       *uint64 `path:"state/min-threshold-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"config/min-threshold-percent" shadow-module:"openconfig-qos/openconfig-qos"`
	Weight                    *uint32 `path:"state/weight" module:"openconfig-qos/openconfig-qos" shadow-path:"config/weight" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Wred_Uniform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Wred_Uniform) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetEnableEcn retrieves the value of the leaf EnableEcn from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableEcn is set, it can
// safely use t.GetEnableEcn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableEcn == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetEnableEcn() bool {
	if t == nil || t.EnableEcn == nil {
		return false
	}
	return *t.EnableEcn
}

// GetMaxDropProbabilityPercent retrieves the value of the leaf MaxDropProbabilityPercent from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDropProbabilityPercent is set, it can
// safely use t.GetMaxDropProbabilityPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDropProbabilityPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxDropProbabilityPercent() uint8 {
	if t == nil || t.MaxDropProbabilityPercent == nil {
		return 0
	}
	return *t.MaxDropProbabilityPercent
}

// GetMaxThreshold retrieves the value of the leaf MaxThreshold from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThreshold is set, it can
// safely use t.GetMaxThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxThreshold() uint64 {
	if t == nil || t.MaxThreshold == nil {
		return 0
	}
	return *t.MaxThreshold
}

// GetMaxThresholdPercent retrieves the value of the leaf MaxThresholdPercent from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThresholdPercent is set, it can
// safely use t.GetMaxThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxThresholdPercent() uint64 {
	if t == nil || t.MaxThresholdPercent == nil {
		return 0
	}
	return *t.MaxThresholdPercent
}

// GetMinThreshold retrieves the value of the leaf MinThreshold from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshold is set, it can
// safely use t.GetMinThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMinThreshold() uint64 {
	if t == nil || t.MinThreshold == nil {
		return 0
	}
	return *t.MinThreshold
}

// GetMinThresholdPercent retrieves the value of the leaf MinThresholdPercent from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdPercent is set, it can
// safely use t.GetMinThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMinThresholdPercent() uint64 {
	if t == nil || t.MinThresholdPercent == nil {
		return 0
	}
	return *t.MinThresholdPercent
}

// GetWeight retrieves the value of the leaf Weight from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// SetDrop sets the value of the leaf Drop in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetDrop(v bool) {
	t.Drop = &v
}

// SetEnableEcn sets the value of the leaf EnableEcn in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetEnableEcn(v bool) {
	t.EnableEcn = &v
}

// SetMaxDropProbabilityPercent sets the value of the leaf MaxDropProbabilityPercent in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetMaxDropProbabilityPercent(v uint8) {
	t.MaxDropProbabilityPercent = &v
}

// SetMaxThreshold sets the value of the leaf MaxThreshold in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetMaxThreshold(v uint64) {
	t.MaxThreshold = &v
}

// SetMaxThresholdPercent sets the value of the leaf MaxThresholdPercent in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetMaxThresholdPercent(v uint64) {
	t.MaxThresholdPercent = &v
}

// SetMinThreshold sets the value of the leaf MinThreshold in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetMinThreshold(v uint64) {
	t.MinThreshold = &v
}

// SetMinThresholdPercent sets the value of the leaf MinThresholdPercent in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetMinThresholdPercent(v uint64) {
	t.MinThresholdPercent = &v
}

// SetWeight sets the value of the leaf Weight in the Qos_QueueManagementProfile_Wred_Uniform
// struct.
func (t *Qos_QueueManagementProfile_Wred_Uniform) SetWeight(v uint32) {
	t.Weight = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Wred_Uniform
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Wred_Uniform) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drop == nil {
		var v bool = false
		t.Drop = &v
	}
	if t.EnableEcn == nil {
		var v bool = false
		t.EnableEcn = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred_Uniform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Wred_Uniform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred_Uniform) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Wred_Uniform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Wred_Uniform.
func (*Qos_QueueManagementProfile_Wred_Uniform) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicy struct {
	Name      *string                                   `path:"state/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Scheduler map[uint32]*Qos_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateSchedulerMap returns the list (map) from Qos_SchedulerPolicy.
//
// It initializes the field if not already initialized.
func (t *Qos_SchedulerPolicy) GetOrCreateSchedulerMap() map[uint32]*Qos_SchedulerPolicy_Scheduler {
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}
	return t.Scheduler
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_SchedulerPolicy) AppendScheduler(v *Qos_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Qos_SchedulerPolicy
// struct.
func (t *Qos_SchedulerPolicy) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy.
func (*Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler struct {
	Input             map[string]*Qos_SchedulerPolicy_Scheduler_Input  `path:"inputs/input" module:"openconfig-qos/openconfig-qos"`
	OneRateTwoColor   *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor   `path:"one-rate-two-color" module:"openconfig-qos"`
	Output            *Qos_SchedulerPolicy_Scheduler_Output            `path:"output" module:"openconfig-qos"`
	Priority          E_Scheduler_Priority                             `path:"state/priority" module:"openconfig-qos/openconfig-qos" shadow-path:"config/priority" shadow-module:"openconfig-qos/openconfig-qos"`
	Sequence          *uint32                                          `path:"state/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/sequence|sequence" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	TwoRateThreeColor *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor `path:"two-rate-three-color" module:"openconfig-qos"`
	Type              E_QosTypes_QOS_SCHEDULER_TYPE                    `path:"state/type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// NewInput creates a new entry in the Input list of the
// Qos_SchedulerPolicy_Scheduler struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy_Scheduler) NewInput(Id string) (*Qos_SchedulerPolicy_Scheduler_Input, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Input[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Input", key)
	}

	t.Input[key] = &Qos_SchedulerPolicy_Scheduler_Input{
		Id: &Id,
	}

	return t.Input[key], nil
}

// RenameInput renames an entry in the list Input within
// the Qos_SchedulerPolicy_Scheduler struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_SchedulerPolicy_Scheduler) RenameInput(oldK, newK string) error {
	if _, ok := t.Input[newK]; ok {
		return fmt.Errorf("key %v already exists in Input", newK)
	}

	e, ok := t.Input[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Input", oldK)
	}
	e.Id = &newK

	t.Input[newK] = e
	delete(t.Input, oldK)
	return nil
}

// GetOrCreateInputMap returns the list (map) from Qos_SchedulerPolicy_Scheduler.
//
// It initializes the field if not already initialized.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateInputMap() map[string]*Qos_SchedulerPolicy_Scheduler_Input {
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}
	return t.Input
}

// GetOrCreateInput retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy_Scheduler. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateInput(Id string) *Qos_SchedulerPolicy_Scheduler_Input {

	key := Id

	if v, ok := t.Input[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInput(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInput got unexpected error: %v", err))
	}
	return v
}

// GetInput retrieves the value with the specified key from
// the Input map field of Qos_SchedulerPolicy_Scheduler. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetInput(Id string) *Qos_SchedulerPolicy_Scheduler_Input {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Input[key]; ok {
		return lm
	}
	return nil
}

// DeleteInput deletes the value with the specified keys from
// the receiver Qos_SchedulerPolicy_Scheduler. If there is no such element, the function
// is a no-op.
func (t *Qos_SchedulerPolicy_Scheduler) DeleteInput(Id string) {
	key := Id

	delete(t.Input, key)
}

// AppendInput appends the supplied Qos_SchedulerPolicy_Scheduler_Input struct to the
// list Input of Qos_SchedulerPolicy_Scheduler. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy_Scheduler_Input already exist in the list, an error is
// returned.
func (t *Qos_SchedulerPolicy_Scheduler) AppendInput(v *Qos_SchedulerPolicy_Scheduler_Input) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}

	if _, ok := t.Input[key]; ok {
		return fmt.Errorf("duplicate key for list Input %v", key)
	}

	t.Input[key] = v
	return nil
}

// GetOrCreateOneRateTwoColor retrieves the value of the OneRateTwoColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	t.OneRateTwoColor = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor{}
	return t.OneRateTwoColor
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_SchedulerPolicy_Scheduler_Output{}
	return t.Output
}

// GetOrCreateTwoRateThreeColor retrieves the value of the TwoRateThreeColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	t.TwoRateThreeColor = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor{}
	return t.TwoRateThreeColor
}

// GetOneRateTwoColor returns the value of the OneRateTwoColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field OneRateTwoColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t != nil && t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetTwoRateThreeColor returns the value of the TwoRateThreeColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field TwoRateThreeColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t != nil && t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	return nil
}

// GetPriority retrieves the value of the leaf Priority from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetPriority() E_Scheduler_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetType retrieves the value of the leaf Type from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetType() E_QosTypes_QOS_SCHEDULER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetPriority sets the value of the leaf Priority in the Qos_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_SchedulerPolicy_Scheduler) SetPriority(v E_Scheduler_Priority) {
	t.Priority = v
}

// SetSequence sets the value of the leaf Sequence in the Qos_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_SchedulerPolicy_Scheduler) SetSequence(v uint32) {
	t.Sequence = &v
}

// SetType sets the value of the leaf Type in the Qos_SchedulerPolicy_Scheduler
// struct.
func (t *Qos_SchedulerPolicy_Scheduler) SetType(v E_QosTypes_QOS_SCHEDULER_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OneRateTwoColor.PopulateDefaults()
	t.Output.PopulateDefaults()
	t.TwoRateThreeColor.PopulateDefaults()
	for _, e := range t.Input {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler.
func (*Qos_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_Input represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input struct {
	Id        *string           `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"config/id|id" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	InputType E_Input_InputType `path:"state/input-type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/input-type" shadow-module:"openconfig-qos/openconfig-qos"`
	Queue     *string           `path:"state/queue" module:"openconfig-qos/openconfig-qos" shadow-path:"config/queue" shadow-module:"openconfig-qos/openconfig-qos"`
	Weight    *uint64           `path:"state/weight" module:"openconfig-qos/openconfig-qos" shadow-path:"config/weight" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Input) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetInputType retrieves the value of the leaf InputType from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputType is set, it can
// safely use t.GetInputType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputType == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetInputType() E_Input_InputType {
	if t == nil || t.InputType == 0 {
		return 0
	}
	return t.InputType
}

// GetQueue retrieves the value of the leaf Queue from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetQueue() string {
	if t == nil || t.Queue == nil {
		return ""
	}
	return *t.Queue
}

// GetWeight retrieves the value of the leaf Weight from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetWeight() uint64 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// SetId sets the value of the leaf Id in the Qos_SchedulerPolicy_Scheduler_Input
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Input) SetId(v string) {
	t.Id = &v
}

// SetInputType sets the value of the leaf InputType in the Qos_SchedulerPolicy_Scheduler_Input
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Input) SetInputType(v E_Input_InputType) {
	t.InputType = v
}

// SetQueue sets the value of the leaf Queue in the Qos_SchedulerPolicy_Scheduler_Input
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Input) SetQueue(v string) {
	t.Queue = &v
}

// SetWeight sets the value of the leaf Weight in the Qos_SchedulerPolicy_Scheduler_Input
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Input) SetWeight(v uint64) {
	t.Weight = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_Input
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_Input) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler_Input struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_Input.
func (*Qos_SchedulerPolicy_Scheduler_Input) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor struct {
	Bc                   *uint32                                                      `path:"state/bc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/bc" shadow-module:"openconfig-qos/openconfig-qos"`
	Cir                  *uint64                                                      `path:"state/cir" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPct               *uint8                                                       `path:"state/cir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPctRemaining      *uint8                                                       `path:"state/cir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ConformAction        *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ExceedAction         *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	MaxQueueDepthBytes   *uint32                                                      `path:"state/max-queue-depth-bytes" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-queue-depth-bytes" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxQueueDepthPackets *uint32                                                      `path:"state/max-queue-depth-packets" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-queue-depth-packets" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxQueueDepthPercent *uint8                                                       `path:"state/max-queue-depth-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"config/max-queue-depth-percent" shadow-module:"openconfig-qos/openconfig-qos"`
	QueuingBehavior      E_QosTypes_QueueBehavior                                     `path:"state/queuing-behavior" module:"openconfig-qos/openconfig-qos" shadow-path:"config/queuing-behavior" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction{}
	return t.ExceedAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetBc retrieves the value of the leaf Bc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bc is set, it can
// safely use t.GetBc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetBc() uint32 {
	if t == nil || t.Bc == nil {
		return 0
	}
	return *t.Bc
}

// GetCir retrieves the value of the leaf Cir from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCir() uint64 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetCirPct retrieves the value of the leaf CirPct from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPct is set, it can
// safely use t.GetCirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCirPct() uint8 {
	if t == nil || t.CirPct == nil {
		return 0
	}
	return *t.CirPct
}

// GetCirPctRemaining retrieves the value of the leaf CirPctRemaining from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPctRemaining is set, it can
// safely use t.GetCirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCirPctRemaining() uint8 {
	if t == nil || t.CirPctRemaining == nil {
		return 0
	}
	return *t.CirPctRemaining
}

// GetMaxQueueDepthBytes retrieves the value of the leaf MaxQueueDepthBytes from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthBytes is set, it can
// safely use t.GetMaxQueueDepthBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthBytes == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthBytes() uint32 {
	if t == nil || t.MaxQueueDepthBytes == nil {
		return 0
	}
	return *t.MaxQueueDepthBytes
}

// GetMaxQueueDepthPackets retrieves the value of the leaf MaxQueueDepthPackets from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthPackets is set, it can
// safely use t.GetMaxQueueDepthPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthPackets == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthPackets() uint32 {
	if t == nil || t.MaxQueueDepthPackets == nil {
		return 0
	}
	return *t.MaxQueueDepthPackets
}

// GetMaxQueueDepthPercent retrieves the value of the leaf MaxQueueDepthPercent from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthPercent is set, it can
// safely use t.GetMaxQueueDepthPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthPercent == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthPercent() uint8 {
	if t == nil || t.MaxQueueDepthPercent == nil {
		return 0
	}
	return *t.MaxQueueDepthPercent
}

// GetQueuingBehavior retrieves the value of the leaf QueuingBehavior from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingBehavior is set, it can
// safely use t.GetQueuingBehavior() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingBehavior == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetQueuingBehavior() E_QosTypes_QueueBehavior {
	if t == nil || t.QueuingBehavior == 0 {
		return 0
	}
	return t.QueuingBehavior
}

// SetBc sets the value of the leaf Bc in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetBc(v uint32) {
	t.Bc = &v
}

// SetCir sets the value of the leaf Cir in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetCir(v uint64) {
	t.Cir = &v
}

// SetCirPct sets the value of the leaf CirPct in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetCirPct(v uint8) {
	t.CirPct = &v
}

// SetCirPctRemaining sets the value of the leaf CirPctRemaining in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetCirPctRemaining(v uint8) {
	t.CirPctRemaining = &v
}

// SetMaxQueueDepthBytes sets the value of the leaf MaxQueueDepthBytes in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetMaxQueueDepthBytes(v uint32) {
	t.MaxQueueDepthBytes = &v
}

// SetMaxQueueDepthPackets sets the value of the leaf MaxQueueDepthPackets in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetMaxQueueDepthPackets(v uint32) {
	t.MaxQueueDepthPackets = &v
}

// SetMaxQueueDepthPercent sets the value of the leaf MaxQueueDepthPercent in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetMaxQueueDepthPercent(v uint8) {
	t.MaxQueueDepthPercent = &v
}

// SetQueuingBehavior sets the value of the leaf QueuingBehavior in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) SetQueuingBehavior(v E_QosTypes_QueueBehavior) {
	t.QueuingBehavior = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ConformAction.PopulateDefaults()
	t.ExceedAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction struct {
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction struct {
	Drop      *bool  `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetDrop sets the value of the leaf Drop in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetDrop(v bool) {
	t.Drop = &v
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_Output represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output struct {
	ChildScheduler *string             `path:"state/child-scheduler" module:"openconfig-qos/openconfig-qos" shadow-path:"config/child-scheduler" shadow-module:"openconfig-qos/openconfig-qos"`
	OutputFwdGroup *string             `path:"state/output-fwd-group" module:"openconfig-qos/openconfig-qos" shadow-path:"config/output-fwd-group" shadow-module:"openconfig-qos/openconfig-qos"`
	OutputType     E_Output_OutputType `path:"state/output-type" module:"openconfig-qos/openconfig-qos" shadow-path:"config/output-type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Output) IsYANGGoStruct() {}

// GetChildScheduler retrieves the value of the leaf ChildScheduler from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChildScheduler is set, it can
// safely use t.GetChildScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChildScheduler == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetChildScheduler() string {
	if t == nil || t.ChildScheduler == nil {
		return ""
	}
	return *t.ChildScheduler
}

// GetOutputFwdGroup retrieves the value of the leaf OutputFwdGroup from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFwdGroup is set, it can
// safely use t.GetOutputFwdGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFwdGroup == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputFwdGroup() string {
	if t == nil || t.OutputFwdGroup == nil {
		return ""
	}
	return *t.OutputFwdGroup
}

// GetOutputType retrieves the value of the leaf OutputType from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputType is set, it can
// safely use t.GetOutputType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputType == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputType() E_Output_OutputType {
	if t == nil || t.OutputType == 0 {
		return 0
	}
	return t.OutputType
}

// SetChildScheduler sets the value of the leaf ChildScheduler in the Qos_SchedulerPolicy_Scheduler_Output
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Output) SetChildScheduler(v string) {
	t.ChildScheduler = &v
}

// SetOutputFwdGroup sets the value of the leaf OutputFwdGroup in the Qos_SchedulerPolicy_Scheduler_Output
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Output) SetOutputFwdGroup(v string) {
	t.OutputFwdGroup = &v
}

// SetOutputType sets the value of the leaf OutputType in the Qos_SchedulerPolicy_Scheduler_Output
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_Output) SetOutputType(v E_Output_OutputType) {
	t.OutputType = v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_Output.
func (*Qos_SchedulerPolicy_Scheduler_Output) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor struct {
	Bc              *uint32                                                        `path:"state/bc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/bc" shadow-module:"openconfig-qos/openconfig-qos"`
	Be              *uint32                                                        `path:"state/be" module:"openconfig-qos/openconfig-qos" shadow-path:"config/be" shadow-module:"openconfig-qos/openconfig-qos"`
	Cir             *uint64                                                        `path:"state/cir" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPct          *uint8                                                         `path:"state/cir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPctRemaining *uint8                                                         `path:"state/cir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"config/cir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ConformAction   *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ExceedAction    *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	Pir             *uint64                                                        `path:"state/pir" module:"openconfig-qos/openconfig-qos" shadow-path:"config/pir" shadow-module:"openconfig-qos/openconfig-qos"`
	PirPct          *uint8                                                         `path:"state/pir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"config/pir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	PirPctRemaining *uint8                                                         `path:"state/pir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"config/pir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ViolateAction   *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction `path:"violate-action" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateViolateAction retrieves the value of the ViolateAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t.ViolateAction != nil {
		return t.ViolateAction
	}
	t.ViolateAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction{}
	return t.ViolateAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetViolateAction returns the value of the ViolateAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ViolateAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t != nil && t.ViolateAction != nil {
		return t.ViolateAction
	}
	return nil
}

// GetBc retrieves the value of the leaf Bc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bc is set, it can
// safely use t.GetBc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBc() uint32 {
	if t == nil || t.Bc == nil {
		return 0
	}
	return *t.Bc
}

// GetBe retrieves the value of the leaf Be from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBe() uint32 {
	if t == nil || t.Be == nil {
		return 0
	}
	return *t.Be
}

// GetCir retrieves the value of the leaf Cir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCir() uint64 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetCirPct retrieves the value of the leaf CirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPct is set, it can
// safely use t.GetCirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPct() uint8 {
	if t == nil || t.CirPct == nil {
		return 0
	}
	return *t.CirPct
}

// GetCirPctRemaining retrieves the value of the leaf CirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPctRemaining is set, it can
// safely use t.GetCirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPctRemaining() uint8 {
	if t == nil || t.CirPctRemaining == nil {
		return 0
	}
	return *t.CirPctRemaining
}

// GetPir retrieves the value of the leaf Pir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPir() uint64 {
	if t == nil || t.Pir == nil {
		return 0
	}
	return *t.Pir
}

// GetPirPct retrieves the value of the leaf PirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPct is set, it can
// safely use t.GetPirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPct() uint8 {
	if t == nil || t.PirPct == nil {
		return 0
	}
	return *t.PirPct
}

// GetPirPctRemaining retrieves the value of the leaf PirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPctRemaining is set, it can
// safely use t.GetPirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPctRemaining() uint8 {
	if t == nil || t.PirPctRemaining == nil {
		return 0
	}
	return *t.PirPctRemaining
}

// SetBc sets the value of the leaf Bc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetBc(v uint32) {
	t.Bc = &v
}

// SetBe sets the value of the leaf Be in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetBe(v uint32) {
	t.Be = &v
}

// SetCir sets the value of the leaf Cir in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetCir(v uint64) {
	t.Cir = &v
}

// SetCirPct sets the value of the leaf CirPct in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetCirPct(v uint8) {
	t.CirPct = &v
}

// SetCirPctRemaining sets the value of the leaf CirPctRemaining in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetCirPctRemaining(v uint8) {
	t.CirPctRemaining = &v
}

// SetPir sets the value of the leaf Pir in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetPir(v uint64) {
	t.Pir = &v
}

// SetPirPct sets the value of the leaf PirPct in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetPirPct(v uint8) {
	t.PirPct = &v
}

// SetPirPctRemaining sets the value of the leaf PirPctRemaining in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) SetPirPctRemaining(v uint8) {
	t.PirPctRemaining = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ConformAction.PopulateDefaults()
	t.ExceedAction.PopulateDefaults()
	t.ViolateAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction struct {
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction struct {
	Drop      *bool  `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetDrop sets the value of the leaf Drop in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetDrop(v bool) {
	t.Drop = &v
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction struct {
	Drop      *bool  `path:"state/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"config/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"state/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"state/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"state/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"config/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// SetDrop sets the value of the leaf Drop in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetDrop(v bool) {
	t.Drop = &v
}

// SetSetDot1P sets the value of the leaf SetDot1P in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetSetDot1P(v uint8) {
	t.SetDot1P = &v
}

// SetSetDscp sets the value of the leaf SetDscp in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetSetDscp(v uint8) {
	t.SetDscp = &v
}

// SetSetMplsTc sets the value of the leaf SetMplsTc in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) SetSetMplsTc(v uint8) {
	t.SetMplsTc = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Root represents the /root YANG schema element.
type Root struct {
	Acl                    *Acl                               `path:"acl" module:"openconfig-acl"`
	BgpGueIpv4GlobalPolicy map[string]*BgpGueIpv4GlobalPolicy `path:"bgp-gue-ipv4-policies/bgp-gue-ipv4-global-policy" module:"openconfig-bgp-gue/openconfig-bgp-gue"`
	BgpGueIpv6GlobalPolicy map[string]*BgpGueIpv6GlobalPolicy `path:"bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy" module:"openconfig-bgp-gue/openconfig-bgp-gue"`
	Component              map[string]*Component              `path:"components/component" module:"openconfig-platform/openconfig-platform"`
	DefinedSets            *DefinedSets                       `path:"defined-sets" module:"openconfig-defined-sets"`
	Interface              map[string]*Interface              `path:"interfaces/interface" module:"openconfig-interfaces/openconfig-interfaces"`
	Keychain               map[string]*Keychain               `path:"keychains/keychain" module:"openconfig-keychain/openconfig-keychain"`
	Lacp                   *Lacp                              `path:"lacp" module:"openconfig-lacp"`
	Lldp                   *Lldp                              `path:"lldp" module:"openconfig-lldp"`
	NetworkInstance        map[string]*NetworkInstance        `path:"network-instances/network-instance" module:"openconfig-network-instance/openconfig-network-instance"`
	Qos                    *Qos                               `path:"qos" module:"openconfig-qos"`
	RoutingPolicy          *RoutingPolicy                     `path:"routing-policy" module:"openconfig-routing-policy"`
	System                 *System                            `path:"system" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Root) IsYANGGoStruct() {}

// NewBgpGueIpv4GlobalPolicy creates a new entry in the BgpGueIpv4GlobalPolicy list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewBgpGueIpv4GlobalPolicy(Prefix string) (*BgpGueIpv4GlobalPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv4GlobalPolicy == nil {
		t.BgpGueIpv4GlobalPolicy = make(map[string]*BgpGueIpv4GlobalPolicy)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpGueIpv4GlobalPolicy", key)
	}

	t.BgpGueIpv4GlobalPolicy[key] = &BgpGueIpv4GlobalPolicy{
		Prefix: &Prefix,
	}

	return t.BgpGueIpv4GlobalPolicy[key], nil
}

// RenameBgpGueIpv4GlobalPolicy renames an entry in the list BgpGueIpv4GlobalPolicy within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameBgpGueIpv4GlobalPolicy(oldK, newK string) error {
	if _, ok := t.BgpGueIpv4GlobalPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpGueIpv4GlobalPolicy", newK)
	}

	e, ok := t.BgpGueIpv4GlobalPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpGueIpv4GlobalPolicy", oldK)
	}
	e.Prefix = &newK

	t.BgpGueIpv4GlobalPolicy[newK] = e
	delete(t.BgpGueIpv4GlobalPolicy, oldK)
	return nil
}

// GetOrCreateBgpGueIpv4GlobalPolicyMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateBgpGueIpv4GlobalPolicyMap() map[string]*BgpGueIpv4GlobalPolicy {
	if t.BgpGueIpv4GlobalPolicy == nil {
		t.BgpGueIpv4GlobalPolicy = make(map[string]*BgpGueIpv4GlobalPolicy)
	}
	return t.BgpGueIpv4GlobalPolicy
}

// GetOrCreateBgpGueIpv4GlobalPolicy retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateBgpGueIpv4GlobalPolicy(Prefix string) *BgpGueIpv4GlobalPolicy {

	key := Prefix

	if v, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpGueIpv4GlobalPolicy(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpGueIpv4GlobalPolicy got unexpected error: %v", err))
	}
	return v
}

// GetBgpGueIpv4GlobalPolicy retrieves the value with the specified key from
// the BgpGueIpv4GlobalPolicy map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetBgpGueIpv4GlobalPolicy(Prefix string) *BgpGueIpv4GlobalPolicy {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpGueIpv4GlobalPolicy deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteBgpGueIpv4GlobalPolicy(Prefix string) {
	key := Prefix

	delete(t.BgpGueIpv4GlobalPolicy, key)
}

// AppendBgpGueIpv4GlobalPolicy appends the supplied BgpGueIpv4GlobalPolicy struct to the
// list BgpGueIpv4GlobalPolicy of Root. If the key value(s) specified in
// the supplied BgpGueIpv4GlobalPolicy already exist in the list, an error is
// returned.
func (t *Root) AppendBgpGueIpv4GlobalPolicy(v *BgpGueIpv4GlobalPolicy) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv4GlobalPolicy == nil {
		t.BgpGueIpv4GlobalPolicy = make(map[string]*BgpGueIpv4GlobalPolicy)
	}

	if _, ok := t.BgpGueIpv4GlobalPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list BgpGueIpv4GlobalPolicy %v", key)
	}

	t.BgpGueIpv4GlobalPolicy[key] = v
	return nil
}

// NewBgpGueIpv6GlobalPolicy creates a new entry in the BgpGueIpv6GlobalPolicy list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewBgpGueIpv6GlobalPolicy(Prefix string) (*BgpGueIpv6GlobalPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv6GlobalPolicy == nil {
		t.BgpGueIpv6GlobalPolicy = make(map[string]*BgpGueIpv6GlobalPolicy)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpGueIpv6GlobalPolicy", key)
	}

	t.BgpGueIpv6GlobalPolicy[key] = &BgpGueIpv6GlobalPolicy{
		Prefix: &Prefix,
	}

	return t.BgpGueIpv6GlobalPolicy[key], nil
}

// RenameBgpGueIpv6GlobalPolicy renames an entry in the list BgpGueIpv6GlobalPolicy within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameBgpGueIpv6GlobalPolicy(oldK, newK string) error {
	if _, ok := t.BgpGueIpv6GlobalPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpGueIpv6GlobalPolicy", newK)
	}

	e, ok := t.BgpGueIpv6GlobalPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpGueIpv6GlobalPolicy", oldK)
	}
	e.Prefix = &newK

	t.BgpGueIpv6GlobalPolicy[newK] = e
	delete(t.BgpGueIpv6GlobalPolicy, oldK)
	return nil
}

// GetOrCreateBgpGueIpv6GlobalPolicyMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateBgpGueIpv6GlobalPolicyMap() map[string]*BgpGueIpv6GlobalPolicy {
	if t.BgpGueIpv6GlobalPolicy == nil {
		t.BgpGueIpv6GlobalPolicy = make(map[string]*BgpGueIpv6GlobalPolicy)
	}
	return t.BgpGueIpv6GlobalPolicy
}

// GetOrCreateBgpGueIpv6GlobalPolicy retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateBgpGueIpv6GlobalPolicy(Prefix string) *BgpGueIpv6GlobalPolicy {

	key := Prefix

	if v, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpGueIpv6GlobalPolicy(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpGueIpv6GlobalPolicy got unexpected error: %v", err))
	}
	return v
}

// GetBgpGueIpv6GlobalPolicy retrieves the value with the specified key from
// the BgpGueIpv6GlobalPolicy map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetBgpGueIpv6GlobalPolicy(Prefix string) *BgpGueIpv6GlobalPolicy {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpGueIpv6GlobalPolicy deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteBgpGueIpv6GlobalPolicy(Prefix string) {
	key := Prefix

	delete(t.BgpGueIpv6GlobalPolicy, key)
}

// AppendBgpGueIpv6GlobalPolicy appends the supplied BgpGueIpv6GlobalPolicy struct to the
// list BgpGueIpv6GlobalPolicy of Root. If the key value(s) specified in
// the supplied BgpGueIpv6GlobalPolicy already exist in the list, an error is
// returned.
func (t *Root) AppendBgpGueIpv6GlobalPolicy(v *BgpGueIpv6GlobalPolicy) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpGueIpv6GlobalPolicy == nil {
		t.BgpGueIpv6GlobalPolicy = make(map[string]*BgpGueIpv6GlobalPolicy)
	}

	if _, ok := t.BgpGueIpv6GlobalPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list BgpGueIpv6GlobalPolicy %v", key)
	}

	t.BgpGueIpv6GlobalPolicy[key] = v
	return nil
}

// NewComponent creates a new entry in the Component list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewComponent(Name string) (*Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponentMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateComponentMap() map[string]*Component {
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}
	return t.Component
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateComponent(Name string) *Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetComponent(Name string) *Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// DeleteComponent deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteComponent(Name string) {
	key := Name

	delete(t.Component, key)
}

// AppendComponent appends the supplied Component struct to the
// list Component of Root. If the key value(s) specified in
// the supplied Component already exist in the list, an error is
// returned.
func (t *Root) AppendComponent(v *Component) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewInterface(Name string) (*Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateInterfaceMap() map[string]*Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateInterface(Name string) *Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetInterface(Name string) *Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Interface struct to the
// list Interface of Root. If the key value(s) specified in
// the supplied Interface already exist in the list, an error is
// returned.
func (t *Root) AppendInterface(v *Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewKeychain creates a new entry in the Keychain list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewKeychain(Name string) (*Keychain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &Keychain{
		Name: &Name,
	}

	return t.Keychain[key], nil
}

// RenameKeychain renames an entry in the list Keychain within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameKeychain(oldK, newK string) error {
	if _, ok := t.Keychain[newK]; ok {
		return fmt.Errorf("key %v already exists in Keychain", newK)
	}

	e, ok := t.Keychain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keychain", oldK)
	}
	e.Name = &newK

	t.Keychain[newK] = e
	delete(t.Keychain, oldK)
	return nil
}

// GetOrCreateKeychainMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateKeychainMap() map[string]*Keychain {
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}
	return t.Keychain
}

// GetOrCreateKeychain retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateKeychain(Name string) *Keychain {

	key := Name

	if v, ok := t.Keychain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeychain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeychain got unexpected error: %v", err))
	}
	return v
}

// GetKeychain retrieves the value with the specified key from
// the Keychain map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetKeychain(Name string) *Keychain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Keychain[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeychain deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteKeychain(Name string) {
	key := Name

	delete(t.Keychain, key)
}

// AppendKeychain appends the supplied Keychain struct to the
// list Keychain of Root. If the key value(s) specified in
// the supplied Keychain already exist in the list, an error is
// returned.
func (t *Root) AppendKeychain(v *Keychain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}

	if _, ok := t.Keychain[key]; ok {
		return fmt.Errorf("duplicate key for list Keychain %v", key)
	}

	t.Keychain[key] = v
	return nil
}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// Root struct. The keys of the list are populated from the input
// arguments.
func (t *Root) NewNetworkInstance(Name string) (*NetworkInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// RenameNetworkInstance renames an entry in the list NetworkInstance within
// the Root struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Root) RenameNetworkInstance(oldK, newK string) error {
	if _, ok := t.NetworkInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInstance", newK)
	}

	e, ok := t.NetworkInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInstance", oldK)
	}
	e.Name = &newK

	t.NetworkInstance[newK] = e
	delete(t.NetworkInstance, oldK)
	return nil
}

// GetOrCreateNetworkInstanceMap returns the list (map) from Root.
//
// It initializes the field if not already initialized.
func (t *Root) GetOrCreateNetworkInstanceMap() map[string]*NetworkInstance {
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}
	return t.NetworkInstance
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver Root. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Root) GetOrCreateNetworkInstance(Name string) *NetworkInstance {

	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of Root. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Root) GetNetworkInstance(Name string) *NetworkInstance {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver Root. If there is no such element, the function
// is a no-op.
func (t *Root) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied NetworkInstance struct to the
// list NetworkInstance of Root. If the key value(s) specified in
// the supplied NetworkInstance already exist in the list, an error is
// returned.
func (t *Root) AppendNetworkInstance(v *NetworkInstance) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// GetOrCreateAcl retrieves the value of the Acl field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateAcl() *Acl {
	if t.Acl != nil {
		return t.Acl
	}
	t.Acl = &Acl{}
	return t.Acl
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateDefinedSets() *DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &DefinedSets{}
	return t.DefinedSets
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateLacp() *Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &Lacp{}
	return t.Lacp
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateLldp() *Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &Lldp{}
	return t.Lldp
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateQos() *Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &Qos{}
	return t.Qos
}

// GetOrCreateRoutingPolicy retrieves the value of the RoutingPolicy field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateRoutingPolicy() *RoutingPolicy {
	if t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	t.RoutingPolicy = &RoutingPolicy{}
	return t.RoutingPolicy
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateSystem() *System {
	if t.System != nil {
		return t.System
	}
	t.System = &System{}
	return t.System
}

// GetAcl returns the value of the Acl struct pointer
// from Root. If the receiver or the field Acl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetAcl() *Acl {
	if t != nil && t.Acl != nil {
		return t.Acl
	}
	return nil
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from Root. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetDefinedSets() *DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// GetLacp returns the value of the Lacp struct pointer
// from Root. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetLacp() *Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from Root. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetLldp() *Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from Root. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetQos() *Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetRoutingPolicy returns the value of the RoutingPolicy struct pointer
// from Root. If the receiver or the field RoutingPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetRoutingPolicy() *RoutingPolicy {
	if t != nil && t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from Root. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetSystem() *System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Acl.PopulateDefaults()
	t.DefinedSets.PopulateDefaults()
	t.Lacp.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.RoutingPolicy.PopulateDefaults()
	t.System.PopulateDefaults()
	for _, e := range t.BgpGueIpv4GlobalPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.BgpGueIpv6GlobalPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.Component {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Keychain {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Root) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Root.
func (*Root) ΛBelongingModule() string {
	return ""
}

// RoutingPolicy represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicy struct {
	DefinedSets      *RoutingPolicy_DefinedSets                 `path:"defined-sets" module:"openconfig-routing-policy"`
	PolicyDefinition map[string]*RoutingPolicy_PolicyDefinition `path:"policy-definitions/policy-definition" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy) IsYANGGoStruct() {}

// NewPolicyDefinition creates a new entry in the PolicyDefinition list of the
// RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy) NewPolicyDefinition(Name string) (*RoutingPolicy_PolicyDefinition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyDefinition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyDefinition", key)
	}

	t.PolicyDefinition[key] = &RoutingPolicy_PolicyDefinition{
		Name: &Name,
	}

	return t.PolicyDefinition[key], nil
}

// RenamePolicyDefinition renames an entry in the list PolicyDefinition within
// the RoutingPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy) RenamePolicyDefinition(oldK, newK string) error {
	if _, ok := t.PolicyDefinition[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyDefinition", newK)
	}

	e, ok := t.PolicyDefinition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyDefinition", oldK)
	}
	e.Name = &newK

	t.PolicyDefinition[newK] = e
	delete(t.PolicyDefinition, oldK)
	return nil
}

// GetOrCreatePolicyDefinitionMap returns the list (map) from RoutingPolicy.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy) GetOrCreatePolicyDefinitionMap() map[string]*RoutingPolicy_PolicyDefinition {
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}
	return t.PolicyDefinition
}

// GetOrCreatePolicyDefinition retrieves the value with the specified keys from
// the receiver RoutingPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy) GetOrCreatePolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	key := Name

	if v, ok := t.PolicyDefinition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyDefinition(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyDefinition got unexpected error: %v", err))
	}
	return v
}

// GetPolicyDefinition retrieves the value with the specified key from
// the PolicyDefinition map field of RoutingPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy) GetPolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyDefinition[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyDefinition deletes the value with the specified keys from
// the receiver RoutingPolicy. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy) DeletePolicyDefinition(Name string) {
	key := Name

	delete(t.PolicyDefinition, key)
}

// AppendPolicyDefinition appends the supplied RoutingPolicy_PolicyDefinition struct to the
// list PolicyDefinition of RoutingPolicy. If the key value(s) specified in
// the supplied RoutingPolicy_PolicyDefinition already exist in the list, an error is
// returned.
func (t *RoutingPolicy) AppendPolicyDefinition(v *RoutingPolicy_PolicyDefinition) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	if _, ok := t.PolicyDefinition[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyDefinition %v", key)
	}

	t.PolicyDefinition[key] = v
	return nil
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy) GetOrCreateDefinedSets() *RoutingPolicy_DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &RoutingPolicy_DefinedSets{}
	return t.DefinedSets
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from RoutingPolicy. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy) GetDefinedSets() *RoutingPolicy_DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefinedSets.PopulateDefaults()
	for _, e := range t.PolicyDefinition {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy.
func (*RoutingPolicy) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSets struct {
	BgpDefinedSets *RoutingPolicy_DefinedSets_BgpDefinedSets         `path:"bgp-defined-sets" module:"openconfig-bgp-policy"`
	NeighborSet    map[string]*RoutingPolicy_DefinedSets_NeighborSet `path:"neighbor-sets/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	PrefixSet      map[string]*RoutingPolicy_DefinedSets_PrefixSet   `path:"prefix-sets/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	TagSet         map[string]*RoutingPolicy_DefinedSets_TagSet      `path:"tag-sets/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets) IsYANGGoStruct() {}

// NewNeighborSet creates a new entry in the NeighborSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewNeighborSet(Name string) (*RoutingPolicy_DefinedSets_NeighborSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NeighborSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NeighborSet", key)
	}

	t.NeighborSet[key] = &RoutingPolicy_DefinedSets_NeighborSet{
		Name: &Name,
	}

	return t.NeighborSet[key], nil
}

// RenameNeighborSet renames an entry in the list NeighborSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameNeighborSet(oldK, newK string) error {
	if _, ok := t.NeighborSet[newK]; ok {
		return fmt.Errorf("key %v already exists in NeighborSet", newK)
	}

	e, ok := t.NeighborSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NeighborSet", oldK)
	}
	e.Name = &newK

	t.NeighborSet[newK] = e
	delete(t.NeighborSet, oldK)
	return nil
}

// GetOrCreateNeighborSetMap returns the list (map) from RoutingPolicy_DefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets) GetOrCreateNeighborSetMap() map[string]*RoutingPolicy_DefinedSets_NeighborSet {
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}
	return t.NeighborSet
}

// GetOrCreateNeighborSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	key := Name

	if v, ok := t.NeighborSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighborSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighborSet got unexpected error: %v", err))
	}
	return v
}

// GetNeighborSet retrieves the value with the specified key from
// the NeighborSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NeighborSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighborSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteNeighborSet(Name string) {
	key := Name

	delete(t.NeighborSet, key)
}

// AppendNeighborSet appends the supplied RoutingPolicy_DefinedSets_NeighborSet struct to the
// list NeighborSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_NeighborSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendNeighborSet(v *RoutingPolicy_DefinedSets_NeighborSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	if _, ok := t.NeighborSet[key]; ok {
		return fmt.Errorf("duplicate key for list NeighborSet %v", key)
	}

	t.NeighborSet[key] = v
	return nil
}

// NewPrefixSet creates a new entry in the PrefixSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewPrefixSet(Name string) (*RoutingPolicy_DefinedSets_PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSet", key)
	}

	t.PrefixSet[key] = &RoutingPolicy_DefinedSets_PrefixSet{
		Name: &Name,
	}

	return t.PrefixSet[key], nil
}

// RenamePrefixSet renames an entry in the list PrefixSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenamePrefixSet(oldK, newK string) error {
	if _, ok := t.PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSet", newK)
	}

	e, ok := t.PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSet", oldK)
	}
	e.Name = &newK

	t.PrefixSet[newK] = e
	delete(t.PrefixSet, oldK)
	return nil
}

// GetOrCreatePrefixSetMap returns the list (map) from RoutingPolicy_DefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets) GetOrCreatePrefixSetMap() map[string]*RoutingPolicy_DefinedSets_PrefixSet {
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}
	return t.PrefixSet
}

// GetOrCreatePrefixSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreatePrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	key := Name

	if v, ok := t.PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSet retrieves the value with the specified key from
// the PrefixSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetPrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeletePrefixSet(Name string) {
	key := Name

	delete(t.PrefixSet, key)
}

// AppendPrefixSet appends the supplied RoutingPolicy_DefinedSets_PrefixSet struct to the
// list PrefixSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendPrefixSet(v *RoutingPolicy_DefinedSets_PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	if _, ok := t.PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSet %v", key)
	}

	t.PrefixSet[key] = v
	return nil
}

// NewTagSet creates a new entry in the TagSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewTagSet(Name string) (*RoutingPolicy_DefinedSets_TagSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TagSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TagSet", key)
	}

	t.TagSet[key] = &RoutingPolicy_DefinedSets_TagSet{
		Name: &Name,
	}

	return t.TagSet[key], nil
}

// RenameTagSet renames an entry in the list TagSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameTagSet(oldK, newK string) error {
	if _, ok := t.TagSet[newK]; ok {
		return fmt.Errorf("key %v already exists in TagSet", newK)
	}

	e, ok := t.TagSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TagSet", oldK)
	}
	e.Name = &newK

	t.TagSet[newK] = e
	delete(t.TagSet, oldK)
	return nil
}

// GetOrCreateTagSetMap returns the list (map) from RoutingPolicy_DefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets) GetOrCreateTagSetMap() map[string]*RoutingPolicy_DefinedSets_TagSet {
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}
	return t.TagSet
}

// GetOrCreateTagSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	key := Name

	if v, ok := t.TagSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTagSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTagSet got unexpected error: %v", err))
	}
	return v
}

// GetTagSet retrieves the value with the specified key from
// the TagSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TagSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteTagSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteTagSet(Name string) {
	key := Name

	delete(t.TagSet, key)
}

// AppendTagSet appends the supplied RoutingPolicy_DefinedSets_TagSet struct to the
// list TagSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_TagSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendTagSet(v *RoutingPolicy_DefinedSets_TagSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	if _, ok := t.TagSet[key]; ok {
		return fmt.Errorf("duplicate key for list TagSet %v", key)
	}

	t.TagSet[key] = v
	return nil
}

// GetOrCreateBgpDefinedSets retrieves the value of the BgpDefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_DefinedSets) GetOrCreateBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	t.BgpDefinedSets = &RoutingPolicy_DefinedSets_BgpDefinedSets{}
	return t.BgpDefinedSets
}

// GetBgpDefinedSets returns the value of the BgpDefinedSets struct pointer
// from RoutingPolicy_DefinedSets. If the receiver or the field BgpDefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_DefinedSets) GetBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t != nil && t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpDefinedSets.PopulateDefaults()
	for _, e := range t.NeighborSet {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixSet {
		e.PopulateDefaults()
	}
	for _, e := range t.TagSet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets.
func (*RoutingPolicy_DefinedSets) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets struct {
	AsPathSet       map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet       `path:"as-path-sets/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySet    map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet    `path:"community-sets/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySet map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet `path:"ext-community-sets/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) IsYANGGoStruct() {}

// NewAsPathSet creates a new entry in the AsPathSet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewAsPathSet(AsPathSetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	key := AsPathSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathSet", key)
	}

	t.AsPathSet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet{
		AsPathSetName: &AsPathSetName,
	}

	return t.AsPathSet[key], nil
}

// RenameAsPathSet renames an entry in the list AsPathSet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameAsPathSet(oldK, newK string) error {
	if _, ok := t.AsPathSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPathSet", newK)
	}

	e, ok := t.AsPathSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPathSet", oldK)
	}
	e.AsPathSetName = &newK

	t.AsPathSet[newK] = e
	delete(t.AsPathSet, oldK)
	return nil
}

// GetOrCreateAsPathSetMap returns the list (map) from RoutingPolicy_DefinedSets_BgpDefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateAsPathSetMap() map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}
	return t.AsPathSet
}

// GetOrCreateAsPathSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	key := AsPathSetName

	if v, ok := t.AsPathSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPathSet(AsPathSetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPathSet got unexpected error: %v", err))
	}
	return v
}

// GetAsPathSet retrieves the value with the specified key from
// the AsPathSet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	if t == nil {
		return nil
	}

	key := AsPathSetName

	if lm, ok := t.AsPathSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPathSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteAsPathSet(AsPathSetName string) {
	key := AsPathSetName

	delete(t.AsPathSet, key)
}

// AppendAsPathSet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct to the
// list AsPathSet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendAsPathSet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) error {
	if v.AsPathSetName == nil {
		return fmt.Errorf("invalid nil key received for AsPathSetName")
	}

	key := *v.AsPathSetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	if _, ok := t.AsPathSet[key]; ok {
		return fmt.Errorf("duplicate key for list AsPathSet %v", key)
	}

	t.AsPathSet[key] = v
	return nil
}

// NewCommunitySet creates a new entry in the CommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewCommunitySet(CommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	key := CommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommunitySet", key)
	}

	t.CommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet{
		CommunitySetName: &CommunitySetName,
	}

	return t.CommunitySet[key], nil
}

// RenameCommunitySet renames an entry in the list CommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameCommunitySet(oldK, newK string) error {
	if _, ok := t.CommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in CommunitySet", newK)
	}

	e, ok := t.CommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommunitySet", oldK)
	}
	e.CommunitySetName = &newK

	t.CommunitySet[newK] = e
	delete(t.CommunitySet, oldK)
	return nil
}

// GetOrCreateCommunitySetMap returns the list (map) from RoutingPolicy_DefinedSets_BgpDefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateCommunitySetMap() map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}
	return t.CommunitySet
}

// GetOrCreateCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	key := CommunitySetName

	if v, ok := t.CommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunitySet(CommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetCommunitySet retrieves the value with the specified key from
// the CommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	if t == nil {
		return nil
	}

	key := CommunitySetName

	if lm, ok := t.CommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteCommunitySet(CommunitySetName string) {
	key := CommunitySetName

	delete(t.CommunitySet, key)
}

// AppendCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct to the
// list CommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) error {
	if v.CommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for CommunitySetName")
	}

	key := *v.CommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	if _, ok := t.CommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list CommunitySet %v", key)
	}

	t.CommunitySet[key] = v
	return nil
}

// NewExtCommunitySet creates a new entry in the ExtCommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewExtCommunitySet(ExtCommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	key := ExtCommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExtCommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExtCommunitySet", key)
	}

	t.ExtCommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet{
		ExtCommunitySetName: &ExtCommunitySetName,
	}

	return t.ExtCommunitySet[key], nil
}

// RenameExtCommunitySet renames an entry in the list ExtCommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameExtCommunitySet(oldK, newK string) error {
	if _, ok := t.ExtCommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in ExtCommunitySet", newK)
	}

	e, ok := t.ExtCommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExtCommunitySet", oldK)
	}
	e.ExtCommunitySetName = &newK

	t.ExtCommunitySet[newK] = e
	delete(t.ExtCommunitySet, oldK)
	return nil
}

// GetOrCreateExtCommunitySetMap returns the list (map) from RoutingPolicy_DefinedSets_BgpDefinedSets.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateExtCommunitySetMap() map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}
	return t.ExtCommunitySet
}

// GetOrCreateExtCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	key := ExtCommunitySetName

	if v, ok := t.ExtCommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtCommunitySet(ExtCommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetExtCommunitySet retrieves the value with the specified key from
// the ExtCommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	if t == nil {
		return nil
	}

	key := ExtCommunitySetName

	if lm, ok := t.ExtCommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteExtCommunitySet(ExtCommunitySetName string) {
	key := ExtCommunitySetName

	delete(t.ExtCommunitySet, key)
}

// AppendExtCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct to the
// list ExtCommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendExtCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) error {
	if v.ExtCommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for ExtCommunitySetName")
	}

	key := *v.ExtCommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	if _, ok := t.ExtCommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list ExtCommunitySet %v", key)
	}

	t.ExtCommunitySet[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AsPathSet {
		e.PopulateDefaults()
	}
	for _, e := range t.CommunitySet {
		e.PopulateDefaults()
	}
	for _, e := range t.ExtCommunitySet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct {
	AsPathSetMember []string `path:"state/as-path-set-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/as-path-set-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathSetName   *string  `path:"state/as-path-set-name|as-path-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/as-path-set-name|as-path-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) IsYANGGoStruct() {}

// GetAsPathSetMember retrieves the value of the leaf AsPathSetMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetMember is set, it can
// safely use t.GetAsPathSetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetMember() []string {
	if t == nil || t.AsPathSetMember == nil {
		return nil
	}
	return t.AsPathSetMember
}

// GetAsPathSetName retrieves the value of the leaf AsPathSetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetName is set, it can
// safely use t.GetAsPathSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetName() string {
	if t == nil || t.AsPathSetName == nil {
		return ""
	}
	return *t.AsPathSetName
}

// SetAsPathSetMember sets the value of the leaf AsPathSetMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) SetAsPathSetMember(v []string) {
	t.AsPathSetMember = v
}

// SetAsPathSetName sets the value of the leaf AsPathSetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) SetAsPathSetName(v string) {
	t.AsPathSetName = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsPathSetName == nil {
		return nil, fmt.Errorf("nil value for key AsPathSetName")
	}

	return map[string]interface{}{
		"as-path-set-name": *t.AsPathSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct {
	CommunityMember  []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union `path:"state/community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySetName *string                                                                       `path:"state/community-set-name|community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/community-set-name|community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsType                                             `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) IsYANGGoStruct() {}

// GetCommunityMember retrieves the value of the leaf CommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityMember is set, it can
// safely use t.GetCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunityMember() []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union {
	if t == nil || t.CommunityMember == nil {
		return nil
	}
	return t.CommunityMember
}

// GetCommunitySetName retrieves the value of the leaf CommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetName is set, it can
// safely use t.GetCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunitySetName() string {
	if t == nil || t.CommunitySetName == nil {
		return ""
	}
	return *t.CommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetCommunityMember sets the value of the leaf CommunityMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetCommunityMember(v []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union) {
	t.CommunityMember = v
}

// SetCommunitySetName sets the value of the leaf CommunitySetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetCommunitySetName(v string) {
	t.CommunitySetName = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key CommunitySetName")
	}

	return map[string]interface{}{
		"community-set-name": *t.CommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct {
	ExtCommunityMember  []string                          `path:"state/ext-community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySetName *string                           `path:"state/ext-community-set-name|ext-community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/ext-community-set-name|ext-community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions     E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) IsYANGGoStruct() {}

// GetExtCommunityMember retrieves the value of the leaf ExtCommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityMember is set, it can
// safely use t.GetExtCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunityMember() []string {
	if t == nil || t.ExtCommunityMember == nil {
		return nil
	}
	return t.ExtCommunityMember
}

// GetExtCommunitySetName retrieves the value of the leaf ExtCommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetName is set, it can
// safely use t.GetExtCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunitySetName() string {
	if t == nil || t.ExtCommunitySetName == nil {
		return ""
	}
	return *t.ExtCommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetExtCommunityMember sets the value of the leaf ExtCommunityMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetExtCommunityMember(v []string) {
	t.ExtCommunityMember = v
}

// SetExtCommunitySetName sets the value of the leaf ExtCommunitySetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetExtCommunitySetName(v string) {
	t.ExtCommunitySetName = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExtCommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key ExtCommunitySetName")
	}

	return map[string]interface{}{
		"ext-community-set-name": *t.ExtCommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_NeighborSet represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet struct {
	Address []string `path:"state/address" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/address" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name    *string  `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_NeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_NeighborSet) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetAddress sets the value of the leaf Address in the RoutingPolicy_DefinedSets_NeighborSet
// struct.
func (t *RoutingPolicy_DefinedSets_NeighborSet) SetAddress(v []string) {
	t.Address = v
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_NeighborSet
// struct.
func (t *RoutingPolicy_DefinedSets_NeighborSet) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_NeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_NeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_NeighborSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_NeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_NeighborSet.
func (*RoutingPolicy_DefinedSets_NeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet struct {
	Mode   E_PrefixSet_Mode                                                                               `path:"state/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name   *string                                                                                        `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Prefix map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix `path:"prefixes/prefix" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet) IsYANGGoStruct() {}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key represents the key for list Prefix of element /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key struct {
	IpPrefix        string `path:"ip-prefix"`
	MasklengthRange string `path:"masklength-range"`
}

// IsYANGGoKeyStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key key struct.
func (t RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ip-prefix":        t.IpPrefix,
		"masklength-range": t.MasklengthRange,
	}, nil
}

// NewPrefix creates a new entry in the Prefix list of the
// RoutingPolicy_DefinedSets_PrefixSet struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_PrefixSet) NewPrefix(IpPrefix string, MasklengthRange string) (*RoutingPolicy_DefinedSets_PrefixSet_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &RoutingPolicy_DefinedSets_PrefixSet_Prefix{
		IpPrefix:        &IpPrefix,
		MasklengthRange: &MasklengthRange,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the RoutingPolicy_DefinedSets_PrefixSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) RenamePrefix(oldK, newK RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.MasklengthRange = &newK.MasklengthRange

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from RoutingPolicy_DefinedSets_PrefixSet.
//
// It initializes the field if not already initialized.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetOrCreatePrefixMap() map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetOrCreatePrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, MasklengthRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of RoutingPolicy_DefinedSets_PrefixSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetPrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	if t == nil {
		return nil
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_PrefixSet) DeletePrefix(IpPrefix string, MasklengthRange string) {
	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix struct to the
// list Prefix of RoutingPolicy_DefinedSets_PrefixSet. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_PrefixSet) AppendPrefix(v *RoutingPolicy_DefinedSets_PrefixSet_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.MasklengthRange == nil {
		return fmt.Errorf("invalid nil key for MasklengthRange")
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        *v.IpPrefix,
		MasklengthRange: *v.MasklengthRange,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetMode() E_PrefixSet_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetMode sets the value of the leaf Mode in the RoutingPolicy_DefinedSets_PrefixSet
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet) SetMode(v E_PrefixSet_Mode) {
	t.Mode = v
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_PrefixSet
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet.
func (*RoutingPolicy_DefinedSets_PrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix struct {
	IpPrefix        *string `path:"state/ip-prefix|ip-prefix" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/ip-prefix|ip-prefix" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	MasklengthRange *string `path:"state/masklength-range|masklength-range" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/masklength-range|masklength-range" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMasklengthRange retrieves the value of the leaf MasklengthRange from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasklengthRange is set, it can
// safely use t.GetMasklengthRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasklengthRange == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetMasklengthRange() string {
	if t == nil || t.MasklengthRange == nil {
		return ""
	}
	return *t.MasklengthRange
}

// SetIpPrefix sets the value of the leaf IpPrefix in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) SetIpPrefix(v string) {
	t.IpPrefix = &v
}

// SetMasklengthRange sets the value of the leaf MasklengthRange in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) SetMasklengthRange(v string) {
	t.MasklengthRange = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet_Prefix struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MasklengthRange == nil {
		return nil, fmt.Errorf("nil value for key MasklengthRange")
	}

	return map[string]interface{}{
		"ip-prefix":        *t.IpPrefix,
		"masklength-range": *t.MasklengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet_Prefix.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_TagSet represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSet struct {
	Name     *string                                           `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	TagValue []RoutingPolicy_DefinedSets_TagSet_TagValue_Union `path:"state/tag-value" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-value" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_TagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_TagSet) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTagValue retrieves the value of the leaf TagValue from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagValue is set, it can
// safely use t.GetTagValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagValue == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetTagValue() []RoutingPolicy_DefinedSets_TagSet_TagValue_Union {
	if t == nil || t.TagValue == nil {
		return nil
	}
	return t.TagValue
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_TagSet
// struct.
func (t *RoutingPolicy_DefinedSets_TagSet) SetName(v string) {
	t.Name = &v
}

// SetTagValue sets the value of the leaf TagValue in the RoutingPolicy_DefinedSets_TagSet
// struct.
func (t *RoutingPolicy_DefinedSets_TagSet) SetTagValue(v []RoutingPolicy_DefinedSets_TagSet_TagValue_Union) {
	t.TagValue = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_TagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_TagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_TagSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_TagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_TagSet.
func (*RoutingPolicy_DefinedSets_TagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinition struct {
	Name      *string                                              `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Statement *RoutingPolicy_PolicyDefinition_Statement_OrderedMap `path:"statements/statement" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the RoutingPolicy_PolicyDefinition
// struct.
func (t *RoutingPolicy_PolicyDefinition) SetName(v string) {
	t.Name = &v
}

// GetOrCreateStatementMap returns the ordered map field
// Statement from RoutingPolicy_PolicyDefinition.
//
// It initializes the field if not already initialized.
func (s *RoutingPolicy_PolicyDefinition) GetOrCreateStatementMap() *RoutingPolicy_PolicyDefinition_Statement_OrderedMap {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement
}

// AppendNewStatement creates a new entry in the Statement
// ordered map of the RoutingPolicy_PolicyDefinition struct. The keys of the list are
// populated from the input arguments.
func (s *RoutingPolicy_PolicyDefinition) AppendNewStatement(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement.AppendNew(Name)
}

// AppendStatement appends the supplied RoutingPolicy_PolicyDefinition_Statement struct
// to the list Statement of RoutingPolicy_PolicyDefinition. If the key value(s)
// specified in the supplied RoutingPolicy_PolicyDefinition_Statement already exist in the list, an
// error is returned.
func (s *RoutingPolicy_PolicyDefinition) AppendStatement(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement.Append(v)
}

// GetStatement retrieves the value with the specified key from the
// Statement map field of RoutingPolicy_PolicyDefinition. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *RoutingPolicy_PolicyDefinition) GetStatement(Name string) *RoutingPolicy_PolicyDefinition_Statement {
	if s == nil {
		return nil
	}
	key := Name
	return s.Statement.Get(key)
}

// DeleteStatement deletes the value with the specified keys from
// the receiver RoutingPolicy_PolicyDefinition. If there is no such element, the
// function is a no-op.
func (s *RoutingPolicy_PolicyDefinition) DeleteStatement(Name string) bool {
	key := Name
	return s.Statement.Delete(key)
}

// RoutingPolicy_PolicyDefinition_Statement_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement.
type RoutingPolicy_PolicyDefinition_Statement_OrderedMap struct {
	keys     []string
	valueMap map[string]*RoutingPolicy_PolicyDefinition_Statement
}

// IsYANGOrderedList ensures that RoutingPolicy_PolicyDefinition_Statement_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*RoutingPolicy_PolicyDefinition_Statement_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*RoutingPolicy_PolicyDefinition_Statement{}
	}
}

// Keys returns a copy of the list's keys.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Values() []*RoutingPolicy_PolicyDefinition_Statement {
	if o == nil {
		return nil
	}
	var values []*RoutingPolicy_PolicyDefinition_Statement
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of RoutingPolicy_PolicyDefinition_Statement_OrderedMap
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Get(key string) *RoutingPolicy_PolicyDefinition_Statement {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a RoutingPolicy_PolicyDefinition_Statement, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Append(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append RoutingPolicy_PolicyDefinition_Statement")
	}
	if v == nil {
		return fmt.Errorf("nil RoutingPolicy_PolicyDefinition_Statement")
	}
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new RoutingPolicy_PolicyDefinition_Statement, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) AppendNew(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append RoutingPolicy_PolicyDefinition_Statement")
	}
	key := Name

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &RoutingPolicy_PolicyDefinition_Statement{
		Name: &Name,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Statement.Values() {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition.
func (*RoutingPolicy_PolicyDefinition) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement struct {
	Actions    *RoutingPolicy_PolicyDefinition_Statement_Actions    `path:"actions" module:"openconfig-routing-policy"`
	Conditions *RoutingPolicy_PolicyDefinition_Statement_Conditions `path:"conditions" module:"openconfig-routing-policy"`
	Name       *string                                              `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &RoutingPolicy_PolicyDefinition_Statement_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition_Statement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the RoutingPolicy_PolicyDefinition_Statement
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.Conditions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition_Statement struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement.
func (*RoutingPolicy_PolicyDefinition_Statement) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions struct {
	BgpActions   *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions `path:"bgp-actions" module:"openconfig-bgp-policy"`
	PolicyResult E_RoutingPolicy_PolicyResultType                             `path:"state/policy-result" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/policy-result" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	SetTag       *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag     `path:"set-tag" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) IsYANGGoStruct() {}

// GetOrCreateBgpActions retrieves the value of the BgpActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t.BgpActions != nil {
		return t.BgpActions
	}
	t.BgpActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions{}
	return t.BgpActions
}

// GetOrCreateSetTag retrieves the value of the SetTag field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t.SetTag != nil {
		return t.SetTag
	}
	t.SetTag = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag{}
	return t.SetTag
}

// GetBgpActions returns the value of the BgpActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field BgpActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t != nil && t.BgpActions != nil {
		return t.BgpActions
	}
	return nil
}

// GetSetTag returns the value of the SetTag struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field SetTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t != nil && t.SetTag != nil {
		return t.SetTag
	}
	return nil
}

// GetPolicyResult retrieves the value of the leaf PolicyResult from the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyResult is set, it can
// safely use t.GetPolicyResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyResult == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetPolicyResult() E_RoutingPolicy_PolicyResultType {
	if t == nil || t.PolicyResult == 0 {
		return RoutingPolicy_PolicyResultType_NEXT_STATEMENT
	}
	return t.PolicyResult
}

// SetPolicyResult sets the value of the leaf PolicyResult in the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) SetPolicyResult(v E_RoutingPolicy_PolicyResultType) {
	t.PolicyResult = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PolicyResult == 0 {
		t.PolicyResult = RoutingPolicy_PolicyResultType_NEXT_STATEMENT
	}
	t.BgpActions.PopulateDefaults()
	t.SetTag.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions struct {
	SetAsPathPrepend *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend `path:"set-as-path-prepend" module:"openconfig-bgp-policy"`
	SetCommunity     *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity     `path:"set-community" module:"openconfig-bgp-policy"`
	SetExtCommunity  *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity  `path:"set-ext-community" module:"openconfig-bgp-policy"`
	SetLocalPref     *uint32                                                                       `path:"state/set-local-pref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-local-pref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetMed           RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union      `path:"state/set-med" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-med" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetMedAction     E_BgpPolicy_BgpSetMedAction                                                   `path:"state/set-med-action" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-med-action" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetNextHop       RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union  `path:"state/set-next-hop" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-next-hop" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetRouteOrigin   E_BgpTypes_BgpOriginAttrType                                                  `path:"state/set-route-origin" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-route-origin" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) IsYANGGoStruct() {}

// GetOrCreateSetAsPathPrepend retrieves the value of the SetAsPathPrepend field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	t.SetAsPathPrepend = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend{}
	return t.SetAsPathPrepend
}

// GetOrCreateSetCommunity retrieves the value of the SetCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t.SetCommunity != nil {
		return t.SetCommunity
	}
	t.SetCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity{}
	return t.SetCommunity
}

// GetOrCreateSetExtCommunity retrieves the value of the SetExtCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	t.SetExtCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity{}
	return t.SetExtCommunity
}

// GetSetAsPathPrepend returns the value of the SetAsPathPrepend struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetAsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t != nil && t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	return nil
}

// GetSetCommunity returns the value of the SetCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t != nil && t.SetCommunity != nil {
		return t.SetCommunity
	}
	return nil
}

// GetSetExtCommunity returns the value of the SetExtCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetExtCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t != nil && t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	return nil
}

// GetSetLocalPref retrieves the value of the leaf SetLocalPref from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetLocalPref is set, it can
// safely use t.GetSetLocalPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetLocalPref == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetLocalPref() uint32 {
	if t == nil || t.SetLocalPref == nil {
		return 0
	}
	return *t.SetLocalPref
}

// GetSetMed retrieves the value of the leaf SetMed from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMed is set, it can
// safely use t.GetSetMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMed == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetMed() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union {
	if t == nil || t.SetMed == nil {
		return nil
	}
	return t.SetMed
}

// GetSetMedAction retrieves the value of the leaf SetMedAction from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMedAction is set, it can
// safely use t.GetSetMedAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMedAction == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetMedAction() E_BgpPolicy_BgpSetMedAction {
	if t == nil || t.SetMedAction == 0 {
		return 0
	}
	return t.SetMedAction
}

// GetSetNextHop retrieves the value of the leaf SetNextHop from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetNextHop is set, it can
// safely use t.GetSetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetNextHop == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetNextHop() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union {
	if t == nil || t.SetNextHop == nil {
		return nil
	}
	return t.SetNextHop
}

// GetSetRouteOrigin retrieves the value of the leaf SetRouteOrigin from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetRouteOrigin is set, it can
// safely use t.GetSetRouteOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetRouteOrigin == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetRouteOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.SetRouteOrigin == 0 {
		return 0
	}
	return t.SetRouteOrigin
}

// SetSetLocalPref sets the value of the leaf SetLocalPref in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetLocalPref(v uint32) {
	t.SetLocalPref = &v
}

// SetSetMed sets the value of the leaf SetMed in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetMed(v RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union) {
	t.SetMed = v
}

// SetSetMedAction sets the value of the leaf SetMedAction in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetMedAction(v E_BgpPolicy_BgpSetMedAction) {
	t.SetMedAction = v
}

// SetSetNextHop sets the value of the leaf SetNextHop in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetNextHop(v RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union) {
	t.SetNextHop = v
}

// SetSetRouteOrigin sets the value of the leaf SetRouteOrigin in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetRouteOrigin(v E_BgpTypes_BgpOriginAttrType) {
	t.SetRouteOrigin = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SetAsPathPrepend.PopulateDefaults()
	t.SetCommunity.PopulateDefaults()
	t.SetExtCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend struct {
	Asn     *uint32 `path:"state/asn" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/asn" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RepeatN *uint8  `path:"state/repeat-n" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/repeat-n" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) IsYANGGoStruct() {
}

// GetAsn retrieves the value of the leaf Asn from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn is set, it can
// safely use t.GetAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetAsn() uint32 {
	if t == nil || t.Asn == nil {
		return 0
	}
	return *t.Asn
}

// GetRepeatN retrieves the value of the leaf RepeatN from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatN is set, it can
// safely use t.GetRepeatN() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatN == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetRepeatN() uint8 {
	if t == nil || t.RepeatN == nil {
		return 0
	}
	return *t.RepeatN
}

// SetAsn sets the value of the leaf Asn in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) SetAsn(v uint32) {
	t.Asn = &v
}

// SetRepeatN sets the value of the leaf RepeatN in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) SetRepeatN(v uint8) {
	t.RepeatN = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_SetCommunity_Method                                                               `path:"state/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                               `path:"state/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// SetMethod sets the value of the leaf Method in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) SetMethod(v E_SetCommunity_Method) {
	t.Method = v
}

// SetOptions sets the value of the leaf Options in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) SetOptions(v E_BgpPolicy_BgpSetCommunityOptionType) {
	t.Options = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union `path:"state/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// SetCommunities sets the value of the leaf Communities in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) SetCommunities(v []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union) {
	t.Communities = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference struct {
	CommunitySetRef  *string  `path:"state/community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySetRefs []string `path:"state/community-set-refs" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set-refs" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) IsYANGGoStruct() {
}

// GetCommunitySetRef retrieves the value of the leaf CommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRef is set, it can
// safely use t.GetCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRef() string {
	if t == nil || t.CommunitySetRef == nil {
		return ""
	}
	return *t.CommunitySetRef
}

// GetCommunitySetRefs retrieves the value of the leaf CommunitySetRefs from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRefs is set, it can
// safely use t.GetCommunitySetRefs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRefs == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRefs() []string {
	if t == nil || t.CommunitySetRefs == nil {
		return nil
	}
	return t.CommunitySetRefs
}

// SetCommunitySetRef sets the value of the leaf CommunitySetRef in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) SetCommunitySetRef(v string) {
	t.CommunitySetRef = &v
}

// SetCommunitySetRefs sets the value of the leaf CommunitySetRefs in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) SetCommunitySetRefs(v []string) {
	t.CommunitySetRefs = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_SetCommunity_Method                                                                  `path:"state/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                                  `path:"state/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) IsYANGGoStruct() {
}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// SetMethod sets the value of the leaf Method in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) SetMethod(v E_SetCommunity_Method) {
	t.Method = v
}

// SetOptions sets the value of the leaf Options in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) SetOptions(v E_BgpPolicy_BgpSetCommunityOptionType) {
	t.Options = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union `path:"state/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// SetCommunities sets the value of the leaf Communities in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) SetCommunities(v []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union) {
	t.Communities = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference struct {
	ExtCommunitySetRef  *string  `path:"state/ext-community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySetRefs []string `path:"state/ext-community-set-refs" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set-refs" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) IsYANGGoStruct() {
}

// GetExtCommunitySetRef retrieves the value of the leaf ExtCommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRef is set, it can
// safely use t.GetExtCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRef() string {
	if t == nil || t.ExtCommunitySetRef == nil {
		return ""
	}
	return *t.ExtCommunitySetRef
}

// GetExtCommunitySetRefs retrieves the value of the leaf ExtCommunitySetRefs from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRefs is set, it can
// safely use t.GetExtCommunitySetRefs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRefs == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRefs() []string {
	if t == nil || t.ExtCommunitySetRefs == nil {
		return nil
	}
	return t.ExtCommunitySetRefs
}

// SetExtCommunitySetRef sets the value of the leaf ExtCommunitySetRef in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) SetExtCommunitySetRef(v string) {
	t.ExtCommunitySetRef = &v
}

// SetExtCommunitySetRefs sets the value of the leaf ExtCommunitySetRefs in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) SetExtCommunitySetRefs(v []string) {
	t.ExtCommunitySetRefs = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline    `path:"inline" module:"openconfig-routing-policy"`
	Mode      E_SetTag_Mode                                                      `path:"state/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference `path:"reference" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetMode() E_SetTag_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// SetMode sets the value of the leaf Mode in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) SetMode(v E_SetTag_Mode) {
	t.Mode = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline struct {
	Tag []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union `path:"state/tag" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) GetTag() []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// SetTag sets the value of the leaf Tag in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) SetTag(v []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union) {
	t.Tag = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference struct {
	TagSet *string `path:"state/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// SetTagSet sets the value of the leaf TagSet in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) SetTagSet(v string) {
	t.TagSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions struct {
	BgpConditions     *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions    `path:"bgp-conditions" module:"openconfig-bgp-policy"`
	CallPolicy        *string                                                               `path:"state/call-policy" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/call-policy" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	InstallProtocolEq E_PolicyTypes_INSTALL_PROTOCOL_TYPE                                   `path:"state/install-protocol-eq" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/install-protocol-eq" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	MatchInterface    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface   `path:"match-interface" module:"openconfig-routing-policy"`
	MatchNeighborSet  *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet `path:"match-neighbor-set" module:"openconfig-routing-policy"`
	MatchPrefixSet    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet   `path:"match-prefix-set" module:"openconfig-routing-policy"`
	MatchTagSet       *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet      `path:"match-tag-set" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) IsYANGGoStruct() {}

// GetOrCreateBgpConditions retrieves the value of the BgpConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t.BgpConditions != nil {
		return t.BgpConditions
	}
	t.BgpConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions{}
	return t.BgpConditions
}

// GetOrCreateMatchInterface retrieves the value of the MatchInterface field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t.MatchInterface != nil {
		return t.MatchInterface
	}
	t.MatchInterface = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface{}
	return t.MatchInterface
}

// GetOrCreateMatchNeighborSet retrieves the value of the MatchNeighborSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	t.MatchNeighborSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet{}
	return t.MatchNeighborSet
}

// GetOrCreateMatchPrefixSet retrieves the value of the MatchPrefixSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	t.MatchPrefixSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet{}
	return t.MatchPrefixSet
}

// GetOrCreateMatchTagSet retrieves the value of the MatchTagSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	t.MatchTagSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet{}
	return t.MatchTagSet
}

// GetBgpConditions returns the value of the BgpConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field BgpConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t != nil && t.BgpConditions != nil {
		return t.BgpConditions
	}
	return nil
}

// GetMatchInterface returns the value of the MatchInterface struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t != nil && t.MatchInterface != nil {
		return t.MatchInterface
	}
	return nil
}

// GetMatchNeighborSet returns the value of the MatchNeighborSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchNeighborSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t != nil && t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	return nil
}

// GetMatchPrefixSet returns the value of the MatchPrefixSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchPrefixSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t != nil && t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	return nil
}

// GetMatchTagSet returns the value of the MatchTagSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchTagSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t != nil && t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	return nil
}

// GetCallPolicy retrieves the value of the leaf CallPolicy from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallPolicy is set, it can
// safely use t.GetCallPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallPolicy == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetCallPolicy() string {
	if t == nil || t.CallPolicy == nil {
		return ""
	}
	return *t.CallPolicy
}

// GetInstallProtocolEq retrieves the value of the leaf InstallProtocolEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallProtocolEq is set, it can
// safely use t.GetInstallProtocolEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallProtocolEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetInstallProtocolEq() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.InstallProtocolEq == 0 {
		return 0
	}
	return t.InstallProtocolEq
}

// SetCallPolicy sets the value of the leaf CallPolicy in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) SetCallPolicy(v string) {
	t.CallPolicy = &v
}

// SetInstallProtocolEq sets the value of the leaf InstallProtocolEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) SetInstallProtocolEq(v E_PolicyTypes_INSTALL_PROTOCOL_TYPE) {
	t.InstallProtocolEq = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpConditions.PopulateDefaults()
	t.MatchInterface.PopulateDefaults()
	t.MatchNeighborSet.PopulateDefaults()
	t.MatchPrefixSet.PopulateDefaults()
	t.MatchTagSet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions struct {
	AfiSafiIn            []E_BgpTypes_AFI_SAFI_TYPE                                                              `path:"state/afi-safi-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/afi-safi-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathLength         *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength         `path:"as-path-length" module:"openconfig-bgp-policy"`
	CommunityCount       *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount       `path:"community-count" module:"openconfig-bgp-policy"`
	CommunitySet         *string                                                                                 `path:"state/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunityCount    *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount    `path:"ext-community-count" module:"openconfig-bgp-policy"`
	ExtCommunitySet      *string                                                                                 `path:"state/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	LocalPrefEq          *uint32                                                                                 `path:"state/local-pref-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/local-pref-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchAsPathSet       *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet       `path:"match-as-path-set" module:"openconfig-bgp-policy"`
	MatchCommunitySet    *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet    `path:"match-community-set" module:"openconfig-bgp-policy"`
	MatchExtCommunitySet *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet `path:"match-ext-community-set" module:"openconfig-bgp-policy"`
	MedEq                *uint32                                                                                 `path:"state/med-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/med-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	NextHopIn            []string                                                                                `path:"state/next-hop-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/next-hop-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	OriginEq             E_BgpTypes_BgpOriginAttrType                                                            `path:"state/origin-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/origin-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RouteType            E_BgpConditions_RouteType                                                               `path:"state/route-type" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/route-type" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) IsYANGGoStruct() {}

// GetOrCreateAsPathLength retrieves the value of the AsPathLength field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t.AsPathLength != nil {
		return t.AsPathLength
	}
	t.AsPathLength = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength{}
	return t.AsPathLength
}

// GetOrCreateCommunityCount retrieves the value of the CommunityCount field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t.CommunityCount != nil {
		return t.CommunityCount
	}
	t.CommunityCount = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount{}
	return t.CommunityCount
}

// GetOrCreateExtCommunityCount retrieves the value of the ExtCommunityCount field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateExtCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount {
	if t.ExtCommunityCount != nil {
		return t.ExtCommunityCount
	}
	t.ExtCommunityCount = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount{}
	return t.ExtCommunityCount
}

// GetOrCreateMatchAsPathSet retrieves the value of the MatchAsPathSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	t.MatchAsPathSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet{}
	return t.MatchAsPathSet
}

// GetOrCreateMatchCommunitySet retrieves the value of the MatchCommunitySet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet {
	if t.MatchCommunitySet != nil {
		return t.MatchCommunitySet
	}
	t.MatchCommunitySet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet{}
	return t.MatchCommunitySet
}

// GetOrCreateMatchExtCommunitySet retrieves the value of the MatchExtCommunitySet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet {
	if t.MatchExtCommunitySet != nil {
		return t.MatchExtCommunitySet
	}
	t.MatchExtCommunitySet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet{}
	return t.MatchExtCommunitySet
}

// GetAsPathLength returns the value of the AsPathLength struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field AsPathLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t != nil && t.AsPathLength != nil {
		return t.AsPathLength
	}
	return nil
}

// GetCommunityCount returns the value of the CommunityCount struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field CommunityCount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t != nil && t.CommunityCount != nil {
		return t.CommunityCount
	}
	return nil
}

// GetExtCommunityCount returns the value of the ExtCommunityCount struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field ExtCommunityCount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetExtCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount {
	if t != nil && t.ExtCommunityCount != nil {
		return t.ExtCommunityCount
	}
	return nil
}

// GetMatchAsPathSet returns the value of the MatchAsPathSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchAsPathSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t != nil && t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	return nil
}

// GetMatchCommunitySet returns the value of the MatchCommunitySet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchCommunitySet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet {
	if t != nil && t.MatchCommunitySet != nil {
		return t.MatchCommunitySet
	}
	return nil
}

// GetMatchExtCommunitySet returns the value of the MatchExtCommunitySet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchExtCommunitySet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet {
	if t != nil && t.MatchExtCommunitySet != nil {
		return t.MatchExtCommunitySet
	}
	return nil
}

// GetAfiSafiIn retrieves the value of the leaf AfiSafiIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiIn is set, it can
// safely use t.GetAfiSafiIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAfiSafiIn() []E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiIn == nil {
		return nil
	}
	return t.AfiSafiIn
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// GetExtCommunitySet retrieves the value of the leaf ExtCommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySet is set, it can
// safely use t.GetExtCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetExtCommunitySet() string {
	if t == nil || t.ExtCommunitySet == nil {
		return ""
	}
	return *t.ExtCommunitySet
}

// GetLocalPrefEq retrieves the value of the leaf LocalPrefEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPrefEq is set, it can
// safely use t.GetLocalPrefEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPrefEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetLocalPrefEq() uint32 {
	if t == nil || t.LocalPrefEq == nil {
		return 0
	}
	return *t.LocalPrefEq
}

// GetMedEq retrieves the value of the leaf MedEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedEq is set, it can
// safely use t.GetMedEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMedEq() uint32 {
	if t == nil || t.MedEq == nil {
		return 0
	}
	return *t.MedEq
}

// GetNextHopIn retrieves the value of the leaf NextHopIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIn is set, it can
// safely use t.GetNextHopIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetNextHopIn() []string {
	if t == nil || t.NextHopIn == nil {
		return nil
	}
	return t.NextHopIn
}

// GetOriginEq retrieves the value of the leaf OriginEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginEq is set, it can
// safely use t.GetOriginEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOriginEq() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.OriginEq == 0 {
		return 0
	}
	return t.OriginEq
}

// GetRouteType retrieves the value of the leaf RouteType from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetRouteType() E_BgpConditions_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// SetAfiSafiIn sets the value of the leaf AfiSafiIn in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetAfiSafiIn(v []E_BgpTypes_AFI_SAFI_TYPE) {
	t.AfiSafiIn = v
}

// SetCommunitySet sets the value of the leaf CommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetCommunitySet(v string) {
	t.CommunitySet = &v
}

// SetExtCommunitySet sets the value of the leaf ExtCommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetExtCommunitySet(v string) {
	t.ExtCommunitySet = &v
}

// SetLocalPrefEq sets the value of the leaf LocalPrefEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetLocalPrefEq(v uint32) {
	t.LocalPrefEq = &v
}

// SetMedEq sets the value of the leaf MedEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetMedEq(v uint32) {
	t.MedEq = &v
}

// SetNextHopIn sets the value of the leaf NextHopIn in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetNextHopIn(v []string) {
	t.NextHopIn = v
}

// SetOriginEq sets the value of the leaf OriginEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetOriginEq(v E_BgpTypes_BgpOriginAttrType) {
	t.OriginEq = v
}

// SetRouteType sets the value of the leaf RouteType in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetRouteType(v E_BgpConditions_RouteType) {
	t.RouteType = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AsPathLength.PopulateDefaults()
	t.CommunityCount.PopulateDefaults()
	t.ExtCommunityCount.PopulateDefaults()
	t.MatchAsPathSet.PopulateDefaults()
	t.MatchCommunitySet.PopulateDefaults()
	t.MatchExtCommunitySet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/ext-community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunityCount) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet struct {
	AsPathSet       *string                           `path:"state/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/as-path-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) IsYANGGoStruct() {
}

// GetAsPathSet retrieves the value of the leaf AsPathSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSet is set, it can
// safely use t.GetAsPathSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetAsPathSet() string {
	if t == nil || t.AsPathSet == nil {
		return ""
	}
	return *t.AsPathSet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetAsPathSet sets the value of the leaf AsPathSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) SetAsPathSet(v string) {
	t.AsPathSet = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet struct {
	CommunitySet    *string                           `path:"state/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) IsYANGGoStruct() {
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetCommunitySet sets the value of the leaf CommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) SetCommunitySet(v string) {
	t.CommunitySet = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchCommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet struct {
	ExtCommunitySet *string                           `path:"state/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) IsYANGGoStruct() {
}

// GetExtCommunitySet retrieves the value of the leaf ExtCommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySet is set, it can
// safely use t.GetExtCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) GetExtCommunitySet() string {
	if t == nil || t.ExtCommunitySet == nil {
		return ""
	}
	return *t.ExtCommunitySet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetExtCommunitySet sets the value of the leaf ExtCommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) SetExtCommunitySet(v string) {
	t.ExtCommunitySet = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchExtCommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface struct {
	Interface    *string `path:"state/interface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/interface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/subinterface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	NeighborSet     *string                                     `path:"state/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/neighbor-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetNeighborSet retrieves the value of the leaf NeighborSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborSet is set, it can
// safely use t.GetNeighborSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetNeighborSet() string {
	if t == nil || t.NeighborSet == nil {
		return ""
	}
	return *t.NeighborSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetNeighborSet sets the value of the leaf NeighborSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) SetNeighborSet(v string) {
	t.NeighborSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	PrefixSet       *string                                     `path:"state/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/prefix-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetPrefixSet retrieves the value of the leaf PrefixSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixSet is set, it can
// safely use t.GetPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetPrefixSet() string {
	if t == nil || t.PrefixSet == nil {
		return ""
	}
	return *t.PrefixSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetPrefixSet sets the value of the leaf PrefixSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) SetPrefixSet(v string) {
	t.PrefixSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	TagSet          *string                                     `path:"state/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetTagSet sets the value of the leaf TagSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) SetTagSet(v string) {
	t.TagSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// System represents the /openconfig-system/system YANG schema element.
type System struct {
	Aaa                        *System_Aaa                            `path:"aaa" module:"openconfig-system"`
	Alarm                      map[string]*System_Alarm               `path:"alarms/alarm" module:"openconfig-system/openconfig-system"`
	BootTime                   *uint64                                `path:"state/boot-time" module:"openconfig-system/openconfig-system"`
	Clock                      *System_Clock                          `path:"clock" module:"openconfig-system"`
	Cpu                        map[System_Cpu_Index_Union]*System_Cpu `path:"cpus/cpu" module:"openconfig-system/openconfig-system"`
	CurrentDatetime            *string                                `path:"state/current-datetime" module:"openconfig-system/openconfig-system"`
	Dns                        *System_Dns                            `path:"dns" module:"openconfig-system"`
	DomainName                 *string                                `path:"state/domain-name" module:"openconfig-system/openconfig-system" shadow-path:"config/domain-name" shadow-module:"openconfig-system/openconfig-system"`
	Hostname                   *string                                `path:"state/hostname" module:"openconfig-system/openconfig-system" shadow-path:"config/hostname" shadow-module:"openconfig-system/openconfig-system"`
	LastConfigurationTimestamp *uint64                                `path:"state/last-configuration-timestamp" module:"openconfig-system/openconfig-system"`
	License                    *System_License                        `path:"license" module:"openconfig-system"`
	Logging                    *System_Logging                        `path:"logging" module:"openconfig-system"`
	LoginBanner                *string                                `path:"state/login-banner" module:"openconfig-system/openconfig-system" shadow-path:"config/login-banner" shadow-module:"openconfig-system/openconfig-system"`
	MacAddress                 *System_MacAddress                     `path:"mac-address" module:"openconfig-system"`
	Memory                     *System_Memory                         `path:"memory" module:"openconfig-system"`
	Messages                   *System_Messages                       `path:"messages" module:"openconfig-system"`
	MotdBanner                 *string                                `path:"state/motd-banner" module:"openconfig-system/openconfig-system" shadow-path:"config/motd-banner" shadow-module:"openconfig-system/openconfig-system"`
	MountPoint                 map[string]*System_MountPoint          `path:"mount-points/mount-point" module:"openconfig-system/openconfig-system"`
	Ntp                        *System_Ntp                            `path:"ntp" module:"openconfig-system"`
	Process                    map[uint64]*System_Process             `path:"processes/process" module:"openconfig-system/openconfig-system"`
	SoftwareVersion            *string                                `path:"state/software-version" module:"openconfig-system/openconfig-system"`
	SshServer                  *System_SshServer                      `path:"ssh-server" module:"openconfig-system"`
	TelnetServer               *System_TelnetServer                   `path:"telnet-server" module:"openconfig-system"`
	UpTime                     *uint64                                `path:"state/up-time" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewAlarm(Id string) (*System_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &System_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarmMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateAlarmMap() map[string]*System_Alarm {
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}
	return t.Alarm
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateAlarm(Id string) *System_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetAlarm(Id string) *System_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteAlarm(Id string) {
	key := Id

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied System_Alarm struct to the
// list Alarm of System. If the key value(s) specified in
// the supplied System_Alarm already exist in the list, an error is
// returned.
func (t *System) AppendAlarm(v *System_Alarm) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// NewCpu creates a new entry in the Cpu list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewCpu(Index System_Cpu_Index_Union) (*System_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &System_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameCpu(oldK, newK System_Cpu_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpuMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateCpuMap() map[System_Cpu_Index_Union]*System_Cpu {
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}
	return t.Cpu
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateCpu(Index System_Cpu_Index_Union) *System_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetCpu(Index System_Cpu_Index_Union) *System_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpu deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteCpu(Index System_Cpu_Index_Union) {
	key := Index

	delete(t.Cpu, key)
}

// AppendCpu appends the supplied System_Cpu struct to the
// list Cpu of System. If the key value(s) specified in
// the supplied System_Cpu already exist in the list, an error is
// returned.
func (t *System) AppendCpu(v *System_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// NewMountPoint creates a new entry in the MountPoint list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewMountPoint(Name string) (*System_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &System_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameMountPoint(oldK, newK string) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Name = &newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPointMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateMountPointMap() map[string]*System_MountPoint {
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}
	return t.MountPoint
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateMountPoint(Name string) *System_MountPoint {

	key := Name

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetMountPoint(Name string) *System_MountPoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteMountPoint(Name string) {
	key := Name

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied System_MountPoint struct to the
// list MountPoint of System. If the key value(s) specified in
// the supplied System_MountPoint already exist in the list, an error is
// returned.
func (t *System) AppendMountPoint(v *System_MountPoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// NewProcess creates a new entry in the Process list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewProcess(Pid uint64) (*System_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &System_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcessMap returns the list (map) from System.
//
// It initializes the field if not already initialized.
func (t *System) GetOrCreateProcessMap() map[uint64]*System_Process {
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}
	return t.Process
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateProcess(Pid uint64) *System_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetProcess(Pid uint64) *System_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// DeleteProcess deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteProcess(Pid uint64) {
	key := Pid

	delete(t.Process, key)
}

// AppendProcess appends the supplied System_Process struct to the
// list Process of System. If the key value(s) specified in
// the supplied System_Process already exist in the list, an error is
// returned.
func (t *System) AppendProcess(v *System_Process) error {
	if v.Pid == nil {
		return fmt.Errorf("invalid nil key received for Pid")
	}

	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateAaa() *System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &System_Aaa{}
	return t.Aaa
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateClock() *System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &System_Clock{}
	return t.Clock
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateDns() *System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &System_Dns{}
	return t.Dns
}

// GetOrCreateLicense retrieves the value of the License field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLicense() *System_License {
	if t.License != nil {
		return t.License
	}
	t.License = &System_License{}
	return t.License
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLogging() *System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &System_Logging{}
	return t.Logging
}

// GetOrCreateMacAddress retrieves the value of the MacAddress field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMacAddress() *System_MacAddress {
	if t.MacAddress != nil {
		return t.MacAddress
	}
	t.MacAddress = &System_MacAddress{}
	return t.MacAddress
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMemory() *System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &System_Memory{}
	return t.Memory
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMessages() *System_Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &System_Messages{}
	return t.Messages
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateNtp() *System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &System_Ntp{}
	return t.Ntp
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateSshServer() *System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &System_SshServer{}
	return t.SshServer
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateTelnetServer() *System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &System_TelnetServer{}
	return t.TelnetServer
}

// GetAaa returns the value of the Aaa struct pointer
// from System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetAaa() *System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetClock() *System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetDns() *System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetLicense returns the value of the License struct pointer
// from System. If the receiver or the field License is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLicense() *System_License {
	if t != nil && t.License != nil {
		return t.License
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLogging() *System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMacAddress returns the value of the MacAddress struct pointer
// from System. If the receiver or the field MacAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMacAddress() *System_MacAddress {
	if t != nil && t.MacAddress != nil {
		return t.MacAddress
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMemory() *System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from System. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMessages() *System_Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetNtp() *System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetSshServer() *System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetTelnetServer() *System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// GetBootTime retrieves the value of the leaf BootTime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTime is set, it can
// safely use t.GetBootTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTime == nil' before retrieving the leaf's value.
func (t *System) GetBootTime() uint64 {
	if t == nil || t.BootTime == nil {
		return 0
	}
	return *t.BootTime
}

// GetCurrentDatetime retrieves the value of the leaf CurrentDatetime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentDatetime is set, it can
// safely use t.GetCurrentDatetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentDatetime == nil' before retrieving the leaf's value.
func (t *System) GetCurrentDatetime() string {
	if t == nil || t.CurrentDatetime == nil {
		return ""
	}
	return *t.CurrentDatetime
}

// GetDomainName retrieves the value of the leaf DomainName from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *System) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLastConfigurationTimestamp retrieves the value of the leaf LastConfigurationTimestamp from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastConfigurationTimestamp is set, it can
// safely use t.GetLastConfigurationTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastConfigurationTimestamp == nil' before retrieving the leaf's value.
func (t *System) GetLastConfigurationTimestamp() uint64 {
	if t == nil || t.LastConfigurationTimestamp == nil {
		return 0
	}
	return *t.LastConfigurationTimestamp
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *System) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MotdBanner is set, it can
// safely use t.GetMotdBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MotdBanner == nil' before retrieving the leaf's value.
func (t *System) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareVersion is set, it can
// safely use t.GetSoftwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareVersion == nil' before retrieving the leaf's value.
func (t *System) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// GetUpTime retrieves the value of the leaf UpTime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpTime is set, it can
// safely use t.GetUpTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpTime == nil' before retrieving the leaf's value.
func (t *System) GetUpTime() uint64 {
	if t == nil || t.UpTime == nil {
		return 0
	}
	return *t.UpTime
}

// SetBootTime sets the value of the leaf BootTime in the System
// struct.
func (t *System) SetBootTime(v uint64) {
	t.BootTime = &v
}

// SetCurrentDatetime sets the value of the leaf CurrentDatetime in the System
// struct.
func (t *System) SetCurrentDatetime(v string) {
	t.CurrentDatetime = &v
}

// SetDomainName sets the value of the leaf DomainName in the System
// struct.
func (t *System) SetDomainName(v string) {
	t.DomainName = &v
}

// SetHostname sets the value of the leaf Hostname in the System
// struct.
func (t *System) SetHostname(v string) {
	t.Hostname = &v
}

// SetLastConfigurationTimestamp sets the value of the leaf LastConfigurationTimestamp in the System
// struct.
func (t *System) SetLastConfigurationTimestamp(v uint64) {
	t.LastConfigurationTimestamp = &v
}

// SetLoginBanner sets the value of the leaf LoginBanner in the System
// struct.
func (t *System) SetLoginBanner(v string) {
	t.LoginBanner = &v
}

// SetMotdBanner sets the value of the leaf MotdBanner in the System
// struct.
func (t *System) SetMotdBanner(v string) {
	t.MotdBanner = &v
}

// SetSoftwareVersion sets the value of the leaf SoftwareVersion in the System
// struct.
func (t *System) SetSoftwareVersion(v string) {
	t.SoftwareVersion = &v
}

// SetUpTime sets the value of the leaf UpTime in the System
// struct.
func (t *System) SetUpTime(v uint64) {
	t.UpTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aaa.PopulateDefaults()
	t.Clock.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.License.PopulateDefaults()
	t.Logging.PopulateDefaults()
	t.MacAddress.PopulateDefaults()
	t.Memory.PopulateDefaults()
	t.Messages.PopulateDefaults()
	t.Ntp.PopulateDefaults()
	t.SshServer.PopulateDefaults()
	t.TelnetServer.PopulateDefaults()
	for _, e := range t.Alarm {
		e.PopulateDefaults()
	}
	for _, e := range t.Cpu {
		e.PopulateDefaults()
	}
	for _, e := range t.MountPoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Process {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System.
func (*System) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type System_Aaa struct {
	Accounting     *System_Aaa_Accounting             `path:"accounting" module:"openconfig-system"`
	Authentication *System_Aaa_Authentication         `path:"authentication" module:"openconfig-system"`
	Authorization  *System_Aaa_Authorization          `path:"authorization" module:"openconfig-system"`
	ServerGroup    map[string]*System_Aaa_ServerGroup `path:"server-groups/server-group" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// System_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa) NewServerGroup(Name string) (*System_Aaa_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &System_Aaa_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the System_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroupMap returns the list (map) from System_Aaa.
//
// It initializes the field if not already initialized.
func (t *System_Aaa) GetOrCreateServerGroupMap() map[string]*System_Aaa_ServerGroup {
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}
	return t.ServerGroup
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver System_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa) GetOrCreateServerGroup(Name string) *System_Aaa_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of System_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa) GetServerGroup(Name string) *System_Aaa_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerGroup deletes the value with the specified keys from
// the receiver System_Aaa. If there is no such element, the function
// is a no-op.
func (t *System_Aaa) DeleteServerGroup(Name string) {
	key := Name

	delete(t.ServerGroup, key)
}

// AppendServerGroup appends the supplied System_Aaa_ServerGroup struct to the
// list ServerGroup of System_Aaa. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup already exist in the list, an error is
// returned.
func (t *System_Aaa) AppendServerGroup(v *System_Aaa_ServerGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAccounting() *System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthentication() *System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthorization() *System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &System_Aaa_Authorization{}
	return t.Authorization
}

// GetAccounting returns the value of the Accounting struct pointer
// from System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAccounting() *System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthentication() *System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthorization() *System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	for _, e := range t.ServerGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa.
func (*System_Aaa) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_Accounting struct {
	AccountingMethod []System_Aaa_Accounting_AccountingMethod_Union                        `path:"state/accounting-method" module:"openconfig-system/openconfig-system" shadow-path:"config/accounting-method" shadow-module:"openconfig-system/openconfig-system"`
	Event            map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Accounting struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Accounting) NewEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*System_Aaa_Accounting_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Accounting_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Accounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Accounting) RenameEvent(oldK, newK E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEventMap returns the list (map) from System_Aaa_Accounting.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_Accounting) GetOrCreateEventMap() map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event {
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}
	return t.Event
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Accounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Accounting) GetOrCreateEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Accounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Accounting) GetEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Accounting. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Accounting) DeleteEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Accounting_Event struct to the
// list Event of System_Aaa_Accounting. If the key value(s) specified in
// the supplied System_Aaa_Accounting_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Accounting) AppendEvent(v *System_Aaa_Accounting_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the System_Aaa_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingMethod is set, it can
// safely use t.GetAccountingMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting) GetAccountingMethod() []System_Aaa_Accounting_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// SetAccountingMethod sets the value of the leaf AccountingMethod in the System_Aaa_Accounting
// struct.
func (t *System_Aaa_Accounting) SetAccountingMethod(v []System_Aaa_Accounting_AccountingMethod_Union) {
	t.AccountingMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting.
func (*System_Aaa_Accounting) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_Event struct {
	EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE `path:"state/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Record    E_Event_Record                       `path:"state/record" module:"openconfig-system/openconfig-system" shadow-path:"config/record" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetEventType() E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetRecord() E_Event_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// SetEventType sets the value of the leaf EventType in the System_Aaa_Accounting_Event
// struct.
func (t *System_Aaa_Accounting_Event) SetEventType(v E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	t.EventType = v
}

// SetRecord sets the value of the leaf Record in the System_Aaa_Accounting_Event
// struct.
func (t *System_Aaa_Accounting_Event) SetRecord(v E_Event_Record) {
	t.Record = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Accounting_Event struct, which is a YANG list entry.
func (t *System_Aaa_Accounting_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Event.
func (*System_Aaa_Accounting_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_Authentication struct {
	AdminUser            *System_Aaa_Authentication_AdminUser                   `path:"admin-user" module:"openconfig-system"`
	AuthenticationMethod []System_Aaa_Authentication_AuthenticationMethod_Union `path:"state/authentication-method" module:"openconfig-system/openconfig-system" shadow-path:"config/authentication-method" shadow-module:"openconfig-system/openconfig-system"`
	User                 map[string]*System_Aaa_Authentication_User             `path:"users/user" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// System_Aaa_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authentication) NewUser(Username string) (*System_Aaa_Authentication_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &System_Aaa_Authentication_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the System_Aaa_Authentication struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authentication) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUserMap returns the list (map) from System_Aaa_Authentication.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_Authentication) GetOrCreateUserMap() map[string]*System_Aaa_Authentication_User {
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}
	return t.User
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver System_Aaa_Authentication. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authentication) GetOrCreateUser(Username string) *System_Aaa_Authentication_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of System_Aaa_Authentication. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authentication) GetUser(Username string) *System_Aaa_Authentication_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver System_Aaa_Authentication. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authentication) DeleteUser(Username string) {
	key := Username

	delete(t.User, key)
}

// AppendUser appends the supplied System_Aaa_Authentication_User struct to the
// list User of System_Aaa_Authentication. If the key value(s) specified in
// the supplied System_Aaa_Authentication_User already exist in the list, an error is
// returned.
func (t *System_Aaa_Authentication) AppendUser(v *System_Aaa_Authentication_User) error {
	if v.Username == nil {
		return fmt.Errorf("invalid nil key received for Username")
	}

	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *System_Aaa_Authentication) GetOrCreateAdminUser() *System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_Authentication) GetAdminUser() *System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationMethod is set, it can
// safely use t.GetAuthenticationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication) GetAuthenticationMethod() []System_Aaa_Authentication_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// SetAuthenticationMethod sets the value of the leaf AuthenticationMethod in the System_Aaa_Authentication
// struct.
func (t *System_Aaa_Authentication) SetAuthenticationMethod(v []System_Aaa_Authentication_AuthenticationMethod_Union) {
	t.AuthenticationMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdminUser.PopulateDefaults()
	for _, e := range t.User {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication.
func (*System_Aaa_Authentication) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUser struct {
	AdminPassword       *string `path:"state/admin-password" module:"openconfig-system/openconfig-system" shadow-path:"config/admin-password" shadow-module:"openconfig-system/openconfig-system"`
	AdminPasswordHashed *string `path:"state/admin-password-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/admin-password-hashed" shadow-module:"openconfig-system/openconfig-system"`
	AdminUsername       *string `path:"state/admin-username" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPassword is set, it can
// safely use t.GetAdminPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPassword == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPasswordHashed is set, it can
// safely use t.GetAdminPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// GetAdminUsername retrieves the value of the leaf AdminUsername from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminUsername is set, it can
// safely use t.GetAdminUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminUsername == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminUsername() string {
	if t == nil || t.AdminUsername == nil {
		return ""
	}
	return *t.AdminUsername
}

// SetAdminPassword sets the value of the leaf AdminPassword in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminPassword(v string) {
	t.AdminPassword = &v
}

// SetAdminPasswordHashed sets the value of the leaf AdminPasswordHashed in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminPasswordHashed(v string) {
	t.AdminPasswordHashed = &v
}

// SetAdminUsername sets the value of the leaf AdminUsername in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminUsername(v string) {
	t.AdminUsername = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_AdminUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_AdminUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_AdminUser.
func (*System_Aaa_Authentication_AdminUser) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_User struct {
	Password       *string                                   `path:"state/password" module:"openconfig-system/openconfig-system" shadow-path:"config/password" shadow-module:"openconfig-system/openconfig-system"`
	PasswordHashed *string                                   `path:"state/password-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/password-hashed" shadow-module:"openconfig-system/openconfig-system"`
	Role           System_Aaa_Authentication_User_Role_Union `path:"state/role" module:"openconfig-system/openconfig-system" shadow-path:"config/role" shadow-module:"openconfig-system/openconfig-system"`
	SshKey         *string                                   `path:"state/ssh-key" module:"openconfig-system/openconfig-system" shadow-path:"config/ssh-key" shadow-module:"openconfig-system/openconfig-system"`
	Username       *string                                   `path:"state/username|username" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/username|username" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_User) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordHashed is set, it can
// safely use t.GetPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetRole retrieves the value of the leaf Role from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetRole() System_Aaa_Authentication_User_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshKey is set, it can
// safely use t.GetSshKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// SetPassword sets the value of the leaf Password in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPassword(v string) {
	t.Password = &v
}

// SetPasswordHashed sets the value of the leaf PasswordHashed in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPasswordHashed(v string) {
	t.PasswordHashed = &v
}

// SetRole sets the value of the leaf Role in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetRole(v System_Aaa_Authentication_User_Role_Union) {
	t.Role = v
}

// SetSshKey sets the value of the leaf SshKey in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetSshKey(v string) {
	t.SshKey = &v
}

// SetUsername sets the value of the leaf Username in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetUsername(v string) {
	t.Username = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Authentication_User struct, which is a YANG list entry.
func (t *System_Aaa_Authentication_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_User.
func (*System_Aaa_Authentication_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_Authorization struct {
	AuthorizationMethod []System_Aaa_Authorization_AuthorizationMethod_Union                        `path:"state/authorization-method" module:"openconfig-system/openconfig-system" shadow-path:"config/authorization-method" shadow-module:"openconfig-system/openconfig-system"`
	Event               map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Authorization struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authorization) NewEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*System_Aaa_Authorization_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Authorization_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Authorization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authorization) RenameEvent(oldK, newK E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEventMap returns the list (map) from System_Aaa_Authorization.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_Authorization) GetOrCreateEventMap() map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event {
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}
	return t.Event
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Authorization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authorization) GetOrCreateEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Authorization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authorization) GetEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Authorization. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authorization) DeleteEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Authorization_Event struct to the
// list Event of System_Aaa_Authorization. If the key value(s) specified in
// the supplied System_Aaa_Authorization_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Authorization) AppendEvent(v *System_Aaa_Authorization_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the System_Aaa_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizationMethod is set, it can
// safely use t.GetAuthorizationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization) GetAuthorizationMethod() []System_Aaa_Authorization_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// SetAuthorizationMethod sets the value of the leaf AuthorizationMethod in the System_Aaa_Authorization
// struct.
func (t *System_Aaa_Authorization) SetAuthorizationMethod(v []System_Aaa_Authorization_AuthorizationMethod_Union) {
	t.AuthorizationMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization.
func (*System_Aaa_Authorization) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_Event struct {
	EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"state/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Authorization_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization_Event) GetEventType() E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// SetEventType sets the value of the leaf EventType in the System_Aaa_Authorization_Event
// struct.
func (t *System_Aaa_Authorization_Event) SetEventType(v E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	t.EventType = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Authorization_Event struct, which is a YANG list entry.
func (t *System_Aaa_Authorization_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization_Event.
func (*System_Aaa_Authorization_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroup struct {
	Name   *string                                   `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/name|name" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Server map[string]*System_Aaa_ServerGroup_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
	Type   E_AaaTypes_AAA_SERVER_TYPE                `path:"state/type" module:"openconfig-system/openconfig-system" shadow-path:"config/type" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// System_Aaa_ServerGroup struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_ServerGroup) NewServer(Address string) (*System_Aaa_ServerGroup_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Aaa_ServerGroup_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Aaa_ServerGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_ServerGroup) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServerMap returns the list (map) from System_Aaa_ServerGroup.
//
// It initializes the field if not already initialized.
func (t *System_Aaa_ServerGroup) GetOrCreateServerMap() map[string]*System_Aaa_ServerGroup_Server {
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}
	return t.Server
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_ServerGroup) GetOrCreateServer(Address string) *System_Aaa_ServerGroup_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Aaa_ServerGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_ServerGroup) GetServer(Address string) *System_Aaa_ServerGroup_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_ServerGroup) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Aaa_ServerGroup_Server struct to the
// list Server of System_Aaa_ServerGroup. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup_Server already exist in the list, an error is
// returned.
func (t *System_Aaa_ServerGroup) AppendServer(v *System_Aaa_ServerGroup_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetType() E_AaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetName sets the value of the leaf Name in the System_Aaa_ServerGroup
// struct.
func (t *System_Aaa_ServerGroup) SetName(v string) {
	t.Name = &v
}

// SetType sets the value of the leaf Type in the System_Aaa_ServerGroup
// struct.
func (t *System_Aaa_ServerGroup) SetType(v E_AaaTypes_AAA_SERVER_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup.
func (*System_Aaa_ServerGroup) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_Server struct {
	Address            *string                               `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	ConnectionAborts   *uint64                               `path:"state/connection-aborts" module:"openconfig-system/openconfig-system"`
	ConnectionCloses   *uint64                               `path:"state/connection-closes" module:"openconfig-system/openconfig-system"`
	ConnectionFailures *uint64                               `path:"state/connection-failures" module:"openconfig-system/openconfig-system"`
	ConnectionOpens    *uint64                               `path:"state/connection-opens" module:"openconfig-system/openconfig-system"`
	ConnectionTimeouts *uint64                               `path:"state/connection-timeouts" module:"openconfig-system/openconfig-system"`
	ErrorsReceived     *uint64                               `path:"state/errors-received" module:"openconfig-system/openconfig-system"`
	MessagesReceived   *uint64                               `path:"state/messages-received" module:"openconfig-system/openconfig-system"`
	MessagesSent       *uint64                               `path:"state/messages-sent" module:"openconfig-system/openconfig-system"`
	Name               *string                               `path:"state/name" module:"openconfig-system/openconfig-system" shadow-path:"config/name" shadow-module:"openconfig-system/openconfig-system"`
	Radius             *System_Aaa_ServerGroup_Server_Radius `path:"radius" module:"openconfig-system"`
	Tacacs             *System_Aaa_ServerGroup_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	Timeout            *uint16                               `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server) IsYANGGoStruct() {}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &System_Aaa_ServerGroup_Server_Radius{}
	return t.Radius
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &System_Aaa_ServerGroup_Server_Tacacs{}
	return t.Tacacs
}

// GetRadius returns the value of the Radius struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetConnectionAborts retrieves the value of the leaf ConnectionAborts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionAborts is set, it can
// safely use t.GetConnectionAborts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionAborts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionAborts() uint64 {
	if t == nil || t.ConnectionAborts == nil {
		return 0
	}
	return *t.ConnectionAborts
}

// GetConnectionCloses retrieves the value of the leaf ConnectionCloses from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionCloses is set, it can
// safely use t.GetConnectionCloses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionCloses == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionCloses() uint64 {
	if t == nil || t.ConnectionCloses == nil {
		return 0
	}
	return *t.ConnectionCloses
}

// GetConnectionFailures retrieves the value of the leaf ConnectionFailures from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionFailures is set, it can
// safely use t.GetConnectionFailures() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionFailures == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionFailures() uint64 {
	if t == nil || t.ConnectionFailures == nil {
		return 0
	}
	return *t.ConnectionFailures
}

// GetConnectionOpens retrieves the value of the leaf ConnectionOpens from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionOpens is set, it can
// safely use t.GetConnectionOpens() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionOpens == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionOpens() uint64 {
	if t == nil || t.ConnectionOpens == nil {
		return 0
	}
	return *t.ConnectionOpens
}

// GetConnectionTimeouts retrieves the value of the leaf ConnectionTimeouts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeouts is set, it can
// safely use t.GetConnectionTimeouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeouts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionTimeouts() uint64 {
	if t == nil || t.ConnectionTimeouts == nil {
		return 0
	}
	return *t.ConnectionTimeouts
}

// GetErrorsReceived retrieves the value of the leaf ErrorsReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorsReceived is set, it can
// safely use t.GetErrorsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorsReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetErrorsReceived() uint64 {
	if t == nil || t.ErrorsReceived == nil {
		return 0
	}
	return *t.ErrorsReceived
}

// GetMessagesReceived retrieves the value of the leaf MessagesReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesReceived is set, it can
// safely use t.GetMessagesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesReceived() uint64 {
	if t == nil || t.MessagesReceived == nil {
		return 0
	}
	return *t.MessagesReceived
}

// GetMessagesSent retrieves the value of the leaf MessagesSent from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesSent is set, it can
// safely use t.GetMessagesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesSent == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesSent() uint64 {
	if t == nil || t.MessagesSent == nil {
		return 0
	}
	return *t.MessagesSent
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetAddress sets the value of the leaf Address in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetAddress(v string) {
	t.Address = &v
}

// SetConnectionAborts sets the value of the leaf ConnectionAborts in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionAborts(v uint64) {
	t.ConnectionAborts = &v
}

// SetConnectionCloses sets the value of the leaf ConnectionCloses in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionCloses(v uint64) {
	t.ConnectionCloses = &v
}

// SetConnectionFailures sets the value of the leaf ConnectionFailures in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionFailures(v uint64) {
	t.ConnectionFailures = &v
}

// SetConnectionOpens sets the value of the leaf ConnectionOpens in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionOpens(v uint64) {
	t.ConnectionOpens = &v
}

// SetConnectionTimeouts sets the value of the leaf ConnectionTimeouts in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionTimeouts(v uint64) {
	t.ConnectionTimeouts = &v
}

// SetErrorsReceived sets the value of the leaf ErrorsReceived in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetErrorsReceived(v uint64) {
	t.ErrorsReceived = &v
}

// SetMessagesReceived sets the value of the leaf MessagesReceived in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetMessagesReceived(v uint64) {
	t.MessagesReceived = &v
}

// SetMessagesSent sets the value of the leaf MessagesSent in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetMessagesSent(v uint64) {
	t.MessagesSent = &v
}

// SetName sets the value of the leaf Name in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetName(v string) {
	t.Name = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Radius.PopulateDefaults()
	t.Tacacs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup_Server struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server.
func (*System_Aaa_ServerGroup_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_Radius struct {
	AcctPort           *uint16                                        `path:"state/acct-port" module:"openconfig-system/openconfig-system" shadow-path:"config/acct-port" shadow-module:"openconfig-system/openconfig-system"`
	AuthPort           *uint16                                        `path:"state/auth-port" module:"openconfig-system/openconfig-system" shadow-path:"config/auth-port" shadow-module:"openconfig-system/openconfig-system"`
	Counters           *System_Aaa_ServerGroup_Server_Radius_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	RetransmitAttempts *uint8                                         `path:"state/retransmit-attempts" module:"openconfig-system/openconfig-system" shadow-path:"config/retransmit-attempts" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey          *string                                        `path:"state/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed    *string                                        `path:"state/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress      *string                                        `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server_Radius) GetOrCreateCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Aaa_ServerGroup_Server_Radius_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Aaa_ServerGroup_Server_Radius. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server_Radius) GetCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAcctPort retrieves the value of the leaf AcctPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitAttempts is set, it can
// safely use t.GetRetransmitAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitAttempts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetAcctPort sets the value of the leaf AcctPort in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetAcctPort(v uint16) {
	t.AcctPort = &v
}

// SetAuthPort sets the value of the leaf AuthPort in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetAuthPort(v uint16) {
	t.AuthPort = &v
}

// SetRetransmitAttempts sets the value of the leaf RetransmitAttempts in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetRetransmitAttempts(v uint8) {
	t.RetransmitAttempts = &v
}

// SetSecretKey sets the value of the leaf SecretKey in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSecretKey(v string) {
	t.SecretKey = &v
}

// SetSecretKeyHashed sets the value of the leaf SecretKeyHashed in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSecretKeyHashed(v string) {
	t.SecretKeyHashed = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctPort == nil {
		var v uint16 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v uint16 = 1812
		t.AuthPort = &v
	}
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius.
func (*System_Aaa_ServerGroup_Server_Radius) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters struct {
	AccessAccepts         *uint64 `path:"access-accepts" module:"openconfig-system"`
	AccessRejects         *uint64 `path:"access-rejects" module:"openconfig-system"`
	RetriedAccessRequests *uint64 `path:"retried-access-requests" module:"openconfig-system"`
	TimeoutAccessRequests *uint64 `path:"timeout-access-requests" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetRetriedAccessRequests retrieves the value of the leaf RetriedAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetriedAccessRequests is set, it can
// safely use t.GetRetriedAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetriedAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetRetriedAccessRequests() uint64 {
	if t == nil || t.RetriedAccessRequests == nil {
		return 0
	}
	return *t.RetriedAccessRequests
}

// GetTimeoutAccessRequests retrieves the value of the leaf TimeoutAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAccessRequests is set, it can
// safely use t.GetTimeoutAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetTimeoutAccessRequests() uint64 {
	if t == nil || t.TimeoutAccessRequests == nil {
		return 0
	}
	return *t.TimeoutAccessRequests
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetRetriedAccessRequests sets the value of the leaf RetriedAccessRequests in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetRetriedAccessRequests(v uint64) {
	t.RetriedAccessRequests = &v
}

// SetTimeoutAccessRequests sets the value of the leaf TimeoutAccessRequests in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetTimeoutAccessRequests(v uint64) {
	t.TimeoutAccessRequests = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius_Counters.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs struct {
	Port            *uint16 `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey       *string `path:"state/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed *string `path:"state/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress   *string `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Tacacs) IsYANGGoStruct() {}

// GetPort retrieves the value of the leaf Port from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetPort sets the value of the leaf Port in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetPort(v uint16) {
	t.Port = &v
}

// SetSecretKey sets the value of the leaf SecretKey in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSecretKey(v string) {
	t.SecretKey = &v
}

// SetSecretKeyHashed sets the value of the leaf SecretKeyHashed in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSecretKeyHashed(v string) {
	t.SecretKeyHashed = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Tacacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Tacacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 49
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Tacacs.
func (*System_Aaa_ServerGroup_Server_Tacacs) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_Alarm struct {
	Id          *string                                `path:"state/id|id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"id" shadow-module:"openconfig-system"`
	Resource    *string                                `path:"state/resource" module:"openconfig-system/openconfig-system"`
	Severity    E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"state/severity" module:"openconfig-system/openconfig-system"`
	Text        *string                                `path:"state/text" module:"openconfig-system/openconfig-system"`
	TimeCreated *uint64                                `path:"state/time-created" module:"openconfig-system/openconfig-system"`
	TypeId      System_Alarm_TypeId_Union              `path:"state/type-id" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Alarm) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetResource retrieves the value of the leaf Resource from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resource is set, it can
// safely use t.GetResource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resource == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetResource() string {
	if t == nil || t.Resource == nil {
		return ""
	}
	return *t.Resource
}

// GetSeverity retrieves the value of the leaf Severity from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetText retrieves the value of the leaf Text from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Text is set, it can
// safely use t.GetText() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Text == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetTimeCreated retrieves the value of the leaf TimeCreated from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeCreated is set, it can
// safely use t.GetTimeCreated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeCreated == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTimeCreated() uint64 {
	if t == nil || t.TimeCreated == nil {
		return 0
	}
	return *t.TimeCreated
}

// GetTypeId retrieves the value of the leaf TypeId from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeId is set, it can
// safely use t.GetTypeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeId == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTypeId() System_Alarm_TypeId_Union {
	if t == nil || t.TypeId == nil {
		return nil
	}
	return t.TypeId
}

// SetId sets the value of the leaf Id in the System_Alarm
// struct.
func (t *System_Alarm) SetId(v string) {
	t.Id = &v
}

// SetResource sets the value of the leaf Resource in the System_Alarm
// struct.
func (t *System_Alarm) SetResource(v string) {
	t.Resource = &v
}

// SetSeverity sets the value of the leaf Severity in the System_Alarm
// struct.
func (t *System_Alarm) SetSeverity(v E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	t.Severity = v
}

// SetText sets the value of the leaf Text in the System_Alarm
// struct.
func (t *System_Alarm) SetText(v string) {
	t.Text = &v
}

// SetTimeCreated sets the value of the leaf TimeCreated in the System_Alarm
// struct.
func (t *System_Alarm) SetTimeCreated(v uint64) {
	t.TimeCreated = &v
}

// SetTypeId sets the value of the leaf TypeId in the System_Alarm
// struct.
func (t *System_Alarm) SetTypeId(v System_Alarm_TypeId_Union) {
	t.TypeId = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Alarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Alarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Alarm struct, which is a YANG list entry.
func (t *System_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Alarm.
func (*System_Alarm) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Clock represents the /openconfig-system/system/clock YANG schema element.
type System_Clock struct {
	TimezoneName *string `path:"state/timezone-name" module:"openconfig-system/openconfig-system" shadow-path:"config/timezone-name" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Clock) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the System_Clock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimezoneName is set, it can
// safely use t.GetTimezoneName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimezoneName == nil' before retrieving the leaf's value.
func (t *System_Clock) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// SetTimezoneName sets the value of the leaf TimezoneName in the System_Clock
// struct.
func (t *System_Clock) SetTimezoneName(v string) {
	t.TimezoneName = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Clock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Clock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Clock.
func (*System_Clock) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_Cpu struct {
	HardwareInterrupt *System_Cpu_HardwareInterrupt `path:"state/hardware-interrupt" module:"openconfig-system/openconfig-system"`
	Idle              *System_Cpu_Idle              `path:"state/idle" module:"openconfig-system/openconfig-system"`
	Index             System_Cpu_Index_Union        `path:"state/index|index" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"index" shadow-module:"openconfig-system"`
	Kernel            *System_Cpu_Kernel            `path:"state/kernel" module:"openconfig-system/openconfig-system"`
	Nice              *System_Cpu_Nice              `path:"state/nice" module:"openconfig-system/openconfig-system"`
	SoftwareInterrupt *System_Cpu_SoftwareInterrupt `path:"state/software-interrupt" module:"openconfig-system/openconfig-system"`
	Total             *System_Cpu_Total             `path:"state/total" module:"openconfig-system/openconfig-system"`
	User              *System_Cpu_User              `path:"state/user" module:"openconfig-system/openconfig-system"`
	Wait              *System_Cpu_Wait              `path:"state/wait" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &System_Cpu_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateIdle() *System_Cpu_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &System_Cpu_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateKernel() *System_Cpu_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &System_Cpu_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateNice() *System_Cpu_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &System_Cpu_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &System_Cpu_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateTotal() *System_Cpu_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &System_Cpu_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateUser() *System_Cpu_User {
	if t.User != nil {
		return t.User
	}
	t.User = &System_Cpu_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateWait() *System_Cpu_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &System_Cpu_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from System_Cpu. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetIdle() *System_Cpu_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from System_Cpu. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetKernel() *System_Cpu_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from System_Cpu. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetNice() *System_Cpu_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from System_Cpu. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetTotal() *System_Cpu_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from System_Cpu. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetUser() *System_Cpu_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from System_Cpu. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetWait() *System_Cpu_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the System_Cpu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *System_Cpu) GetIndex() System_Cpu_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// SetIndex sets the value of the leaf Index in the System_Cpu
// struct.
func (t *System_Cpu) SetIndex(v System_Cpu_Index_Union) {
	t.Index = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HardwareInterrupt.PopulateDefaults()
	t.Idle.PopulateDefaults()
	t.Kernel.PopulateDefaults()
	t.Nice.PopulateDefaults()
	t.SoftwareInterrupt.PopulateDefaults()
	t.Total.PopulateDefaults()
	t.User.PopulateDefaults()
	t.Wait.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the System_Cpu struct, which is a YANG list entry.
func (t *System_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu.
func (*System_Cpu) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_HardwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_HardwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_HardwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_HardwareInterrupt.
func (*System_Cpu_HardwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_Idle struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Idle) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Idle
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Idle) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Idle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Idle.
func (*System_Cpu_Idle) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_Kernel struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Kernel) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Kernel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Kernel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Kernel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Kernel.
func (*System_Cpu_Kernel) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_Nice struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Nice) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Nice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Nice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Nice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Nice.
func (*System_Cpu_Nice) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_SoftwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_SoftwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_SoftwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_SoftwareInterrupt.
func (*System_Cpu_SoftwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_Total struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Total) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Total
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Total) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Total.
func (*System_Cpu_Total) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_User struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_User) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_User.
func (*System_Cpu_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_Wait struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Wait) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Wait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Wait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Wait) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Wait.
func (*System_Cpu_Wait) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns represents the /openconfig-system/system/dns YANG schema element.
type System_Dns struct {
	HostEntry map[string]*System_Dns_HostEntry `path:"host-entries/host-entry" module:"openconfig-system/openconfig-system"`
	Search    []string                         `path:"state/search" module:"openconfig-system/openconfig-system" shadow-path:"config/search" shadow-module:"openconfig-system/openconfig-system"`
	Server    *System_Dns_Server_OrderedMap    `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// System_Dns struct. The keys of the list are populated from the input
// arguments.
func (t *System_Dns) NewHostEntry(Hostname string) (*System_Dns_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &System_Dns_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the System_Dns struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Dns) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntryMap returns the list (map) from System_Dns.
//
// It initializes the field if not already initialized.
func (t *System_Dns) GetOrCreateHostEntryMap() map[string]*System_Dns_HostEntry {
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}
	return t.HostEntry
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver System_Dns. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Dns) GetOrCreateHostEntry(Hostname string) *System_Dns_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of System_Dns. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Dns) GetHostEntry(Hostname string) *System_Dns_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostEntry deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the function
// is a no-op.
func (t *System_Dns) DeleteHostEntry(Hostname string) {
	key := Hostname

	delete(t.HostEntry, key)
}

// AppendHostEntry appends the supplied System_Dns_HostEntry struct to the
// list HostEntry of System_Dns. If the key value(s) specified in
// the supplied System_Dns_HostEntry already exist in the list, an error is
// returned.
func (t *System_Dns) AppendHostEntry(v *System_Dns_HostEntry) error {
	if v.Hostname == nil {
		return fmt.Errorf("invalid nil key received for Hostname")
	}

	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// GetSearch retrieves the value of the leaf Search from the System_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Search is set, it can
// safely use t.GetSearch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Search == nil' before retrieving the leaf's value.
func (t *System_Dns) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// SetSearch sets the value of the leaf Search in the System_Dns
// struct.
func (t *System_Dns) SetSearch(v []string) {
	t.Search = v
}

// GetOrCreateServerMap returns the ordered map field
// Server from System_Dns.
//
// It initializes the field if not already initialized.
func (s *System_Dns) GetOrCreateServerMap() *System_Dns_Server_OrderedMap {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server
}

// AppendNewServer creates a new entry in the Server
// ordered map of the System_Dns struct. The keys of the list are
// populated from the input arguments.
func (s *System_Dns) AppendNewServer(Address string) (*System_Dns_Server, error) {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server.AppendNew(Address)
}

// AppendServer appends the supplied System_Dns_Server struct
// to the list Server of System_Dns. If the key value(s)
// specified in the supplied System_Dns_Server already exist in the list, an
// error is returned.
func (s *System_Dns) AppendServer(v *System_Dns_Server) error {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server.Append(v)
}

// GetServer retrieves the value with the specified key from the
// Server map field of System_Dns. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *System_Dns) GetServer(Address string) *System_Dns_Server {
	if s == nil {
		return nil
	}
	key := Address
	return s.Server.Get(key)
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the
// function is a no-op.
func (s *System_Dns) DeleteServer(Address string) bool {
	key := Address
	return s.Server.Delete(key)
}

// System_Dns_Server_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-system/system/dns/servers/server.
type System_Dns_Server_OrderedMap struct {
	keys     []string
	valueMap map[string]*System_Dns_Server
}

// IsYANGOrderedList ensures that System_Dns_Server_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*System_Dns_Server_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *System_Dns_Server_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*System_Dns_Server{}
	}
}

// Keys returns a copy of the list's keys.
func (o *System_Dns_Server_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *System_Dns_Server_OrderedMap) Values() []*System_Dns_Server {
	if o == nil {
		return nil
	}
	var values []*System_Dns_Server
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of System_Dns_Server_OrderedMap
func (o *System_Dns_Server_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *System_Dns_Server_OrderedMap) Get(key string) *System_Dns_Server {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *System_Dns_Server_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a System_Dns_Server, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *System_Dns_Server_OrderedMap) Append(v *System_Dns_Server) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append System_Dns_Server")
	}
	if v == nil {
		return fmt.Errorf("nil System_Dns_Server")
	}
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new System_Dns_Server, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *System_Dns_Server_OrderedMap) AppendNew(Address string) (*System_Dns_Server, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append System_Dns_Server")
	}
	key := Address

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &System_Dns_Server{
		Address: &Address,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.HostEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.Server.Values() {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns.
func (*System_Dns) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntry struct {
	Alias       []string `path:"state/alias" module:"openconfig-system/openconfig-system" shadow-path:"config/alias" shadow-module:"openconfig-system/openconfig-system"`
	Hostname    *string  `path:"state/hostname|hostname" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/hostname|hostname" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Ipv4Address []string `path:"state/ipv4-address" module:"openconfig-system/openconfig-system" shadow-path:"config/ipv4-address" shadow-module:"openconfig-system/openconfig-system"`
	Ipv6Address []string `path:"state/ipv6-address" module:"openconfig-system/openconfig-system" shadow-path:"config/ipv6-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_HostEntry) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alias is set, it can
// safely use t.GetAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alias == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// SetAlias sets the value of the leaf Alias in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetAlias(v []string) {
	t.Alias = v
}

// SetHostname sets the value of the leaf Hostname in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetHostname(v string) {
	t.Hostname = &v
}

// SetIpv4Address sets the value of the leaf Ipv4Address in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetIpv4Address(v []string) {
	t.Ipv4Address = v
}

// SetIpv6Address sets the value of the leaf Ipv6Address in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetIpv6Address(v []string) {
	t.Ipv6Address = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_HostEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_HostEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Dns_HostEntry struct, which is a YANG list entry.
func (t *System_Dns_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_HostEntry.
func (*System_Dns_HostEntry) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_Server struct {
	Address *string `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Port    *uint16 `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// SetAddress sets the value of the leaf Address in the System_Dns_Server
// struct.
func (t *System_Dns_Server) SetAddress(v string) {
	t.Address = &v
}

// SetPort sets the value of the leaf Port in the System_Dns_Server
// struct.
func (t *System_Dns_Server) SetPort(v uint16) {
	t.Port = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 53
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the System_Dns_Server struct, which is a YANG list entry.
func (t *System_Dns_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_Server.
func (*System_Dns_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_License represents the /openconfig-system/system/license YANG schema element.
type System_License struct {
	License map[string]*System_License_License `path:"licenses/license" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// System_License struct. The keys of the list are populated from the input
// arguments.
func (t *System_License) NewLicense(LicenseId string) (*System_License_License, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &System_License_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// RenameLicense renames an entry in the list License within
// the System_License struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_License) RenameLicense(oldK, newK string) error {
	if _, ok := t.License[newK]; ok {
		return fmt.Errorf("key %v already exists in License", newK)
	}

	e, ok := t.License[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in License", oldK)
	}
	e.LicenseId = &newK

	t.License[newK] = e
	delete(t.License, oldK)
	return nil
}

// GetOrCreateLicenseMap returns the list (map) from System_License.
//
// It initializes the field if not already initialized.
func (t *System_License) GetOrCreateLicenseMap() map[string]*System_License_License {
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}
	return t.License
}

// GetOrCreateLicense retrieves the value with the specified keys from
// the receiver System_License. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_License) GetOrCreateLicense(LicenseId string) *System_License_License {

	key := LicenseId

	if v, ok := t.License[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLicense(LicenseId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLicense got unexpected error: %v", err))
	}
	return v
}

// GetLicense retrieves the value with the specified key from
// the License map field of System_License. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_License) GetLicense(LicenseId string) *System_License_License {

	if t == nil {
		return nil
	}

	key := LicenseId

	if lm, ok := t.License[key]; ok {
		return lm
	}
	return nil
}

// DeleteLicense deletes the value with the specified keys from
// the receiver System_License. If there is no such element, the function
// is a no-op.
func (t *System_License) DeleteLicense(LicenseId string) {
	key := LicenseId

	delete(t.License, key)
}

// AppendLicense appends the supplied System_License_License struct to the
// list License of System_License. If the key value(s) specified in
// the supplied System_License_License already exist in the list, an error is
// returned.
func (t *System_License) AppendLicense(v *System_License_License) error {
	if v.LicenseId == nil {
		return fmt.Errorf("invalid nil key received for LicenseId")
	}

	key := *v.LicenseId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	if _, ok := t.License[key]; ok {
		return fmt.Errorf("duplicate key for list License %v", key)
	}

	t.License[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.License {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License.
func (*System_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_License_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_License struct {
	Active         *bool                                    `path:"state/active" module:"openconfig-system/openconfig-system" shadow-path:"config/active" shadow-module:"openconfig-system/openconfig-system"`
	Description    *string                                  `path:"state/description" module:"openconfig-system/openconfig-system"`
	ExpirationDate *uint64                                  `path:"state/expiration-date" module:"openconfig-system/openconfig-system"`
	Expired        *bool                                    `path:"state/expired" module:"openconfig-system/openconfig-system"`
	InUse          *bool                                    `path:"state/in-use" module:"openconfig-system/openconfig-system"`
	IssueDate      *uint64                                  `path:"state/issue-date" module:"openconfig-system/openconfig-system"`
	LicenseData    System_License_License_LicenseData_Union `path:"state/license-data" module:"openconfig-system/openconfig-system" shadow-path:"config/license-data" shadow-module:"openconfig-system/openconfig-system"`
	LicenseId      *string                                  `path:"state/license-id|license-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/license-id|license-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Valid          *bool                                    `path:"state/valid" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License_License) IsYANGGoStruct() {}

// GetActive retrieves the value of the leaf Active from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *System_License_License) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetDescription retrieves the value of the leaf Description from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *System_License_License) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExpirationDate retrieves the value of the leaf ExpirationDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpirationDate is set, it can
// safely use t.GetExpirationDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpirationDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpirationDate() uint64 {
	if t == nil || t.ExpirationDate == nil {
		return 0
	}
	return *t.ExpirationDate
}

// GetExpired retrieves the value of the leaf Expired from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expired is set, it can
// safely use t.GetExpired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expired == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpired() bool {
	if t == nil || t.Expired == nil {
		return false
	}
	return *t.Expired
}

// GetInUse retrieves the value of the leaf InUse from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUse is set, it can
// safely use t.GetInUse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUse == nil' before retrieving the leaf's value.
func (t *System_License_License) GetInUse() bool {
	if t == nil || t.InUse == nil {
		return false
	}
	return *t.InUse
}

// GetIssueDate retrieves the value of the leaf IssueDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IssueDate is set, it can
// safely use t.GetIssueDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IssueDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetIssueDate() uint64 {
	if t == nil || t.IssueDate == nil {
		return 0
	}
	return *t.IssueDate
}

// GetLicenseData retrieves the value of the leaf LicenseData from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseData is set, it can
// safely use t.GetLicenseData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseData == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseData() System_License_License_LicenseData_Union {
	if t == nil || t.LicenseData == nil {
		return nil
	}
	return t.LicenseData
}

// GetLicenseId retrieves the value of the leaf LicenseId from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseId is set, it can
// safely use t.GetLicenseId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseId == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseId() string {
	if t == nil || t.LicenseId == nil {
		return ""
	}
	return *t.LicenseId
}

// GetValid retrieves the value of the leaf Valid from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *System_License_License) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// SetActive sets the value of the leaf Active in the System_License_License
// struct.
func (t *System_License_License) SetActive(v bool) {
	t.Active = &v
}

// SetDescription sets the value of the leaf Description in the System_License_License
// struct.
func (t *System_License_License) SetDescription(v string) {
	t.Description = &v
}

// SetExpirationDate sets the value of the leaf ExpirationDate in the System_License_License
// struct.
func (t *System_License_License) SetExpirationDate(v uint64) {
	t.ExpirationDate = &v
}

// SetExpired sets the value of the leaf Expired in the System_License_License
// struct.
func (t *System_License_License) SetExpired(v bool) {
	t.Expired = &v
}

// SetInUse sets the value of the leaf InUse in the System_License_License
// struct.
func (t *System_License_License) SetInUse(v bool) {
	t.InUse = &v
}

// SetIssueDate sets the value of the leaf IssueDate in the System_License_License
// struct.
func (t *System_License_License) SetIssueDate(v uint64) {
	t.IssueDate = &v
}

// SetLicenseData sets the value of the leaf LicenseData in the System_License_License
// struct.
func (t *System_License_License) SetLicenseData(v System_License_License_LicenseData_Union) {
	t.LicenseData = v
}

// SetLicenseId sets the value of the leaf LicenseId in the System_License_License
// struct.
func (t *System_License_License) SetLicenseId(v string) {
	t.LicenseId = &v
}

// SetValid sets the value of the leaf Valid in the System_License_License
// struct.
func (t *System_License_License) SetValid(v bool) {
	t.Valid = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_License_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v bool = false
		t.Active = &v
	}
}

// ΛListKeyMap returns the keys of the System_License_License struct, which is a YANG list entry.
func (t *System_License_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License_License.
func (*System_License_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging represents the /openconfig-system/system/logging YANG schema element.
type System_Logging struct {
	Console      *System_Logging_Console                          `path:"console" module:"openconfig-system"`
	File         map[System_Logging_File_Key]*System_Logging_File `path:"files/file" module:"openconfig-system/openconfig-system"`
	RemoteServer map[string]*System_Logging_RemoteServer          `path:"remote-servers/remote-server" module:"openconfig-system/openconfig-system"`
	Vty          *System_Logging_Vty                              `path:"vty" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging) IsYANGGoStruct() {}

// System_Logging_File_Key represents the key for list File of element /openconfig-system/system/logging.
type System_Logging_File_Key struct {
	Path           string `path:"path"`
	FilenamePrefix string `path:"filename-prefix"`
}

// IsYANGGoKeyStruct ensures that System_Logging_File_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_File_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_File_Key key struct.
func (t System_Logging_File_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path":            t.Path,
		"filename-prefix": t.FilenamePrefix,
	}, nil
}

// NewFile creates a new entry in the File list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewFile(Path string, FilenamePrefix string) (*System_Logging_File, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.File[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list File", key)
	}

	t.File[key] = &System_Logging_File{
		Path:           &Path,
		FilenamePrefix: &FilenamePrefix,
	}

	return t.File[key], nil
}

// RenameFile renames an entry in the list File within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameFile(oldK, newK System_Logging_File_Key) error {
	if _, ok := t.File[newK]; ok {
		return fmt.Errorf("key %v already exists in File", newK)
	}

	e, ok := t.File[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in File", oldK)
	}
	e.Path = &newK.Path
	e.FilenamePrefix = &newK.FilenamePrefix

	t.File[newK] = e
	delete(t.File, oldK)
	return nil
}

// GetOrCreateFileMap returns the list (map) from System_Logging.
//
// It initializes the field if not already initialized.
func (t *System_Logging) GetOrCreateFileMap() map[System_Logging_File_Key]*System_Logging_File {
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}
	return t.File
}

// GetOrCreateFile retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateFile(Path string, FilenamePrefix string) *System_Logging_File {

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if v, ok := t.File[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFile(Path, FilenamePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFile got unexpected error: %v", err))
	}
	return v
}

// GetFile retrieves the value with the specified key from
// the File map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetFile(Path string, FilenamePrefix string) *System_Logging_File {

	if t == nil {
		return nil
	}

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if lm, ok := t.File[key]; ok {
		return lm
	}
	return nil
}

// DeleteFile deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteFile(Path string, FilenamePrefix string) {
	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	delete(t.File, key)
}

// AppendFile appends the supplied System_Logging_File struct to the
// list File of System_Logging. If the key value(s) specified in
// the supplied System_Logging_File already exist in the list, an error is
// returned.
func (t *System_Logging) AppendFile(v *System_Logging_File) error {
	if v.Path == nil {
		return fmt.Errorf("invalid nil key for Path")
	}

	if v.FilenamePrefix == nil {
		return fmt.Errorf("invalid nil key for FilenamePrefix")
	}

	key := System_Logging_File_Key{
		Path:           *v.Path,
		FilenamePrefix: *v.FilenamePrefix,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}

	if _, ok := t.File[key]; ok {
		return fmt.Errorf("duplicate key for list File %v", key)
	}

	t.File[key] = v
	return nil
}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewRemoteServer(Host string) (*System_Logging_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &System_Logging_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServerMap returns the list (map) from System_Logging.
//
// It initializes the field if not already initialized.
func (t *System_Logging) GetOrCreateRemoteServerMap() map[string]*System_Logging_RemoteServer {
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}
	return t.RemoteServer
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateRemoteServer(Host string) *System_Logging_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetRemoteServer(Host string) *System_Logging_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteServer deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteRemoteServer(Host string) {
	key := Host

	delete(t.RemoteServer, key)
}

// AppendRemoteServer appends the supplied System_Logging_RemoteServer struct to the
// list RemoteServer of System_Logging. If the key value(s) specified in
// the supplied System_Logging_RemoteServer already exist in the list, an error is
// returned.
func (t *System_Logging) AppendRemoteServer(v *System_Logging_RemoteServer) error {
	if v.Host == nil {
		return fmt.Errorf("invalid nil key received for Host")
	}

	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateConsole() *System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &System_Logging_Console{}
	return t.Console
}

// GetOrCreateVty retrieves the value of the Vty field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateVty() *System_Logging_Vty {
	if t.Vty != nil {
		return t.Vty
	}
	t.Vty = &System_Logging_Vty{}
	return t.Vty
}

// GetConsole returns the value of the Console struct pointer
// from System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetConsole() *System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetVty returns the value of the Vty struct pointer
// from System_Logging. If the receiver or the field Vty is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetVty() *System_Logging_Vty {
	if t != nil && t.Vty != nil {
		return t.Vty
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Console.PopulateDefaults()
	t.Vty.PopulateDefaults()
	for _, e := range t.File {
		e.PopulateDefaults()
	}
	for _, e := range t.RemoteServer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging.
func (*System_Logging) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_Console struct {
	Selector map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console) IsYANGGoStruct() {}

// System_Logging_Console_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console.
type System_Logging_Console_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_Console_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_Console_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_Console_Selector_Key key struct.
func (t System_Logging_Console_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Console struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Console) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Console_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Console_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Console struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Console) RenameSelector(oldK, newK System_Logging_Console_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_Console.
//
// It initializes the field if not already initialized.
func (t *System_Logging_Console) GetOrCreateSelectorMap() map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Console. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Console) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Console. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Console) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Console. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Console) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Console_Selector struct to the
// list Selector of System_Logging_Console. If the key value(s) specified in
// the supplied System_Logging_Console_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Console) AppendSelector(v *System_Logging_Console_Selector) error {
	key := System_Logging_Console_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console.
func (*System_Logging_Console) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_Console_Selector
// struct.
func (t *System_Logging_Console_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_Console_Selector
// struct.
func (t *System_Logging_Console_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_Console_Selector struct, which is a YANG list entry.
func (t *System_Logging_Console_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console_Selector.
func (*System_Logging_Console_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_File represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_File struct {
	FilenamePrefix *string                                                            `path:"state/filename-prefix|filename-prefix" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/filename-prefix|filename-prefix" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	MaxOpenTime    *uint32                                                            `path:"state/max-open-time" module:"openconfig-system/openconfig-system" shadow-path:"config/max-open-time" shadow-module:"openconfig-system/openconfig-system"`
	MaxSize        *uint32                                                            `path:"state/max-size" module:"openconfig-system/openconfig-system" shadow-path:"config/max-size" shadow-module:"openconfig-system/openconfig-system"`
	OpenLogfile    *string                                                            `path:"state/open-logfile" module:"openconfig-system/openconfig-system"`
	Path           *string                                                            `path:"state/path|path" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/path|path" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Rotate         *uint32                                                            `path:"state/rotate" module:"openconfig-system/openconfig-system" shadow-path:"config/rotate" shadow-module:"openconfig-system/openconfig-system"`
	Selector       map[System_Logging_File_Selector_Key]*System_Logging_File_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_File implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_File) IsYANGGoStruct() {}

// System_Logging_File_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/files/file.
type System_Logging_File_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_File_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_File_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_File_Selector_Key key struct.
func (t System_Logging_File_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_File struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_File) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_File_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_File_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_File struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_File) RenameSelector(oldK, newK System_Logging_File_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_File.
//
// It initializes the field if not already initialized.
func (t *System_Logging_File) GetOrCreateSelectorMap() map[System_Logging_File_Selector_Key]*System_Logging_File_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_File. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_File) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_Selector {

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_File. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_File) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_File. If there is no such element, the function
// is a no-op.
func (t *System_Logging_File) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_File_Selector struct to the
// list Selector of System_Logging_File. If the key value(s) specified in
// the supplied System_Logging_File_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_File) AppendSelector(v *System_Logging_File_Selector) error {
	key := System_Logging_File_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetFilenamePrefix retrieves the value of the leaf FilenamePrefix from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilenamePrefix is set, it can
// safely use t.GetFilenamePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilenamePrefix == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetFilenamePrefix() string {
	if t == nil || t.FilenamePrefix == nil {
		return ""
	}
	return *t.FilenamePrefix
}

// GetMaxOpenTime retrieves the value of the leaf MaxOpenTime from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxOpenTime is set, it can
// safely use t.GetMaxOpenTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxOpenTime == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetMaxOpenTime() uint32 {
	if t == nil || t.MaxOpenTime == nil {
		return 1440
	}
	return *t.MaxOpenTime
}

// GetMaxSize retrieves the value of the leaf MaxSize from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSize is set, it can
// safely use t.GetMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSize == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetMaxSize() uint32 {
	if t == nil || t.MaxSize == nil {
		return 1000
	}
	return *t.MaxSize
}

// GetOpenLogfile retrieves the value of the leaf OpenLogfile from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpenLogfile is set, it can
// safely use t.GetOpenLogfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpenLogfile == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetOpenLogfile() string {
	if t == nil || t.OpenLogfile == nil {
		return ""
	}
	return *t.OpenLogfile
}

// GetPath retrieves the value of the leaf Path from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetPath() string {
	if t == nil || t.Path == nil {
		return ""
	}
	return *t.Path
}

// GetRotate retrieves the value of the leaf Rotate from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rotate is set, it can
// safely use t.GetRotate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rotate == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetRotate() uint32 {
	if t == nil || t.Rotate == nil {
		return 0
	}
	return *t.Rotate
}

// SetFilenamePrefix sets the value of the leaf FilenamePrefix in the System_Logging_File
// struct.
func (t *System_Logging_File) SetFilenamePrefix(v string) {
	t.FilenamePrefix = &v
}

// SetMaxOpenTime sets the value of the leaf MaxOpenTime in the System_Logging_File
// struct.
func (t *System_Logging_File) SetMaxOpenTime(v uint32) {
	t.MaxOpenTime = &v
}

// SetMaxSize sets the value of the leaf MaxSize in the System_Logging_File
// struct.
func (t *System_Logging_File) SetMaxSize(v uint32) {
	t.MaxSize = &v
}

// SetOpenLogfile sets the value of the leaf OpenLogfile in the System_Logging_File
// struct.
func (t *System_Logging_File) SetOpenLogfile(v string) {
	t.OpenLogfile = &v
}

// SetPath sets the value of the leaf Path in the System_Logging_File
// struct.
func (t *System_Logging_File) SetPath(v string) {
	t.Path = &v
}

// SetRotate sets the value of the leaf Rotate in the System_Logging_File
// struct.
func (t *System_Logging_File) SetRotate(v uint32) {
	t.Rotate = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_File
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_File) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxOpenTime == nil {
		var v uint32 = 1440
		t.MaxOpenTime = &v
	}
	if t.MaxSize == nil {
		var v uint32 = 1000
		t.MaxSize = &v
	}
	if t.Rotate == nil {
		var v uint32 = 0
		t.Rotate = &v
	}
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Logging_File struct, which is a YANG list entry.
func (t *System_Logging_File) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilenamePrefix == nil {
		return nil, fmt.Errorf("nil value for key FilenamePrefix")
	}

	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"filename-prefix": *t.FilenamePrefix,
		"path":            *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_File"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_File) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_File.
func (*System_Logging_File) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_File_Selector represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_File_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_File_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_File_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_File_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_File_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_File_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_File_Selector
// struct.
func (t *System_Logging_File_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_File_Selector
// struct.
func (t *System_Logging_File_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_File_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_File_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_File_Selector struct, which is a YANG list entry.
func (t *System_Logging_File_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_File_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_File_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_File_Selector.
func (*System_Logging_File_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServer struct {
	Host              *string                                                                            `path:"state/host|host" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/host|host" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	NetworkInstance   *string                                                                            `path:"state/network-instance" module:"openconfig-system/openconfig-system" shadow-path:"config/network-instance" shadow-module:"openconfig-system/openconfig-system"`
	RemotePort        *uint16                                                                            `path:"state/remote-port" module:"openconfig-system/openconfig-system" shadow-path:"config/remote-port" shadow-module:"openconfig-system/openconfig-system"`
	Selector          map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	SourceAddress     *string                                                                            `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
	TlsProfileId      *string                                                                            `path:"state/tls-profile-id" module:"openconfig-system/openconfig-system" shadow-path:"config/tls-profile-id" shadow-module:"openconfig-system/openconfig-system"`
	TransportSecurity *bool                                                                              `path:"state/transport-security" module:"openconfig-system/openconfig-system" shadow-path:"config/transport-security" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer) IsYANGGoStruct() {}

// System_Logging_RemoteServer_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server.
type System_Logging_RemoteServer_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_RemoteServer_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_RemoteServer_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_RemoteServer_Selector_Key key struct.
func (t System_Logging_RemoteServer_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_RemoteServer struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_RemoteServer) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_RemoteServer_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_RemoteServer_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_RemoteServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_RemoteServer) RenameSelector(oldK, newK System_Logging_RemoteServer_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_RemoteServer.
//
// It initializes the field if not already initialized.
func (t *System_Logging_RemoteServer) GetOrCreateSelectorMap() map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_RemoteServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_RemoteServer) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_RemoteServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_RemoteServer) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_RemoteServer. If there is no such element, the function
// is a no-op.
func (t *System_Logging_RemoteServer) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_RemoteServer_Selector struct to the
// list Selector of System_Logging_RemoteServer. If the key value(s) specified in
// the supplied System_Logging_RemoteServer_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_RemoteServer) AppendSelector(v *System_Logging_RemoteServer_Selector) error {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetHost retrieves the value of the leaf Host from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Host is set, it can
// safely use t.GetHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Host == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetRemotePort retrieves the value of the leaf RemotePort from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemotePort is set, it can
// safely use t.GetRemotePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemotePort == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTlsProfileId retrieves the value of the leaf TlsProfileId from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsProfileId is set, it can
// safely use t.GetTlsProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsProfileId == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetTlsProfileId() string {
	if t == nil || t.TlsProfileId == nil {
		return ""
	}
	return *t.TlsProfileId
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportSecurity is set, it can
// safely use t.GetTransportSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportSecurity == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return false
	}
	return *t.TransportSecurity
}

// SetHost sets the value of the leaf Host in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetHost(v string) {
	t.Host = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetRemotePort sets the value of the leaf RemotePort in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetRemotePort(v uint16) {
	t.RemotePort = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetTlsProfileId sets the value of the leaf TlsProfileId in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetTlsProfileId(v string) {
	t.TlsProfileId = &v
}

// SetTransportSecurity sets the value of the leaf TransportSecurity in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetTransportSecurity(v bool) {
	t.TransportSecurity = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemotePort == nil {
		var v uint16 = 514
		t.RemotePort = &v
	}
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer.
func (*System_Logging_RemoteServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_RemoteServer_Selector
// struct.
func (t *System_Logging_RemoteServer_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_RemoteServer_Selector
// struct.
func (t *System_Logging_RemoteServer_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer_Selector struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer_Selector.
func (*System_Logging_RemoteServer_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Vty represents the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_Vty struct {
	Selector map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Vty implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Vty) IsYANGGoStruct() {}

// System_Logging_Vty_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/vty.
type System_Logging_Vty_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_Vty_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_Vty_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_Vty_Selector_Key key struct.
func (t System_Logging_Vty_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Vty struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Vty) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Vty_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Vty_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Vty struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Vty) RenameSelector(oldK, newK System_Logging_Vty_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from System_Logging_Vty.
//
// It initializes the field if not already initialized.
func (t *System_Logging_Vty) GetOrCreateSelectorMap() map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector {
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Vty. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Vty) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_Selector {

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Vty. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Vty) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Vty. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Vty) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Vty_Selector struct to the
// list Selector of System_Logging_Vty. If the key value(s) specified in
// the supplied System_Logging_Vty_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Vty) AppendSelector(v *System_Logging_Vty_Selector) error {
	key := System_Logging_Vty_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Vty
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Vty) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Vty"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Vty) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Vty.
func (*System_Logging_Vty) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Vty_Selector represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Vty_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Vty_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Vty_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Vty_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Vty_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Vty_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_Vty_Selector
// struct.
func (t *System_Logging_Vty_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_Vty_Selector
// struct.
func (t *System_Logging_Vty_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Vty_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Vty_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_Vty_Selector struct, which is a YANG list entry.
func (t *System_Logging_Vty_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Vty_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Vty_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Vty_Selector.
func (*System_Logging_Vty_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_MacAddress represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddress struct {
	RoutingMac *string `path:"state/routing-mac" module:"openconfig-system/openconfig-system" shadow-path:"config/routing-mac" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MacAddress) IsYANGGoStruct() {}

// GetRoutingMac retrieves the value of the leaf RoutingMac from the System_MacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutingMac is set, it can
// safely use t.GetRoutingMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutingMac == nil' before retrieving the leaf's value.
func (t *System_MacAddress) GetRoutingMac() string {
	if t == nil || t.RoutingMac == nil {
		return ""
	}
	return *t.RoutingMac
}

// SetRoutingMac sets the value of the leaf RoutingMac in the System_MacAddress
// struct.
func (t *System_MacAddress) SetRoutingMac(v string) {
	t.RoutingMac = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_MacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_MacAddress.
func (*System_MacAddress) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory represents the /openconfig-system/system/memory YANG schema element.
type System_Memory struct {
	Counters *System_Memory_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	Free     *uint64                 `path:"state/free" module:"openconfig-system/openconfig-system"`
	Physical *uint64                 `path:"state/physical" module:"openconfig-system/openconfig-system"`
	Reserved *uint64                 `path:"state/reserved" module:"openconfig-system/openconfig-system"`
	Used     *uint64                 `path:"state/used" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Memory) GetOrCreateCounters() *System_Memory_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Memory_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Memory. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Memory) GetCounters() *System_Memory_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetFree retrieves the value of the leaf Free from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *System_Memory) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetPhysical retrieves the value of the leaf Physical from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Physical is set, it can
// safely use t.GetPhysical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Physical == nil' before retrieving the leaf's value.
func (t *System_Memory) GetPhysical() uint64 {
	if t == nil || t.Physical == nil {
		return 0
	}
	return *t.Physical
}

// GetReserved retrieves the value of the leaf Reserved from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *System_Memory) GetReserved() uint64 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetUsed retrieves the value of the leaf Used from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *System_Memory) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// SetFree sets the value of the leaf Free in the System_Memory
// struct.
func (t *System_Memory) SetFree(v uint64) {
	t.Free = &v
}

// SetPhysical sets the value of the leaf Physical in the System_Memory
// struct.
func (t *System_Memory) SetPhysical(v uint64) {
	t.Physical = &v
}

// SetReserved sets the value of the leaf Reserved in the System_Memory
// struct.
func (t *System_Memory) SetReserved(v uint64) {
	t.Reserved = &v
}

// SetUsed sets the value of the leaf Used in the System_Memory
// struct.
func (t *System_Memory) SetUsed(v uint64) {
	t.Used = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory.
func (*System_Memory) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory_Counters represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_Counters struct {
	CorrectableEccErrors   *uint64 `path:"correctable-ecc-errors" module:"openconfig-system"`
	TotalEccErrors         *uint64 `path:"total-ecc-errors" module:"openconfig-system"`
	UncorrectableEccErrors *uint64 `path:"uncorrectable-ecc-errors" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory_Counters) IsYANGGoStruct() {}

// GetCorrectableEccErrors retrieves the value of the leaf CorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CorrectableEccErrors is set, it can
// safely use t.GetCorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetCorrectableEccErrors() uint64 {
	if t == nil || t.CorrectableEccErrors == nil {
		return 0
	}
	return *t.CorrectableEccErrors
}

// GetTotalEccErrors retrieves the value of the leaf TotalEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalEccErrors is set, it can
// safely use t.GetTotalEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetTotalEccErrors() uint64 {
	if t == nil || t.TotalEccErrors == nil {
		return 0
	}
	return *t.TotalEccErrors
}

// GetUncorrectableEccErrors retrieves the value of the leaf UncorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncorrectableEccErrors is set, it can
// safely use t.GetUncorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetUncorrectableEccErrors() uint64 {
	if t == nil || t.UncorrectableEccErrors == nil {
		return 0
	}
	return *t.UncorrectableEccErrors
}

// SetCorrectableEccErrors sets the value of the leaf CorrectableEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetCorrectableEccErrors(v uint64) {
	t.CorrectableEccErrors = &v
}

// SetTotalEccErrors sets the value of the leaf TotalEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetTotalEccErrors(v uint64) {
	t.TotalEccErrors = &v
}

// SetUncorrectableEccErrors sets the value of the leaf UncorrectableEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetUncorrectableEccErrors(v uint64) {
	t.UncorrectableEccErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory_Counters.
func (*System_Memory_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages represents the /openconfig-system/system/messages YANG schema element.
type System_Messages struct {
	DebugService map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService `path:"debug-entries/debug-service" module:"openconfig-system/openconfig-system"`
	Message      *System_Messages_Message                                   `path:"state/message" module:"openconfig-system/openconfig-system"`
	Severity     E_SystemLogging_SyslogSeverity                             `path:"state/severity" module:"openconfig-system/openconfig-system" shadow-path:"config/severity" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// System_Messages struct. The keys of the list are populated from the input
// arguments.
func (t *System_Messages) NewDebugService(Service E_Messages_DEBUG_SERVICE) (*System_Messages_DebugService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &System_Messages_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// RenameDebugService renames an entry in the list DebugService within
// the System_Messages struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Messages) RenameDebugService(oldK, newK E_Messages_DEBUG_SERVICE) error {
	if _, ok := t.DebugService[newK]; ok {
		return fmt.Errorf("key %v already exists in DebugService", newK)
	}

	e, ok := t.DebugService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DebugService", oldK)
	}
	e.Service = newK

	t.DebugService[newK] = e
	delete(t.DebugService, oldK)
	return nil
}

// GetOrCreateDebugServiceMap returns the list (map) from System_Messages.
//
// It initializes the field if not already initialized.
func (t *System_Messages) GetOrCreateDebugServiceMap() map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService {
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}
	return t.DebugService
}

// GetOrCreateDebugService retrieves the value with the specified keys from
// the receiver System_Messages. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Messages) GetOrCreateDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	key := Service

	if v, ok := t.DebugService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDebugService(Service)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDebugService got unexpected error: %v", err))
	}
	return v
}

// GetDebugService retrieves the value with the specified key from
// the DebugService map field of System_Messages. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Messages) GetDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	if t == nil {
		return nil
	}

	key := Service

	if lm, ok := t.DebugService[key]; ok {
		return lm
	}
	return nil
}

// DeleteDebugService deletes the value with the specified keys from
// the receiver System_Messages. If there is no such element, the function
// is a no-op.
func (t *System_Messages) DeleteDebugService(Service E_Messages_DEBUG_SERVICE) {
	key := Service

	delete(t.DebugService, key)
}

// AppendDebugService appends the supplied System_Messages_DebugService struct to the
// list DebugService of System_Messages. If the key value(s) specified in
// the supplied System_Messages_DebugService already exist in the list, an error is
// returned.
func (t *System_Messages) AppendDebugService(v *System_Messages_DebugService) error {
	key := v.Service

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	if _, ok := t.DebugService[key]; ok {
		return fmt.Errorf("duplicate key for list DebugService %v", key)
	}

	t.DebugService[key] = v
	return nil
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *System_Messages) GetOrCreateMessage() *System_Messages_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &System_Messages_Message{}
	return t.Message
}

// GetMessage returns the value of the Message struct pointer
// from System_Messages. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Messages) GetMessage() *System_Messages_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity retrieves the value of the leaf Severity from the System_Messages
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Messages) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetSeverity sets the value of the leaf Severity in the System_Messages
// struct.
func (t *System_Messages) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Message.PopulateDefaults()
	for _, e := range t.DebugService {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages.
func (*System_Messages) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugService struct {
	Enabled *bool                    `path:"state/enabled" module:"openconfig-system/openconfig-system" shadow-path:"config/enabled" shadow-module:"openconfig-system/openconfig-system"`
	Service E_Messages_DEBUG_SERVICE `path:"state/service|service" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/service|service" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_DebugService) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetService retrieves the value of the leaf Service from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetService() E_Messages_DEBUG_SERVICE {
	if t == nil || t.Service == 0 {
		return 0
	}
	return t.Service
}

// SetEnabled sets the value of the leaf Enabled in the System_Messages_DebugService
// struct.
func (t *System_Messages_DebugService) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetService sets the value of the leaf Service in the System_Messages_DebugService
// struct.
func (t *System_Messages_DebugService) SetService(v E_Messages_DEBUG_SERVICE) {
	t.Service = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_DebugService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_DebugService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// ΛListKeyMap returns the keys of the System_Messages_DebugService struct, which is a YANG list entry.
func (t *System_Messages_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_DebugService.
func (*System_Messages_DebugService) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_Message struct {
	AppName  *string `path:"app-name" module:"openconfig-system"`
	Msg      *string `path:"msg" module:"openconfig-system"`
	Msgid    *string `path:"msgid" module:"openconfig-system"`
	Priority *uint8  `path:"priority" module:"openconfig-system"`
	Procid   *string `path:"procid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_Message) IsYANGGoStruct() {}

// GetAppName retrieves the value of the leaf AppName from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppName is set, it can
// safely use t.GetAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppName == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetAppName() string {
	if t == nil || t.AppName == nil {
		return ""
	}
	return *t.AppName
}

// GetMsg retrieves the value of the leaf Msg from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msg is set, it can
// safely use t.GetMsg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msg == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsg() string {
	if t == nil || t.Msg == nil {
		return ""
	}
	return *t.Msg
}

// GetMsgid retrieves the value of the leaf Msgid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msgid is set, it can
// safely use t.GetMsgid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msgid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsgid() string {
	if t == nil || t.Msgid == nil {
		return ""
	}
	return *t.Msgid
}

// GetPriority retrieves the value of the leaf Priority from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetProcid retrieves the value of the leaf Procid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Procid is set, it can
// safely use t.GetProcid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Procid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetProcid() string {
	if t == nil || t.Procid == nil {
		return ""
	}
	return *t.Procid
}

// SetAppName sets the value of the leaf AppName in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetAppName(v string) {
	t.AppName = &v
}

// SetMsg sets the value of the leaf Msg in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetMsg(v string) {
	t.Msg = &v
}

// SetMsgid sets the value of the leaf Msgid in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetMsgid(v string) {
	t.Msgid = &v
}

// SetPriority sets the value of the leaf Priority in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetPriority(v uint8) {
	t.Priority = &v
}

// SetProcid sets the value of the leaf Procid in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetProcid(v string) {
	t.Procid = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_Message.
func (*System_Messages_Message) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_MountPoint represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPoint struct {
	Available        *uint64 `path:"state/available" module:"openconfig-system/openconfig-system"`
	Name             *string `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"name" shadow-module:"openconfig-system"`
	Size             *uint64 `path:"state/size" module:"openconfig-system/openconfig-system"`
	StorageComponent *string `path:"state/storage-component" module:"openconfig-system/openconfig-system"`
	Type             *string `path:"state/type" module:"openconfig-system/openconfig-system"`
	Utilized         *uint64 `path:"state/utilized" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MountPoint) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Available is set, it can
// safely use t.GetAvailable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Available == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetName retrieves the value of the leaf Name from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSize retrieves the value of the leaf Size from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetSize() uint64 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// GetStorageComponent retrieves the value of the leaf StorageComponent from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StorageComponent is set, it can
// safely use t.GetStorageComponent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StorageComponent == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetStorageComponent() string {
	if t == nil || t.StorageComponent == nil {
		return ""
	}
	return *t.StorageComponent
}

// GetType retrieves the value of the leaf Type from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetType() string {
	if t == nil || t.Type == nil {
		return ""
	}
	return *t.Type
}

// GetUtilized retrieves the value of the leaf Utilized from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Utilized is set, it can
// safely use t.GetUtilized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Utilized == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// SetAvailable sets the value of the leaf Available in the System_MountPoint
// struct.
func (t *System_MountPoint) SetAvailable(v uint64) {
	t.Available = &v
}

// SetName sets the value of the leaf Name in the System_MountPoint
// struct.
func (t *System_MountPoint) SetName(v string) {
	t.Name = &v
}

// SetSize sets the value of the leaf Size in the System_MountPoint
// struct.
func (t *System_MountPoint) SetSize(v uint64) {
	t.Size = &v
}

// SetStorageComponent sets the value of the leaf StorageComponent in the System_MountPoint
// struct.
func (t *System_MountPoint) SetStorageComponent(v string) {
	t.StorageComponent = &v
}

// SetType sets the value of the leaf Type in the System_MountPoint
// struct.
func (t *System_MountPoint) SetType(v string) {
	t.Type = &v
}

// SetUtilized sets the value of the leaf Utilized in the System_MountPoint
// struct.
func (t *System_MountPoint) SetUtilized(v uint64) {
	t.Utilized = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_MountPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MountPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_MountPoint struct, which is a YANG list entry.
func (t *System_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_MountPoint.
func (*System_MountPoint) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type System_Ntp struct {
	AuthMismatch  *uint64                       `path:"state/auth-mismatch" module:"openconfig-system/openconfig-system"`
	EnableNtpAuth *bool                         `path:"state/enable-ntp-auth" module:"openconfig-system/openconfig-system" shadow-path:"config/enable-ntp-auth" shadow-module:"openconfig-system/openconfig-system"`
	Enabled       *bool                         `path:"state/enabled" module:"openconfig-system/openconfig-system" shadow-path:"config/enabled" shadow-module:"openconfig-system/openconfig-system"`
	NtpKey        map[uint16]*System_Ntp_NtpKey `path:"ntp-keys/ntp-key" module:"openconfig-system/openconfig-system"`
	Server        map[string]*System_Ntp_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewNtpKey(KeyId uint16) (*System_Ntp_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &System_Ntp_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKeyMap returns the list (map) from System_Ntp.
//
// It initializes the field if not already initialized.
func (t *System_Ntp) GetOrCreateNtpKeyMap() map[uint16]*System_Ntp_NtpKey {
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}
	return t.NtpKey
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteNtpKey deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteNtpKey(KeyId uint16) {
	key := KeyId

	delete(t.NtpKey, key)
}

// AppendNtpKey appends the supplied System_Ntp_NtpKey struct to the
// list NtpKey of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_NtpKey already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendNtpKey(v *System_Ntp_NtpKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewServer(Address string) (*System_Ntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Ntp_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServerMap returns the list (map) from System_Ntp.
//
// It initializes the field if not already initialized.
func (t *System_Ntp) GetOrCreateServerMap() map[string]*System_Ntp_Server {
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}
	return t.Server
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateServer(Address string) *System_Ntp_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetServer(Address string) *System_Ntp_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Ntp_Server struct to the
// list Server of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_Server already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendServer(v *System_Ntp_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAuthMismatch retrieves the value of the leaf AuthMismatch from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthMismatch is set, it can
// safely use t.GetAuthMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthMismatch == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetAuthMismatch() uint64 {
	if t == nil || t.AuthMismatch == nil {
		return 0
	}
	return *t.AuthMismatch
}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableNtpAuth is set, it can
// safely use t.GetEnableNtpAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableNtpAuth == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetAuthMismatch sets the value of the leaf AuthMismatch in the System_Ntp
// struct.
func (t *System_Ntp) SetAuthMismatch(v uint64) {
	t.AuthMismatch = &v
}

// SetEnableNtpAuth sets the value of the leaf EnableNtpAuth in the System_Ntp
// struct.
func (t *System_Ntp) SetEnableNtpAuth(v bool) {
	t.EnableNtpAuth = &v
}

// SetEnabled sets the value of the leaf Enabled in the System_Ntp
// struct.
func (t *System_Ntp) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableNtpAuth == nil {
		var v bool = false
		t.EnableNtpAuth = &v
	}
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	for _, e := range t.NtpKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp.
func (*System_Ntp) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKey struct {
	KeyId    *uint16                `path:"state/key-id|key-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/key-id|key-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	KeyType  E_System_NTP_AUTH_TYPE `path:"state/key-type" module:"openconfig-system/openconfig-system" shadow-path:"config/key-type" shadow-module:"openconfig-system/openconfig-system"`
	KeyValue *string                `path:"state/key-value" module:"openconfig-system/openconfig-system" shadow-path:"config/key-value" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_NtpKey) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyType is set, it can
// safely use t.GetKeyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyType == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyType() E_System_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// SetKeyId sets the value of the leaf KeyId in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyId(v uint16) {
	t.KeyId = &v
}

// SetKeyType sets the value of the leaf KeyType in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyType(v E_System_NTP_AUTH_TYPE) {
	t.KeyType = v
}

// SetKeyValue sets the value of the leaf KeyValue in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyValue(v string) {
	t.KeyValue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_NtpKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_NtpKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Ntp_NtpKey struct, which is a YANG list entry.
func (t *System_Ntp_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_NtpKey.
func (*System_Ntp_NtpKey) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_Server struct {
	Address         *string                  `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	AssociationType E_Server_AssociationType `path:"state/association-type" module:"openconfig-system/openconfig-system" shadow-path:"config/association-type" shadow-module:"openconfig-system/openconfig-system"`
	Iburst          *bool                    `path:"state/iburst" module:"openconfig-system/openconfig-system" shadow-path:"config/iburst" shadow-module:"openconfig-system/openconfig-system"`
	KeyId           *uint16                  `path:"state/key-id" module:"openconfig-system/openconfig-system" shadow-path:"config/key-id" shadow-module:"openconfig-system/openconfig-system"`
	NetworkInstance *string                  `path:"state/network-instance" module:"openconfig-system/openconfig-system" shadow-path:"config/network-instance" shadow-module:"openconfig-system/openconfig-system"`
	Offset          *int64                   `path:"state/offset" module:"openconfig-system/openconfig-system"`
	PollInterval    *uint32                  `path:"state/poll-interval" module:"openconfig-system/openconfig-system"`
	Port            *uint16                  `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
	Prefer          *bool                    `path:"state/prefer" module:"openconfig-system/openconfig-system" shadow-path:"config/prefer" shadow-module:"openconfig-system/openconfig-system"`
	RootDelay       *int64                   `path:"state/root-delay" module:"openconfig-system/openconfig-system"`
	RootDispersion  *int64                   `path:"state/root-dispersion" module:"openconfig-system/openconfig-system"`
	SourceAddress   *string                  `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
	Stratum         *uint8                   `path:"state/stratum" module:"openconfig-system/openconfig-system"`
	Version         *uint8                   `path:"state/version" module:"openconfig-system/openconfig-system" shadow-path:"config/version" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationType is set, it can
// safely use t.GetAssociationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationType == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAssociationType() E_Server_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return Server_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iburst is set, it can
// safely use t.GetIburst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iburst == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetKeyId retrieves the value of the leaf KeyId from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetOffset retrieves the value of the leaf Offset from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetOffset() int64 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetPollInterval retrieves the value of the leaf PollInterval from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 0
	}
	return *t.PollInterval
}

// GetPort retrieves the value of the leaf Port from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRootDelay retrieves the value of the leaf RootDelay from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDelay is set, it can
// safely use t.GetRootDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDelay == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDelay() int64 {
	if t == nil || t.RootDelay == nil {
		return 0
	}
	return *t.RootDelay
}

// GetRootDispersion retrieves the value of the leaf RootDispersion from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDispersion is set, it can
// safely use t.GetRootDispersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDispersion == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDispersion() int64 {
	if t == nil || t.RootDispersion == nil {
		return 0
	}
	return *t.RootDispersion
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetStratum retrieves the value of the leaf Stratum from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stratum is set, it can
// safely use t.GetStratum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stratum == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetStratum() uint8 {
	if t == nil || t.Stratum == nil {
		return 0
	}
	return *t.Stratum
}

// GetVersion retrieves the value of the leaf Version from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// SetAddress sets the value of the leaf Address in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetAddress(v string) {
	t.Address = &v
}

// SetAssociationType sets the value of the leaf AssociationType in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetAssociationType(v E_Server_AssociationType) {
	t.AssociationType = v
}

// SetIburst sets the value of the leaf Iburst in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetIburst(v bool) {
	t.Iburst = &v
}

// SetKeyId sets the value of the leaf KeyId in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetKeyId(v uint16) {
	t.KeyId = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetOffset sets the value of the leaf Offset in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetOffset(v int64) {
	t.Offset = &v
}

// SetPollInterval sets the value of the leaf PollInterval in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPollInterval(v uint32) {
	t.PollInterval = &v
}

// SetPort sets the value of the leaf Port in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPort(v uint16) {
	t.Port = &v
}

// SetPrefer sets the value of the leaf Prefer in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPrefer(v bool) {
	t.Prefer = &v
}

// SetRootDelay sets the value of the leaf RootDelay in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetRootDelay(v int64) {
	t.RootDelay = &v
}

// SetRootDispersion sets the value of the leaf RootDispersion in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetRootDispersion(v int64) {
	t.RootDispersion = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetStratum sets the value of the leaf Stratum in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetStratum(v uint8) {
	t.Stratum = &v
}

// SetVersion sets the value of the leaf Version in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetVersion(v uint8) {
	t.Version = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AssociationType == 0 {
		t.AssociationType = Server_AssociationType_SERVER
	}
	if t.Iburst == nil {
		var v bool = false
		t.Iburst = &v
	}
	if t.Port == nil {
		var v uint16 = 123
		t.Port = &v
	}
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint8 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the System_Ntp_Server struct, which is a YANG list entry.
func (t *System_Ntp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_Server.
func (*System_Ntp_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Process represents the /openconfig-system/system/processes/process YANG schema element.
type System_Process struct {
	Args              []string `path:"state/args" module:"openconfig-system/openconfig-system"`
	CpuUsageSystem    *uint64  `path:"state/cpu-usage-system" module:"openconfig-system/openconfig-system"`
	CpuUsageUser      *uint64  `path:"state/cpu-usage-user" module:"openconfig-system/openconfig-system"`
	CpuUtilization    *uint8   `path:"state/cpu-utilization" module:"openconfig-system/openconfig-system"`
	MemoryUsage       *uint64  `path:"state/memory-usage" module:"openconfig-system/openconfig-system"`
	MemoryUtilization *uint8   `path:"state/memory-utilization" module:"openconfig-system/openconfig-system"`
	Name              *string  `path:"state/name" module:"openconfig-system/openconfig-system"`
	Pid               *uint64  `path:"state/pid|pid" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"pid" shadow-module:"openconfig-system"`
	StartTime         *uint64  `path:"state/start-time" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Process) IsYANGGoStruct() {}

// GetArgs retrieves the value of the leaf Args from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Args is set, it can
// safely use t.GetArgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Args == nil' before retrieving the leaf's value.
func (t *System_Process) GetArgs() []string {
	if t == nil || t.Args == nil {
		return nil
	}
	return t.Args
}

// GetCpuUsageSystem retrieves the value of the leaf CpuUsageSystem from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageSystem is set, it can
// safely use t.GetCpuUsageSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageSystem == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageSystem() uint64 {
	if t == nil || t.CpuUsageSystem == nil {
		return 0
	}
	return *t.CpuUsageSystem
}

// GetCpuUsageUser retrieves the value of the leaf CpuUsageUser from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageUser is set, it can
// safely use t.GetCpuUsageUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageUser == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageUser() uint64 {
	if t == nil || t.CpuUsageUser == nil {
		return 0
	}
	return *t.CpuUsageUser
}

// GetCpuUtilization retrieves the value of the leaf CpuUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUtilization is set, it can
// safely use t.GetCpuUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUtilization() uint8 {
	if t == nil || t.CpuUtilization == nil {
		return 0
	}
	return *t.CpuUtilization
}

// GetMemoryUsage retrieves the value of the leaf MemoryUsage from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUsage is set, it can
// safely use t.GetMemoryUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUsage == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUsage() uint64 {
	if t == nil || t.MemoryUsage == nil {
		return 0
	}
	return *t.MemoryUsage
}

// GetMemoryUtilization retrieves the value of the leaf MemoryUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUtilization is set, it can
// safely use t.GetMemoryUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUtilization() uint8 {
	if t == nil || t.MemoryUtilization == nil {
		return 0
	}
	return *t.MemoryUtilization
}

// GetName retrieves the value of the leaf Name from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Process) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPid retrieves the value of the leaf Pid from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pid is set, it can
// safely use t.GetPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pid == nil' before retrieving the leaf's value.
func (t *System_Process) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// GetStartTime retrieves the value of the leaf StartTime from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *System_Process) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// SetArgs sets the value of the leaf Args in the System_Process
// struct.
func (t *System_Process) SetArgs(v []string) {
	t.Args = v
}

// SetCpuUsageSystem sets the value of the leaf CpuUsageSystem in the System_Process
// struct.
func (t *System_Process) SetCpuUsageSystem(v uint64) {
	t.CpuUsageSystem = &v
}

// SetCpuUsageUser sets the value of the leaf CpuUsageUser in the System_Process
// struct.
func (t *System_Process) SetCpuUsageUser(v uint64) {
	t.CpuUsageUser = &v
}

// SetCpuUtilization sets the value of the leaf CpuUtilization in the System_Process
// struct.
func (t *System_Process) SetCpuUtilization(v uint8) {
	t.CpuUtilization = &v
}

// SetMemoryUsage sets the value of the leaf MemoryUsage in the System_Process
// struct.
func (t *System_Process) SetMemoryUsage(v uint64) {
	t.MemoryUsage = &v
}

// SetMemoryUtilization sets the value of the leaf MemoryUtilization in the System_Process
// struct.
func (t *System_Process) SetMemoryUtilization(v uint8) {
	t.MemoryUtilization = &v
}

// SetName sets the value of the leaf Name in the System_Process
// struct.
func (t *System_Process) SetName(v string) {
	t.Name = &v
}

// SetPid sets the value of the leaf Pid in the System_Process
// struct.
func (t *System_Process) SetPid(v uint64) {
	t.Pid = &v
}

// SetStartTime sets the value of the leaf StartTime in the System_Process
// struct.
func (t *System_Process) SetStartTime(v uint64) {
	t.StartTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Process
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Process) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Process struct, which is a YANG list entry.
func (t *System_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Process) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Process.
func (*System_Process) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServer struct {
	Enable          *bool                       `path:"state/enable" module:"openconfig-system/openconfig-system" shadow-path:"config/enable" shadow-module:"openconfig-system/openconfig-system"`
	ProtocolVersion E_SshServer_ProtocolVersion `path:"state/protocol-version" module:"openconfig-system/openconfig-system" shadow-path:"config/protocol-version" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit       *uint16                     `path:"state/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit    *uint16                     `path:"state/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout         *uint16                     `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_SshServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolVersion is set, it can
// safely use t.GetProtocolVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetProtocolVersion() E_SshServer_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return SshServer_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetEnable sets the value of the leaf Enable in the System_SshServer
// struct.
func (t *System_SshServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetProtocolVersion sets the value of the leaf ProtocolVersion in the System_SshServer
// struct.
func (t *System_SshServer) SetProtocolVersion(v E_SshServer_ProtocolVersion) {
	t.ProtocolVersion = v
}

// SetRateLimit sets the value of the leaf RateLimit in the System_SshServer
// struct.
func (t *System_SshServer) SetRateLimit(v uint16) {
	t.RateLimit = &v
}

// SetSessionLimit sets the value of the leaf SessionLimit in the System_SshServer
// struct.
func (t *System_SshServer) SetSessionLimit(v uint16) {
	t.SessionLimit = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_SshServer
// struct.
func (t *System_SshServer) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_SshServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_SshServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = true
		t.Enable = &v
	}
	if t.ProtocolVersion == 0 {
		t.ProtocolVersion = SshServer_ProtocolVersion_V2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_SshServer.
func (*System_SshServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServer struct {
	Enable       *bool   `path:"state/enable" module:"openconfig-system/openconfig-system" shadow-path:"config/enable" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit    *uint16 `path:"state/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit *uint16 `path:"state/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout      *uint16 `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_TelnetServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetEnable sets the value of the leaf Enable in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetRateLimit sets the value of the leaf RateLimit in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetRateLimit(v uint16) {
	t.RateLimit = &v
}

// SetSessionLimit sets the value of the leaf SessionLimit in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetSessionLimit(v uint16) {
	t.SessionLimit = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_TelnetServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_TelnetServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_TelnetServer.
func (*System_TelnetServer) ΛBelongingModule() string {
	return "openconfig-system"
}
