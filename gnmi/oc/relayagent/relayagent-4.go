/*
Package relayagent is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package relayagent

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RelayAgent_Dhcpv6_Interface_HelperAddressPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcpv6_Interface_HelperAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_HelperAddressPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcpv6_Interface_HelperAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcpv6_Interface_HelperAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_IdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcpv6_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_IdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcpv6_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/id"
func (n *RelayAgent_Dhcpv6_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePathAny struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_InterfacePathMap represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePathMap struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_InterfacePathMapAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcpv6_InterfacePath) Counters() *RelayAgent_Dhcpv6_Interface_CountersPath {
	ps := &RelayAgent_Dhcpv6_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Counters() *RelayAgent_Dhcpv6_Interface_CountersPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcpv6_InterfacePath) Enable() *RelayAgent_Dhcpv6_Interface_EnablePath {
	ps := &RelayAgent_Dhcpv6_Interface_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Enable() *RelayAgent_Dhcpv6_Interface_EnablePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv6 requests.  The relay agent
// is expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv6 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcpv6_InterfacePath) HelperAddress() *RelayAgent_Dhcpv6_Interface_HelperAddressPath {
	ps := &RelayAgent_Dhcpv6_Interface_HelperAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv6 requests.  The relay agent
// is expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv6 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) HelperAddress() *RelayAgent_Dhcpv6_Interface_HelperAddressPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_HelperAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/id"
func (n *RelayAgent_Dhcpv6_InterfacePath) Id() *RelayAgent_Dhcpv6_Interface_IdPath {
	ps := &RelayAgent_Dhcpv6_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/*/id"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Id() *RelayAgent_Dhcpv6_Interface_IdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcpv6_InterfacePath) InterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRefPath {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) InterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options"
func (n *RelayAgent_Dhcpv6_InterfacePath) Options() *RelayAgent_Dhcpv6_Interface_OptionsPath {
	ps := &RelayAgent_Dhcpv6_Interface_OptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options"
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Options() *RelayAgent_Dhcpv6_Interface_OptionsPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_OptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcpv6_Interface](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcpv6_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6AdverstiseSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6AdverstiseSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ConfirmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ConfirmReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6DeclineReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6DeclineReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6InfoRequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6InfoRequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RebindReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6RebindReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReconfigureSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Counters).Dhcpv6ReconfigureSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
