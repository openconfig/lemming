/*
Package relayagent is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package relayagent

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RelayAgentPath represents the /openconfig-relay-agent/relay-agent YANG schema element.
type RelayAgentPath struct {
	*ygnmi.NodePath
}

// RelayAgentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent YANG schema element.
type RelayAgentPathAny struct {
	*ygnmi.NodePath
}

// Dhcp (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp"
//	Path from root:       "/relay-agent/dhcp"
func (n *RelayAgentPath) Dhcp() *RelayAgent_DhcpPath {
	ps := &RelayAgent_DhcpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dhcp (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp"
//	Path from root:       "/relay-agent/dhcp"
func (n *RelayAgentPathAny) Dhcp() *RelayAgent_DhcpPathAny {
	ps := &RelayAgent_DhcpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dhcpv6 (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6"
//	Path from root:       "/relay-agent/dhcpv6"
func (n *RelayAgentPath) Dhcpv6() *RelayAgent_Dhcpv6Path {
	ps := &RelayAgent_Dhcpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dhcpv6 (container): Top-level container for global relay agent data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6"
//	Path from root:       "/relay-agent/dhcpv6"
func (n *RelayAgentPathAny) Dhcpv6() *RelayAgent_Dhcpv6PathAny {
	ps := &RelayAgent_Dhcpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgentPath) State() ygnmi.SingletonQuery[*oc.RelayAgent] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent](
		"RelayAgent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgentPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent](
		"RelayAgent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgentPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent](
		"RelayAgent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgentPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent](
		"RelayAgent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_EnableRelayAgentPath represents the /openconfig-relay-agent/relay-agent/dhcp/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcp_EnableRelayAgentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_EnableRelayAgentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcp_EnableRelayAgentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/state/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/state/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/config/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/config/enable-relay-agent"
func (n *RelayAgent_Dhcp_EnableRelayAgentPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_DhcpPath represents the /openconfig-relay-agent/relay-agent/dhcp YANG schema element.
type RelayAgent_DhcpPath struct {
	*ygnmi.NodePath
}

// RelayAgent_DhcpPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp YANG schema element.
type RelayAgent_DhcpPathAny struct {
	*ygnmi.NodePath
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/agent-information-option"
func (n *RelayAgent_DhcpPath) AgentInformationOption() *RelayAgent_Dhcp_AgentInformationOptionPath {
	ps := &RelayAgent_Dhcp_AgentInformationOptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/agent-information-option"
func (n *RelayAgent_DhcpPathAny) AgentInformationOption() *RelayAgent_Dhcp_AgentInformationOptionPathAny {
	ps := &RelayAgent_Dhcp_AgentInformationOptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/*/enable-relay-agent"
func (n *RelayAgent_DhcpPath) EnableRelayAgent() *RelayAgent_Dhcp_EnableRelayAgentPath {
	ps := &RelayAgent_Dhcp_EnableRelayAgentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcp/*/enable-relay-agent"
func (n *RelayAgent_DhcpPathAny) EnableRelayAgent() *RelayAgent_Dhcp_EnableRelayAgentPathAny {
	ps := &RelayAgent_Dhcp_EnableRelayAgentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPath) InterfaceAny() *RelayAgent_Dhcp_InterfacePathAny {
	ps := &RelayAgent_Dhcp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPathAny) InterfaceAny() *RelayAgent_Dhcp_InterfacePathAny {
	ps := &RelayAgent_Dhcp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_DhcpPath) Interface(Id string) *RelayAgent_Dhcp_InterfacePath {
	ps := &RelayAgent_Dhcp_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_DhcpPathAny) Interface(Id string) *RelayAgent_Dhcp_InterfacePathAny {
	ps := &RelayAgent_Dhcp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPath) InterfaceMap() *RelayAgent_Dhcp_InterfacePathMap {
	ps := &RelayAgent_Dhcp_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface"
func (n *RelayAgent_DhcpPathAny) InterfaceMap() *RelayAgent_Dhcp_InterfacePathMapAny {
	ps := &RelayAgent_Dhcp_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_DhcpPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_AgentInformationOption_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_AgentInformationOption_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_AgentInformationOption_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_AgentInformationOption_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_AgentInformationOption_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_AgentInformationOptionPath represents the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option YANG schema element.
type RelayAgent_Dhcp_AgentInformationOptionPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_AgentInformationOptionPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option YANG schema element.
type RelayAgent_Dhcp_AgentInformationOptionPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_AgentInformationOptionPath) Enable() *RelayAgent_Dhcp_AgentInformationOption_EnablePath {
	ps := &RelayAgent_Dhcp_AgentInformationOption_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_AgentInformationOptionPathAny) Enable() *RelayAgent_Dhcp_AgentInformationOption_EnablePathAny {
	ps := &RelayAgent_Dhcp_AgentInformationOption_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_AgentInformationOptionPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_AgentInformationOption](
		"RelayAgent_Dhcp_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcp_Interface_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_HelperAddressPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcp_Interface_HelperAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_HelperAddressPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/helper-address YANG schema element.
type RelayAgent_Dhcp_Interface_HelperAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/helper-address"
func (n *RelayAgent_Dhcp_Interface_HelperAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).HelperAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_IdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcp_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_IdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/id YANG schema element.
type RelayAgent_Dhcp_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/id"
func (n *RelayAgent_Dhcp_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/id"
func (n *RelayAgent_Dhcp_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/id"
func (n *RelayAgent_Dhcp_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/config/id"
func (n *RelayAgent_Dhcp_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePathAny struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_InterfacePathMap represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePathMap struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_InterfacePathMapAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option"
func (n *RelayAgent_Dhcp_InterfacePath) AgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOptionPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AgentInformationOption (container): Top-level container for relay agent information option
// data
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "agent-information-option"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option"
func (n *RelayAgent_Dhcp_InterfacePathAny) AgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"agent-information-option"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcp_InterfacePath) Counters() *RelayAgent_Dhcp_Interface_CountersPath {
	ps := &RelayAgent_Dhcp_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters and statistics for relay agent operation.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/counters"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters"
func (n *RelayAgent_Dhcp_InterfacePathAny) Counters() *RelayAgent_Dhcp_Interface_CountersPathAny {
	ps := &RelayAgent_Dhcp_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcp_InterfacePath) Enable() *RelayAgent_Dhcp_Interface_EnablePath {
	ps := &RelayAgent_Dhcp_Interface_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the relay agent on the referenced interface.
// At least one helper address should also be configured
// for forwarding requested.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/enable"
func (n *RelayAgent_Dhcp_InterfacePathAny) Enable() *RelayAgent_Dhcp_Interface_EnablePathAny {
	ps := &RelayAgent_Dhcp_Interface_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv4 or IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv4 requests.  The relay agent is
// expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv4 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcp_InterfacePath) HelperAddress() *RelayAgent_Dhcp_Interface_HelperAddressPath {
	ps := &RelayAgent_Dhcp_Interface_HelperAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperAddress (leaf-list): List of IPv4 or IPv6 addresses of DHCP servers to which the
// relay agent should forward DHCPv4 requests.  The relay agent is
// expected to forward DHCPv4/BOOTP requests to all listed
// server addresses when DHCPv4 relaying is enabled globally, or
// on the interface.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/helper-address"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/helper-address"
func (n *RelayAgent_Dhcp_InterfacePathAny) HelperAddress() *RelayAgent_Dhcp_Interface_HelperAddressPathAny {
	ps := &RelayAgent_Dhcp_Interface_HelperAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/id"
func (n *RelayAgent_Dhcp_InterfacePath) Id() *RelayAgent_Dhcp_Interface_IdPath {
	ps := &RelayAgent_Dhcp_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Name of the interface on which relay agent is active
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/*/id"
func (n *RelayAgent_Dhcp_InterfacePathAny) Id() *RelayAgent_Dhcp_Interface_IdPathAny {
	ps := &RelayAgent_Dhcp_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcp_InterfacePath) InterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRefPath {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interface-ref"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref"
func (n *RelayAgent_Dhcp_InterfacePathAny) InterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRefPathAny {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RelayAgent_Dhcp_Interface](
		"RelayAgent_Dhcp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RelayAgent_Dhcp_Interface, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-relay-agent:interfaces"},
			PostRelPath: []string{"openconfig-relay-agent:interface"},
		},
	)
}
