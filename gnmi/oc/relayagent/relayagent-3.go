/*
Package relayagent is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package relayagent

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).InvalidOptions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"invalid-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).InvalidOptions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).TotalDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).TotalDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_CountersPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcp_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_Interface_CountersPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcp_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// BootreplySent (leaf): BOOTREPLY messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) BootreplySent() *RelayAgent_Dhcp_Interface_Counters_BootreplySentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootreplySentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootreplySent (leaf): BOOTREPLY messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) BootreplySent() *RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestReceived (leaf): BOOTREQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) BootrequestReceived() *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestReceived (leaf): BOOTREQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) BootrequestReceived() *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestSent (leaf): BOOTREQUEST messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) BootrequestSent() *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootrequestSent (leaf): BOOTREQUEST messages forwarded by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) BootrequestSent() *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpAckSent (leaf): DHCP ACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-ack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpAckSent() *RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-ack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpAckSent (leaf): DHCP ACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-ack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-ack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpAckSent() *RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpAckSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-ack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDeclineReceived (leaf): DHCP DECLINE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-decline-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpDeclineReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDeclineReceived (leaf): DHCP DECLINE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-decline-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-decline-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpDeclineReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDeclineReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDiscoverReceived (leaf): DHCP DISCOVER messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-discover-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpDiscoverReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-discover-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpDiscoverReceived (leaf): DHCP DISCOVER messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-discover-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-discover-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpDiscoverReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpDiscoverReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-discover-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpInformReceived (leaf): DHCP INFORM messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-inform-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpInformReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-inform-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpInformReceived (leaf): DHCP INFORM messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-inform-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-inform-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpInformReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpInformReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-inform-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpNackSent (leaf): DHCP NACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-nack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpNackSent() *RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-nack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpNackSent (leaf): DHCP NACK messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-nack-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-nack-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpNackSent() *RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpNackSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-nack-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpOfferSent (leaf): DHCP OFFER messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-offer-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpOfferSent() *RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-offer-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpOfferSent (leaf): DHCP OFFER messages sent by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-offer-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-offer-sent"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpOfferSent() *RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpOfferSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-offer-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpReleaseReceived (leaf): DHCP RELEASE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-release-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpReleaseReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpReleaseReceived (leaf): DHCP RELEASE messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-release-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-release-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpReleaseReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpReleaseReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpRequestReceived (leaf): DHCP REQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-request-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received"
func (n *RelayAgent_Dhcp_Interface_CountersPath) DhcpRequestReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpRequestReceived (leaf): DHCP REQUEST messages received by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcp-request-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/dhcp-request-received"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) DhcpRequestReceived() *RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_DhcpRequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcp-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcp_Interface_CountersPath) InvalidOpcode() *RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePath {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) InvalidOpcode() *RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOpcodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_CountersPath) InvalidOptions() *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) InvalidOptions() *RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_InvalidOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_CountersPath) TotalDropped() *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath {
	ps := &RelayAgent_Dhcp_Interface_Counters_TotalDroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) TotalDropped() *RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny {
	ps := &RelayAgent_Dhcp_Interface_Counters_TotalDroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface_Counters](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_Counters](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_InterfaceRefPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) Interface() *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) Interface() *RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) Subinterface() *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) Subinterface() *RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &RelayAgent_Dhcp_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_InterfaceRef](
		"RelayAgent_Dhcp_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_EnableRelayAgentPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcpv6_EnableRelayAgentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_EnableRelayAgentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/state/enable-relay-agent YANG schema element.
type RelayAgent_Dhcpv6_EnableRelayAgentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/state/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/state/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/config/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/config/enable-relay-agent"
func (n *RelayAgent_Dhcpv6_EnableRelayAgentPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-relay-agent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6).EnableRelayAgent
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6Path represents the /openconfig-relay-agent/relay-agent/dhcpv6 YANG schema element.
type RelayAgent_Dhcpv6Path struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6PathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6 YANG schema element.
type RelayAgent_Dhcpv6PathAny struct {
	*ygnmi.NodePath
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/*/enable-relay-agent"
func (n *RelayAgent_Dhcpv6Path) EnableRelayAgent() *RelayAgent_Dhcpv6_EnableRelayAgentPath {
	ps := &RelayAgent_Dhcpv6_EnableRelayAgentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRelayAgent (leaf): Enables DHCP/BOOTP relay agent on all interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-relay-agent"
//	Path from root:       "/relay-agent/dhcpv6/*/enable-relay-agent"
func (n *RelayAgent_Dhcpv6PathAny) EnableRelayAgent() *RelayAgent_Dhcpv6_EnableRelayAgentPathAny {
	ps := &RelayAgent_Dhcpv6_EnableRelayAgentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-relay-agent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6Path) InterfaceAny() *RelayAgent_Dhcpv6_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6PathAny) InterfaceAny() *RelayAgent_Dhcpv6_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_Dhcpv6Path) Interface(Id string) *RelayAgent_Dhcpv6_InterfacePath {
	ps := &RelayAgent_Dhcpv6_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
//
//	Id: string
func (n *RelayAgent_Dhcpv6PathAny) Interface(Id string) *RelayAgent_Dhcpv6_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6Path) InterfaceMap() *RelayAgent_Dhcpv6_InterfacePathMap {
	ps := &RelayAgent_Dhcpv6_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which the relay agent is
// configured.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface"
func (n *RelayAgent_Dhcpv6PathAny) InterfaceMap() *RelayAgent_Dhcpv6_InterfacePathMapAny {
	ps := &RelayAgent_Dhcpv6_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/options"
func (n *RelayAgent_Dhcpv6Path) Options() *RelayAgent_Dhcpv6_OptionsPath {
	ps := &RelayAgent_Dhcpv6_OptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Options (container): Top-level container for DHCPv6 agent options on interfaces
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "options"
//	Path from root:       "/relay-agent/dhcpv6/options"
func (n *RelayAgent_Dhcpv6PathAny) Options() *RelayAgent_Dhcpv6_OptionsPathAny {
	ps := &RelayAgent_Dhcpv6_OptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6Path) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6PathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6Path) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6PathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6](
		"RelayAgent_Dhcpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcpv6_Interface_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/enable YANG schema element.
type RelayAgent_Dhcpv6_Interface_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/config/enable"
func (n *RelayAgent_Dhcpv6_Interface_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
