/*
Package relayagent is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package relayagent

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_OptionsPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options YANG schema element.
type RelayAgent_Dhcpv6_Interface_OptionsPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_Interface_OptionsPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options YANG schema element.
type RelayAgent_Dhcpv6_Interface_OptionsPathAny struct {
	*ygnmi.NodePath
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) EnableInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) EnableInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) EnableRemoteId() *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) EnableRemoteId() *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Sets DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) InterfaceId() *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Sets DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) InterfaceId() *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) RemoteId() *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/*/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) RemoteId() *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentInterfaceId (leaf): Reflects the DHCPv6 OPTION_INTERFACE_ID (18) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) SentInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentInterfaceId (leaf): Reflects the DHCPv6 OPTION_INTERFACE_ID (18) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) SentInterfaceId() *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reflects the DHCPv6 OPTION_REMOTE_ID (37) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) SentRemoteId() *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reflects the DHCPv6 OPTION_REMOTE_ID (37) sent to the
// server by the system.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) SentRemoteId() *RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Options_SentRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_OptionsPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Options](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Options_EnableRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_OptionsPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/options YANG schema element.
type RelayAgent_Dhcpv6_OptionsPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_OptionsPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/options YANG schema element.
type RelayAgent_Dhcpv6_OptionsPathAny struct {
	*ygnmi.NodePath
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_OptionsPath) EnableInterfaceId() *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath {
	ps := &RelayAgent_Dhcpv6_Options_EnableInterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableInterfaceId (leaf): Enables DHCPv6 OPTION_INTERFACE_ID (18) to identify the
// interface on which the client message was received.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-interface-id"
func (n *RelayAgent_Dhcpv6_OptionsPathAny) EnableInterfaceId() *RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny {
	ps := &RelayAgent_Dhcpv6_Options_EnableInterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_OptionsPath) EnableRemoteId() *RelayAgent_Dhcpv6_Options_EnableRemoteIdPath {
	ps := &RelayAgent_Dhcpv6_Options_EnableRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableRemoteId (leaf): Sets DHCPv6 OPTION_REMOTE_ID (37).  This option is the
// DHCPv6 equivalent for the IPv4 (DHCPv4) Relay Agent Option's
// Remote-ID suboption as specified in RFC 3046. The remote-id
// field may be used to encode a user name, remote IP address,
// interface/port identifier, etc.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/options/*/enable-remote-id"
func (n *RelayAgent_Dhcpv6_OptionsPathAny) EnableRemoteId() *RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny {
	ps := &RelayAgent_Dhcpv6_Options_EnableRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_OptionsPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Options] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Options](
		"RelayAgent_Dhcpv6_Options",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
