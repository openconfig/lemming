/*
Package relayagent is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package relayagent

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RelayAgent_Dhcpv6_Interface_CountersPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcpv6_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_Interface_CountersPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcpv6_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// Dhcpv6AdverstiseSent (leaf): Number of DHCPv6 adverstise messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6AdverstiseSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6AdverstiseSent (leaf): Number of DHCPv6 adverstise messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-adverstise-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-adverstise-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6AdverstiseSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6AdverstiseSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-adverstise-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ConfirmReceived (leaf): Number of DHCPv6 confirm messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ConfirmReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ConfirmReceived (leaf): Number of DHCPv6 confirm messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-confirm-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-confirm-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ConfirmReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ConfirmReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-confirm-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6DeclineReceived (leaf): Number of DHCPv6 DECLINE messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6DeclineReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6DeclineReceived (leaf): Number of DHCPv6 DECLINE messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-decline-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-decline-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6DeclineReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6DeclineReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-decline-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6InfoRequestReceived (leaf): Number of DHCPv6 information requests messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6InfoRequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6InfoRequestReceived (leaf): Number of DHCPv6 information requests messages received from
// clients by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-info-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-info-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6InfoRequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6InfoRequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-info-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RebindReceived (leaf): Number of DHCPv6 rebind messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RebindReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RebindReceived (leaf): Number of DHCPv6 rebind messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-rebind-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-rebind-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RebindReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RebindReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-rebind-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReconfigureSent (leaf): Number of DHCPv6 reconfigure messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ReconfigureSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReconfigureSent (leaf): Number of DHCPv6 reconfigure messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reconfigure-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reconfigure-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ReconfigureSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReconfigureSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reconfigure-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayForwSent (leaf): Number of DHCPv6 relay-forward messages sent to servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-forw-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RelayForwSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-forw-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayForwSent (leaf): Number of DHCPv6 relay-forward messages sent to servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-forw-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-forw-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RelayForwSent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayForwSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-forw-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayReplyReceived (leaf): Number of DHCPv6 relay reply messages received from servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-reply-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RelayReplyReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-reply-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RelayReplyReceived (leaf): Number of DHCPv6 relay reply messages received from servers
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-relay-reply-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-relay-reply-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RelayReplyReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RelayReplyReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-relay-reply-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReleaseReceived (leaf): Number of DHCPv6 release messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-release-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ReleaseReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReleaseReceived (leaf): Number of DHCPv6 release messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-release-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-release-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ReleaseReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReleaseReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-release-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReplySent (leaf): Number of DHCPv6 reply messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reply-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6ReplySent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6ReplySent (leaf): Number of DHCPv6 reply messages sent to clients by
// the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-reply-sent"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-reply-sent"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6ReplySent() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6ReplySentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-reply-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RequestReceived (leaf): Number of DHCPv6 request messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6RequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6RequestReceived (leaf): Number of DHCPv6 request messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-request-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-request-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6RequestReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6RequestReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-request-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6SolicitReceived (leaf): Number of DHCPv6 SOLICIT messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-solicit-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) Dhcpv6SolicitReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-solicit-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dhcpv6SolicitReceived (leaf): Number of DHCPv6 SOLICIT messages received from clients
// by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "dhcpv6-solicit-received"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/dhcpv6-solicit-received"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) Dhcpv6SolicitReceived() *RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_Dhcpv6SolicitReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dhcpv6-solicit-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) InvalidOpcode() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOpcode (leaf): Number of DHCP packets dropped due to an invalid opcode
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-opcode"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-opcode"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) InvalidOpcode() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOpcodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-opcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) InvalidOptions() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidOptions (leaf): Number of DHCP packets dropped due to an invalid option
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "invalid-options"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/invalid-options"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) InvalidOptions() *RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_InvalidOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"invalid-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) TotalDropped() *RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPath {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDropped (leaf): Total number of DHCP packets dropped by the relay agent
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "total-dropped"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/state/counters/total-dropped"
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) TotalDropped() *RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPathAny {
	ps := &RelayAgent_Dhcpv6_Interface_Counters_TotalDroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_Counters](
		"RelayAgent_Dhcpv6_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/state/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/config/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_InterfaceRefPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) Interface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/interface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/interface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) Interface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) Subinterface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/interface-ref/*/subinterface"
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) Subinterface() *RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &RelayAgent_Dhcpv6_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcpv6_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcpv6_Interface_InterfaceRef](
		"RelayAgent_Dhcpv6_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableInterfaceIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableInterfaceId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable-remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/enable-remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_EnableRemoteIdPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).EnableRemoteId
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/config/remote-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_RemoteIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentInterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-interface-id"
//	Path from root:       "/relay-agent/dhcpv6/interfaces/interface/options/state/sent-interface-id"
func (n *RelayAgent_Dhcpv6_Interface_Options_SentInterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcpv6_Interface_Options",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcpv6_Interface_Options).SentInterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcpv6_Interface_Options) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
