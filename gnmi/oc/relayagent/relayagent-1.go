/*
Package relayagent is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package relayagent

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).CircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "config/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/config/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).RemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentCircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentCircuitId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_AgentInformationOption).SentRemoteId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_AgentInformationOption) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_AgentInformationOptionPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOptionPath struct {
	*ygnmi.NodePath
}

// RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny struct {
	*ygnmi.NodePath
}

// CircuitId (leaf): Encodes an agent-local identifier of the circuit from which
// a DHCP client-to-server packet was received.  It is intended
// for use by agents in relaying DHCP responses back to the
// proper circuit.  The circuit id is an opaque value
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) CircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CircuitId (leaf): Encodes an agent-local identifier of the circuit from which
// a DHCP client-to-server packet was received.  It is intended
// for use by agents in relaying DHCP responses back to the
// proper circuit.  The circuit id is an opaque value
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) CircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_CircuitIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) Enable() *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable sending the DHCP option for Relay Agent information
// -- option 82.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/enable"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/enable"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) Enable() *RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Provides a mechanism to identify the remote host end of
// the circuit.  The remote-id should be thought of as an
// opaque value, but must be globally unique.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) RemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteId (leaf): Provides a mechanism to identify the remote host end of
// the circuit.  The remote-id should be thought of as an
// opaque value, but must be globally unique.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "*/remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/*/remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) RemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_RemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentCircuitId (leaf): Reports the circuit-id sent by the system to the DHCP
// server.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) SentCircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentCircuitId (leaf): Reports the circuit-id sent by the system to the DHCP
// server.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-circuit-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-circuit-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) SentCircuitId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentCircuitIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reports the remote-id value sent by the system to the DHCP
// server
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) SentRemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SentRemoteId (leaf): Reports the remote-id value sent by the system to the DHCP
// server
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "state/sent-remote-id"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/agent-information-option/state/sent-remote-id"
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) SentRemoteId() *RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny {
	ps := &RelayAgent_Dhcp_Interface_AgentInformationOption_SentRemoteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent-remote-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) State() ygnmi.SingletonQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewSingletonQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) State() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPath) Config() ygnmi.ConfigQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewConfigQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RelayAgent_Dhcp_Interface_AgentInformationOptionPathAny) Config() ygnmi.WildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption] {
	return ygnmi.NewWildcardQuery[*oc.RelayAgent_Dhcp_Interface_AgentInformationOption](
		"RelayAgent_Dhcp_Interface_AgentInformationOption",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_BootreplySentPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootreplySentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootreplySentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootreplySent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootreply-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootreply-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootreplySentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootreply-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootreplySent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-received"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-received"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny represents the wildcard version of the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent YANG schema element.
type RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-relay-agent"
//	Instantiating module: "openconfig-relay-agent"
//	Path from parent:     "bootrequest-sent"
//	Path from root:       "/relay-agent/dhcp/interfaces/interface/state/counters/bootrequest-sent"
func (n *RelayAgent_Dhcp_Interface_Counters_BootrequestSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"RelayAgent_Dhcp_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootrequest-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.RelayAgent_Dhcp_Interface_Counters).BootrequestSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RelayAgent_Dhcp_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
