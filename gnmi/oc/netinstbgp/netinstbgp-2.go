/*
Package netinstbgp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package netinstbgp

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceivedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPathAny struct {
	*ygnmi.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4UnicastPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceivedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPathAny struct {
	*ygnmi.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6MulticastPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceivedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPathAny struct {
	*ygnmi.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPath) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPath) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6UnicastPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceivedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/installed YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/installed YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "installed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/installed"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"installed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).Installed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "installed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/installed"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"installed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).Installed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-pre-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received-pre-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).ReceivedPrePolicy
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-pre-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received-pre-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).ReceivedPrePolicy
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/sent YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/sent YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/sent"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/sent"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPathAny struct {
	*ygnmi.NodePath
}

// Installed (leaf): The number of prefices received from the neighbor that
// are installed in the network instance RIB and actively used
// for forwarding.
//
// Routes that are actively used for forwarding are
// defined to be those that:
//   - are selected, after the application of policies, to be
//     included in the Adj-RIB-In-Post, AND
//   - are selected by best path selection and hence installed
//     in the Loc-RIB (either as the only route, or as part of
//     a multipath set, AND
//   - are selected, after the application of protocol
//     preferences (e.g., administrative distance) as the
//     route to be used by the system's RIB
//     Defining module:      "openconfig-bgp-neighbor"
//     Instantiating module: "openconfig-network-instance"
//     Path from parent:     "installed"
//     Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/installed"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPath) Installed() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"installed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Installed (leaf): The number of prefices received from the neighbor that
// are installed in the network instance RIB and actively used
// for forwarding.
//
// Routes that are actively used for forwarding are
// defined to be those that:
//   - are selected, after the application of policies, to be
//     included in the Adj-RIB-In-Post, AND
//   - are selected by best path selection and hence installed
//     in the Loc-RIB (either as the only route, or as part of
//     a multipath set, AND
//   - are selected, after the application of protocol
//     preferences (e.g., administrative distance) as the
//     route to be used by the system's RIB
//     Defining module:      "openconfig-bgp-neighbor"
//     Instantiating module: "openconfig-network-instance"
//     Path from parent:     "installed"
//     Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/installed"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPathAny) Installed() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_InstalledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"installed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of prefixes that are received from the
// neighbor after applying any policies. This count is the
// number of prefixes present in the post-policy Adj-RIB-In
// for the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPath) Received() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of prefixes that are received from the
// neighbor after applying any policies. This count is the
// number of prefixes present in the post-policy Adj-RIB-In
// for the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPathAny) Received() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceivedPrePolicy (leaf): The number of prefixes that are received from the
// neighbor before applying any policies. This count is
// the number of prefixes present in the pre-policy
// Adj-RIB-In for the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-pre-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPath) ReceivedPrePolicy() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"received-pre-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceivedPrePolicy (leaf): The number of prefixes that are received from the
// neighbor before applying any policies. This count is
// the number of prefixes present in the pre-policy
// Adj-RIB-In for the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-pre-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPathAny) ReceivedPrePolicy() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_ReceivedPrePolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"received-pre-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of prefixes that are advertised to the
// neighbor after applying any policies. This count is
// the number of prefixes present in the post-policy
// Adj-RIB-Out for the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/sent"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPath) Sent() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of prefixes that are advertised to the
// neighbor after applying any policies. This count is
// the number of prefixes present in the post-policy
// Adj-RIB-Out for the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/sent"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPathAny) Sent() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_PrefixesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_Prefixes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4 YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4 YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4PathAny struct {
	*ygnmi.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4Path) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4PathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4Path) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4PathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceivedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6 YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6 YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6PathAny struct {
	*ygnmi.NodePath
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6Path) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimit (container): Configure the maximum number of prefixes that will be
// accepted from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6PathAny) PrefixLimit() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6Path) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixLimitReceived (container): Configure the maximum number of prefixes that will be
// received from a peer
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-limit-received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6PathAny) PrefixLimitReceived() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-limit-received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/config/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).MaxPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).PrefixLimitExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/config/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prevent-teardown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).PreventTeardown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/config/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-threshold-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived).WarningThresholdPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny struct {
	*ygnmi.NodePath
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxPrefixes (leaf): Maximum number of prefixes that will be accepted
// from the neighbor
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/*/max-prefixes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) MaxPrefixes() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_MaxPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLimitExceeded (leaf): If set to true, the prefix-limit has been exceeded.  When the
// prefix-limit has been exceeded, the value of true must be retained
// until the restart-time has expired.  Prior to session re-establishment,
// the value must be reset to false
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix-limit-exceeded"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/state/prefix-limit-exceeded"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) PrefixLimitExceeded() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PrefixLimitExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "prefix-limit-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreventTeardown (leaf): Do not tear down the BGP session when the maximum
// prefix limit is exceeded, but rather only log a
// warning. The default of this leaf is false, such
// that when it is not specified, the session is torn
// down.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prevent-teardown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/*/prevent-teardown"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) PreventTeardown() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_PreventTeardownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prevent-teardown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningThresholdPct (leaf): Threshold on number of prefixes that can be received
// from a neighbor before generation of warning messages
// or log entries. Expressed as a percentage of
// max-prefixes
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-threshold-pct"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit-received/*/warning-threshold-pct"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) WarningThresholdPct() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived_WarningThresholdPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-threshold-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceivedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimitReceived",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPathAny struct {
	*ygnmi.NodePath
}

// Ebgp (container): Multipath configuration for eBGP
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ebgp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPath) Ebgp() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ebgp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ebgp (container): Multipath configuration for eBGP
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ebgp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPathAny) Ebgp() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ebgp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): Whether the use of multiple paths for the same NLRI is
// enabled for the neighbor. This value is overridden by
// any more specific configuration value.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPath) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Whether the use of multiple paths for the same NLRI is
// enabled for the neighbor. This value is overridden by
// any more specific configuration value.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePathsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/state/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/config/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/config/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPathAny struct {
	*ygnmi.NodePath
}

// AllowMultipleAs (leaf): Allow multipath to use paths from different neighbouring
// ASes.  The default is to only consider multiple paths from
// the same neighbouring AS.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/*/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPath) AllowMultipleAs() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-multiple-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowMultipleAs (leaf): Allow multipath to use paths from different neighbouring
// ASes.  The default is to only consider multiple paths from
// the same neighbouring AS.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/*/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPathAny) AllowMultipleAs() *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-multiple-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_EbgpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/default-export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/default-export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/default-import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/default-import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/default-import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/state/import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/config/import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny struct {
	*ygnmi.NodePath
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/default-export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath) DefaultExportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/default-export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny) DefaultExportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/default-import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath) DefaultImportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/default-import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny) DefaultImportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_DefaultImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath) ExportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/export-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny) ExportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath) ImportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/*/import-policy"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny) ImportPolicy() *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy_ImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy](
		"NetworkInstance_Protocol_Bgp_Neighbor_ApplyPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/allow-own-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/allow-own-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allow-own-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/allow-own-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-own-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).AllowOwnAs
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allow-own-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/allow-own-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-own-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).AllowOwnAs
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/allow-own-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/config/allow-own-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-own-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).AllowOwnAs
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/allow-own-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/config/allow-own-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-own-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).AllowOwnAs
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/disable-peer-as-filter YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/disable-peer-as-filter YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-peer-as-filter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/disable-peer-as-filter"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-peer-as-filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).DisablePeerAsFilter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-peer-as-filter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/disable-peer-as-filter"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-peer-as-filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).DisablePeerAsFilter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-peer-as-filter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/config/disable-peer-as-filter"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-peer-as-filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).DisablePeerAsFilter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-peer-as-filter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/config/disable-peer-as-filter"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-peer-as-filter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).DisablePeerAsFilter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/replace-peer-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/replace-peer-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/replace-peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/replace-peer-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replace-peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).ReplacePeerAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/replace-peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/state/replace-peer-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replace-peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).ReplacePeerAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/replace-peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/config/replace-peer-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replace-peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).ReplacePeerAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/replace-peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/config/replace-peer-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replace-peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions).ReplacePeerAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPathAny struct {
	*ygnmi.NodePath
}

// AllowOwnAs (leaf): Specify the number of occurrences of the local BGP speaker's
// AS that can occur within the AS_PATH before it is rejected.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/allow-own-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/*/allow-own-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPath) AllowOwnAs() *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-own-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowOwnAs (leaf): Specify the number of occurrences of the local BGP speaker's
// AS that can occur within the AS_PATH before it is rejected.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/allow-own-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/*/allow-own-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPathAny) AllowOwnAs() *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_AllowOwnAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-own-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisablePeerAsFilter (leaf): When set to true, the system advertises routes to a peer
// even if the peer's AS was in the AS path.  The default
// behavior (false) suppresses advertisements to peers if
// their AS number is in the AS path of the route.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-peer-as-filter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/*/disable-peer-as-filter"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPath) DisablePeerAsFilter() *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-peer-as-filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisablePeerAsFilter (leaf): When set to true, the system advertises routes to a peer
// even if the peer's AS was in the AS path.  The default
// behavior (false) suppresses advertisements to peers if
// their AS number is in the AS path of the route.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-peer-as-filter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/*/disable-peer-as-filter"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPathAny) DisablePeerAsFilter() *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_DisablePeerAsFilterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-peer-as-filter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplacePeerAs (leaf): Replace occurrences of the peer's AS in the AS_PATH
// with the local autonomous system number
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/replace-peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/*/replace-peer-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPath) ReplacePeerAs() *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replace-peer-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplacePeerAs (leaf): Replace occurrences of the peer's AS in the AS_PATH
// with the local autonomous system number
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/replace-peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/*/replace-peer-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPathAny) ReplacePeerAs() *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions_ReplacePeerAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replace-peer-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptionsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_AsPathOptions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/multihop-ttl YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/multihop-ttl YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multihop-ttl"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/multihop-ttl"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multihop-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).MultihopTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multihop-ttl"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/state/multihop-ttl"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multihop-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).MultihopTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multihop-ttl"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/config/multihop-ttl"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multihop-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).MultihopTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multihop-ttl"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/config/multihop-ttl"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multihop-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop).MultihopTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When enabled the referenced group or neighbors are permitted
// to be indirectly connected - including cases where the TTL
// can be decremented between the BGP peers
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPath) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When enabled the referenced group or neighbors are permitted
// to be indirectly connected - including cases where the TTL
// can be decremented between the BGP peers
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultihopTtl (leaf): Time-to-live value to use when packets are sent to the
// referenced group or neighbors and ebgp-multihop is enabled
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multihop-ttl"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/*/multihop-ttl"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPath) MultihopTtl() *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multihop-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultihopTtl (leaf): Time-to-live value to use when packets are sent to the
// referenced group or neighbors and ebgp-multihop is enabled
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multihop-ttl"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/*/multihop-ttl"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPathAny) MultihopTtl() *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop_MultihopTtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multihop-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihopPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop](
		"NetworkInstance_Protocol_Bgp_Neighbor_EbgpMultihop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny struct {
	*ygnmi.NodePath
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DesiredMinimumTxIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath) DetectionMultiplier() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny) DetectionMultiplier() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_DetectionMultiplierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath) RequiredMinimumReceive() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny) RequiredMinimumReceive() *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd_RequiredMinimumReceivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_EnableBfdPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd](
		"NetworkInstance_Protocol_Bgp_Neighbor_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/erroneous-update-messages YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/erroneous-update-messages YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/erroneous-update-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/erroneous-update-messages"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "erroneous-update-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling).ErroneousUpdateMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/erroneous-update-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/erroneous-update-messages"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "erroneous-update-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling).ErroneousUpdateMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/treat-as-withdraw YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/treat-as-withdraw YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/treat-as-withdraw"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/treat-as-withdraw"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "treat-as-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling).TreatAsWithdraw
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/treat-as-withdraw"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/treat-as-withdraw"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "treat-as-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling).TreatAsWithdraw
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/treat-as-withdraw"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/config/treat-as-withdraw"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "treat-as-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling).TreatAsWithdraw
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/treat-as-withdraw"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/config/treat-as-withdraw"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "treat-as-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling).TreatAsWithdraw
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPathAny struct {
	*ygnmi.NodePath
}

// ErroneousUpdateMessages (leaf): The number of BGP UPDATE messages for which the
// treat-as-withdraw mechanism has been applied based
// on erroneous message contents
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/erroneous-update-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/erroneous-update-messages"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPath) ErroneousUpdateMessages() *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "erroneous-update-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErroneousUpdateMessages (leaf): The number of BGP UPDATE messages for which the
// treat-as-withdraw mechanism has been applied based
// on erroneous message contents
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/erroneous-update-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/state/erroneous-update-messages"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPathAny) ErroneousUpdateMessages() *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_ErroneousUpdateMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "erroneous-update-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TreatAsWithdraw (leaf): Specify whether erroneous UPDATE messages for which the
// NLRI can be extracted are reated as though the NLRI is
// withdrawn - avoiding session reset
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/treat-as-withdraw"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/*/treat-as-withdraw"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPath) TreatAsWithdraw() *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "treat-as-withdraw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TreatAsWithdraw (leaf): Specify whether erroneous UPDATE messages for which the
// NLRI can be extracted are reated as though the NLRI is
// withdrawn - avoiding session reset
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/treat-as-withdraw"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/*/treat-as-withdraw"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPathAny) TreatAsWithdraw() *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling_TreatAsWithdrawPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "treat-as-withdraw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandlingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling](
		"NetworkInstance_Protocol_Bgp_Neighbor_ErrorHandling",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/helper-only YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/helper-only YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/helper-only"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/helper-only"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/helper-only"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/helper-only"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/local-restarting YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/local-restarting YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/local-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-restarting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).LocalRestarting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/local-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-restarting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).LocalRestarting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/mode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/mode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePath) State() ygnmi.SingletonQuery[oc.E_GracefulRestart_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_GracefulRestart_Mode](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GracefulRestart_Mode, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePathAny) State() ygnmi.WildcardQuery[oc.E_GracefulRestart_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_GracefulRestart_Mode](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GracefulRestart_Mode, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restart-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restart-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).PeerRestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).PeerRestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restarting YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restarting YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-restarting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).PeerRestarting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-restarting"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).PeerRestarting
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/stale-routes-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/stale-routes-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/stale-routes-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/stale-routes-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "stale-routes-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).StaleRoutesTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/stale-routes-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/stale-routes-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "stale-routes-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).StaleRoutesTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/stale-routes-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/stale-routes-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "stale-routes-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).StaleRoutesTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/stale-routes-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/config/stale-routes-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "stale-routes-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart).StaleRoutesTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Enable or disable the graceful-restart capability.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enable or disable the graceful-restart capability.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperOnly (leaf): Enable graceful-restart in helper mode only. When this
// leaf is set, the local system does not retain forwarding
// its own state during a restart, but supports procedures
// for the receiving speaker, as defined in RFC4724.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/helper-only"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) HelperOnly() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperOnly (leaf): Enable graceful-restart in helper mode only. When this
// leaf is set, the local system does not retain forwarding
// its own state during a restart, but supports procedures
// for the receiving speaker, as defined in RFC4724.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/helper-only"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) HelperOnly() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_HelperOnlyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalRestarting (leaf): This flag indicates whether the local neighbor is currently
// restarting. The flag is unset after all NLRI have been
// advertised to the peer, and the End-of-RIB (EOR) marker has
// been unset
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/local-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) LocalRestarting() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-restarting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalRestarting (leaf): This flag indicates whether the local neighbor is currently
// restarting. The flag is unset after all NLRI have been
// advertised to the peer, and the End-of-RIB (EOR) marker has
// been unset
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/local-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) LocalRestarting() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_LocalRestartingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-restarting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Ths leaf indicates the mode of operation of BGP graceful
// restart with the peer
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) Mode() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Ths leaf indicates the mode of operation of BGP graceful
// restart with the peer
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) Mode() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerRestartTime (leaf): The period of time (advertised by the peer) that
// the peer expects a restart of a BGP session to
// take
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) PeerRestartTime() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerRestartTime (leaf): The period of time (advertised by the peer) that
// the peer expects a restart of a BGP session to
// take
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) PeerRestartTime() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerRestarting (leaf): This flag indicates whether the remote neighbor is currently
// in the process of restarting, and hence received routes are
// currently stale
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) PeerRestarting() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-restarting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerRestarting (leaf): This flag indicates whether the remote neighbor is currently
// in the process of restarting, and hence received routes are
// currently stale
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-restarting"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/state/peer-restarting"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) PeerRestarting() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_PeerRestartingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-restarting"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Estimated time (in seconds) for the local BGP speaker to
// restart a session. This value is advertise in the graceful
// restart BGP capability.  This is a 12-bit value, referred to
// as Restart Time in RFC4724.  Per RFC4724, the suggested
// default value is <= the hold-time value.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) RestartTime() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Estimated time (in seconds) for the local BGP speaker to
// restart a session. This value is advertise in the graceful
// restart BGP capability.  This is a 12-bit value, referred to
// as Restart Time in RFC4724.  Per RFC4724, the suggested
// default value is <= the hold-time value.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) RestartTime() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_RestartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaleRoutesTime (leaf): An upper-bound on the time thate stale routes will be
// retained by a router after a session is restarted. If an
// End-of-RIB (EOR) marker is received prior to this timer
// expiring stale-routes will be flushed upon its receipt - if
// no EOR is received, then when this timer expires stale paths
// will be purged. This timer is referred to as the
// Selection_Deferral_Timer in RFC4724
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/stale-routes-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/stale-routes-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) StaleRoutesTime() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "stale-routes-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaleRoutesTime (leaf): An upper-bound on the time thate stale routes will be
// retained by a router after a session is restarted. If an
// End-of-RIB (EOR) marker is received prior to this timer
// expiring stale-routes will be flushed upon its receipt - if
// no EOR is received, then when this timer expires stale paths
// will be purged. This timer is referred to as the
// Selection_Deferral_Timer in RFC4724
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/stale-routes-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/*/stale-routes-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) StaleRoutesTime() *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart_StaleRoutesTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "stale-routes-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestartPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart](
		"NetworkInstance_Protocol_Bgp_Neighbor_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/state/log-neighbor-state-changes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/state/log-neighbor-state-changes YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/log-neighbor-state-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/state/log-neighbor-state-changes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "log-neighbor-state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions).LogNeighborStateChanges
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/log-neighbor-state-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/state/log-neighbor-state-changes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "log-neighbor-state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions).LogNeighborStateChanges
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/log-neighbor-state-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/config/log-neighbor-state-changes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "log-neighbor-state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions).LogNeighborStateChanges
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/log-neighbor-state-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/config/log-neighbor-state-changes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "log-neighbor-state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions).LogNeighborStateChanges
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPathAny struct {
	*ygnmi.NodePath
}

// LogNeighborStateChanges (leaf): Configure logging of peer state changes.  Default is
// to enable logging of peer state changes.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/log-neighbor-state-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/*/log-neighbor-state-changes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPath) LogNeighborStateChanges() *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "log-neighbor-state-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogNeighborStateChanges (leaf): Configure logging of peer state changes.  Default is
// to enable logging of peer state changes.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/log-neighbor-state-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/*/log-neighbor-state-changes"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPathAny) LogNeighborStateChanges() *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions_LogNeighborStateChangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "log-neighbor-state-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptionsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions](
		"NetworkInstance_Protocol_Bgp_Neighbor_LoggingOptions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_MessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_MessagesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_MessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_MessagesPathAny struct {
	*ygnmi.NodePath
}

// Received (container): Counters for BGP messages received from the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_MessagesPath) Received() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Received (container): Counters for BGP messages received from the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_MessagesPathAny) Received() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Sent (container): Counters relating to BGP messages sent to the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_MessagesPath) Sent() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Sent (container): Counters relating to BGP messages sent to the neighbor
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_MessagesPathAny) Sent() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_MessagesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_MessagesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATION YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATION YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).NOTIFICATION
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).NOTIFICATION
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"UPDATE"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).UPDATE
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"UPDATE"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).UPDATE
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_BGP_ERROR_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_BGP_ERROR_CODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).LastNotificationErrorCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_BGP_ERROR_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_BGP_ERROR_CODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).LastNotificationErrorCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-subcode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-subcode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_SUBCODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).LastNotificationErrorSubcode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_SUBCODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).LastNotificationErrorSubcode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).LastNotificationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received).LastNotificationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny struct {
	*ygnmi.NodePath
}

// NOTIFICATION (leaf): Number of BGP NOTIFICATION messages indicating an
// error condition has occurred exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath) NOTIFICATION() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NOTIFICATION (leaf): Number of BGP NOTIFICATION messages indicating an
// error condition has occurred exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny) NOTIFICATION() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_NOTIFICATIONPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UPDATE (leaf): Number of BGP UPDATE messages announcing, withdrawing
// or modifying paths exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath) UPDATE() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"UPDATE"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UPDATE (leaf): Number of BGP UPDATE messages announcing, withdrawing
// or modifying paths exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny) UPDATE() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_UPDATEPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"UPDATE"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorCode (leaf): Indicates the last BGP error sent or received on the peering
// session (based on whether this leaf is associated with
// sent or received messages).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath) LastNotificationErrorCode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorCode (leaf): Indicates the last BGP error sent or received on the peering
// session (based on whether this leaf is associated with
// sent or received messages).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny) LastNotificationErrorCode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorSubcode (leaf): Indicates the last BGP error subcode sent or received on
// the peering session (based on whether this leaf is associated
// with sent or received messages)
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath) LastNotificationErrorSubcode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorSubcode (leaf): Indicates the last BGP error subcode sent or received on
// the peering session (based on whether this leaf is associated
// with sent or received messages)
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny) LastNotificationErrorSubcode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationErrorSubcodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationTime (leaf): This timestamp indicates the time that a NOTIFICATION
// message was sent or received on the peering session
// (based on whether this leaf is associated with
// sent or received messages).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath) LastNotificationTime() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationTime (leaf): This timestamp indicates the time that a NOTIFICATION
// message was sent or received on the peering session
// (based on whether this leaf is associated with
// sent or received messages).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny) LastNotificationTime() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received_LastNotificationTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_ReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Received",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATION YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATION YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).NOTIFICATION
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).NOTIFICATION
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"UPDATE"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).UPDATE
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"UPDATE"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).UPDATE
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-code YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-code YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_BGP_ERROR_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_BGP_ERROR_CODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).LastNotificationErrorCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_BGP_ERROR_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_BGP_ERROR_CODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).LastNotificationErrorCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-subcode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-subcode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_SUBCODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).LastNotificationErrorSubcode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_BGP_ERROR_SUBCODE](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BGP_ERROR_SUBCODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).LastNotificationErrorSubcode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).LastNotificationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent).LastNotificationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny struct {
	*ygnmi.NodePath
}

// NOTIFICATION (leaf): Number of BGP NOTIFICATION messages indicating an
// error condition has occurred exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath) NOTIFICATION() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NOTIFICATION (leaf): Number of BGP NOTIFICATION messages indicating an
// error condition has occurred exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "NOTIFICATION"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/NOTIFICATION"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny) NOTIFICATION() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_NOTIFICATIONPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"NOTIFICATION"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UPDATE (leaf): Number of BGP UPDATE messages announcing, withdrawing
// or modifying paths exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath) UPDATE() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"UPDATE"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UPDATE (leaf): Number of BGP UPDATE messages announcing, withdrawing
// or modifying paths exchanged.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "UPDATE"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny) UPDATE() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_UPDATEPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"UPDATE"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorCode (leaf): Indicates the last BGP error sent or received on the peering
// session (based on whether this leaf is associated with
// sent or received messages).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath) LastNotificationErrorCode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorCode (leaf): Indicates the last BGP error sent or received on the peering
// session (based on whether this leaf is associated with
// sent or received messages).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-code"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-code"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny) LastNotificationErrorCode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorSubcode (leaf): Indicates the last BGP error subcode sent or received on
// the peering session (based on whether this leaf is associated
// with sent or received messages)
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath) LastNotificationErrorSubcode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationErrorSubcode (leaf): Indicates the last BGP error subcode sent or received on
// the peering session (based on whether this leaf is associated
// with sent or received messages)
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-error-subcode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-subcode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny) LastNotificationErrorSubcode() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationErrorSubcodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-error-subcode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationTime (leaf): This timestamp indicates the time that a NOTIFICATION
// message was sent or received on the peering session
// (based on whether this leaf is associated with
// sent or received messages).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath) LastNotificationTime() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastNotificationTime (leaf): This timestamp indicates the time that a NOTIFICATION
// message was sent or received on the peering session
// (based on whether this leaf is associated with
// sent or received messages).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "last-notification-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/last-notification-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny) LastNotificationTime() *NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent_LastNotificationTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-notification-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Messages_SentPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent](
		"NetworkInstance_Protocol_Bgp_Neighbor_Messages_Sent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/input YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/input YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/input"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_Queues",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"input"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues).Input
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/input"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_Queues",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"input"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues).Input
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/output YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/output YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "output"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/output"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_Queues",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"output"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues).Output
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "output"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/output"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_Neighbor_Queues",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"output"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues).Output
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_QueuesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_QueuesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_QueuesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_QueuesPathAny struct {
	*ygnmi.NodePath
}

// Input (leaf): The number of messages received from the peer currently
// queued
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/input"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_QueuesPath) Input() *NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"input"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Input (leaf): The number of messages received from the peer currently
// queued
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/input"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_QueuesPathAny) Input() *NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Queues_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Output (leaf): The number of messages queued to be sent to the peer
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "output"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/output"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_QueuesPath) Output() *NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Output (leaf): The number of messages queued to be sent to the peer
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "output"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/queues/output"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_QueuesPathAny) Output() *NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Queues_OutputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_QueuesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues](
		"NetworkInstance_Protocol_Bgp_Neighbor_Queues",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_QueuesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Queues](
		"NetworkInstance_Protocol_Bgp_Neighbor_Queues",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-client YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-client YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-reflector-client"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-client"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-reflector-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-reflector-client"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-client"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-reflector-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-reflector-client"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-client"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-reflector-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-reflector-client"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-client"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-reflector-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-reflector-cluster-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-reflector-cluster-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClusterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-reflector-cluster-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-reflector-cluster-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClusterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-reflector-cluster-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-reflector-cluster-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClusterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-reflector-cluster-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-reflector-cluster-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector).RouteReflectorClusterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPathAny struct {
	*ygnmi.NodePath
}

// RouteReflectorClient (leaf): Configure the neighbor as a route reflector client.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-reflector-client"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/*/route-reflector-client"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPath) RouteReflectorClient() *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-reflector-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteReflectorClient (leaf): Configure the neighbor as a route reflector client.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-reflector-client"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/*/route-reflector-client"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPathAny) RouteReflectorClient() *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClientPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-reflector-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteReflectorClusterId (leaf): route-reflector cluster id to use when local router is
// configured as a route reflector.  Commonly set at the group
// level, but allows a different cluster
// id to be set for each neighbor.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-reflector-cluster-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/*/route-reflector-cluster-id"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPath) RouteReflectorClusterId() *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-reflector-cluster-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteReflectorClusterId (leaf): route-reflector cluster id to use when local router is
// configured as a route reflector.  Commonly set at the group
// level, but allows a different cluster
// id to be set for each neighbor.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-reflector-cluster-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/*/route-reflector-cluster-id"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPathAny) RouteReflectorClusterId() *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-reflector-cluster-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflectorPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector](
		"NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/connect-retry YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/connect-retry YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/connect-retry"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/connect-retry"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connect-retry"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).ConnectRetry
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/connect-retry"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/connect-retry"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connect-retry"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).ConnectRetry
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/connect-retry"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/connect-retry"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "connect-retry"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).ConnectRetry
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/connect-retry"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/connect-retry"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "connect-retry"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).ConnectRetry
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/hold-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/hold-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).HoldTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).HoldTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).HoldTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).HoldTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/keepalive-interval YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/keepalive-interval YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keepalive-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/keepalive-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keepalive-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).KeepaliveInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keepalive-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/keepalive-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keepalive-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).KeepaliveInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keepalive-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/keepalive-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keepalive-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).KeepaliveInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keepalive-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/keepalive-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keepalive-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).KeepaliveInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/minimum-advertisement-interval YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/minimum-advertisement-interval YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/minimum-advertisement-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/minimum-advertisement-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "minimum-advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).MinimumAdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/minimum-advertisement-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/minimum-advertisement-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "minimum-advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).MinimumAdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/minimum-advertisement-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/minimum-advertisement-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "minimum-advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).MinimumAdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/minimum-advertisement-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/minimum-advertisement-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "minimum-advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).MinimumAdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/negotiated-hold-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/negotiated-hold-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/negotiated-hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-hold-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).NegotiatedHoldTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/negotiated-hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-hold-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).NegotiatedHoldTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_TimersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_TimersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny struct {
	*ygnmi.NodePath
}

// ConnectRetry (leaf): Time interval in seconds between attempts to establish a
// session with the peer.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/connect-retry"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/connect-retry"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) ConnectRetry() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "connect-retry"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectRetry (leaf): Time interval in seconds between attempts to establish a
// session with the peer.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/connect-retry"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/connect-retry"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) ConnectRetry() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_ConnectRetryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "connect-retry"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldTime (leaf): Time interval in seconds that a BGP session will be
// considered active in the absence of keepalive or other
// messages from the peer.  The hold-time is typically
// set to 3x the keepalive-interval.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) HoldTime() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldTime (leaf): Time interval in seconds that a BGP session will be
// considered active in the absence of keepalive or other
// messages from the peer.  The hold-time is typically
// set to 3x the keepalive-interval.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) HoldTime() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_HoldTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeepaliveInterval (leaf): Time interval in seconds between transmission of keepalive
// messages to the neighbor.  Typically set to 1/3 the
// hold-time.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keepalive-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/keepalive-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) KeepaliveInterval() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keepalive-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeepaliveInterval (leaf): Time interval in seconds between transmission of keepalive
// messages to the neighbor.  Typically set to 1/3 the
// hold-time.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keepalive-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/keepalive-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) KeepaliveInterval() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_KeepaliveIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keepalive-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinimumAdvertisementInterval (leaf): Minimum time which must elapse between subsequent UPDATE
// messages relating to a common set of NLRI being transmitted
// to a peer. This timer is referred to as
// MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to
// reduce the number of UPDATE messages transmitted when a
// particular set of NLRI exhibit instability.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/minimum-advertisement-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/minimum-advertisement-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) MinimumAdvertisementInterval() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "minimum-advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinimumAdvertisementInterval (leaf): Minimum time which must elapse between subsequent UPDATE
// messages relating to a common set of NLRI being transmitted
// to a peer. This timer is referred to as
// MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to
// reduce the number of UPDATE messages transmitted when a
// particular set of NLRI exhibit instability.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/minimum-advertisement-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/minimum-advertisement-interval"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) MinimumAdvertisementInterval() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_MinimumAdvertisementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "minimum-advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedHoldTime (leaf): The negotiated hold-time for the BGP session
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/negotiated-hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) NegotiatedHoldTime() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-hold-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedHoldTime (leaf): The negotiated hold-time for the BGP session
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-hold-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/negotiated-hold-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) NegotiatedHoldTime() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_NegotiatedHoldTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-hold-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Time interval in seconds after which the BGP session is
// re-established after being torn down due to exceeding any
// configured max prefix-limit.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) RestartTime() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Time interval in seconds after which the BGP session is
// re-established after being torn down due to exceeding any
// configured max prefix-limit.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/*/restart-time"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) RestartTime() *NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Timers_RestartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TimersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Timers](
		"NetworkInstance_Protocol_Bgp_Neighbor_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-address YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-address YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/local-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/local-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-port YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-port YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).LocalPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).LocalPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/mtu-discovery YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/mtu-discovery YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mtu-discovery"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/mtu-discovery"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).MtuDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mtu-discovery"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/mtu-discovery"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).MtuDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mtu-discovery"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/mtu-discovery"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).MtuDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mtu-discovery"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/mtu-discovery"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu-discovery"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).MtuDiscovery
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/passive-mode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/passive-mode YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/passive-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/passive-mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "passive-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).PassiveMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/passive-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/passive-mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "passive-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).PassiveMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/passive-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/passive-mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "passive-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).PassiveMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/passive-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/passive-mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "passive-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).PassiveMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-address YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-address YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-port YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-port YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/tcp-mss YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/tcp-mss YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tcp-mss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/tcp-mss"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tcp-mss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).TcpMss
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tcp-mss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/tcp-mss"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tcp-mss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).TcpMss
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/tcp-mss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/tcp-mss"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tcp-mss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).TcpMss
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/tcp-mss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/tcp-mss"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tcp-mss"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport).TcpMss
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_TransportPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_TransportPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny struct {
	*ygnmi.NodePath
}

// LocalAddress (leaf): Set the local IP (either IPv4 or IPv6) address to use
// for the session when sending BGP update messages.  This
// may be expressed as either an IP address or reference
// to the name of an interface.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/local-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) LocalAddress() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalAddress (leaf): Set the local IP (either IPv4 or IPv6) address to use
// for the session when sending BGP update messages.  This
// may be expressed as either an IP address or reference
// to the name of an interface.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/local-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) LocalAddress() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPort (leaf): Local, source TCP port being used for the TCP session supporting
// the BGP session
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) LocalPort() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPort (leaf): Local, source TCP port being used for the TCP session supporting
// the BGP session
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/local-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) LocalPort() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_LocalPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MtuDiscovery (leaf): Turns path mtu discovery for BGP TCP sessions on (true)
// or off (false)
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mtu-discovery"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/mtu-discovery"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) MtuDiscovery() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu-discovery"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MtuDiscovery (leaf): Turns path mtu discovery for BGP TCP sessions on (true)
// or off (false)
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mtu-discovery"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/mtu-discovery"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) MtuDiscovery() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_MtuDiscoveryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu-discovery"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PassiveMode (leaf): Wait for peers to issue requests to open a BGP session,
// rather than initiating sessions from the local router.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/passive-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/passive-mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) PassiveMode() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "passive-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PassiveMode (leaf): Wait for peers to issue requests to open a BGP session,
// rather than initiating sessions from the local router.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/passive-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/passive-mode"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) PassiveMode() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_PassiveModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "passive-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteAddress (leaf): Remote address to which the BGP session has been
// established
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) RemoteAddress() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteAddress (leaf): Remote address to which the BGP session has been
// established
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-address"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) RemoteAddress() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemoteAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemotePort (leaf): The source TCP port being used by the peer for the TCP session
// supporting the BGP session.  This is expected to be the same value
// as the configured neighbor-port if the local device initiated the
// connection or a different TCP port if the peer initiated the TCP
// session.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) RemotePort() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemotePort (leaf): The source TCP port being used by the peer for the TCP session
// supporting the BGP session.  This is expected to be the same value
// as the configured neighbor-port if the local device initiated the
// connection or a different TCP port if the peer initiated the TCP
// session.
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/state/remote-port"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) RemotePort() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_RemotePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TcpMss (leaf): Sets the max segment size for BGP TCP sessions.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/tcp-mss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/tcp-mss"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) TcpMss() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tcp-mss"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TcpMss (leaf): Sets the max segment size for BGP TCP sessions.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/tcp-mss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/*/tcp-mss"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) TcpMss() *NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_Transport_TcpMssPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tcp-mss"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_Transport](
		"NetworkInstance_Protocol_Bgp_Neighbor_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPathAny struct {
	*ygnmi.NodePath
}

// Ebgp (container): Multipath configuration for eBGP
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ebgp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPath) Ebgp() *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ebgp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ebgp (container): Multipath configuration for eBGP
//
//	Defining module:      "openconfig-bgp-neighbor"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ebgp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPathAny) Ebgp() *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ebgp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): Whether the use of multiple paths for the same NLRI is
// enabled for the neighbor. This value is overridden by
// any more specific configuration value.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPath) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Whether the use of multiple paths for the same NLRI is
// enabled for the neighbor. This value is overridden by
// any more specific configuration value.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPathAny) Enabled() *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePathsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/state/allow-multiple-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/state/allow-multiple-as YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/state/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/state/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/config/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/config/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "allow-multiple-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp).AllowMultipleAs
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp YANG schema element.
type NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPathAny struct {
	*ygnmi.NodePath
}

// AllowMultipleAs (leaf): Allow multipath to use paths from different neighbouring
// ASes.  The default is to only consider multiple paths from
// the same neighbouring AS.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/*/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPath) AllowMultipleAs() *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPath {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-multiple-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllowMultipleAs (leaf): Allow multipath to use paths from different neighbouring
// ASes.  The default is to only consider multiple paths from
// the same neighbouring AS.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/allow-multiple-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/*/allow-multiple-as"
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPathAny) AllowMultipleAs() *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp_AllowMultipleAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "allow-multiple-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_EbgpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp](
		"NetworkInstance_Protocol_Bgp_Neighbor_UseMultiplePaths_Ebgp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/auth-password"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/auth-password"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/auth-password"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/auth-password"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/description YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/description YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/description"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/description"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/description"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/description"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/local-as YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/local-as YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/local-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).LocalAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/local-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).LocalAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/local-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).LocalAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/local-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).LocalAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-as YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-as YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "peer-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerAs
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-group-name YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-group-name YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-group-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-group-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-group-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-group-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/peer-group-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-group-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "peer-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/peer-group-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-group-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "peer-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-type YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-type YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_PeerType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_PeerType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_PeerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_PeerType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_PeerType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_PeerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/peer-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePath) Config() ygnmi.ConfigQuery[oc.E_BgpTypes_PeerType] {
	return ygnmi.NewConfigQuery[oc.E_BgpTypes_PeerType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "peer-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_PeerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/peer-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePathAny) Config() ygnmi.WildcardQuery[oc.E_BgpTypes_PeerType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_PeerType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "peer-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_PeerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).PeerType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/remove-private-as YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/remove-private-as YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remove-private-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/remove-private-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_RemovePrivateAsOption] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_RemovePrivateAsOption](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remove-private-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_RemovePrivateAsOption, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RemovePrivateAs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remove-private-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/remove-private-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_RemovePrivateAsOption] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_RemovePrivateAsOption](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remove-private-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_RemovePrivateAsOption, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RemovePrivateAs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remove-private-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/remove-private-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPath) Config() ygnmi.ConfigQuery[oc.E_BgpTypes_RemovePrivateAsOption] {
	return ygnmi.NewConfigQuery[oc.E_BgpTypes_RemovePrivateAsOption](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remove-private-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_RemovePrivateAsOption, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RemovePrivateAs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remove-private-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/remove-private-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpTypes_RemovePrivateAsOption] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_RemovePrivateAsOption](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remove-private-as"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_RemovePrivateAsOption, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RemovePrivateAs
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/route-flap-damping YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/route-flap-damping YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-flap-damping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/route-flap-damping"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-flap-damping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RouteFlapDamping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-flap-damping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/route-flap-damping"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-flap-damping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RouteFlapDamping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-flap-damping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/route-flap-damping"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-flap-damping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RouteFlapDamping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-flap-damping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/route-flap-damping"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-flap-damping"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).RouteFlapDamping
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-community"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-community"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-community"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-community"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-community"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/send-community"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPath) Config() ygnmi.ConfigQuery[oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewConfigQuery[oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-community"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-community"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/send-community"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-community"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community-type YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community-type YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePath) State() ygnmi.SingletonQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewSingletonQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePathAny) State() ygnmi.WildcardQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewWildcardQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePath) Config() ygnmi.ConfigQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewConfigQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePathAny) Config() ygnmi.WildcardQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewWildcardQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).TotalPaths
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).TotalPaths
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-prefixes YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).TotalPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).TotalPrefixes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_PeerGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_PeerGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_PeerGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AfiSafiAny (list): AFI,SAFI configuration available for the
// neighbour or group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safis/afi-safi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) AfiSafiAny() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": "*"},
			n,
		),
	}
	return ps
}

// AfiSafiAny (list): AFI,SAFI configuration available for the
// neighbour or group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safis/afi-safi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) AfiSafiAny() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": "*"},
			n,
		),
	}
	return ps
}

// AfiSafi (list): AFI,SAFI configuration available for the
// neighbour or group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safis/afi-safi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
//
//	AfiSafiName: oc.E_BgpTypes_AFI_SAFI_TYPE
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) AfiSafi(AfiSafiName oc.E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": AfiSafiName},
			n,
		),
	}
	return ps
}

// AfiSafi (list): AFI,SAFI configuration available for the
// neighbour or group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safis/afi-safi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
//
//	AfiSafiName: oc.E_BgpTypes_AFI_SAFI_TYPE
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) AfiSafi(AfiSafiName oc.E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safis", "afi-safi"},
			map[string]interface{}{"afi-safi-name": AfiSafiName},
			n,
		),
	}
	return ps
}

// AfiSafiMap (list): AFI,SAFI configuration available for the
// neighbour or group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safis/afi-safi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) AfiSafiMap() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMap {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfiSafiMap (list): AFI,SAFI configuration available for the
// neighbour or group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safis/afi-safi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) AfiSafiMap() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMapAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/apply-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) ApplyPolicy() *NetworkInstance_Protocol_Bgp_PeerGroup_ApplyPolicyPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_ApplyPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/apply-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) ApplyPolicy() *NetworkInstance_Protocol_Bgp_PeerGroup_ApplyPolicyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_ApplyPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathOptions (container): AS_PATH manipulation parameters for the BGP neighbor or
// group
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "as-path-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/as-path-options"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) AsPathOptions() *NetworkInstance_Protocol_Bgp_PeerGroup_AsPathOptionsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AsPathOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathOptions (container): AS_PATH manipulation parameters for the BGP neighbor or
// group
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "as-path-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/as-path-options"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) AsPathOptions() *NetworkInstance_Protocol_Bgp_PeerGroup_AsPathOptionsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AsPathOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AuthPassword (leaf): Configures an MD5 authentication password for use with
// neighboring devices.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/auth-password"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) AuthPassword() *NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPassword (leaf): Configures an MD5 authentication password for use with
// neighboring devices.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/auth-password"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) AuthPassword() *NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AuthPasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): An optional textual description (intended primarily for use
// with a peer or group
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/description"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) Description() *NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): An optional textual description (intended primarily for use
// with a peer or group
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/description"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) Description() *NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EbgpMultihop (container): eBGP multi-hop parameters for the BGPgroup
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ebgp-multihop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/ebgp-multihop"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) EbgpMultihop() *NetworkInstance_Protocol_Bgp_PeerGroup_EbgpMultihopPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_EbgpMultihopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ebgp-multihop"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EbgpMultihop (container): eBGP multi-hop parameters for the BGPgroup
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ebgp-multihop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/ebgp-multihop"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) EbgpMultihop() *NetworkInstance_Protocol_Bgp_PeerGroup_EbgpMultihopPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_EbgpMultihopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ebgp-multihop"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/enable-bfd"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) EnableBfd() *NetworkInstance_Protocol_Bgp_PeerGroup_EnableBfdPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_EnableBfdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/enable-bfd"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) EnableBfd() *NetworkInstance_Protocol_Bgp_PeerGroup_EnableBfdPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_EnableBfdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ErrorHandling (container): Error handling parameters used for the BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "error-handling"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/error-handling"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) ErrorHandling() *NetworkInstance_Protocol_Bgp_PeerGroup_ErrorHandlingPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_ErrorHandlingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"error-handling"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ErrorHandling (container): Error handling parameters used for the BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "error-handling"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/error-handling"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) ErrorHandling() *NetworkInstance_Protocol_Bgp_PeerGroup_ErrorHandlingPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_ErrorHandlingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"error-handling"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): Parameters relating the graceful restart mechanism for BGP
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) GracefulRestart() *NetworkInstance_Protocol_Bgp_PeerGroup_GracefulRestartPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_GracefulRestartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): Parameters relating the graceful restart mechanism for BGP
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) GracefulRestart() *NetworkInstance_Protocol_Bgp_PeerGroup_GracefulRestartPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_GracefulRestartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LocalAs (leaf): The local autonomous system number that is to be used
// when establishing sessions with the remote peer or peer
// group, if this differs from the global BGP router
// autonomous system number.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/local-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) LocalAs() *NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalAs (leaf): The local autonomous system number that is to be used
// when establishing sessions with the remote peer or peer
// group, if this differs from the global BGP router
// autonomous system number.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/local-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) LocalAs() *NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_LocalAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoggingOptions (container): Logging options for events related to the BGP neighbor or
// group
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "logging-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/logging-options"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) LoggingOptions() *NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptionsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"logging-options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LoggingOptions (container): Logging options for events related to the BGP neighbor or
// group
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "logging-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/logging-options"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) LoggingOptions() *NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptionsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logging-options"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PeerAs (leaf): AS number of the peer.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/peer-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) PeerAs() *NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerAs (leaf): AS number of the peer.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/peer-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) PeerAs() *NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_PeerAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerGroupName (leaf): Name of the BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-group-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/peer-group-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) PeerGroupName() *NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerGroupName (leaf): Name of the BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-group-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/peer-group-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) PeerGroupName() *NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_PeerGroupNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerType (leaf): Explicitly designate the peer or peer group as internal
// (iBGP) or external (eBGP).
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/peer-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) PeerType() *NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerType (leaf): Explicitly designate the peer or peer group as internal
// (iBGP) or external (eBGP).
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/peer-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) PeerType() *NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_PeerTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemovePrivateAs (leaf): Remove private AS numbers from updates sent to peers - when
// this leaf is not specified, the AS_PATH attribute should be
// sent to the peer unchanged
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remove-private-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/remove-private-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) RemovePrivateAs() *NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remove-private-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemovePrivateAs (leaf): Remove private AS numbers from updates sent to peers - when
// this leaf is not specified, the AS_PATH attribute should be
// sent to the peer unchanged
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remove-private-as"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/remove-private-as"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) RemovePrivateAs() *NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_RemovePrivateAsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remove-private-as"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteFlapDamping (leaf): Enable route flap damping.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-flap-damping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/route-flap-damping"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) RouteFlapDamping() *NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-flap-damping"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteFlapDamping (leaf): Enable route flap damping.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-flap-damping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/route-flap-damping"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) RouteFlapDamping() *NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_RouteFlapDampingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-flap-damping"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteReflector (container): Route reflector parameters for the BGPgroup
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-reflector"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) RouteReflector() *NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflectorPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-reflector"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouteReflector (container): Route reflector parameters for the BGPgroup
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-reflector"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) RouteReflector() *NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflectorPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-reflector"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SendCommunity (leaf): This leaf has been deprecated and replaced by send-community-type to
// support large communities.
//
// Specify which types of community should be sent to the
// neighbor or group. The default is to not send the
// community attribute
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/send-community"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/send-community"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) SendCommunity() *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-community"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SendCommunity (leaf): This leaf has been deprecated and replaced by send-community-type to
// support large communities.
//
// Specify which types of community should be sent to the
// neighbor or group. The default is to not send the
// community attribute
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/send-community"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/send-community"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) SendCommunity() *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-community"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SendCommunityType (leaf-list): Specify which types of community should be sent to the neighbor or
// group. The default is to not send the community attribute.  Note, if
// the NONE community-type is specified, no other types must be
// specified.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) SendCommunityType() *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-community-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SendCommunityType (leaf-list): Specify which types of community should be sent to the neighbor or
// group. The default is to not send the community attribute.  Note, if
// the NONE community-type is specified, no other types must be
// specified.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/*/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) SendCommunityType() *NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_SendCommunityTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-community-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timers (container): Timers related to a BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/timers"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) Timers() *NetworkInstance_Protocol_Bgp_PeerGroup_TimersPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TimersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Timers (container): Timers related to a BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/timers"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) Timers() *NetworkInstance_Protocol_Bgp_PeerGroup_TimersPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TimersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TotalPaths (leaf): Total number of BGP paths within the context
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) TotalPaths() *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalPaths (leaf): Total number of BGP paths within the context
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) TotalPaths() *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TotalPathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalPrefixes (leaf): Total number of BGP prefixes received within the context
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) TotalPrefixes() *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalPrefixes (leaf): Total number of BGP prefixes received within the context
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/total-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/total-prefixes"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) TotalPrefixes() *NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TotalPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transport (container): Transport session parameters for the BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/transport"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) Transport() *NetworkInstance_Protocol_Bgp_PeerGroup_TransportPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TransportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport session parameters for the BGP peer-group
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/transport"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) Transport() *NetworkInstance_Protocol_Bgp_PeerGroup_TransportPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_TransportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "use-multiple-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePathsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "use-multiple-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePathsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp).PeerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:peer-groups"},
			PostRelPath: []string{"openconfig-network-instance:peer-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp).PeerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:peer-groups"},
			PostRelPath: []string{"openconfig-network-instance:peer-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp).PeerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:peer-groups"},
			PostRelPath: []string{"openconfig-network-instance:peer-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup](
		"NetworkInstance_Protocol_Bgp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Bgp_PeerGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp).PeerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:peer-groups"},
			PostRelPath: []string{"openconfig-network-instance:peer-group"},
		},
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/afi-safi-name YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/afi-safi-name YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_AFI_SAFI_TYPE](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).AfiSafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_AFI_SAFI_TYPE](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).AfiSafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/config/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePath) Config() ygnmi.ConfigQuery[oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_BgpTypes_AFI_SAFI_TYPE](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).AfiSafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/config/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_BgpTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_AFI_SAFI_TYPE](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).AfiSafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/enabled YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/enabled"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/config/enabled"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/send-community-type YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/send-community-type YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePath) State() ygnmi.SingletonQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewSingletonQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePathAny) State() ygnmi.WildcardQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewWildcardQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/config/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePath) Config() ygnmi.ConfigQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewConfigQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/config/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePathAny) Config() ygnmi.WildcardQuery[[]oc.E_BgpTypes_CommunityType] {
	return ygnmi.NewWildcardQuery[[]oc.E_BgpTypes_CommunityType](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-community-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_BgpTypes_CommunityType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi).SendCommunityType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMapAny struct {
	*ygnmi.NodePath
}

// AddPaths (container): Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "add-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) AddPaths() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPathsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"add-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddPaths (container): Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
//
//	Defining module:      "openconfig-bgp-common-structure"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "add-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) AddPaths() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPathsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"add-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfiSafiName (leaf): AFI,SAFI
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/*/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) AfiSafiName() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiSafiName (leaf): AFI,SAFI
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/*/afi-safi-name"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) AfiSafiName() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AfiSafiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/apply-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) ApplyPolicy() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_ApplyPolicyPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_ApplyPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/apply-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) ApplyPolicy() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_ApplyPolicyPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_ApplyPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): This leaf indicates whether the AFI-SAFI is
// enabled for the neighbor or group
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) Enabled() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf indicates whether the AFI-SAFI is
// enabled for the neighbor or group
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/*/enabled"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) Enabled() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GracefulRestart (container): Parameters relating to BGP graceful-restart
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) GracefulRestart() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_GracefulRestartPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_GracefulRestartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): Parameters relating to BGP graceful-restart
//
//	Defining module:      "openconfig-bgp-peer-group"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/graceful-restart"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) GracefulRestart() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_GracefulRestartPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_GracefulRestartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4LabeledUnicast (container): IPv4 Labeled Unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-labeled-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) Ipv4LabeledUnicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4LabeledUnicast (container): IPv4 Labeled Unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-labeled-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) Ipv4LabeledUnicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4Unicast (container): IPv4 unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) Ipv4Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4UnicastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4Unicast (container): IPv4 unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) Ipv4Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4UnicastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv4UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6LabeledUnicast (container): IPv6 Labeled Unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-labeled-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) Ipv6LabeledUnicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6LabeledUnicast (container): IPv6 Labeled Unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-labeled-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-labeled-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) Ipv6LabeledUnicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-labeled-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Unicast (container): IPv6 unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) Ipv6Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6UnicastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Unicast (container): IPv6 unicast configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) Ipv6Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6UnicastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_Ipv6UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2VpnEvpn (container): BGP EVPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2vpn-evpn"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-evpn"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) L2VpnEvpn() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnEvpnPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnEvpnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2vpn-evpn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2VpnEvpn (container): BGP EVPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2vpn-evpn"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-evpn"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) L2VpnEvpn() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnEvpnPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnEvpnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2vpn-evpn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2VpnVpls (container): BGP-signalled VPLS configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2vpn-vpls"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-vpls"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) L2VpnVpls() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnVplsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnVplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2vpn-vpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2VpnVpls (container): BGP-signalled VPLS configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2vpn-vpls"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-vpls"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) L2VpnVpls() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnVplsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L2VpnVplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2vpn-vpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv4Multicast (container): Multicast IPv4 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv4-multicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-multicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) L3VpnIpv4Multicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4MulticastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4MulticastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv4-multicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv4Multicast (container): Multicast IPv4 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv4-multicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-multicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) L3VpnIpv4Multicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4MulticastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4MulticastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv4-multicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv4Unicast (container): Unicast IPv4 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) L3VpnIpv4Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4UnicastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv4Unicast (container): Unicast IPv4 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) L3VpnIpv4Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4UnicastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv4UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv6Multicast (container): Multicast IPv6 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv6-multicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-multicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) L3VpnIpv6Multicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6MulticastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6MulticastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv6-multicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv6Multicast (container): Multicast IPv6 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv6-multicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-multicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) L3VpnIpv6Multicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6MulticastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6MulticastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv6-multicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv6Unicast (container): Unicast IPv6 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) L3VpnIpv6Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6UnicastPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VpnIpv6Unicast (container): Unicast IPv6 L3VPN configuration options
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l3vpn-ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-unicast"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) L3VpnIpv6Unicast() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6UnicastPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_L3VpnIpv6UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l3vpn-ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SendCommunityType (leaf-list): Specify which types of community should be sent to the
// neighbor or group. The default is to not send the
// community attribute. This takes precedence over the neighbor
// or group configuration
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/*/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) SendCommunityType() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-community-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SendCommunityType (leaf-list): Specify which types of community should be sent to the
// neighbor or group. The default is to not send the
// community attribute. This takes precedence over the neighbor
// or group configuration
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/send-community-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/*/send-community-type"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) SendCommunityType() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SendCommunityTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-community-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrtePolicyIpv4 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv4 Unicast.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srte-policy-ipv4"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv4"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) SrtePolicyIpv4() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4Path {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"srte-policy-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrtePolicyIpv4 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv4 Unicast.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srte-policy-ipv4"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv4"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) SrtePolicyIpv4() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4PathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srte-policy-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrtePolicyIpv6 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv6 Unicast.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srte-policy-ipv6"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv6"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) SrtePolicyIpv6() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6Path {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"srte-policy-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrtePolicyIpv6 (container): Configuration and operational state parameters relating to
// the SR-TE Policy SAFI for IPv6 Unicast.
//
//	Defining module:      "openconfig-bgp-common-multiprotocol"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srte-policy-ipv6"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv6"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) SrtePolicyIpv6() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6PathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srte-policy-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "use-multiple-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_UseMultiplePathsPath {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_UseMultiplePathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UseMultiplePaths (container): Parameters related to the use of multiple paths for the
// same NLRI
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "use-multiple-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) UseMultiplePaths() *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_UseMultiplePathsPathAny {
	ps := &NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_UseMultiplePathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"use-multiple-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMap) State() ygnmi.SingletonQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewSingletonQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AfiSafi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safis"},
			PostRelPath: []string{"openconfig-network-instance:afi-safi"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewWildcardQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AfiSafi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safis"},
			PostRelPath: []string{"openconfig-network-instance:afi-safi"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMap) Config() ygnmi.ConfigQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewConfigQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AfiSafi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safis"},
			PostRelPath: []string{"openconfig-network-instance:afi-safi"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafiPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi] {
	return ygnmi.NewWildcardQuery[map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi](
		"NetworkInstance_Protocol_Bgp_PeerGroup",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_BgpTypes_AFI_SAFI_TYPE]*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup).AfiSafi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safis"},
			PostRelPath: []string{"openconfig-network-instance:afi-safi"},
		},
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/eligible-prefix-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "eligible-prefix-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).EligiblePrefixPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/eligible-prefix-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/eligible-prefix-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "eligible-prefix-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).EligiblePrefixPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/eligible-prefix-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/eligible-prefix-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "eligible-prefix-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).EligiblePrefixPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/eligible-prefix-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/eligible-prefix-policy"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_EligiblePrefixPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "eligible-prefix-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).EligiblePrefixPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/receive YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/receive YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/receive"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Receive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/receive"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Receive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/receive"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Receive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/receive"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_ReceivePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Receive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Send
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Send
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/send"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Send
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/send"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).Send
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send-max YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send-max YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-max"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send-max"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).SendMax
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/send-max"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/state/send-max"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "send-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).SendMax
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-max"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/send-max"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).SendMax
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/send-max"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths/config/send-max"
func (n *NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths_SendMaxPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "send-max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths).SendMax
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Bgp_PeerGroup_AfiSafi_AddPaths) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
