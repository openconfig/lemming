/*
Package definedsets is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package definedsets

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// DefinedSetsPath represents the /openconfig-defined-sets/defined-sets YANG schema element.
type DefinedSetsPath struct {
	*ygnmi.NodePath
}

// DefinedSetsPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets YANG schema element.
type DefinedSetsPathAny struct {
	*ygnmi.NodePath
}

// Ipv4PrefixSetAny (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPath) Ipv4PrefixSetAny() *DefinedSets_Ipv4PrefixSetPathAny {
	ps := &DefinedSets_Ipv4PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSetAny (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPathAny) Ipv4PrefixSetAny() *DefinedSets_Ipv4PrefixSetPathAny {
	ps := &DefinedSets_Ipv4PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSet (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
//
//	Name: string
func (n *DefinedSetsPath) Ipv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSetPath {
	ps := &DefinedSets_Ipv4PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSet (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
//
//	Name: string
func (n *DefinedSetsPathAny) Ipv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSetPathAny {
	ps := &DefinedSets_Ipv4PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets", "ipv4-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSetMap (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPath) Ipv4PrefixSetMap() *DefinedSets_Ipv4PrefixSetPathMap {
	ps := &DefinedSets_Ipv4PrefixSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4PrefixSetMap (list): List of IPv4 prefix sets.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv4-prefix-sets/ipv4-prefix-set"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set"
func (n *DefinedSetsPathAny) Ipv4PrefixSetMap() *DefinedSets_Ipv4PrefixSetPathMapAny {
	ps := &DefinedSets_Ipv4PrefixSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetAny (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPath) Ipv6PrefixSetAny() *DefinedSets_Ipv6PrefixSetPathAny {
	ps := &DefinedSets_Ipv6PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetAny (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPathAny) Ipv6PrefixSetAny() *DefinedSets_Ipv6PrefixSetPathAny {
	ps := &DefinedSets_Ipv6PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSet (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
//
//	Name: string
func (n *DefinedSetsPath) Ipv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSetPath {
	ps := &DefinedSets_Ipv6PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSet (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
//
//	Name: string
func (n *DefinedSetsPathAny) Ipv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSetPathAny {
	ps := &DefinedSets_Ipv6PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets", "ipv6-prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetMap (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPath) Ipv6PrefixSetMap() *DefinedSets_Ipv6PrefixSetPathMap {
	ps := &DefinedSets_Ipv6PrefixSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6PrefixSetMap (list): List of IPv6 prefix sets. Each defined set
// is uniquely identified by a name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "ipv6-prefix-sets/ipv6-prefix-set"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set"
func (n *DefinedSetsPathAny) Ipv6PrefixSetMap() *DefinedSets_Ipv6PrefixSetPathMapAny {
	ps := &DefinedSets_Ipv6PrefixSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PortSetAny (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPath) PortSetAny() *DefinedSets_PortSetPathAny {
	ps := &DefinedSets_PortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PortSetAny (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPathAny) PortSetAny() *DefinedSets_PortSetPathAny {
	ps := &DefinedSets_PortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PortSet (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
//
//	Name: string
func (n *DefinedSetsPath) PortSet(Name string) *DefinedSets_PortSetPath {
	ps := &DefinedSets_PortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PortSet (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
//
//	Name: string
func (n *DefinedSetsPathAny) PortSet(Name string) *DefinedSets_PortSetPathAny {
	ps := &DefinedSets_PortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets", "port-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PortSetMap (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPath) PortSetMap() *DefinedSets_PortSetPathMap {
	ps := &DefinedSets_PortSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PortSetMap (list): List of port sets. Each por set is uniquely
// identified by its name
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "port-sets/port-set"
//	Path from root:       "/defined-sets/port-sets/port-set"
func (n *DefinedSetsPathAny) PortSetMap() *DefinedSets_PortSetPathMapAny {
	ps := &DefinedSets_PortSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"port-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPath) State() ygnmi.SingletonQuery[*oc.DefinedSets] {
	return ygnmi.NewSingletonQuery[*oc.DefinedSets](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPathAny) State() ygnmi.WildcardQuery[*oc.DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPath) Config() ygnmi.ConfigQuery[*oc.DefinedSets] {
	return ygnmi.NewConfigQuery[*oc.DefinedSets](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSetsPathAny) Config() ygnmi.WildcardQuery[*oc.DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DefinedSets_Ipv4PrefixSet_DescriptionPath represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv4PrefixSet_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv4PrefixSet_DescriptionPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv4PrefixSet_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config/description"
func (n *DefinedSets_Ipv4PrefixSet_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv4PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv4PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
