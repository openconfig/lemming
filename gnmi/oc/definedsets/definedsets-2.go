/*
Package definedsets is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package definedsets

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// DefinedSets_Ipv4PrefixSetPath represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPath struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv4PrefixSetPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPathAny struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv4PrefixSetPathMap represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPathMap struct {
	*ygnmi.NodePath
}

// DefinedSets_Ipv4PrefixSetPathMapAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSetPathMapAny struct {
	*ygnmi.NodePath
}

// Description (leaf): A user defined IPv4 prefix set description.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/description"
func (n *DefinedSets_Ipv4PrefixSetPath) Description() *DefinedSets_Ipv4PrefixSet_DescriptionPath {
	ps := &DefinedSets_Ipv4PrefixSet_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A user defined IPv4 prefix set description.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/description"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/description"
func (n *DefinedSets_Ipv4PrefixSetPathAny) Description() *DefinedSets_Ipv4PrefixSet_DescriptionPathAny {
	ps := &DefinedSets_Ipv4PrefixSet_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A user defined name of the IPv4 prefix set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/name"
func (n *DefinedSets_Ipv4PrefixSetPath) Name() *DefinedSets_Ipv4PrefixSet_NamePath {
	ps := &DefinedSets_Ipv4PrefixSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A user defined name of the IPv4 prefix set.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/name"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/name"
func (n *DefinedSets_Ipv4PrefixSetPathAny) Name() *DefinedSets_Ipv4PrefixSet_NamePathAny {
	ps := &DefinedSets_Ipv4PrefixSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf-list): A user defined list of IPv4 prefixes to be used in match
// conditions. Each entry is a IPv4 + mask combination.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/prefix"
func (n *DefinedSets_Ipv4PrefixSetPath) Prefix() *DefinedSets_Ipv4PrefixSet_PrefixPath {
	ps := &DefinedSets_Ipv4PrefixSet_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf-list): A user defined list of IPv4 prefixes to be used in match
// conditions. Each entry is a IPv4 + mask combination.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "*/prefix"
//	Path from root:       "/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/*/prefix"
func (n *DefinedSets_Ipv4PrefixSetPathAny) Prefix() *DefinedSets_Ipv4PrefixSet_PrefixPathAny {
	ps := &DefinedSets_Ipv4PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPath) State() ygnmi.SingletonQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewSingletonQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathAny) State() ygnmi.WildcardQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPath) Config() ygnmi.ConfigQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewConfigQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathAny) Config() ygnmi.WildcardQuery[*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets_Ipv4PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DefinedSets_Ipv4PrefixSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.DefinedSets_Ipv4PrefixSet](
		"DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.DefinedSets_Ipv4PrefixSet, bool) {
			ret := gs.(*oc.DefinedSets).Ipv4PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-defined-sets:ipv4-prefix-sets"},
			PostRelPath: []string{"openconfig-defined-sets:ipv4-prefix-set"},
		},
	)
}

// DefinedSets_Ipv6PrefixSet_DescriptionPath represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv6PrefixSet_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DefinedSets_Ipv6PrefixSet_DescriptionPathAny represents the wildcard version of the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description YANG schema element.
type DefinedSets_Ipv6PrefixSet_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "state/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-defined-sets"
//	Instantiating module: "openconfig-defined-sets"
//	Path from parent:     "config/description"
//	Path from root:       "/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config/description"
func (n *DefinedSets_Ipv6PrefixSet_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"DefinedSets_Ipv6PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.DefinedSets_Ipv6PrefixSet).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.DefinedSets_Ipv6PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
