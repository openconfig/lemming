/*
Package lldp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package lldp

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Lldp_Interface_Neighbor_TtlPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_TtlPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_Neighbor_TtlPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Ttl
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_Neighbor_TtlPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Lldp_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Ttl
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_NeighborPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPath struct {
	*ygnmi.NodePath
}

// Lldp_Interface_NeighborPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Lldp_Interface_NeighborPathMap represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Lldp_Interface_NeighborPathMapAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Age (leaf): Age since discovery
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPath) Age() *Lldp_Interface_Neighbor_AgePath {
	ps := &Lldp_Interface_Neighbor_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): Age since discovery
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/age"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPathAny) Age() *Lldp_Interface_Neighbor_AgePathAny {
	ps := &Lldp_Interface_Neighbor_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPath) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPathAny) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
//
//	Name: oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPath) Capability(Name oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPath {
	ps := &Lldp_Interface_Neighbor_CapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
//
//	Name: oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPathAny) Capability(Name oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPathAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// CapabilityMap (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPath) CapabilityMap() *Lldp_Interface_Neighbor_CapabilityPathMap {
	ps := &Lldp_Interface_Neighbor_CapabilityPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CapabilityMap (list): List of LLDP system capabilities advertised by the
// neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "capabilities/capability"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
func (n *Lldp_Interface_NeighborPathAny) CapabilityMap() *Lldp_Interface_Neighbor_CapabilityPathMapAny {
	ps := &Lldp_Interface_Neighbor_CapabilityPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"capabilities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPath) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPath {
	ps := &Lldp_Interface_Neighbor_ChassisIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPathAny) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPathAny {
	ps := &Lldp_Interface_Neighbor_ChassisIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPath) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePath {
	ps := &Lldp_Interface_Neighbor_ChassisIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/chassis-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPathAny) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePathAny {
	ps := &Lldp_Interface_Neighbor_ChassisIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/*/id"
func (n *Lldp_Interface_NeighborPath) Id() *Lldp_Interface_Neighbor_IdPath {
	ps := &Lldp_Interface_Neighbor_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/*/id"
func (n *Lldp_Interface_NeighborPathAny) Id() *Lldp_Interface_Neighbor_IdPathAny {
	ps := &Lldp_Interface_Neighbor_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/last-update"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPath) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePath {
	ps := &Lldp_Interface_Neighbor_LastUpdatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastUpdate (leaf): Seconds since last update received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/last-update"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPathAny) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePathAny {
	ps := &Lldp_Interface_Neighbor_LastUpdatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPath) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPath {
	ps := &Lldp_Interface_Neighbor_ManagementAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPathAny {
	ps := &Lldp_Interface_Neighbor_ManagementAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPath) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePath {
	ps := &Lldp_Interface_Neighbor_ManagementAddressTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/management-address-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePathAny {
	ps := &Lldp_Interface_Neighbor_ManagementAddressTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPath) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPath {
	ps := &Lldp_Interface_Neighbor_PortDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPathAny) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPathAny {
	ps := &Lldp_Interface_Neighbor_PortDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPath) PortId() *Lldp_Interface_Neighbor_PortIdPath {
	ps := &Lldp_Interface_Neighbor_PortIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPathAny) PortId() *Lldp_Interface_Neighbor_PortIdPathAny {
	ps := &Lldp_Interface_Neighbor_PortIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPath) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePath {
	ps := &Lldp_Interface_Neighbor_PortIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/port-id-type"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPathAny) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePathAny {
	ps := &Lldp_Interface_Neighbor_PortIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPath) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPath {
	ps := &Lldp_Interface_Neighbor_SystemDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-description"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPathAny) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPathAny {
	ps := &Lldp_Interface_Neighbor_SystemDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPath) SystemName() *Lldp_Interface_Neighbor_SystemNamePath {
	ps := &Lldp_Interface_Neighbor_SystemNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/system-name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPathAny) SystemName() *Lldp_Interface_Neighbor_SystemNamePathAny {
	ps := &Lldp_Interface_Neighbor_SystemNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPath) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	ps := &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPathAny) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	ps := &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
	return ps
}

// WithType sets Lldp_Interface_Neighbor_TlvPathAny's key "type" to the specified value.
// Type: int32
func (n *Lldp_Interface_Neighbor_TlvPathAny) WithType(Type int32) *Lldp_Interface_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// WithOui sets Lldp_Interface_Neighbor_TlvPathAny's key "oui" to the specified value.
// Oui: string
func (n *Lldp_Interface_Neighbor_TlvPathAny) WithOui(Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui", Oui)
	return n
}

// WithOuiSubtype sets Lldp_Interface_Neighbor_TlvPathAny's key "oui-subtype" to the specified value.
// OuiSubtype: string
func (n *Lldp_Interface_Neighbor_TlvPathAny) WithOuiSubtype(OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	ygnmi.ModifyKey(n.NodePath, "oui-subtype", OuiSubtype)
	return n
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
//
//	Type: int32
//	Oui: string
//	OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPath {
	ps := &Lldp_Interface_Neighbor_TlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
//
//	Type: int32
//	Oui: string
//	OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	ps := &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPath) TlvMap() *Lldp_Interface_Neighbor_TlvPathMap {
	ps := &Lldp_Interface_Neighbor_TlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of custom LLDP TLVs from a neighbor
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "custom-tlvs/tlv"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
func (n *Lldp_Interface_NeighborPathAny) TlvMap() *Lldp_Interface_Neighbor_TlvPathMapAny {
	ps := &Lldp_Interface_Neighbor_TlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"custom-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPath) Ttl() *Lldp_Interface_Neighbor_TtlPath {
	ps := &Lldp_Interface_Neighbor_TtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/ttl"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPathAny) Ttl() *Lldp_Interface_Neighbor_TtlPathAny {
	ps := &Lldp_Interface_Neighbor_TtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface_Neighbor, bool) {
			ret := gs.(*oc.Lldp_Interface).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:neighbors"},
			PostRelPath: []string{"openconfig-lldp:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Lldp_Interface_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lldp_Interface_Neighbor](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface_Neighbor, bool) {
			ret := gs.(*oc.Lldp_Interface).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:neighbors"},
			PostRelPath: []string{"openconfig-lldp:neighbor"},
		},
	)
}

// Lldp_Interface_Neighbor_Capability_EnabledPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Capability_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_Capability_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_Capability_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_Capability_NamePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Capability_NamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_Capability_NamePath) State() ygnmi.SingletonQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewSingletonQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_Capability_NamePathAny) State() ygnmi.WildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewWildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Capability_NamePath) Config() ygnmi.ConfigQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewConfigQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Capability_NamePathAny) Config() ygnmi.WildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY] {
	return ygnmi.NewWildcardQuery[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY](
		"Lldp_Interface_Neighbor_Capability",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Capability).Name
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_CapabilityPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPath struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathAny struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathMap represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathMap struct {
	*ygnmi.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathMapAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathMapAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPath {
	ps := &Lldp_Interface_Neighbor_Capability_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPathAny {
	ps := &Lldp_Interface_Neighbor_Capability_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/*/name"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Name() *Lldp_Interface_Neighbor_Capability_NamePath {
	ps := &Lldp_Interface_Neighbor_Capability_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/*/name"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Name() *Lldp_Interface_Neighbor_Capability_NamePathAny {
	ps := &Lldp_Interface_Neighbor_Capability_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPathMap) State() ygnmi.SingletonQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewSingletonQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Capability
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:capabilities"},
			PostRelPath: []string{"openconfig-lldp:capability"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_Interface_Neighbor_CapabilityPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability] {
	return ygnmi.NewWildcardQuery[map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability](
		"Lldp_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_LldpTypes_LLDP_SYSTEM_CAPABILITY]*oc.Lldp_Interface_Neighbor_Capability, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor).Capability
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:capabilities"},
			PostRelPath: []string{"openconfig-lldp:capability"},
		},
	)
}

// Lldp_Interface_Neighbor_Tlv_OuiPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Tlv_OuiPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_Tlv_OuiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_Tlv_OuiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).Oui
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/oui-subtype"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "oui-subtype"
//	Path from root:       ""
func (n *Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface_Neighbor_Tlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"oui-subtype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface_Neighbor_Tlv).OuiSubtype
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface_Neighbor_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
