/*
Package lldp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package lldp

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// LldpPath represents the /openconfig-lldp/lldp YANG schema element.
type LldpPath struct {
	*ygnmi.NodePath
}

// LldpPathAny represents the wildcard version of the /openconfig-lldp/lldp YANG schema element.
type LldpPathAny struct {
	*ygnmi.NodePath
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id"
//	Path from root:       "/lldp/*/chassis-id"
func (n *LldpPath) ChassisId() *Lldp_ChassisIdPath {
	ps := &Lldp_ChassisIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id"
//	Path from root:       "/lldp/*/chassis-id"
func (n *LldpPathAny) ChassisId() *Lldp_ChassisIdPathAny {
	ps := &Lldp_ChassisIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id-type"
//	Path from root:       "/lldp/*/chassis-id-type"
func (n *LldpPath) ChassisIdType() *Lldp_ChassisIdTypePath {
	ps := &Lldp_ChassisIdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/chassis-id-type"
//	Path from root:       "/lldp/*/chassis-id-type"
func (n *LldpPathAny) ChassisIdType() *Lldp_ChassisIdTypePathAny {
	ps := &Lldp_ChassisIdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Global LLDP counters
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/state/counters"
func (n *LldpPath) Counters() *Lldp_CountersPath {
	ps := &Lldp_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Global LLDP counters
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/state/counters"
func (n *LldpPathAny) Counters() *Lldp_CountersPathAny {
	ps := &Lldp_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): System level state of the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/*/enabled"
func (n *LldpPath) Enabled() *Lldp_EnabledPath {
	ps := &Lldp_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): System level state of the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/*/enabled"
func (n *LldpPathAny) Enabled() *Lldp_EnabledPathAny {
	ps := &Lldp_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloTimer (leaf): System level hello timer for the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/hello-timer"
//	Path from root:       "/lldp/*/hello-timer"
func (n *LldpPath) HelloTimer() *Lldp_HelloTimerPath {
	ps := &Lldp_HelloTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloTimer (leaf): System level hello timer for the LLDP protocol.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/hello-timer"
//	Path from root:       "/lldp/*/hello-timer"
func (n *LldpPathAny) HelloTimer() *Lldp_HelloTimerPathAny {
	ps := &Lldp_HelloTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPath) InterfaceAny() *Lldp_InterfacePathAny {
	ps := &Lldp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPathAny) InterfaceAny() *Lldp_InterfacePathAny {
	ps := &Lldp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
//
//	Name: string
func (n *LldpPath) Interface(Name string) *Lldp_InterfacePath {
	ps := &Lldp_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
//
//	Name: string
func (n *LldpPathAny) Interface(Name string) *Lldp_InterfacePathAny {
	ps := &Lldp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPath) InterfaceMap() *Lldp_InterfacePathMap {
	ps := &Lldp_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces on which LLDP is enabled / available
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/lldp/interfaces/interface"
func (n *LldpPathAny) InterfaceMap() *Lldp_InterfacePathMapAny {
	ps := &Lldp_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SuppressTlvAdvertisement (leaf-list): Indicates whether the local system should suppress the
// advertisement of particular TLVs with the LLDP PDUs that it
// transmits. Where a TLV type is specified within this list, it
// should not be included in any LLDP PDU transmitted by the
// local agent.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/suppress-tlv-advertisement"
//	Path from root:       "/lldp/*/suppress-tlv-advertisement"
func (n *LldpPath) SuppressTlvAdvertisement() *Lldp_SuppressTlvAdvertisementPath {
	ps := &Lldp_SuppressTlvAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-tlv-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SuppressTlvAdvertisement (leaf-list): Indicates whether the local system should suppress the
// advertisement of particular TLVs with the LLDP PDUs that it
// transmits. Where a TLV type is specified within this list, it
// should not be included in any LLDP PDU transmitted by the
// local agent.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/suppress-tlv-advertisement"
//	Path from root:       "/lldp/*/suppress-tlv-advertisement"
func (n *LldpPathAny) SuppressTlvAdvertisement() *Lldp_SuppressTlvAdvertisementPathAny {
	ps := &Lldp_SuppressTlvAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-tlv-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-description"
//	Path from root:       "/lldp/*/system-description"
func (n *LldpPath) SystemDescription() *Lldp_SystemDescriptionPath {
	ps := &Lldp_SystemDescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-description"
//	Path from root:       "/lldp/*/system-description"
func (n *LldpPathAny) SystemDescription() *Lldp_SystemDescriptionPathAny {
	ps := &Lldp_SystemDescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-name"
//	Path from root:       "/lldp/*/system-name"
func (n *LldpPath) SystemName() *Lldp_SystemNamePath {
	ps := &Lldp_SystemNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/system-name"
//	Path from root:       "/lldp/*/system-name"
func (n *LldpPathAny) SystemName() *Lldp_SystemNamePathAny {
	ps := &Lldp_SystemNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpPath) State() ygnmi.SingletonQuery[*oc.Lldp] {
	return ygnmi.NewSingletonQuery[*oc.Lldp](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LldpPathAny) State() ygnmi.WildcardQuery[*oc.Lldp] {
	return ygnmi.NewWildcardQuery[*oc.Lldp](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *LldpPath) Config() ygnmi.ConfigQuery[*oc.Lldp] {
	return ygnmi.NewConfigQuery[*oc.Lldp](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *LldpPathAny) Config() ygnmi.WildcardQuery[*oc.Lldp] {
	return ygnmi.NewWildcardQuery[*oc.Lldp](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_EntriesAgedOutPath represents the /openconfig-lldp/lldp/state/counters/entries-aged-out YANG schema element.
type Lldp_Counters_EntriesAgedOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_EntriesAgedOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/entries-aged-out YANG schema element.
type Lldp_Counters_EntriesAgedOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_Counters_EntriesAgedOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).EntriesAgedOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_Counters_EntriesAgedOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).EntriesAgedOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameDiscardPath represents the /openconfig-lldp/lldp/state/counters/frame-discard YANG schema element.
type Lldp_Counters_FrameDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-discard YANG schema element.
type Lldp_Counters_FrameDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_Counters_FrameDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_Counters_FrameDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameErrorInPath represents the /openconfig-lldp/lldp/state/counters/frame-error-in YANG schema element.
type Lldp_Counters_FrameErrorInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-error-in YANG schema element.
type Lldp_Counters_FrameErrorInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_Counters_FrameErrorInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_Counters_FrameErrorInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameErrorIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameInPath represents the /openconfig-lldp/lldp/state/counters/frame-in YANG schema element.
type Lldp_Counters_FrameInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameInPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-in YANG schema element.
type Lldp_Counters_FrameInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_Counters_FrameInPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_Counters_FrameInPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameIn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_FrameOutPath represents the /openconfig-lldp/lldp/state/counters/frame-out YANG schema element.
type Lldp_Counters_FrameOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-out YANG schema element.
type Lldp_Counters_FrameOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_Counters_FrameOutPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_Counters_FrameOutPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"frame-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).FrameOut
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_LastClearPath represents the /openconfig-lldp/lldp/state/counters/last-clear YANG schema element.
type Lldp_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_LastClearPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/last-clear YANG schema element.
type Lldp_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_Counters_LastClearPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Counters).LastClear
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
