/*
Package lldp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package lldp

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Lldp_Counters_TlvAcceptedPath represents the /openconfig-lldp/lldp/state/counters/tlv-accepted YANG schema element.
type Lldp_Counters_TlvAcceptedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_TlvAcceptedPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-accepted YANG schema element.
type Lldp_Counters_TlvAcceptedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_Counters_TlvAcceptedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvAccepted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_Counters_TlvAcceptedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvAccepted
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_TlvDiscardPath represents the /openconfig-lldp/lldp/state/counters/tlv-discard YANG schema element.
type Lldp_Counters_TlvDiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-discard YANG schema element.
type Lldp_Counters_TlvDiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_Counters_TlvDiscardPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_Counters_TlvDiscardPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvDiscard
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Counters_TlvUnknownPath represents the /openconfig-lldp/lldp/state/counters/tlv-unknown YANG schema element.
type Lldp_Counters_TlvUnknownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-unknown YANG schema element.
type Lldp_Counters_TlvUnknownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_Counters_TlvUnknownPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_Counters_TlvUnknownPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Lldp_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lldp_Counters).TlvUnknown
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_CountersPath represents the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_CountersPath struct {
	*ygnmi.NodePath
}

// Lldp_CountersPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_CountersPathAny struct {
	*ygnmi.NodePath
}

// EntriesAgedOut (leaf): The number of entries aged out due to timeout.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_CountersPath) EntriesAgedOut() *Lldp_Counters_EntriesAgedOutPath {
	ps := &Lldp_Counters_EntriesAgedOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntriesAgedOut (leaf): The number of entries aged out due to timeout.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "entries-aged-out"
//	Path from root:       "/lldp/state/counters/entries-aged-out"
func (n *Lldp_CountersPathAny) EntriesAgedOut() *Lldp_Counters_EntriesAgedOutPathAny {
	ps := &Lldp_Counters_EntriesAgedOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries-aged-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_CountersPath) FrameDiscard() *Lldp_Counters_FrameDiscardPath {
	ps := &Lldp_Counters_FrameDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-discard"
//	Path from root:       "/lldp/state/counters/frame-discard"
func (n *Lldp_CountersPathAny) FrameDiscard() *Lldp_Counters_FrameDiscardPathAny {
	ps := &Lldp_Counters_FrameDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_CountersPath) FrameErrorIn() *Lldp_Counters_FrameErrorInPath {
	ps := &Lldp_Counters_FrameErrorInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-error-in"
//	Path from root:       "/lldp/state/counters/frame-error-in"
func (n *Lldp_CountersPathAny) FrameErrorIn() *Lldp_Counters_FrameErrorInPathAny {
	ps := &Lldp_Counters_FrameErrorInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_CountersPath) FrameIn() *Lldp_Counters_FrameInPath {
	ps := &Lldp_Counters_FrameInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameIn (leaf): The number of lldp frames received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-in"
//	Path from root:       "/lldp/state/counters/frame-in"
func (n *Lldp_CountersPathAny) FrameIn() *Lldp_Counters_FrameInPathAny {
	ps := &Lldp_Counters_FrameInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_CountersPath) FrameOut() *Lldp_Counters_FrameOutPath {
	ps := &Lldp_Counters_FrameOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FrameOut (leaf): The number of frames transmitted out.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "frame-out"
//	Path from root:       "/lldp/state/counters/frame-out"
func (n *Lldp_CountersPathAny) FrameOut() *Lldp_Counters_FrameOutPathAny {
	ps := &Lldp_Counters_FrameOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_CountersPath) LastClear() *Lldp_Counters_LastClearPath {
	ps := &Lldp_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "last-clear"
//	Path from root:       "/lldp/state/counters/last-clear"
func (n *Lldp_CountersPathAny) LastClear() *Lldp_Counters_LastClearPathAny {
	ps := &Lldp_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAccepted (leaf): The number of valid TLVs received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_CountersPath) TlvAccepted() *Lldp_Counters_TlvAcceptedPath {
	ps := &Lldp_Counters_TlvAcceptedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAccepted (leaf): The number of valid TLVs received.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-accepted"
//	Path from root:       "/lldp/state/counters/tlv-accepted"
func (n *Lldp_CountersPathAny) TlvAccepted() *Lldp_Counters_TlvAcceptedPathAny {
	ps := &Lldp_Counters_TlvAcceptedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_CountersPath) TlvDiscard() *Lldp_Counters_TlvDiscardPath {
	ps := &Lldp_Counters_TlvDiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-discard"
//	Path from root:       "/lldp/state/counters/tlv-discard"
func (n *Lldp_CountersPathAny) TlvDiscard() *Lldp_Counters_TlvDiscardPathAny {
	ps := &Lldp_Counters_TlvDiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_CountersPath) TlvUnknown() *Lldp_Counters_TlvUnknownPath {
	ps := &Lldp_Counters_TlvUnknownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "tlv-unknown"
//	Path from root:       "/lldp/state/counters/tlv-unknown"
func (n *Lldp_CountersPathAny) TlvUnknown() *Lldp_Counters_TlvUnknownPathAny {
	ps := &Lldp_Counters_TlvUnknownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_CountersPath) State() ygnmi.SingletonQuery[*oc.Lldp_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Counters](
		"Lldp_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Counters](
		"Lldp_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_EnabledPath represents the /openconfig-lldp/lldp/interfaces/interface/state/enabled YANG schema element.
type Lldp_Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/enabled YANG schema element.
type Lldp_Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/state/enabled"
func (n *Lldp_Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/enabled"
//	Path from root:       "/lldp/interfaces/interface/state/enabled"
func (n *Lldp_Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/enabled"
//	Path from root:       "/lldp/interfaces/interface/config/enabled"
func (n *Lldp_Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/enabled"
//	Path from root:       "/lldp/interfaces/interface/config/enabled"
func (n *Lldp_Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Lldp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_Interface_NamePath represents the /openconfig-lldp/lldp/interfaces/interface/state/name YANG schema element.
type Lldp_Interface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lldp_Interface_NamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/name YANG schema element.
type Lldp_Interface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/state/name"
func (n *Lldp_Interface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/name"
//	Path from root:       "/lldp/interfaces/interface/state/name"
func (n *Lldp_Interface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/name"
//	Path from root:       "/lldp/interfaces/interface/config/name"
func (n *Lldp_Interface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "config/name"
//	Path from root:       "/lldp/interfaces/interface/config/name"
func (n *Lldp_Interface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Lldp_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lldp_Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Lldp_InterfacePath represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePath struct {
	*ygnmi.NodePath
}

// Lldp_InterfacePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Lldp_InterfacePathMap represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Lldp_InterfacePathMapAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): LLDP counters on each interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/interfaces/interface/state/counters"
func (n *Lldp_InterfacePath) Counters() *Lldp_Interface_CountersPath {
	ps := &Lldp_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): LLDP counters on each interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "state/counters"
//	Path from root:       "/lldp/interfaces/interface/state/counters"
func (n *Lldp_InterfacePathAny) Counters() *Lldp_Interface_CountersPathAny {
	ps := &Lldp_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): Enable or disable the LLDP protocol on the interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/interfaces/interface/*/enabled"
func (n *Lldp_InterfacePath) Enabled() *Lldp_Interface_EnabledPath {
	ps := &Lldp_Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enable or disable the LLDP protocol on the interface.
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/enabled"
//	Path from root:       "/lldp/interfaces/interface/*/enabled"
func (n *Lldp_InterfacePathAny) Enabled() *Lldp_Interface_EnabledPathAny {
	ps := &Lldp_Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the LLDP Ethernet interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/*/name"
func (n *Lldp_InterfacePath) Name() *Lldp_Interface_NamePath {
	ps := &Lldp_Interface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the LLDP Ethernet interface
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "*/name"
//	Path from root:       "/lldp/interfaces/interface/*/name"
func (n *Lldp_InterfacePathAny) Name() *Lldp_Interface_NamePathAny {
	ps := &Lldp_Interface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePath) NeighborAny() *Lldp_Interface_NeighborPathAny {
	ps := &Lldp_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePathAny) NeighborAny() *Lldp_Interface_NeighborPathAny {
	ps := &Lldp_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
//
//	Id: string
func (n *Lldp_InterfacePath) Neighbor(Id string) *Lldp_Interface_NeighborPath {
	ps := &Lldp_Interface_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
//
//	Id: string
func (n *Lldp_InterfacePathAny) Neighbor(Id string) *Lldp_Interface_NeighborPathAny {
	ps := &Lldp_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePath) NeighborMap() *Lldp_Interface_NeighborPathMap {
	ps := &Lldp_Interface_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LLDP neighbors
//
//	Defining module:      "openconfig-lldp"
//	Instantiating module: "openconfig-lldp"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/lldp/interfaces/interface/neighbors/neighbor"
func (n *Lldp_InterfacePathAny) NeighborMap() *Lldp_Interface_NeighborPathMapAny {
	ps := &Lldp_Interface_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePath) State() ygnmi.SingletonQuery[*oc.Lldp_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Lldp_Interface] {
	return ygnmi.NewConfigQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Lldp_Interface](
		"Lldp_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Lldp_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Lldp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Lldp_Interface](
		"Lldp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Lldp_Interface, bool) {
			ret := gs.(*oc.Lldp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-lldp:interfaces"},
			PostRelPath: []string{"openconfig-lldp:interface"},
		},
	)
}
