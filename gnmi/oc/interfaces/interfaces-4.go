/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) DisableAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) DisableAutoconfiguration() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAutoconfiguration() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) EnableOnlink() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) EnableOnlink() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) PreferredLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) PreferredLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) Prefix() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) Prefix() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) ValidLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) ValidLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix](
		"Interface_RoutedVlan_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered](
		"Interface_RoutedVlan_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_Subinterface_AdminStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_AdminStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_Subinterface_AdminStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_AdminStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_CpuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_Subinterface_CpuPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_Subinterface_CpuPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/description YANG schema element.
type Interface_Subinterface_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/description YANG schema element.
type Interface_Subinterface_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/description"
func (n *Interface_Subinterface_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/description"
func (n *Interface_Subinterface_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_Subinterface_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_Subinterface_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/enabled YANG schema element.
type Interface_Subinterface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/enabled YANG schema element.
type Interface_Subinterface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/enabled"
func (n *Interface_Subinterface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/enabled"
func (n *Interface_Subinterface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_Subinterface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_Subinterface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_Subinterface_IfindexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_Subinterface_IfindexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_IndexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/index YANG schema element.
type Interface_Subinterface_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_IndexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/index YANG schema element.
type Interface_Subinterface_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/index"
func (n *Interface_Subinterface_IndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/index"
func (n *Interface_Subinterface_IndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_Subinterface_IndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_Subinterface_IndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_Subinterface_LastChangePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_Subinterface_LastChangePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_Subinterface_LogicalPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_Subinterface_LogicalPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_Subinterface_ManagementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_Subinterface_ManagementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_NamePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_Subinterface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_Subinterface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_Subinterface_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_OperStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_Subinterface_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_OperStatus](
		"Interface_Subinterface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface_Subinterface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePath struct {
	*ygnmi.NodePath
}

// Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathAny struct {
	*ygnmi.NodePath
}

// Interface_SubinterfacePathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathMap struct {
	*ygnmi.NodePath
}

// Interface_SubinterfacePathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePath) AdminStatus() *Interface_Subinterface_AdminStatusPath {
	ps := &Interface_Subinterface_AdminStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePathAny) AdminStatus() *Interface_Subinterface_AdminStatusPathAny {
	ps := &Interface_Subinterface_AdminStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePath) Counters() *Interface_Subinterface_CountersPath {
	ps := &Interface_Subinterface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePathAny) Counters() *Interface_Subinterface_CountersPathAny {
	ps := &Interface_Subinterface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePath) Cpu() *Interface_Subinterface_CpuPath {
	ps := &Interface_Subinterface_CpuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePathAny) Cpu() *Interface_Subinterface_CpuPathAny {
	ps := &Interface_Subinterface_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/description"
func (n *Interface_SubinterfacePath) Description() *Interface_Subinterface_DescriptionPath {
	ps := &Interface_Subinterface_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/description"
func (n *Interface_SubinterfacePathAny) Description() *Interface_Subinterface_DescriptionPathAny {
	ps := &Interface_Subinterface_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/enabled"
func (n *Interface_SubinterfacePath) Enabled() *Interface_Subinterface_EnabledPath {
	ps := &Interface_Subinterface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/enabled"
func (n *Interface_SubinterfacePathAny) Enabled() *Interface_Subinterface_EnabledPathAny {
	ps := &Interface_Subinterface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePath) Ifindex() *Interface_Subinterface_IfindexPath {
	ps := &Interface_Subinterface_IfindexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePathAny) Ifindex() *Interface_Subinterface_IfindexPathAny {
	ps := &Interface_Subinterface_IfindexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/index"
func (n *Interface_SubinterfacePath) Index() *Interface_Subinterface_IndexPath {
	ps := &Interface_Subinterface_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/index"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/*/index"
func (n *Interface_SubinterfacePathAny) Index() *Interface_Subinterface_IndexPathAny {
	ps := &Interface_Subinterface_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv4"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePath) Ipv4() *Interface_Subinterface_Ipv4Path {
	ps := &Interface_Subinterface_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv4"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePathAny) Ipv4() *Interface_Subinterface_Ipv4PathAny {
	ps := &Interface_Subinterface_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv6"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePath) Ipv6() *Interface_Subinterface_Ipv6Path {
	ps := &Interface_Subinterface_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ipv6"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePathAny) Ipv6() *Interface_Subinterface_Ipv6PathAny {
	ps := &Interface_Subinterface_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePath) LastChange() *Interface_Subinterface_LastChangePath {
	ps := &Interface_Subinterface_LastChangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePathAny) LastChange() *Interface_Subinterface_LastChangePathAny {
	ps := &Interface_Subinterface_LastChangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePath) Logical() *Interface_Subinterface_LogicalPath {
	ps := &Interface_Subinterface_LogicalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePathAny) Logical() *Interface_Subinterface_LogicalPathAny {
	ps := &Interface_Subinterface_LogicalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePath) Management() *Interface_Subinterface_ManagementPath {
	ps := &Interface_Subinterface_ManagementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePathAny) Management() *Interface_Subinterface_ManagementPathAny {
	ps := &Interface_Subinterface_ManagementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePath) Name() *Interface_Subinterface_NamePath {
	ps := &Interface_Subinterface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePathAny) Name() *Interface_Subinterface_NamePathAny {
	ps := &Interface_Subinterface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePath) OperStatus() *Interface_Subinterface_OperStatusPath {
	ps := &Interface_Subinterface_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePathAny) OperStatus() *Interface_Subinterface_OperStatusPathAny {
	ps := &Interface_Subinterface_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vlan"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePath) Vlan() *Interface_Subinterface_VlanPath {
	ps := &Interface_Subinterface_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vlan"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePathAny) Vlan() *Interface_Subinterface_VlanPathAny {
	ps := &Interface_Subinterface_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface](
		"Interface_Subinterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_SubinterfacePathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.Interface_Subinterface] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Interface_Subinterface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Interface_Subinterface, bool) {
			ret := gs.(*oc.Interface).Subinterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:subinterfaces"},
			PostRelPath: []string{"openconfig-interfaces:subinterface"},
		},
	)
}

// Interface_Subinterface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_Counters_CarrierTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_Counters_CarrierTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_Counters_InBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_Counters_InBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_Counters_InDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_Counters_InDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_Counters_InErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_Counters_InErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_Counters_InFcsErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_Counters_InFcsErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_Counters_InUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_Counters_InUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_Counters_InUnknownProtosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_Counters_InUnknownProtosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_Counters_LastClearPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_Counters_OutBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_Counters_OutBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_Counters_OutDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_Counters_OutDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_Counters_OutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_Counters_OutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_Counters_OutUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_Counters_OutUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPathAny struct {
	*ygnmi.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPath) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPath {
	ps := &Interface_Subinterface_Counters_CarrierTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPathAny) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPathAny {
	ps := &Interface_Subinterface_Counters_CarrierTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPath {
	ps := &Interface_Subinterface_Counters_InBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPathAny {
	ps := &Interface_Subinterface_Counters_InBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPath) InDiscards() *Interface_Subinterface_Counters_InDiscardsPath {
	ps := &Interface_Subinterface_Counters_InDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPathAny) InDiscards() *Interface_Subinterface_Counters_InDiscardsPathAny {
	ps := &Interface_Subinterface_Counters_InDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPath) InErrors() *Interface_Subinterface_Counters_InErrorsPath {
	ps := &Interface_Subinterface_Counters_InErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPathAny) InErrors() *Interface_Subinterface_Counters_InErrorsPathAny {
	ps := &Interface_Subinterface_Counters_InErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPath) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPath {
	ps := &Interface_Subinterface_Counters_InFcsErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPathAny) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPathAny {
	ps := &Interface_Subinterface_Counters_InFcsErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPath {
	ps := &Interface_Subinterface_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPathAny {
	ps := &Interface_Subinterface_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPath) InOctets() *Interface_Subinterface_Counters_InOctetsPath {
	ps := &Interface_Subinterface_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPathAny) InOctets() *Interface_Subinterface_Counters_InOctetsPathAny {
	ps := &Interface_Subinterface_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPath) InPkts() *Interface_Subinterface_Counters_InPktsPath {
	ps := &Interface_Subinterface_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPathAny) InPkts() *Interface_Subinterface_Counters_InPktsPathAny {
	ps := &Interface_Subinterface_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPath {
	ps := &Interface_Subinterface_Counters_InUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPathAny {
	ps := &Interface_Subinterface_Counters_InUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPath) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPath {
	ps := &Interface_Subinterface_Counters_InUnknownProtosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPathAny) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPathAny {
	ps := &Interface_Subinterface_Counters_InUnknownProtosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPath) LastClear() *Interface_Subinterface_Counters_LastClearPath {
	ps := &Interface_Subinterface_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPathAny) LastClear() *Interface_Subinterface_Counters_LastClearPathAny {
	ps := &Interface_Subinterface_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPath {
	ps := &Interface_Subinterface_Counters_OutBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPath) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPath {
	ps := &Interface_Subinterface_Counters_OutDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPathAny) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPathAny {
	ps := &Interface_Subinterface_Counters_OutDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPath) OutErrors() *Interface_Subinterface_Counters_OutErrorsPath {
	ps := &Interface_Subinterface_Counters_OutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPathAny) OutErrors() *Interface_Subinterface_Counters_OutErrorsPathAny {
	ps := &Interface_Subinterface_Counters_OutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPath {
	ps := &Interface_Subinterface_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPath) OutOctets() *Interface_Subinterface_Counters_OutOctetsPath {
	ps := &Interface_Subinterface_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPathAny) OutOctets() *Interface_Subinterface_Counters_OutOctetsPathAny {
	ps := &Interface_Subinterface_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPath) OutPkts() *Interface_Subinterface_Counters_OutPktsPath {
	ps := &Interface_Subinterface_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutPkts() *Interface_Subinterface_Counters_OutPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPath {
	ps := &Interface_Subinterface_Counters_OutUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPathAny {
	ps := &Interface_Subinterface_Counters_OutUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Counters](
		"Interface_Subinterface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Counters](
		"Interface_Subinterface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4_DhcpClientPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted YANG schema element.
type Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted YANG schema element.
type Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gratuitous-arp-accepted"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).GratuitousArpAccepted
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4_MtuPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4Path struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4Path) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4PathAny) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4Path) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPath {
	ps := &Interface_Subinterface_Ipv4_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPathAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4Path) AddressMap() *Interface_Subinterface_Ipv4_AddressPathMap {
	ps := &Interface_Subinterface_Ipv4_AddressPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv4 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
func (n *Interface_Subinterface_Ipv4PathAny) AddressMap() *Interface_Subinterface_Ipv4_AddressPathMapAny {
	ps := &Interface_Subinterface_Ipv4_AddressPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4Path) Counters() *Interface_Subinterface_Ipv4_CountersPath {
	ps := &Interface_Subinterface_Ipv4_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4PathAny) Counters() *Interface_Subinterface_Ipv4_CountersPathAny {
	ps := &Interface_Subinterface_Ipv4_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/dhcp-client"
func (n *Interface_Subinterface_Ipv4Path) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPath {
	ps := &Interface_Subinterface_Ipv4_DhcpClientPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/dhcp-client"
func (n *Interface_Subinterface_Ipv4PathAny) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPathAny {
	ps := &Interface_Subinterface_Ipv4_DhcpClientPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/enabled"
func (n *Interface_Subinterface_Ipv4Path) Enabled() *Interface_Subinterface_Ipv4_EnabledPath {
	ps := &Interface_Subinterface_Ipv4_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/enabled"
func (n *Interface_Subinterface_Ipv4PathAny) Enabled() *Interface_Subinterface_Ipv4_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv4_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GratuitousArpAccepted (leaf): When set to true, gratuitous ARPs will be accepted and
// the ARP table will be updated.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4Path) GratuitousArpAccepted() *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath {
	ps := &Interface_Subinterface_Ipv4_GratuitousArpAcceptedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gratuitous-arp-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GratuitousArpAccepted (leaf): When set to true, gratuitous ARPs will be accepted and
// the ARP table will be updated.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/gratuitous-arp-accepted"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/gratuitous-arp-accepted"
func (n *Interface_Subinterface_Ipv4PathAny) GratuitousArpAccepted() *Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny {
	ps := &Interface_Subinterface_Ipv4_GratuitousArpAcceptedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gratuitous-arp-accepted"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/mtu"
func (n *Interface_Subinterface_Ipv4Path) Mtu() *Interface_Subinterface_Ipv4_MtuPath {
	ps := &Interface_Subinterface_Ipv4_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/*/mtu"
func (n *Interface_Subinterface_Ipv4PathAny) Mtu() *Interface_Subinterface_Ipv4_MtuPathAny {
	ps := &Interface_Subinterface_Ipv4_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4Path) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4PathAny) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4Path) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPath {
	ps := &Interface_Subinterface_Ipv4_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPathAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// NeighborMap (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4Path) NeighborMap() *Interface_Subinterface_Ipv4_NeighborPathMap {
	ps := &Interface_Subinterface_Ipv4_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
func (n *Interface_Subinterface_Ipv4PathAny) NeighborMap() *Interface_Subinterface_Ipv4_NeighborPathMapAny {
	ps := &Interface_Subinterface_Ipv4_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "proxy-arp"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4Path) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPath {
	ps := &Interface_Subinterface_Ipv4_ProxyArpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "proxy-arp"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4PathAny) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPathAny {
	ps := &Interface_Subinterface_Ipv4_ProxyArpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4Path) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPath {
	ps := &Interface_Subinterface_Ipv4_UnnumberedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4PathAny) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPathAny {
	ps := &Interface_Subinterface_Ipv4_UnnumberedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4Path) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_Address_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_Address_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_Address_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type YANG schema element.
type Interface_Subinterface_Ipv4_Address_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv4_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type YANG schema element.
type Interface_Subinterface_Ipv4_Address_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePath) State() ygnmi.SingletonQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv4_Address_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/ip"
func (n *Interface_Subinterface_Ipv4_AddressPath) Ip() *Interface_Subinterface_Ipv4_Address_IpPath {
	ps := &Interface_Subinterface_Ipv4_Address_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/ip"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Ip() *Interface_Subinterface_Ipv4_Address_IpPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPath) Origin() *Interface_Subinterface_Ipv4_Address_OriginPath {
	ps := &Interface_Subinterface_Ipv4_Address_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Origin() *Interface_Subinterface_Ipv4_Address_OriginPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPath) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPath {
	ps := &Interface_Subinterface_Ipv4_Address_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/type"
func (n *Interface_Subinterface_Ipv4_AddressPath) Type() *Interface_Subinterface_Ipv4_Address_TypePath {
	ps := &Interface_Subinterface_Ipv4_Address_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/*/type"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Type() *Interface_Subinterface_Ipv4_Address_TypePathAny {
	ps := &Interface_Subinterface_Ipv4_Address_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPath {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroupMap() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroupMap() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny {
	ps := &Interface_Subinterface_Ipv4_Address_VrrpGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv4_AddressPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv4_Address](
		"Interface_Subinterface_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}
