/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Interface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *Interface_AdminStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_AdminStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *Interface_AdminStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_AdminStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_AdminStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_AdminStatus, bool) {
			ret := gs.(*oc.Interface).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_CpuPath represents the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *Interface_CpuPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *Interface_CpuPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Cpu
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/state/description YANG schema element.
type Interface_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/description YANG schema element.
type Interface_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/state/description"
func (n *Interface_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/description"
//	Path from root:       "/interfaces/interface/state/description"
func (n *Interface_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/config/description"
func (n *Interface_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/description"
//	Path from root:       "/interfaces/interface/config/description"
func (n *Interface_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/state/enabled YANG schema element.
type Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/enabled YANG schema element.
type Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/state/enabled"
func (n *Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/state/enabled"
func (n *Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/config/enabled"
func (n *Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/config/enabled"
func (n *Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_ForwardingViablePath represents the /openconfig-interfaces/interfaces/interface/state/forwarding-viable YANG schema element.
type Interface_ForwardingViablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_ForwardingViablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/forwarding-viable YANG schema element.
type Interface_ForwardingViablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "state/forwarding-viable"
//	Path from root:       "/interfaces/interface/state/forwarding-viable"
func (n *Interface_ForwardingViablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "state/forwarding-viable"
//	Path from root:       "/interfaces/interface/state/forwarding-viable"
func (n *Interface_ForwardingViablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "config/forwarding-viable"
//	Path from root:       "/interfaces/interface/config/forwarding-viable"
func (n *Interface_ForwardingViablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-sdn-ext"
//	Instantiating module: "openconfig-if-sdn-ext"
//	Path from parent:     "config/forwarding-viable"
//	Path from root:       "/interfaces/interface/config/forwarding-viable"
func (n *Interface_ForwardingViablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-viable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).ForwardingViable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_HardwarePortPath represents the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_HardwarePortPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *Interface_HardwarePortPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).HardwarePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *Interface_HardwarePortPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).HardwarePort
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_IdPath represents the /openconfig-interfaces/interfaces/interface/state/id YANG schema element.
type Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_IdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/id YANG schema element.
type Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/id"
//	Path from root:       "/interfaces/interface/state/id"
func (n *Interface_IdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/id"
//	Path from root:       "/interfaces/interface/state/id"
func (n *Interface_IdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/id"
//	Path from root:       "/interfaces/interface/config/id"
func (n *Interface_IdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/id"
//	Path from root:       "/interfaces/interface/config/id"
func (n *Interface_IdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *Interface_IfindexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *Interface_IfindexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface).Ifindex
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *Interface_LastChangePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *Interface_LastChangePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface).LastChange
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *Interface_LogicalPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *Interface_LogicalPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "logical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Logical
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_LoopbackModePath represents the /openconfig-interfaces/interfaces/interface/state/loopback-mode YANG schema element.
type Interface_LoopbackModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_LoopbackModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/loopback-mode YANG schema element.
type Interface_LoopbackModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/loopback-mode"
//	Path from root:       "/interfaces/interface/state/loopback-mode"
func (n *Interface_LoopbackModePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_LoopbackModeType] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_LoopbackModeType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/loopback-mode"
//	Path from root:       "/interfaces/interface/state/loopback-mode"
func (n *Interface_LoopbackModePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_LoopbackModeType] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_LoopbackModeType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/loopback-mode"
//	Path from root:       "/interfaces/interface/config/loopback-mode"
func (n *Interface_LoopbackModePath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_LoopbackModeType] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_LoopbackModeType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/loopback-mode"
//	Path from root:       "/interfaces/interface/config/loopback-mode"
func (n *Interface_LoopbackModePathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_LoopbackModeType] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_LoopbackModeType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "loopback-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_LoopbackModeType, bool) {
			ret := gs.(*oc.Interface).LoopbackMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *Interface_ManagementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *Interface_ManagementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "management"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface).Management
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_MtuPath represents the /openconfig-interfaces/interfaces/interface/state/mtu YANG schema element.
type Interface_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/mtu YANG schema element.
type Interface_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/state/mtu"
func (n *Interface_MtuPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/state/mtu"
func (n *Interface_MtuPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/config/mtu"
func (n *Interface_MtuPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/config/mtu"
func (n *Interface_MtuPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface).Mtu
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_NamePath represents the /openconfig-interfaces/interfaces/interface/state/name YANG schema element.
type Interface_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/name YANG schema element.
type Interface_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/state/name"
func (n *Interface_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/name"
//	Path from root:       "/interfaces/interface/state/name"
func (n *Interface_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/name"
//	Path from root:       "/interfaces/interface/config/name"
func (n *Interface_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/name"
//	Path from root:       "/interfaces/interface/config/name"
func (n *Interface_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *Interface_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_OperStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *Interface_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_OperStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_OperStatus](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_OperStatus, bool) {
			ret := gs.(*oc.Interface).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_PhysicalChannelPath represents the /openconfig-interfaces/interfaces/interface/state/physical-channel YANG schema element.
type Interface_PhysicalChannelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_PhysicalChannelPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/physical-channel YANG schema element.
type Interface_PhysicalChannelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *Interface_PhysicalChannelPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *Interface_PhysicalChannelPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface).PhysicalChannel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_TpidPath represents the /openconfig-interfaces/interfaces/interface/state/tpid YANG schema element.
type Interface_TpidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/tpid YANG schema element.
type Interface_TpidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/state/tpid"
func (n *Interface_TpidPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/state/tpid"
func (n *Interface_TpidPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/config/tpid"
func (n *Interface_TpidPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/config/tpid"
func (n *Interface_TpidPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_TransceiverPath represents the /openconfig-interfaces/interfaces/interface/state/transceiver YANG schema element.
type Interface_TransceiverPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_TransceiverPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/transceiver YANG schema element.
type Interface_TransceiverPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *Interface_TransceiverPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *Interface_TransceiverPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface).Transceiver
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_TypePath represents the /openconfig-interfaces/interfaces/interface/state/type YANG schema element.
type Interface_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/type YANG schema element.
type Interface_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/state/type"
func (n *Interface_TypePath) State() ygnmi.SingletonQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewSingletonQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/state/type"
func (n *Interface_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewWildcardQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/config/type"
func (n *Interface_TypePath) Config() ygnmi.ConfigQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewConfigQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/config/type"
func (n *Interface_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IETFInterfaces_InterfaceType] {
	return ygnmi.NewWildcardQuery[oc.E_IETFInterfaces_InterfaceType](
		"Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IETFInterfaces_InterfaceType, bool) {
			ret := gs.(*oc.Interface).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// InterfacePath represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePath struct {
	*ygnmi.NodePath
}

// InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathAny struct {
	*ygnmi.NodePath
}

// InterfacePathMap represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathMap struct {
	*ygnmi.NodePath
}

// InterfacePathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *InterfacePath) AdminStatus() *Interface_AdminStatusPath {
	ps := &Interface_AdminStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/interfaces/interface/state/admin-status"
func (n *InterfacePathAny) AdminStatus() *Interface_AdminStatusPathAny {
	ps := &Interface_AdminStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "aggregation"
//	Path from root:       "/interfaces/interface/aggregation"
func (n *InterfacePath) Aggregation() *Interface_AggregationPath {
	ps := &Interface_AggregationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "aggregation"
//	Path from root:       "/interfaces/interface/aggregation"
func (n *InterfacePathAny) Aggregation() *Interface_AggregationPathAny {
	ps := &Interface_AggregationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/state/counters"
func (n *InterfacePath) Counters() *Interface_CountersPath {
	ps := &Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/state/counters"
func (n *InterfacePathAny) Counters() *Interface_CountersPathAny {
	ps := &Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *InterfacePath) Cpu() *Interface_CpuPath {
	ps := &Interface_CpuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/cpu"
//	Path from root:       "/interfaces/interface/state/cpu"
func (n *InterfacePathAny) Cpu() *Interface_CpuPathAny {
	ps := &Interface_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/*/description"
func (n *InterfacePath) Description() *Interface_DescriptionPath {
	ps := &Interface_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/description"
//	Path from root:       "/interfaces/interface/*/description"
func (n *InterfacePathAny) Description() *Interface_DescriptionPathAny {
	ps := &Interface_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/*/enabled"
func (n *InterfacePath) Enabled() *Interface_EnabledPath {
	ps := &Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/*/enabled"
func (n *InterfacePathAny) Enabled() *Interface_EnabledPathAny {
	ps := &Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ethernet"
//	Path from root:       "/interfaces/interface/ethernet"
func (n *InterfacePath) Ethernet() *Interface_EthernetPath {
	ps := &Interface_EthernetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ethernet"
//	Path from root:       "/interfaces/interface/ethernet"
func (n *InterfacePathAny) Ethernet() *Interface_EthernetPathAny {
	ps := &Interface_EthernetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingViable (leaf): This value indicates whether the interface may be used
// to route traffic or not.  If set to false, the
// interface is not used for forwarding traffic, but as long as
// it is up, the interface still maintains its layer-2
// adjacencies and runs its configured layer-2 functions
// (e.g., LLDP, etc.).
// This is used by an external programming entity to disable an interface
// (usually part of an aggregate) for the purposes of forwarding
// traffic. This allows a logical aggregate to continue to be
// used with partial capacity. Setting `forwarding-viable = false` is not
// equivalent to administratively disabling the interface.
// Some rules to follow when an interface or aggregate interface is set for
// Forwarding-viable=False:
//
//  1. Aggregate interface '/interfaces/interface/aggregation/state/min-links'
//     checks should be evaluated based on
//     `/interfaces/interface/state/oper-status`.  'min-links' should not be
//     affected by the use of forwarding viable.
//
//  2. L2 protocols like LLDP and LACP must be processed normally on
//     transmit and receive on such ports/bundles.  IS-IS PDUs should be
//     handled as per the requirements for L3 packets below.
//
//  3. L3 packets must not be transmitted on the interface.
//
//  4. Received L3 packets must be processed normally.  Received data-plane
//     traffic will continue to forwarded to its destination post FIB lookup.
//     Received control-plane traffic must also be processed normally.
//
//  5. It is possible that the dead-interval or hold-down timer of L3
//     protocols like IS-IS/BGP on the peer router may expire taking down the
//     adjacency or peering on that connection. However, the peer may still
//     continue to transmit packets which are received by the local device.
//     These received packet should continue to be processed normally as
//     per rule #4 above.
//
//     For example, if the peer's forwarding table is programmed using gRIBI
//     by an external controller, the local device will continue to receive
//     packets.
//
//  6. An implementation should follow rule #3 even when the subject
//     interface on the local device is the last resort of communication for a
//     given destination.  For example, the only nexthop for a destination is
//     an aggregate interface which has all member interfaces set to
//     forwarding-viable = false.  In this scenario all L3 packets for that
//     destination will be dropped.
//     Defining module:      "openconfig-if-sdn-ext"
//     Instantiating module: "openconfig-interfaces"
//     Path from parent:     "*/forwarding-viable"
//     Path from root:       "/interfaces/interface/*/forwarding-viable"
func (n *InterfacePath) ForwardingViable() *Interface_ForwardingViablePath {
	ps := &Interface_ForwardingViablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-viable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingViable (leaf): This value indicates whether the interface may be used
// to route traffic or not.  If set to false, the
// interface is not used for forwarding traffic, but as long as
// it is up, the interface still maintains its layer-2
// adjacencies and runs its configured layer-2 functions
// (e.g., LLDP, etc.).
// This is used by an external programming entity to disable an interface
// (usually part of an aggregate) for the purposes of forwarding
// traffic. This allows a logical aggregate to continue to be
// used with partial capacity. Setting `forwarding-viable = false` is not
// equivalent to administratively disabling the interface.
// Some rules to follow when an interface or aggregate interface is set for
// Forwarding-viable=False:
//
//  1. Aggregate interface '/interfaces/interface/aggregation/state/min-links'
//     checks should be evaluated based on
//     `/interfaces/interface/state/oper-status`.  'min-links' should not be
//     affected by the use of forwarding viable.
//
//  2. L2 protocols like LLDP and LACP must be processed normally on
//     transmit and receive on such ports/bundles.  IS-IS PDUs should be
//     handled as per the requirements for L3 packets below.
//
//  3. L3 packets must not be transmitted on the interface.
//
//  4. Received L3 packets must be processed normally.  Received data-plane
//     traffic will continue to forwarded to its destination post FIB lookup.
//     Received control-plane traffic must also be processed normally.
//
//  5. It is possible that the dead-interval or hold-down timer of L3
//     protocols like IS-IS/BGP on the peer router may expire taking down the
//     adjacency or peering on that connection. However, the peer may still
//     continue to transmit packets which are received by the local device.
//     These received packet should continue to be processed normally as
//     per rule #4 above.
//
//     For example, if the peer's forwarding table is programmed using gRIBI
//     by an external controller, the local device will continue to receive
//     packets.
//
//  6. An implementation should follow rule #3 even when the subject
//     interface on the local device is the last resort of communication for a
//     given destination.  For example, the only nexthop for a destination is
//     an aggregate interface which has all member interfaces set to
//     forwarding-viable = false.  In this scenario all L3 packets for that
//     destination will be dropped.
//     Defining module:      "openconfig-if-sdn-ext"
//     Instantiating module: "openconfig-interfaces"
//     Path from parent:     "*/forwarding-viable"
//     Path from root:       "/interfaces/interface/*/forwarding-viable"
func (n *InterfacePathAny) ForwardingViable() *Interface_ForwardingViablePathAny {
	ps := &Interface_ForwardingViablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-viable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *InterfacePath) HardwarePort() *Interface_HardwarePortPath {
	ps := &Interface_HardwarePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/hardware-port"
//	Path from root:       "/interfaces/interface/state/hardware-port"
func (n *InterfacePathAny) HardwarePort() *Interface_HardwarePortPathAny {
	ps := &Interface_HardwarePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "hold-time"
//	Path from root:       "/interfaces/interface/hold-time"
func (n *InterfacePath) HoldTime() *Interface_HoldTimePath {
	ps := &Interface_HoldTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "hold-time"
//	Path from root:       "/interfaces/interface/hold-time"
func (n *InterfacePathAny) HoldTime() *Interface_HoldTimePathAny {
	ps := &Interface_HoldTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/id"
//	Path from root:       "/interfaces/interface/*/id"
func (n *InterfacePath) Id() *Interface_IdPath {
	ps := &Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/id"
//	Path from root:       "/interfaces/interface/*/id"
func (n *InterfacePathAny) Id() *Interface_IdPathAny {
	ps := &Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *InterfacePath) Ifindex() *Interface_IfindexPath {
	ps := &Interface_IfindexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/ifindex"
//	Path from root:       "/interfaces/interface/state/ifindex"
func (n *InterfacePathAny) Ifindex() *Interface_IfindexPathAny {
	ps := &Interface_IfindexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *InterfacePath) LastChange() *Interface_LastChangePath {
	ps := &Interface_LastChangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/last-change"
//	Path from root:       "/interfaces/interface/state/last-change"
func (n *InterfacePathAny) LastChange() *Interface_LastChangePathAny {
	ps := &Interface_LastChangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *InterfacePath) Logical() *Interface_LogicalPath {
	ps := &Interface_LogicalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/logical"
//	Path from root:       "/interfaces/interface/state/logical"
func (n *InterfacePathAny) Logical() *Interface_LogicalPathAny {
	ps := &Interface_LogicalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackMode (leaf): Sets the loopback type on the interface. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/loopback-mode"
//	Path from root:       "/interfaces/interface/*/loopback-mode"
func (n *InterfacePath) LoopbackMode() *Interface_LoopbackModePath {
	ps := &Interface_LoopbackModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackMode (leaf): Sets the loopback type on the interface. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/loopback-mode"
//	Path from root:       "/interfaces/interface/*/loopback-mode"
func (n *InterfacePathAny) LoopbackMode() *Interface_LoopbackModePathAny {
	ps := &Interface_LoopbackModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *InterfacePath) Management() *Interface_ManagementPath {
	ps := &Interface_ManagementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/management"
//	Path from root:       "/interfaces/interface/state/management"
func (n *InterfacePathAny) Management() *Interface_ManagementPathAny {
	ps := &Interface_ManagementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/*/mtu"
func (n *InterfacePath) Mtu() *Interface_MtuPath {
	ps := &Interface_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/*/mtu"
func (n *InterfacePathAny) Mtu() *Interface_MtuPathAny {
	ps := &Interface_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/name"
//	Path from root:       "/interfaces/interface/*/name"
func (n *InterfacePath) Name() *Interface_NamePath {
	ps := &Interface_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/name"
//	Path from root:       "/interfaces/interface/*/name"
func (n *InterfacePathAny) Name() *Interface_NamePathAny {
	ps := &Interface_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *InterfacePath) OperStatus() *Interface_OperStatusPath {
	ps := &Interface_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/interfaces/interface/state/oper-status"
func (n *InterfacePathAny) OperStatus() *Interface_OperStatusPathAny {
	ps := &Interface_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PenaltyBasedAied (container): Top level container to suppress UP->DOWN link events using a penalty based additive-increase, exponential-decrease algorithm.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "penalty-based-aied"
//	Path from root:       "/interfaces/interface/penalty-based-aied"
func (n *InterfacePath) PenaltyBasedAied() *Interface_PenaltyBasedAiedPath {
	ps := &Interface_PenaltyBasedAiedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"penalty-based-aied"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PenaltyBasedAied (container): Top level container to suppress UP->DOWN link events using a penalty based additive-increase, exponential-decrease algorithm.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "penalty-based-aied"
//	Path from root:       "/interfaces/interface/penalty-based-aied"
func (n *InterfacePathAny) PenaltyBasedAied() *Interface_PenaltyBasedAiedPathAny {
	ps := &Interface_PenaltyBasedAiedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"penalty-based-aied"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PhysicalChannel (leaf-list): For a channelized interface, list of references to the
// physical channels (lanes) corresponding to the interface.
// The physical channels are elements of a transceiver component
// in the platform model.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *InterfacePath) PhysicalChannel() *Interface_PhysicalChannelPath {
	ps := &Interface_PhysicalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PhysicalChannel (leaf-list): For a channelized interface, list of references to the
// physical channels (lanes) corresponding to the interface.
// The physical channels are elements of a transceiver component
// in the platform model.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/physical-channel"
//	Path from root:       "/interfaces/interface/state/physical-channel"
func (n *InterfacePathAny) PhysicalChannel() *Interface_PhysicalChannelPathAny {
	ps := &Interface_PhysicalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "routed-vlan"
//	Path from root:       "/interfaces/interface/routed-vlan"
func (n *InterfacePath) RoutedVlan() *Interface_RoutedVlanPath {
	ps := &Interface_RoutedVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "routed-vlan"
//	Path from root:       "/interfaces/interface/routed-vlan"
func (n *InterfacePathAny) RoutedVlan() *Interface_RoutedVlanPathAny {
	ps := &Interface_RoutedVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePath) SubinterfaceAny() *Interface_SubinterfacePathAny {
	ps := &Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePathAny) SubinterfaceAny() *Interface_SubinterfacePathAny {
	ps := &Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
//
//	Index: uint32
func (n *InterfacePath) Subinterface(Index uint32) *Interface_SubinterfacePath {
	ps := &Interface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
//
//	Index: uint32
func (n *InterfacePathAny) Subinterface(Index uint32) *Interface_SubinterfacePathAny {
	ps := &Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// SubinterfaceMap (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePath) SubinterfaceMap() *Interface_SubinterfacePathMap {
	ps := &Interface_SubinterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubinterfaceMap (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "subinterfaces/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface"
func (n *InterfacePathAny) SubinterfaceMap() *Interface_SubinterfacePathMapAny {
	ps := &Interface_SubinterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subinterfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/*/tpid"
func (n *InterfacePath) Tpid() *Interface_TpidPath {
	ps := &Interface_TpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/*/tpid"
func (n *InterfacePathAny) Tpid() *Interface_TpidPathAny {
	ps := &Interface_TpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transceiver (leaf): Provides a reference to the transceiver subcomponent that
// corresponds to the physical port component for this interface.
// The device must only populate this leaf with a reference to
// a component of type TRANSCEIVER.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *InterfacePath) Transceiver() *Interface_TransceiverPath {
	ps := &Interface_TransceiverPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transceiver (leaf): Provides a reference to the transceiver subcomponent that
// corresponds to the physical port component for this interface.
// The device must only populate this leaf with a reference to
// a component of type TRANSCEIVER.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/transceiver"
//	Path from root:       "/interfaces/interface/state/transceiver"
func (n *InterfacePathAny) Transceiver() *Interface_TransceiverPathAny {
	ps := &Interface_TransceiverPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transceiver"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/*/type"
func (n *InterfacePath) Type() *Interface_TypePath {
	ps := &Interface_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/*/type"
func (n *InterfacePathAny) Type() *Interface_TypePathAny {
	ps := &Interface_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePath) State() ygnmi.SingletonQuery[*oc.Interface] {
	return ygnmi.NewSingletonQuery[*oc.Interface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Interface] {
	return ygnmi.NewWildcardQuery[*oc.Interface](
		"Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePath) Config() ygnmi.ConfigQuery[*oc.Interface] {
	return ygnmi.NewConfigQuery[*oc.Interface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Interface] {
	return ygnmi.NewWildcardQuery[*oc.Interface](
		"Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface, bool) {
			ret := gs.(*oc.Root).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-interfaces:interfaces"},
			PostRelPath: []string{"openconfig-interfaces:interface"},
		},
	)
}

// Interface_Aggregation_LagSpeedPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_LagSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_Aggregation_LagSpeedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagSpeed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_Aggregation_LagSpeedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagSpeed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_LagTypePath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-type YANG schema element.
type Interface_Aggregation_LagTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_LagTypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-type YANG schema element.
type Interface_Aggregation_LagTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-type"
func (n *Interface_Aggregation_LagTypePath) State() ygnmi.SingletonQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewSingletonQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-type"
func (n *Interface_Aggregation_LagTypePathAny) State() ygnmi.WildcardQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewWildcardQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/config/lag-type"
func (n *Interface_Aggregation_LagTypePath) Config() ygnmi.ConfigQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewConfigQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/config/lag-type"
func (n *Interface_Aggregation_LagTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfAggregate_AggregationType] {
	return ygnmi.NewWildcardQuery[oc.E_IfAggregate_AggregationType](
		"Interface_Aggregation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lag-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfAggregate_AggregationType, bool) {
			ret := gs.(*oc.Interface_Aggregation).LagType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_MemberPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_MemberPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_Aggregation_MemberPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Aggregation).Member
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_Aggregation_MemberPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Aggregation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Aggregation).Member
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_MinLinksPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/min-links YANG schema element.
type Interface_Aggregation_MinLinksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_MinLinksPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/min-links YANG schema element.
type Interface_Aggregation_MinLinksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/min-links"
//	Path from root:       "/interfaces/interface/aggregation/state/min-links"
func (n *Interface_Aggregation_MinLinksPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/min-links"
//	Path from root:       "/interfaces/interface/aggregation/state/min-links"
func (n *Interface_Aggregation_MinLinksPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/min-links"
//	Path from root:       "/interfaces/interface/aggregation/config/min-links"
func (n *Interface_Aggregation_MinLinksPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Aggregation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/min-links"
//	Path from root:       "/interfaces/interface/aggregation/config/min-links"
func (n *Interface_Aggregation_MinLinksPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation).MinLinks
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_AggregationPath represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPath struct {
	*ygnmi.NodePath
}

// Interface_AggregationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPathAny struct {
	*ygnmi.NodePath
}

// LagSpeed (leaf): Reports effective speed of the aggregate interface,
// based on speed of active member interfaces
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPath) LagSpeed() *Interface_Aggregation_LagSpeedPath {
	ps := &Interface_Aggregation_LagSpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LagSpeed (leaf): Reports effective speed of the aggregate interface,
// based on speed of active member interfaces
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/lag-speed"
//	Path from root:       "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPathAny) LagSpeed() *Interface_Aggregation_LagSpeedPathAny {
	ps := &Interface_Aggregation_LagSpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/*/lag-type"
func (n *Interface_AggregationPath) LagType() *Interface_Aggregation_LagTypePath {
	ps := &Interface_Aggregation_LagTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lag-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lag-type"
//	Path from root:       "/interfaces/interface/aggregation/*/lag-type"
func (n *Interface_AggregationPathAny) LagType() *Interface_Aggregation_LagTypePathAny {
	ps := &Interface_Aggregation_LagTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lag-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPath) Member() *Interface_Aggregation_MemberPath {
	ps := &Interface_Aggregation_MemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/member"
//	Path from root:       "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPathAny) Member() *Interface_Aggregation_MemberPathAny {
	ps := &Interface_Aggregation_MemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/min-links"
//	Path from root:       "/interfaces/interface/aggregation/*/min-links"
func (n *Interface_AggregationPath) MinLinks() *Interface_Aggregation_MinLinksPath {
	ps := &Interface_Aggregation_MinLinksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-links"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/min-links"
//	Path from root:       "/interfaces/interface/aggregation/*/min-links"
func (n *Interface_AggregationPathAny) MinLinks() *Interface_Aggregation_MinLinksPathAny {
	ps := &Interface_Aggregation_MinLinksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-links"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "switched-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPath) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPath {
	ps := &Interface_Aggregation_SwitchedVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "switched-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPathAny) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPathAny {
	ps := &Interface_Aggregation_SwitchedVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPath) State() ygnmi.SingletonQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPath) Config() ygnmi.ConfigQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewConfigQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_AggregationPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Aggregation] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation](
		"Interface_Aggregation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/access-vlan"
func (n *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "access-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).AccessVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_VlanModeType] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_VlanModeType] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_VlanModeType] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/interface-mode"
func (n *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_VlanModeType] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_VlanModeType](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanModeType, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).InterfaceMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/native-vlan"
func (n *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "native-vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).NativeVlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPath) State() ygnmi.SingletonQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewSingletonQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny) State() ygnmi.WildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewWildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPath) Config() ygnmi.ConfigQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewConfigQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny) Config() ygnmi.WildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union] {
	return ygnmi.NewWildcardQuery[[]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trunk-vlans"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, bool) {
			ret := gs.(*oc.Interface_Aggregation_SwitchedVlan).TrunkVlans
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Aggregation_SwitchedVlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Aggregation_SwitchedVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPath struct {
	*ygnmi.NodePath
}

// Interface_Aggregation_SwitchedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPathAny struct {
	*ygnmi.NodePath
}

// AccessVlan (leaf): Assign the access vlan to the access port.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPath {
	ps := &Interface_Aggregation_SwitchedVlan_AccessVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "access-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessVlan (leaf): Assign the access vlan to the access port.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/access-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny {
	ps := &Interface_Aggregation_SwitchedVlan_AccessVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "access-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPath) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePath {
	ps := &Interface_Aggregation_SwitchedVlan_InterfaceModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface-mode"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPathAny) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny {
	ps := &Interface_Aggregation_SwitchedVlan_InterfaceModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPath {
	ps := &Interface_Aggregation_SwitchedVlan_NativeVlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "native-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/native-vlan"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny {
	ps := &Interface_Aggregation_SwitchedVlan_NativeVlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "native-vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPath) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPath {
	ps := &Interface_Aggregation_SwitchedVlan_TrunkVlansPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/trunk-vlans"
//	Path from root:       "/interfaces/interface/aggregation/switched-vlan/*/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPathAny) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny {
	ps := &Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPath) State() ygnmi.SingletonQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPath) Config() ygnmi.ConfigQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewConfigQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Aggregation_SwitchedVlanPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Aggregation_SwitchedVlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Aggregation_SwitchedVlan](
		"Interface_Aggregation_SwitchedVlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_Counters_CarrierTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_Counters_CarrierTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).CarrierTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_Counters_InBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_Counters_InBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_Counters_InDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_Counters_InDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_Counters_InErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_Counters_InErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_Counters_InFcsErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_Counters_InFcsErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InFcsErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_Counters_InUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_Counters_InUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_Counters_InUnknownProtosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_Counters_InUnknownProtosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).InUnknownProtos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_Counters_LastClearPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_Counters_LastClearPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_Counters_OutBroadcastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_Counters_OutBroadcastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutBroadcastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_Counters_OutDiscardsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_Counters_OutDiscardsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discards"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutDiscards
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_Counters_OutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_Counters_OutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_Counters_OutUnicastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_Counters_OutUnicastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).OutUnicastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Counters_ResetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/resets YANG schema element.
type Interface_Counters_ResetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Counters_ResetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/resets YANG schema element.
type Interface_Counters_ResetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_Counters_ResetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"resets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).Resets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_Counters_ResetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"resets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Counters).Resets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_CountersPath represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPath) CarrierTransitions() *Interface_Counters_CarrierTransitionsPath {
	ps := &Interface_Counters_CarrierTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "carrier-transitions"
//	Path from root:       "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPathAny) CarrierTransitions() *Interface_Counters_CarrierTransitionsPathAny {
	ps := &Interface_Counters_CarrierTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPath) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPath {
	ps := &Interface_Counters_InBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPathAny) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPathAny {
	ps := &Interface_Counters_InBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPath) InDiscards() *Interface_Counters_InDiscardsPath {
	ps := &Interface_Counters_InDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discards"
//	Path from root:       "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPathAny) InDiscards() *Interface_Counters_InDiscardsPathAny {
	ps := &Interface_Counters_InDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPath) InErrors() *Interface_Counters_InErrorsPath {
	ps := &Interface_Counters_InErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPathAny) InErrors() *Interface_Counters_InErrorsPathAny {
	ps := &Interface_Counters_InErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPath) InFcsErrors() *Interface_Counters_InFcsErrorsPath {
	ps := &Interface_Counters_InFcsErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-fcs-errors"
//	Path from root:       "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPathAny) InFcsErrors() *Interface_Counters_InFcsErrorsPathAny {
	ps := &Interface_Counters_InFcsErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPath) InMulticastPkts() *Interface_Counters_InMulticastPktsPath {
	ps := &Interface_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPathAny) InMulticastPkts() *Interface_Counters_InMulticastPktsPathAny {
	ps := &Interface_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPath) InOctets() *Interface_Counters_InOctetsPath {
	ps := &Interface_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPathAny) InOctets() *Interface_Counters_InOctetsPathAny {
	ps := &Interface_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPath) InPkts() *Interface_Counters_InPktsPath {
	ps := &Interface_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPathAny) InPkts() *Interface_Counters_InPktsPathAny {
	ps := &Interface_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPath) InUnicastPkts() *Interface_Counters_InUnicastPktsPath {
	ps := &Interface_Counters_InUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPathAny) InUnicastPkts() *Interface_Counters_InUnicastPktsPathAny {
	ps := &Interface_Counters_InUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPath) InUnknownProtos() *Interface_Counters_InUnknownProtosPath {
	ps := &Interface_Counters_InUnknownProtosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-unknown-protos"
//	Path from root:       "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPathAny) InUnknownProtos() *Interface_Counters_InUnknownProtosPathAny {
	ps := &Interface_Counters_InUnknownProtosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPath) LastClear() *Interface_Counters_LastClearPath {
	ps := &Interface_Counters_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "last-clear"
//	Path from root:       "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPathAny) LastClear() *Interface_Counters_LastClearPathAny {
	ps := &Interface_Counters_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPath) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPath {
	ps := &Interface_Counters_OutBroadcastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-broadcast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPathAny) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPathAny {
	ps := &Interface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPath) OutDiscards() *Interface_Counters_OutDiscardsPath {
	ps := &Interface_Counters_OutDiscardsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discards"
//	Path from root:       "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPathAny) OutDiscards() *Interface_Counters_OutDiscardsPathAny {
	ps := &Interface_Counters_OutDiscardsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPath) OutErrors() *Interface_Counters_OutErrorsPath {
	ps := &Interface_Counters_OutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-errors"
//	Path from root:       "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPathAny) OutErrors() *Interface_Counters_OutErrorsPathAny {
	ps := &Interface_Counters_OutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPath) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPath {
	ps := &Interface_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPathAny) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPathAny {
	ps := &Interface_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPath) OutOctets() *Interface_Counters_OutOctetsPath {
	ps := &Interface_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPathAny) OutOctets() *Interface_Counters_OutOctetsPathAny {
	ps := &Interface_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPath) OutPkts() *Interface_Counters_OutPktsPath {
	ps := &Interface_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPathAny) OutPkts() *Interface_Counters_OutPktsPathAny {
	ps := &Interface_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPath) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPath {
	ps := &Interface_Counters_OutUnicastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-unicast-pkts"
//	Path from root:       "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPathAny) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPathAny {
	ps := &Interface_Counters_OutUnicastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resets (leaf): Number of times the interface hardware has been reset.  The
// triggers and effects of this event are hardware-specifc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_CountersPath) Resets() *Interface_Counters_ResetsPath {
	ps := &Interface_Counters_ResetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resets (leaf): Number of times the interface hardware has been reset.  The
// triggers and effects of this event are hardware-specifc.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "resets"
//	Path from root:       "/interfaces/interface/state/counters/resets"
func (n *Interface_CountersPathAny) Resets() *Interface_Counters_ResetsPathAny {
	ps := &Interface_Counters_ResetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Counters](
		"Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Counters](
		"Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_AggregateIdPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_AggregateIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/state/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "state/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/state/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/config/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-aggregate"
//	Instantiating module: "openconfig-if-aggregate"
//	Path from parent:     "config/aggregate-id"
//	Path from root:       "/interfaces/interface/ethernet/config/aggregate-id"
func (n *Interface_Ethernet_AggregateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "aggregate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Ethernet).AggregateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_AutoNegotiatePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_AutoNegotiatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/state/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/state/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/config/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/auto-negotiate"
//	Path from root:       "/interfaces/interface/ethernet/config/auto-negotiate"
func (n *Interface_Ethernet_AutoNegotiatePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Ethernet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auto-negotiate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Ethernet).AutoNegotiate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Ethernet_DuplexModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Ethernet_DuplexModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/duplex-mode"
func (n *Interface_Ethernet_DuplexModePath) State() ygnmi.SingletonQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewSingletonQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "state/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/state/duplex-mode"
func (n *Interface_Ethernet_DuplexModePathAny) State() ygnmi.WildcardQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewWildcardQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/config/duplex-mode"
func (n *Interface_Ethernet_DuplexModePath) Config() ygnmi.ConfigQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewConfigQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ethernet"
//	Instantiating module: "openconfig-if-ethernet"
//	Path from parent:     "config/duplex-mode"
//	Path from root:       "/interfaces/interface/ethernet/config/duplex-mode"
func (n *Interface_Ethernet_DuplexModePathAny) Config() ygnmi.WildcardQuery[oc.E_Ethernet_DuplexMode] {
	return ygnmi.NewWildcardQuery[oc.E_Ethernet_DuplexMode](
		"Interface_Ethernet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplex-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ethernet_DuplexMode, bool) {
			ret := gs.(*oc.Interface_Ethernet).DuplexMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Ethernet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
