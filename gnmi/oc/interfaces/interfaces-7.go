/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/state/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/*/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/*/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered](
		"Interface_Subinterface_Ipv6_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/state/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/*/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	ps := &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef](
		"Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPath) State() ygnmi.SingletonQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewSingletonQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPathAny) State() ygnmi.WildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewWildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPath) Config() ygnmi.ConfigQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewConfigQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_Vlan_VlanIdPathAny) Config() ygnmi.WildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union] {
	return ygnmi.NewWildcardQuery[oc.Interface_Subinterface_Vlan_VlanId_Union](
		"Interface_Subinterface_Vlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Interface_Subinterface_Vlan_VlanId_Union, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan).VlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_VlanPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPathAny struct {
	*ygnmi.NodePath
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "egress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPath) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPath {
	ps := &Interface_Subinterface_Vlan_EgressMappingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "egress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPathAny) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ingress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPath) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPath {
	ps := &Interface_Subinterface_Vlan_IngressMappingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "ingress-mapping"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPathAny) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "match"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPath) Match() *Interface_Subinterface_Vlan_MatchPath {
	ps := &Interface_Subinterface_Vlan_MatchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "match"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPathAny) Match() *Interface_Subinterface_Vlan_MatchPathAny {
	ps := &Interface_Subinterface_Vlan_MatchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/*/vlan-id"
func (n *Interface_Subinterface_VlanPath) VlanId() *Interface_Subinterface_Vlan_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/*/vlan-id"
func (n *Interface_Subinterface_VlanPathAny) VlanId() *Interface_Subinterface_Vlan_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_VlanPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan](
		"Interface_Subinterface_Vlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_EgressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_EgressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_EgressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_EgressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPathAny struct {
	*ygnmi.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPath {
	ps := &Interface_Subinterface_Vlan_EgressMapping_TpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMapping_TpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny {
	ps := &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_EgressMapping](
		"Interface_Subinterface_Vlan_EgressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_TPID_TYPES] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_TPID_TYPES](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_TPID_TYPES, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).Tpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath) State() ygnmi.SingletonQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewSingletonQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny) State() ygnmi.WildcardQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath) Config() ygnmi.ConfigQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewConfigQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny) Config() ygnmi.WildcardQuery[oc.E_VlanTypes_VlanStackAction] {
	return ygnmi.NewWildcardQuery[oc.E_VlanTypes_VlanStackAction](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_VlanTypes_VlanStackAction, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_IngressMapping).VlanStackAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_IngressMapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_IngressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_IngressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPathAny struct {
	*ygnmi.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPath {
	ps := &Interface_Subinterface_Vlan_IngressMapping_TpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/tpid"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMapping_TpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-stack-action"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/*/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny {
	ps := &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_IngressMapping](
		"Interface_Subinterface_Vlan_IngressMapping",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_MatchPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_MatchPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPathAny struct {
	*ygnmi.NodePath
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-inner-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "double-tagged-outer-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-list"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "single-tagged-range"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_MatchPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match](
		"Interface_Subinterface_Vlan_Match",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTagged).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny struct {
	*ygnmi.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTagged](
		"Interface_Subinterface_Vlan_Match_DoubleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).InnerVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList).OuterVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny struct {
	*ygnmi.NodePath
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny struct {
	*ygnmi.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).InnerLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange).OuterVlanId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny struct {
	*ygnmi.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/*/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList).OuterVlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny struct {
	*ygnmi.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/*/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).InnerVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterHighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange).OuterLowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny struct {
	*ygnmi.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/inner-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/outer-low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/*/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange](
		"Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTagged).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTagged) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPathAny struct {
	*ygnmi.NodePath
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/*/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/*/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTagged](
		"Interface_Subinterface_Vlan_Match_SingleTagged",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath) State() ygnmi.SingletonQuery[[]uint16] {
	return ygnmi.NewSingletonQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny) State() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath) Config() ygnmi.ConfigQuery[[]uint16] {
	return ygnmi.NewConfigQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny) Config() ygnmi.WildcardQuery[[]uint16] {
	return ygnmi.NewWildcardQuery[[]uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-ids"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList).VlanIds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny struct {
	*ygnmi.NodePath
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/*/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/vlan-ids"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/*/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedList](
		"Interface_Subinterface_Vlan_Match_SingleTaggedList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "high-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).HighVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "state/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-vlan"
//	Path from parent:     "config/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "low-vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange).LowVlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny struct {
	*ygnmi.NodePath
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/high-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/low-vlan-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/*/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny {
	ps := &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Vlan_Match_SingleTaggedRange](
		"Interface_Subinterface_Vlan_Match_SingleTaggedRange",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
