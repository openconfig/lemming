/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-link-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualLinkLocal
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-link-local"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup](
		"Interface_Subinterface_Ipv6_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygnmi.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	ps := &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking](
		"Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-global-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateGlobalAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).CreateTemporaryAddresses
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryPreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "state/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/state/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-if-ip-ext"
//	Path from parent:     "config/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Autoconf).TemporaryValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Autoconf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_AutoconfPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_AutoconfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPathAny struct {
	*ygnmi.NodePath
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-global-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/create-temporary-addresses"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
//
//	Defining module:      "openconfig-if-ip-ext"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/temporary-valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/*/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Autoconf](
		"Interface_Subinterface_Ipv6_Autoconf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPathAny struct {
	*ygnmi.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InMulticastOctets() *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InMulticastOctets() *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InMulticastPkts() *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutMulticastOctets() *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutMulticastOctets() *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutMulticastPkts() *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPath {
	ps := &Interface_Subinterface_Ipv6_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPathAny {
	ps := &Interface_Subinterface_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Counters](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Counters](
		"Interface_Subinterface_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_Neighbor_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_Neighbor_IsRouterPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).IsRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).IsRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath) State() ygnmi.SingletonQuery[oc.E_Neighbor_NeighborState] {
	return ygnmi.NewSingletonQuery[oc.E_Neighbor_NeighborState](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborState, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).NeighborState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny) State() ygnmi.WildcardQuery[oc.E_Neighbor_NeighborState] {
	return ygnmi.NewWildcardQuery[oc.E_Neighbor_NeighborState](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborState, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).NeighborState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_Neighbor_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_Neighbor_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv6 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPath) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/is-router"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/*/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPath) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/neighbor-state"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPath {
	ps := &Interface_Subinterface_Ipv6_Neighbor_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPathAny {
	ps := &Interface_Subinterface_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_NeighborPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_Neighbor](
		"Interface_Subinterface_Ipv6",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_Neighbor, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Interval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Lifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "managed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Managed
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath) State() ygnmi.SingletonQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny) State() ygnmi.WildcardQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath) Config() ygnmi.ConfigQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewConfigQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_RouterAdvertisement_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_RouterAdvertisement_Mode](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RouterAdvertisement_Mode, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "other-config"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).OtherConfig
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Suppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Enable() *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Enable() *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interval"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Managed() *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "managed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/managed"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Managed() *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "managed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Mode() *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Mode() *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) OtherConfig() *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "other-config"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/other-config"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) OtherConfig() *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "other-config"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) PrefixAny() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) PrefixAny() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
//
//	Prefix: string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Prefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
//
//	Prefix: string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Prefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) PrefixMap() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) PrefixMap() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/suppress"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/*/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-advertisement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAdvertisement
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).DisableAutoconfiguration
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-onlink"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).EnableOnlink
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).PreferredLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/state/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "valid-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix).ValidLifetime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap struct {
	*ygnmi.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) DisableAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-advertisement"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) DisableAutoconfiguration() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/disable-autoconfiguration"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAutoconfiguration() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) EnableOnlink() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enable-onlink"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) EnableOnlink() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) PreferredLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preferred-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) PreferredLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) Prefix() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) Prefix() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) ValidLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/valid-lifetime"
//	Path from root:       "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/*/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) ValidLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny {
	ps := &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) State() ygnmi.SingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) Config() ygnmi.ConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix](
		"Interface_Subinterface_Ipv6_RouterAdvertisement",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, bool) {
			ret := gs.(*oc.Interface_Subinterface_Ipv6_RouterAdvertisement).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_Subinterface_Ipv6_RouterAdvertisement) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:prefixes"},
			PostRelPath: []string{"openconfig-if-ip:prefix"},
		},
	)
}
