/*
Package interfaces is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package interfaces

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePath) State() ygnmi.SingletonQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePath) Config() ygnmi.ConfigQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewConfigQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv4_Address_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IfIp_Ipv4AddressType] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_Ipv4AddressType](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_Ipv4AddressType, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv4 address on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The length of the subnet prefix.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/type"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Type() *Interface_RoutedVlan_Ipv4_Address_TypePath {
	ps := &Interface_RoutedVlan_Ipv4_Address_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/type"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/*/type"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Type() *Interface_RoutedVlan_Ipv4_Address_TypePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
//
//	VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroupMap() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VrrpGroupMap (list): List of VRRP groups, keyed by virtual router id
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "vrrp/vrrp-group"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroupMap() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vrrp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_AddressPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Address](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Address, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Address
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:addresses"},
			PostRelPath: []string{"openconfig-if-ip:address"},
		},
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accept-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AcceptMode
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertisement-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).AdvertisementInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).CurrentPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Preempt
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preempt-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).PreemptDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup).VirtualRouterId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/accept-mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accept-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/advertisement-interval"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/current-priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-tracking"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/preempt-delay"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/virtual-router-id"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/*/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup](
		"Interface_RoutedVlan_Ipv4_Address",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address).VrrpGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:vrrp"},
			PostRelPath: []string{"openconfig-if-ip:vrrp-group"},
		},
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority-decrement"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).PriorityDecrement
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/state/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "track-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking).TrackInterface
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygnmi.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/priority-decrement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/track-interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/*/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "track-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking](
		"Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutDiscardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutErrorPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutForwardedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPathAny struct {
	*ygnmi.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including all IP unicast, multicast,
// broadcast and error packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "in-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-discarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-error-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-forwarded-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-multicast-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-octets"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPath {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device as well as unicast, multicast and broadcast
// packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "out-pkts"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_CountersPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Counters] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Counters](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Counters] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Counters](
		"Interface_RoutedVlan_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-layer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).LinkLayerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_NeighborOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_NeighborOrigin](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_NeighborOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Neighbor).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathAny struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathMap represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathMap struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathMapAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPath {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_IpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ip (leaf): The IPv4 address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/link-layer-address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/*/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPath {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewConfigQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_NeighborPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor](
		"Interface_RoutedVlan_Ipv4",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Interface_RoutedVlan_Ipv4_Neighbor, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-if-ip:neighbors"},
			PostRelPath: []string{"openconfig-if-ip:neighbor"},
		},
	)
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath) State() ygnmi.SingletonQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny) State() ygnmi.WildcardQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath) Config() ygnmi.ConfigQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewConfigQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_ProxyArp_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_ProxyArp_Mode](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ProxyArp_Mode, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_ProxyArp).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_ProxyArp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPathAny struct {
	*ygnmi.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/*/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath {
	ps := &Interface_RoutedVlan_Ipv4_ProxyArp_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mode"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/proxy-arp/*/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny {
	ps := &Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_ProxyArp](
		"Interface_RoutedVlan_Ipv4_ProxyArp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/state/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/*/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "interface-ref"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered](
		"Interface_RoutedVlan_Ipv4_Unnumbered",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/state/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/interface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/*/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	ps := &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef](
		"Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6_DhcpClientPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dhcp-client"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DhcpClient
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).DupAddrDetectTransmits
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited YANG schema element.
type Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited YANG schema element.
type Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath) State() ygnmi.SingletonQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewSingletonQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny) State() ygnmi.WildcardQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath) Config() ygnmi.ConfigQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewConfigQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny) Config() ygnmi.WildcardQuery[oc.E_Ipv6_LearnUnsolicited] {
	return ygnmi.NewWildcardQuery[oc.E_Ipv6_LearnUnsolicited](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "learn-unsolicited"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Ipv6_LearnUnsolicited, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).LearnUnsolicited
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6_MtuPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mtu"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6).Mtu
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6Path struct {
	*ygnmi.NodePath
}

// Interface_RoutedVlan_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6Path) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6PathAny) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPath {
	ps := &Interface_RoutedVlan_Ipv6_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Address (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPathAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6Path) AddressMap() *Interface_RoutedVlan_Ipv6_AddressPathMap {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressMap (list): The list of configured IPv6 addresses on the interface.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "addresses/address"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address"
func (n *Interface_RoutedVlan_Ipv6PathAny) AddressMap() *Interface_RoutedVlan_Ipv6_AddressPathMapAny {
	ps := &Interface_RoutedVlan_Ipv6_AddressPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6Path) Counters() *Interface_RoutedVlan_Ipv6_CountersPath {
	ps := &Interface_RoutedVlan_Ipv6_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "state/counters"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6PathAny) Counters() *Interface_RoutedVlan_Ipv6_CountersPathAny {
	ps := &Interface_RoutedVlan_Ipv6_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6Path) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPath {
	ps := &Interface_RoutedVlan_Ipv6_DhcpClientPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dhcp-client"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6PathAny) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPathAny {
	ps := &Interface_RoutedVlan_Ipv6_DhcpClientPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6Path) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath {
	ps := &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/dup-addr-detect-transmits"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6PathAny) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny {
	ps := &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/enabled"
func (n *Interface_RoutedVlan_Ipv6Path) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPath {
	ps := &Interface_RoutedVlan_Ipv6_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/enabled"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/enabled"
func (n *Interface_RoutedVlan_Ipv6PathAny) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPathAny {
	ps := &Interface_RoutedVlan_Ipv6_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearnUnsolicited (leaf): Sets if neighbors should be learned from unsolicited neighbor
// advertisements for global or link local addresses or both.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6Path) LearnUnsolicited() *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath {
	ps := &Interface_RoutedVlan_Ipv6_LearnUnsolicitedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "learn-unsolicited"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearnUnsolicited (leaf): Sets if neighbors should be learned from unsolicited neighbor
// advertisements for global or link local addresses or both.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/learn-unsolicited"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/learn-unsolicited"
func (n *Interface_RoutedVlan_Ipv6PathAny) LearnUnsolicited() *Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny {
	ps := &Interface_RoutedVlan_Ipv6_LearnUnsolicitedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "learn-unsolicited"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/mtu"
func (n *Interface_RoutedVlan_Ipv6Path) Mtu() *Interface_RoutedVlan_Ipv6_MtuPath {
	ps := &Interface_RoutedVlan_Ipv6_MtuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "*/mtu"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/*/mtu"
func (n *Interface_RoutedVlan_Ipv6PathAny) Mtu() *Interface_RoutedVlan_Ipv6_MtuPathAny {
	ps := &Interface_RoutedVlan_Ipv6_MtuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mtu"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6Path) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6PathAny) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPath {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
//
//	Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6Path) NeighborMap() *Interface_RoutedVlan_Ipv6_NeighborPathMap {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of IPv6 neighbors
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
func (n *Interface_RoutedVlan_Ipv6PathAny) NeighborMap() *Interface_RoutedVlan_Ipv6_NeighborPathMapAny {
	ps := &Interface_RoutedVlan_Ipv6_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "router-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6Path) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "router-advertisement"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6PathAny) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny {
	ps := &Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6Path) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPath {
	ps := &Interface_RoutedVlan_Ipv6_UnnumberedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-interfaces"
//	Path from parent:     "unnumbered"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6PathAny) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPathAny {
	ps := &Interface_RoutedVlan_Ipv6_UnnumberedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6Path) State() ygnmi.SingletonQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Interface_RoutedVlan_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.Interface_RoutedVlan_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Interface_RoutedVlan_Ipv6](
		"Interface_RoutedVlan_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/ip"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_Address_IpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Ip
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_Address_OriginPath) State() ygnmi.SingletonQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewSingletonQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/origin"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_Address_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_IfIp_IpAddressOrigin] {
	return ygnmi.NewWildcardQuery[oc.E_IfIp_IpAddressOrigin](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfIp_IpAddressOrigin, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-if-ip"
//	Instantiating module: "openconfig-if-ip"
//	Path from parent:     "config/prefix-length"
//	Path from root:       "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Interface_RoutedVlan_Ipv6_Address",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Interface_RoutedVlan_Ipv6_Address).PrefixLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Interface_RoutedVlan_Ipv6_Address) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
