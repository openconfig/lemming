/*
Package oc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package oc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Root{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Acl represents the /openconfig-acl/acl YANG schema element.
type Acl struct {
	AclSet            map[Acl_AclSet_Key]*Acl_AclSet `path:"acl-sets/acl-set" module:"openconfig-acl/openconfig-acl"`
	CounterCapability E_Acl_ACL_COUNTER_CAPABILITY   `path:"state/counter-capability" module:"openconfig-acl/openconfig-acl"`
	Interface         map[string]*Acl_Interface      `path:"interfaces/interface" module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl) IsYANGGoStruct() {}

// Acl_AclSet_Key represents the key for list AclSet of element /openconfig-acl/acl.
type Acl_AclSet_Key struct {
	Name string         `path:"name"`
	Type E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that Acl_AclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Acl_AclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Acl_AclSet_Key key struct.
func (t Acl_AclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
		"type": t.Type,
	}, nil
}

// NewAclSet creates a new entry in the AclSet list of the
// Acl struct. The keys of the list are populated from the input
// arguments.
func (t *Acl) NewAclSet(Name string, Type E_Acl_ACL_TYPE) (*Acl_AclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[Acl_AclSet_Key]*Acl_AclSet)
	}

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclSet", key)
	}

	t.AclSet[key] = &Acl_AclSet{
		Name: &Name,
		Type: Type,
	}

	return t.AclSet[key], nil
}

// RenameAclSet renames an entry in the list AclSet within
// the Acl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl) RenameAclSet(oldK, newK Acl_AclSet_Key) error {
	if _, ok := t.AclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AclSet", newK)
	}

	e, ok := t.AclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclSet", oldK)
	}
	e.Name = &newK.Name
	e.Type = newK.Type

	t.AclSet[newK] = e
	delete(t.AclSet, oldK)
	return nil
}

// GetOrCreateAclSetMap returns the list (map) from Acl.
//
// It initializes the field if not already initialized.
func (t *Acl) GetOrCreateAclSetMap() map[Acl_AclSet_Key]*Acl_AclSet {
	if t.AclSet == nil {
		t.AclSet = make(map[Acl_AclSet_Key]*Acl_AclSet)
	}
	return t.AclSet
}

// GetOrCreateAclSet retrieves the value with the specified keys from
// the receiver Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl) GetOrCreateAclSet(Name string, Type E_Acl_ACL_TYPE) *Acl_AclSet {

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	if v, ok := t.AclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclSet(Name, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclSet got unexpected error: %v", err))
	}
	return v
}

// GetAclSet retrieves the value with the specified key from
// the AclSet map field of Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl) GetAclSet(Name string, Type E_Acl_ACL_TYPE) *Acl_AclSet {

	if t == nil {
		return nil
	}

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	if lm, ok := t.AclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclSet deletes the value with the specified keys from
// the receiver Acl. If there is no such element, the function
// is a no-op.
func (t *Acl) DeleteAclSet(Name string, Type E_Acl_ACL_TYPE) {
	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	delete(t.AclSet, key)
}

// AppendAclSet appends the supplied Acl_AclSet struct to the
// list AclSet of Acl. If the key value(s) specified in
// the supplied Acl_AclSet already exist in the list, an error is
// returned.
func (t *Acl) AppendAclSet(v *Acl_AclSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := Acl_AclSet_Key{
		Name: *v.Name,
		Type: v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[Acl_AclSet_Key]*Acl_AclSet)
	}

	if _, ok := t.AclSet[key]; ok {
		return fmt.Errorf("duplicate key for list AclSet %v", key)
	}

	t.AclSet[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Acl struct. The keys of the list are populated from the input
// arguments.
func (t *Acl) NewInterface(Id string) (*Acl_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Acl_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Acl_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Acl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Acl.
//
// It initializes the field if not already initialized.
func (t *Acl) GetOrCreateInterfaceMap() map[string]*Acl_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Acl_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl) GetOrCreateInterface(Id string) *Acl_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl) GetInterface(Id string) *Acl_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Acl. If there is no such element, the function
// is a no-op.
func (t *Acl) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Acl_Interface struct to the
// list Interface of Acl. If the key value(s) specified in
// the supplied Acl_Interface already exist in the list, an error is
// returned.
func (t *Acl) AppendInterface(v *Acl_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Acl_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetCounterCapability retrieves the value of the leaf CounterCapability from the Acl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CounterCapability is set, it can
// safely use t.GetCounterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CounterCapability == nil' before retrieving the leaf's value.
func (t *Acl) GetCounterCapability() E_Acl_ACL_COUNTER_CAPABILITY {
	if t == nil || t.CounterCapability == 0 {
		return 0
	}
	return t.CounterCapability
}

// SetCounterCapability sets the value of the leaf CounterCapability in the Acl
// struct.
func (t *Acl) SetCounterCapability(v E_Acl_ACL_COUNTER_CAPABILITY) {
	t.CounterCapability = v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclSet {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl.
func (*Acl) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSet struct {
	AclEntry    map[uint32]*Acl_AclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-acl/openconfig-acl"`
	Description *string                         `path:"state/description" module:"openconfig-acl/openconfig-acl" shadow-path:"config/description" shadow-module:"openconfig-acl/openconfig-acl"`
	Name        *string                         `path:"state/name|name" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/name|name" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	Type        E_Acl_ACL_TYPE                  `path:"state/type|type" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/type|type" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_AclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_AclSet) NewAclEntry(SequenceId uint32) (*Acl_AclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_AclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_AclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the Acl_AclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_AclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from Acl_AclSet.
//
// It initializes the field if not already initialized.
func (t *Acl_AclSet) GetOrCreateAclEntryMap() map[uint32]*Acl_AclSet_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_AclSet_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_AclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_AclSet) GetOrCreateAclEntry(SequenceId uint32) *Acl_AclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_AclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_AclSet) GetAclEntry(SequenceId uint32) *Acl_AclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver Acl_AclSet. If there is no such element, the function
// is a no-op.
func (t *Acl_AclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied Acl_AclSet_AclEntry struct to the
// list AclEntry of Acl_AclSet. If the key value(s) specified in
// the supplied Acl_AclSet_AclEntry already exist in the list, an error is
// returned.
func (t *Acl_AclSet) AppendAclEntry(v *Acl_AclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_AclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the Acl_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Acl_AclSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the Acl_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Acl_AclSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Acl_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_AclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetDescription sets the value of the leaf Description in the Acl_AclSet
// struct.
func (t *Acl_AclSet) SetDescription(v string) {
	t.Description = &v
}

// SetName sets the value of the leaf Name in the Acl_AclSet
// struct.
func (t *Acl_AclSet) SetName(v string) {
	t.Name = &v
}

// SetType sets the value of the leaf Type in the Acl_AclSet
// struct.
func (t *Acl_AclSet) SetType(v E_Acl_ACL_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_AclSet struct, which is a YANG list entry.
func (t *Acl_AclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet.
func (*Acl_AclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntry struct {
	Actions        *Acl_AclSet_AclEntry_Actions        `path:"actions" module:"openconfig-acl"`
	Description    *string                             `path:"state/description" module:"openconfig-acl/openconfig-acl" shadow-path:"config/description" shadow-module:"openconfig-acl/openconfig-acl"`
	InputInterface *Acl_AclSet_AclEntry_InputInterface `path:"input-interface" module:"openconfig-acl"`
	Ipv4           *Acl_AclSet_AclEntry_Ipv4           `path:"ipv4" module:"openconfig-acl"`
	Ipv6           *Acl_AclSet_AclEntry_Ipv6           `path:"ipv6" module:"openconfig-acl"`
	L2             *Acl_AclSet_AclEntry_L2             `path:"l2" module:"openconfig-acl"`
	MatchedOctets  *uint64                             `path:"state/matched-octets" module:"openconfig-acl/openconfig-acl"`
	MatchedPackets *uint64                             `path:"state/matched-packets" module:"openconfig-acl/openconfig-acl"`
	Mpls           *Acl_AclSet_AclEntry_Mpls           `path:"mpls" module:"openconfig-acl"`
	SequenceId     *uint32                             `path:"state/sequence-id|sequence-id" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/sequence-id|sequence-id" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	Transport      *Acl_AclSet_AclEntry_Transport      `path:"transport" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateActions() *Acl_AclSet_AclEntry_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &Acl_AclSet_AclEntry_Actions{}
	return t.Actions
}

// GetOrCreateInputInterface retrieves the value of the InputInterface field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateInputInterface() *Acl_AclSet_AclEntry_InputInterface {
	if t.InputInterface != nil {
		return t.InputInterface
	}
	t.InputInterface = &Acl_AclSet_AclEntry_InputInterface{}
	return t.InputInterface
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateIpv4() *Acl_AclSet_AclEntry_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Acl_AclSet_AclEntry_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateIpv6() *Acl_AclSet_AclEntry_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Acl_AclSet_AclEntry_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateL2() *Acl_AclSet_AclEntry_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &Acl_AclSet_AclEntry_L2{}
	return t.L2
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateMpls() *Acl_AclSet_AclEntry_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &Acl_AclSet_AclEntry_Mpls{}
	return t.Mpls
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateTransport() *Acl_AclSet_AclEntry_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Acl_AclSet_AclEntry_Transport{}
	return t.Transport
}

// GetActions returns the value of the Actions struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetActions() *Acl_AclSet_AclEntry_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetInputInterface returns the value of the InputInterface struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field InputInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetInputInterface() *Acl_AclSet_AclEntry_InputInterface {
	if t != nil && t.InputInterface != nil {
		return t.InputInterface
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetIpv4() *Acl_AclSet_AclEntry_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetIpv6() *Acl_AclSet_AclEntry_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetL2() *Acl_AclSet_AclEntry_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetMpls() *Acl_AclSet_AclEntry_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetTransport() *Acl_AclSet_AclEntry_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// SetDescription sets the value of the leaf Description in the Acl_AclSet_AclEntry
// struct.
func (t *Acl_AclSet_AclEntry) SetDescription(v string) {
	t.Description = &v
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the Acl_AclSet_AclEntry
// struct.
func (t *Acl_AclSet_AclEntry) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the Acl_AclSet_AclEntry
// struct.
func (t *Acl_AclSet_AclEntry) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// SetSequenceId sets the value of the leaf SequenceId in the Acl_AclSet_AclEntry
// struct.
func (t *Acl_AclSet_AclEntry) SetSequenceId(v uint32) {
	t.SequenceId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.InputInterface.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.L2.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Acl_AclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_AclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry.
func (*Acl_AclSet_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Actions represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_Actions struct {
	ForwardingAction E_Acl_FORWARDING_ACTION `path:"state/forwarding-action" module:"openconfig-acl/openconfig-acl" shadow-path:"config/forwarding-action" shadow-module:"openconfig-acl/openconfig-acl"`
	LogAction        E_Acl_LOG_ACTION        `path:"state/log-action" module:"openconfig-acl/openconfig-acl" shadow-path:"config/log-action" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Actions) IsYANGGoStruct() {}

// GetForwardingAction retrieves the value of the leaf ForwardingAction from the Acl_AclSet_AclEntry_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingAction is set, it can
// safely use t.GetForwardingAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingAction == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Actions) GetForwardingAction() E_Acl_FORWARDING_ACTION {
	if t == nil || t.ForwardingAction == 0 {
		return 0
	}
	return t.ForwardingAction
}

// GetLogAction retrieves the value of the leaf LogAction from the Acl_AclSet_AclEntry_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogAction is set, it can
// safely use t.GetLogAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogAction == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Actions) GetLogAction() E_Acl_LOG_ACTION {
	if t == nil || t.LogAction == 0 {
		return Acl_LOG_ACTION_LOG_NONE
	}
	return t.LogAction
}

// SetForwardingAction sets the value of the leaf ForwardingAction in the Acl_AclSet_AclEntry_Actions
// struct.
func (t *Acl_AclSet_AclEntry_Actions) SetForwardingAction(v E_Acl_FORWARDING_ACTION) {
	t.ForwardingAction = v
}

// SetLogAction sets the value of the leaf LogAction in the Acl_AclSet_AclEntry_Actions
// struct.
func (t *Acl_AclSet_AclEntry_Actions) SetLogAction(v E_Acl_LOG_ACTION) {
	t.LogAction = v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogAction == 0 {
		t.LogAction = Acl_LOG_ACTION_LOG_NONE
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Actions.
func (*Acl_AclSet_AclEntry_Actions) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_InputInterface represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface struct {
	InterfaceRef *Acl_AclSet_AclEntry_InputInterface_InterfaceRef `path:"interface-ref" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry_InputInterface) GetOrCreateInterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Acl_AclSet_AclEntry_InputInterface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Acl_AclSet_AclEntry_InputInterface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry_InputInterface) GetInterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_InputInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_InputInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceRef.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_InputInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_InputInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_InputInterface.
func (*Acl_AclSet_AclEntry_InputInterface) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-acl/openconfig-acl" shadow-path:"config/interface" shadow-module:"openconfig-acl/openconfig-acl"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-acl/openconfig-acl" shadow-path:"config/subinterface" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// struct.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// struct.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_InputInterface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_InputInterface_InterfaceRef.
func (*Acl_AclSet_AclEntry_InputInterface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4 struct {
	DestinationAddress          *string                                 `path:"state/destination-address" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-address" shadow-module:"openconfig-acl/openconfig-acl"`
	DestinationAddressPrefixSet *string                                 `path:"state/destination-address-prefix-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-address-prefix-set" shadow-module:"openconfig-acl/openconfig-acl"`
	Dscp                        *uint8                                  `path:"state/dscp" module:"openconfig-acl/openconfig-acl" shadow-path:"config/dscp" shadow-module:"openconfig-acl/openconfig-acl"`
	DscpSet                     []uint8                                 `path:"state/dscp-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/dscp-set" shadow-module:"openconfig-acl/openconfig-acl"`
	HopLimit                    *uint8                                  `path:"state/hop-limit" module:"openconfig-acl/openconfig-acl" shadow-path:"config/hop-limit" shadow-module:"openconfig-acl/openconfig-acl"`
	Icmpv4                      *Acl_AclSet_AclEntry_Ipv4_Icmpv4        `path:"icmpv4" module:"openconfig-acl"`
	Length                      *uint16                                 `path:"state/length" module:"openconfig-acl/openconfig-acl" shadow-path:"config/length" shadow-module:"openconfig-acl/openconfig-acl"`
	Protocol                    Acl_AclSet_AclEntry_Ipv4_Protocol_Union `path:"state/protocol" module:"openconfig-acl/openconfig-acl" shadow-path:"config/protocol" shadow-module:"openconfig-acl/openconfig-acl"`
	SourceAddress               *string                                 `path:"state/source-address" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-address" shadow-module:"openconfig-acl/openconfig-acl"`
	SourceAddressPrefixSet      *string                                 `path:"state/source-address-prefix-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-address-prefix-set" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv4) IsYANGGoStruct() {}

// GetOrCreateIcmpv4 retrieves the value of the Icmpv4 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry_Ipv4) GetOrCreateIcmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4 {
	if t.Icmpv4 != nil {
		return t.Icmpv4
	}
	t.Icmpv4 = &Acl_AclSet_AclEntry_Ipv4_Icmpv4{}
	return t.Icmpv4
}

// GetIcmpv4 returns the value of the Icmpv4 struct pointer
// from Acl_AclSet_AclEntry_Ipv4. If the receiver or the field Icmpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry_Ipv4) GetIcmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4 {
	if t != nil && t.Icmpv4 != nil {
		return t.Icmpv4
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDscp retrieves the value of the leaf Dscp from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetProtocol() Acl_AclSet_AclEntry_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// SetDestinationAddress sets the value of the leaf DestinationAddress in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetDestinationAddress(v string) {
	t.DestinationAddress = &v
}

// SetDestinationAddressPrefixSet sets the value of the leaf DestinationAddressPrefixSet in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetDestinationAddressPrefixSet(v string) {
	t.DestinationAddressPrefixSet = &v
}

// SetDscp sets the value of the leaf Dscp in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetDscp(v uint8) {
	t.Dscp = &v
}

// SetDscpSet sets the value of the leaf DscpSet in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetDscpSet(v []uint8) {
	t.DscpSet = v
}

// SetHopLimit sets the value of the leaf HopLimit in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetHopLimit(v uint8) {
	t.HopLimit = &v
}

// SetLength sets the value of the leaf Length in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetLength(v uint16) {
	t.Length = &v
}

// SetProtocol sets the value of the leaf Protocol in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetProtocol(v Acl_AclSet_AclEntry_Ipv4_Protocol_Union) {
	t.Protocol = v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetSourceAddressPrefixSet sets the value of the leaf SourceAddressPrefixSet in the Acl_AclSet_AclEntry_Ipv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4) SetSourceAddressPrefixSet(v string) {
	t.SourceAddressPrefixSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv4.
func (*Acl_AclSet_AclEntry_Ipv4) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4 struct {
	Code E_Icmpv4Types_CODE `path:"state/code" module:"openconfig-acl/openconfig-acl" shadow-path:"config/code" shadow-module:"openconfig-acl/openconfig-acl"`
	Type E_Icmpv4Types_TYPE `path:"state/type" module:"openconfig-acl/openconfig-acl" shadow-path:"config/type" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv4_Icmpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv4_Icmpv4) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) GetCode() E_Icmpv4Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) GetType() E_Icmpv4Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetCode sets the value of the leaf Code in the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) SetCode(v E_Icmpv4Types_CODE) {
	t.Code = v
}

// SetType sets the value of the leaf Type in the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// struct.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) SetType(v E_Icmpv4Types_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv4_Icmpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv4_Icmpv4.
func (*Acl_AclSet_AclEntry_Ipv4_Icmpv4) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6 struct {
	DestinationAddress          *string                                 `path:"state/destination-address" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-address" shadow-module:"openconfig-acl/openconfig-acl"`
	DestinationAddressPrefixSet *string                                 `path:"state/destination-address-prefix-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-address-prefix-set" shadow-module:"openconfig-acl/openconfig-acl"`
	DestinationFlowLabel        *uint32                                 `path:"state/destination-flow-label" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-flow-label" shadow-module:"openconfig-acl/openconfig-acl"`
	Dscp                        *uint8                                  `path:"state/dscp" module:"openconfig-acl/openconfig-acl" shadow-path:"config/dscp" shadow-module:"openconfig-acl/openconfig-acl"`
	DscpSet                     []uint8                                 `path:"state/dscp-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/dscp-set" shadow-module:"openconfig-acl/openconfig-acl"`
	HopLimit                    *uint8                                  `path:"state/hop-limit" module:"openconfig-acl/openconfig-acl" shadow-path:"config/hop-limit" shadow-module:"openconfig-acl/openconfig-acl"`
	Icmpv6                      *Acl_AclSet_AclEntry_Ipv6_Icmpv6        `path:"icmpv6" module:"openconfig-acl"`
	Length                      *uint16                                 `path:"state/length" module:"openconfig-acl/openconfig-acl" shadow-path:"config/length" shadow-module:"openconfig-acl/openconfig-acl"`
	Protocol                    Acl_AclSet_AclEntry_Ipv6_Protocol_Union `path:"state/protocol" module:"openconfig-acl/openconfig-acl" shadow-path:"config/protocol" shadow-module:"openconfig-acl/openconfig-acl"`
	SourceAddress               *string                                 `path:"state/source-address" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-address" shadow-module:"openconfig-acl/openconfig-acl"`
	SourceAddressPrefixSet      *string                                 `path:"state/source-address-prefix-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-address-prefix-set" shadow-module:"openconfig-acl/openconfig-acl"`
	SourceFlowLabel             *uint32                                 `path:"state/source-flow-label" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-flow-label" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv6) IsYANGGoStruct() {}

// GetOrCreateIcmpv6 retrieves the value of the Icmpv6 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry_Ipv6) GetOrCreateIcmpv6() *Acl_AclSet_AclEntry_Ipv6_Icmpv6 {
	if t.Icmpv6 != nil {
		return t.Icmpv6
	}
	t.Icmpv6 = &Acl_AclSet_AclEntry_Ipv6_Icmpv6{}
	return t.Icmpv6
}

// GetIcmpv6 returns the value of the Icmpv6 struct pointer
// from Acl_AclSet_AclEntry_Ipv6. If the receiver or the field Icmpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry_Ipv6) GetIcmpv6() *Acl_AclSet_AclEntry_Ipv6_Icmpv6 {
	if t != nil && t.Icmpv6 != nil {
		return t.Icmpv6
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDestinationFlowLabel retrieves the value of the leaf DestinationFlowLabel from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationFlowLabel is set, it can
// safely use t.GetDestinationFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationFlowLabel == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDestinationFlowLabel() uint32 {
	if t == nil || t.DestinationFlowLabel == nil {
		return 0
	}
	return *t.DestinationFlowLabel
}

// GetDscp retrieves the value of the leaf Dscp from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetProtocol() Acl_AclSet_AclEntry_Ipv6_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// GetSourceFlowLabel retrieves the value of the leaf SourceFlowLabel from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceFlowLabel is set, it can
// safely use t.GetSourceFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceFlowLabel == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetSourceFlowLabel() uint32 {
	if t == nil || t.SourceFlowLabel == nil {
		return 0
	}
	return *t.SourceFlowLabel
}

// SetDestinationAddress sets the value of the leaf DestinationAddress in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetDestinationAddress(v string) {
	t.DestinationAddress = &v
}

// SetDestinationAddressPrefixSet sets the value of the leaf DestinationAddressPrefixSet in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetDestinationAddressPrefixSet(v string) {
	t.DestinationAddressPrefixSet = &v
}

// SetDestinationFlowLabel sets the value of the leaf DestinationFlowLabel in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetDestinationFlowLabel(v uint32) {
	t.DestinationFlowLabel = &v
}

// SetDscp sets the value of the leaf Dscp in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetDscp(v uint8) {
	t.Dscp = &v
}

// SetDscpSet sets the value of the leaf DscpSet in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetDscpSet(v []uint8) {
	t.DscpSet = v
}

// SetHopLimit sets the value of the leaf HopLimit in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetHopLimit(v uint8) {
	t.HopLimit = &v
}

// SetLength sets the value of the leaf Length in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetLength(v uint16) {
	t.Length = &v
}

// SetProtocol sets the value of the leaf Protocol in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetProtocol(v Acl_AclSet_AclEntry_Ipv6_Protocol_Union) {
	t.Protocol = v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// SetSourceAddressPrefixSet sets the value of the leaf SourceAddressPrefixSet in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetSourceAddressPrefixSet(v string) {
	t.SourceAddressPrefixSet = &v
}

// SetSourceFlowLabel sets the value of the leaf SourceFlowLabel in the Acl_AclSet_AclEntry_Ipv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6) SetSourceFlowLabel(v uint32) {
	t.SourceFlowLabel = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv6.
func (*Acl_AclSet_AclEntry_Ipv6) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6 struct {
	Code E_Icmpv6Types_CODE `path:"state/code" module:"openconfig-acl/openconfig-acl" shadow-path:"config/code" shadow-module:"openconfig-acl/openconfig-acl"`
	Type E_Icmpv6Types_TYPE `path:"state/type" module:"openconfig-acl/openconfig-acl" shadow-path:"config/type" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv6_Icmpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv6_Icmpv6) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) GetCode() E_Icmpv6Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) GetType() E_Icmpv6Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetCode sets the value of the leaf Code in the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) SetCode(v E_Icmpv6Types_CODE) {
	t.Code = v
}

// SetType sets the value of the leaf Type in the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// struct.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) SetType(v E_Icmpv6Types_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv6_Icmpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv6_Icmpv6.
func (*Acl_AclSet_AclEntry_Ipv6_Icmpv6) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_L2 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2 struct {
	DestinationMac     *string                                `path:"state/destination-mac" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-mac" shadow-module:"openconfig-acl/openconfig-acl"`
	DestinationMacMask *string                                `path:"state/destination-mac-mask" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-mac-mask" shadow-module:"openconfig-acl/openconfig-acl"`
	Ethertype          Acl_AclSet_AclEntry_L2_Ethertype_Union `path:"state/ethertype" module:"openconfig-acl/openconfig-acl" shadow-path:"config/ethertype" shadow-module:"openconfig-acl/openconfig-acl"`
	SourceMac          *string                                `path:"state/source-mac" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-mac" shadow-module:"openconfig-acl/openconfig-acl"`
	SourceMacMask      *string                                `path:"state/source-mac-mask" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-mac-mask" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_L2) IsYANGGoStruct() {}

// GetDestinationMac retrieves the value of the leaf DestinationMac from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMac is set, it can
// safely use t.GetDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMac == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetDestinationMac() string {
	if t == nil || t.DestinationMac == nil {
		return ""
	}
	return *t.DestinationMac
}

// GetDestinationMacMask retrieves the value of the leaf DestinationMacMask from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMacMask is set, it can
// safely use t.GetDestinationMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMacMask == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetDestinationMacMask() string {
	if t == nil || t.DestinationMacMask == nil {
		return ""
	}
	return *t.DestinationMacMask
}

// GetEthertype retrieves the value of the leaf Ethertype from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethertype is set, it can
// safely use t.GetEthertype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethertype == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetEthertype() Acl_AclSet_AclEntry_L2_Ethertype_Union {
	if t == nil || t.Ethertype == nil {
		return nil
	}
	return t.Ethertype
}

// GetSourceMac retrieves the value of the leaf SourceMac from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// GetSourceMacMask retrieves the value of the leaf SourceMacMask from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMacMask is set, it can
// safely use t.GetSourceMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMacMask == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetSourceMacMask() string {
	if t == nil || t.SourceMacMask == nil {
		return ""
	}
	return *t.SourceMacMask
}

// SetDestinationMac sets the value of the leaf DestinationMac in the Acl_AclSet_AclEntry_L2
// struct.
func (t *Acl_AclSet_AclEntry_L2) SetDestinationMac(v string) {
	t.DestinationMac = &v
}

// SetDestinationMacMask sets the value of the leaf DestinationMacMask in the Acl_AclSet_AclEntry_L2
// struct.
func (t *Acl_AclSet_AclEntry_L2) SetDestinationMacMask(v string) {
	t.DestinationMacMask = &v
}

// SetEthertype sets the value of the leaf Ethertype in the Acl_AclSet_AclEntry_L2
// struct.
func (t *Acl_AclSet_AclEntry_L2) SetEthertype(v Acl_AclSet_AclEntry_L2_Ethertype_Union) {
	t.Ethertype = v
}

// SetSourceMac sets the value of the leaf SourceMac in the Acl_AclSet_AclEntry_L2
// struct.
func (t *Acl_AclSet_AclEntry_L2) SetSourceMac(v string) {
	t.SourceMac = &v
}

// SetSourceMacMask sets the value of the leaf SourceMacMask in the Acl_AclSet_AclEntry_L2
// struct.
func (t *Acl_AclSet_AclEntry_L2) SetSourceMacMask(v string) {
	t.SourceMacMask = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_L2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_L2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_L2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_L2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_L2.
func (*Acl_AclSet_AclEntry_L2) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Mpls represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_Mpls struct {
	EndLabelValue   Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union   `path:"state/end-label-value" module:"openconfig-acl/openconfig-acl" shadow-path:"config/end-label-value" shadow-module:"openconfig-acl/openconfig-acl"`
	StartLabelValue Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union `path:"state/start-label-value" module:"openconfig-acl/openconfig-acl" shadow-path:"config/start-label-value" shadow-module:"openconfig-acl/openconfig-acl"`
	TrafficClass    *uint8                                         `path:"state/traffic-class" module:"openconfig-acl/openconfig-acl" shadow-path:"config/traffic-class" shadow-module:"openconfig-acl/openconfig-acl"`
	TtlValue        *uint8                                         `path:"state/ttl-value" module:"openconfig-acl/openconfig-acl" shadow-path:"config/ttl-value" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Mpls) IsYANGGoStruct() {}

// GetEndLabelValue retrieves the value of the leaf EndLabelValue from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabelValue is set, it can
// safely use t.GetEndLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabelValue == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetEndLabelValue() Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union {
	if t == nil || t.EndLabelValue == nil {
		return nil
	}
	return t.EndLabelValue
}

// GetStartLabelValue retrieves the value of the leaf StartLabelValue from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabelValue is set, it can
// safely use t.GetStartLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabelValue == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetStartLabelValue() Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union {
	if t == nil || t.StartLabelValue == nil {
		return nil
	}
	return t.StartLabelValue
}

// GetTrafficClass retrieves the value of the leaf TrafficClass from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficClass is set, it can
// safely use t.GetTrafficClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficClass == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetTrafficClass() uint8 {
	if t == nil || t.TrafficClass == nil {
		return 0
	}
	return *t.TrafficClass
}

// GetTtlValue retrieves the value of the leaf TtlValue from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlValue is set, it can
// safely use t.GetTtlValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlValue == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetTtlValue() uint8 {
	if t == nil || t.TtlValue == nil {
		return 0
	}
	return *t.TtlValue
}

// SetEndLabelValue sets the value of the leaf EndLabelValue in the Acl_AclSet_AclEntry_Mpls
// struct.
func (t *Acl_AclSet_AclEntry_Mpls) SetEndLabelValue(v Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union) {
	t.EndLabelValue = v
}

// SetStartLabelValue sets the value of the leaf StartLabelValue in the Acl_AclSet_AclEntry_Mpls
// struct.
func (t *Acl_AclSet_AclEntry_Mpls) SetStartLabelValue(v Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union) {
	t.StartLabelValue = v
}

// SetTrafficClass sets the value of the leaf TrafficClass in the Acl_AclSet_AclEntry_Mpls
// struct.
func (t *Acl_AclSet_AclEntry_Mpls) SetTrafficClass(v uint8) {
	t.TrafficClass = &v
}

// SetTtlValue sets the value of the leaf TtlValue in the Acl_AclSet_AclEntry_Mpls
// struct.
func (t *Acl_AclSet_AclEntry_Mpls) SetTtlValue(v uint8) {
	t.TtlValue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Mpls.
func (*Acl_AclSet_AclEntry_Mpls) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Transport represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_Transport struct {
	BuiltinDetail           E_Transport_BuiltinDetail                           `path:"state/builtin-detail" module:"openconfig-acl/openconfig-acl" shadow-path:"config/builtin-detail" shadow-module:"openconfig-acl/openconfig-acl"`
	DestinationPort         Acl_AclSet_AclEntry_Transport_DestinationPort_Union `path:"state/destination-port" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-port" shadow-module:"openconfig-acl/openconfig-acl"`
	DestinationPortSet      *string                                             `path:"state/destination-port-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/destination-port-set" shadow-module:"openconfig-acl/openconfig-acl"`
	DetailMode              E_Transport_DetailMode                              `path:"state/detail-mode" module:"openconfig-acl/openconfig-acl" shadow-path:"config/detail-mode" shadow-module:"openconfig-acl/openconfig-acl"`
	ExplicitDetailMatchMode E_Transport_ExplicitDetailMatchMode                 `path:"state/explicit-detail-match-mode" module:"openconfig-acl/openconfig-acl" shadow-path:"config/explicit-detail-match-mode" shadow-module:"openconfig-acl/openconfig-acl"`
	ExplicitTcpFlags        []E_PacketMatchTypes_TCP_FLAGS                      `path:"state/explicit-tcp-flags" module:"openconfig-acl/openconfig-acl" shadow-path:"config/explicit-tcp-flags" shadow-module:"openconfig-acl/openconfig-acl"`
	SourcePort              Acl_AclSet_AclEntry_Transport_SourcePort_Union      `path:"state/source-port" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-port" shadow-module:"openconfig-acl/openconfig-acl"`
	SourcePortSet           *string                                             `path:"state/source-port-set" module:"openconfig-acl/openconfig-acl" shadow-path:"config/source-port-set" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Transport) IsYANGGoStruct() {}

// GetBuiltinDetail retrieves the value of the leaf BuiltinDetail from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BuiltinDetail is set, it can
// safely use t.GetBuiltinDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BuiltinDetail == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetBuiltinDetail() E_Transport_BuiltinDetail {
	if t == nil || t.BuiltinDetail == 0 {
		return 0
	}
	return t.BuiltinDetail
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetDestinationPort() Acl_AclSet_AclEntry_Transport_DestinationPort_Union {
	if t == nil || t.DestinationPort == nil {
		return nil
	}
	return t.DestinationPort
}

// GetDestinationPortSet retrieves the value of the leaf DestinationPortSet from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPortSet is set, it can
// safely use t.GetDestinationPortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPortSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetDestinationPortSet() string {
	if t == nil || t.DestinationPortSet == nil {
		return ""
	}
	return *t.DestinationPortSet
}

// GetDetailMode retrieves the value of the leaf DetailMode from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetailMode is set, it can
// safely use t.GetDetailMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetailMode == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetDetailMode() E_Transport_DetailMode {
	if t == nil || t.DetailMode == 0 {
		return 0
	}
	return t.DetailMode
}

// GetExplicitDetailMatchMode retrieves the value of the leaf ExplicitDetailMatchMode from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitDetailMatchMode is set, it can
// safely use t.GetExplicitDetailMatchMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitDetailMatchMode == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetExplicitDetailMatchMode() E_Transport_ExplicitDetailMatchMode {
	if t == nil || t.ExplicitDetailMatchMode == 0 {
		return 0
	}
	return t.ExplicitDetailMatchMode
}

// GetExplicitTcpFlags retrieves the value of the leaf ExplicitTcpFlags from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitTcpFlags is set, it can
// safely use t.GetExplicitTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitTcpFlags == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetExplicitTcpFlags() []E_PacketMatchTypes_TCP_FLAGS {
	if t == nil || t.ExplicitTcpFlags == nil {
		return nil
	}
	return t.ExplicitTcpFlags
}

// GetSourcePort retrieves the value of the leaf SourcePort from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetSourcePort() Acl_AclSet_AclEntry_Transport_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// GetSourcePortSet retrieves the value of the leaf SourcePortSet from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePortSet is set, it can
// safely use t.GetSourcePortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePortSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetSourcePortSet() string {
	if t == nil || t.SourcePortSet == nil {
		return ""
	}
	return *t.SourcePortSet
}

// SetBuiltinDetail sets the value of the leaf BuiltinDetail in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetBuiltinDetail(v E_Transport_BuiltinDetail) {
	t.BuiltinDetail = v
}

// SetDestinationPort sets the value of the leaf DestinationPort in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetDestinationPort(v Acl_AclSet_AclEntry_Transport_DestinationPort_Union) {
	t.DestinationPort = v
}

// SetDestinationPortSet sets the value of the leaf DestinationPortSet in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetDestinationPortSet(v string) {
	t.DestinationPortSet = &v
}

// SetDetailMode sets the value of the leaf DetailMode in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetDetailMode(v E_Transport_DetailMode) {
	t.DetailMode = v
}

// SetExplicitDetailMatchMode sets the value of the leaf ExplicitDetailMatchMode in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetExplicitDetailMatchMode(v E_Transport_ExplicitDetailMatchMode) {
	t.ExplicitDetailMatchMode = v
}

// SetExplicitTcpFlags sets the value of the leaf ExplicitTcpFlags in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetExplicitTcpFlags(v []E_PacketMatchTypes_TCP_FLAGS) {
	t.ExplicitTcpFlags = v
}

// SetSourcePort sets the value of the leaf SourcePort in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetSourcePort(v Acl_AclSet_AclEntry_Transport_SourcePort_Union) {
	t.SourcePort = v
}

// SetSourcePortSet sets the value of the leaf SourcePortSet in the Acl_AclSet_AclEntry_Transport
// struct.
func (t *Acl_AclSet_AclEntry_Transport) SetSourcePortSet(v string) {
	t.SourcePortSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Transport.
func (*Acl_AclSet_AclEntry_Transport) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_Interface struct {
	EgressAclSet  map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet   `path:"egress-acl-sets/egress-acl-set" module:"openconfig-acl/openconfig-acl"`
	Id            *string                                                          `path:"state/id|id" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/id|id" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	IngressAclSet map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet `path:"ingress-acl-sets/ingress-acl-set" module:"openconfig-acl/openconfig-acl"`
	InterfaceRef  *Acl_Interface_InterfaceRef                                      `path:"interface-ref" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface) IsYANGGoStruct() {}

// Acl_Interface_EgressAclSet_Key represents the key for list EgressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_EgressAclSet_Key struct {
	SetName string         `path:"set-name"`
	Type    E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that Acl_Interface_EgressAclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Acl_Interface_EgressAclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Acl_Interface_EgressAclSet_Key key struct.
func (t Acl_Interface_EgressAclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// Acl_Interface_IngressAclSet_Key represents the key for list IngressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_IngressAclSet_Key struct {
	SetName string         `path:"set-name"`
	Type    E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that Acl_Interface_IngressAclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Acl_Interface_IngressAclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Acl_Interface_IngressAclSet_Key key struct.
func (t Acl_Interface_IngressAclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// NewEgressAclSet creates a new entry in the EgressAclSet list of the
// Acl_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface) NewEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) (*Acl_Interface_EgressAclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet)
	}

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressAclSet", key)
	}

	t.EgressAclSet[key] = &Acl_Interface_EgressAclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.EgressAclSet[key], nil
}

// RenameEgressAclSet renames an entry in the list EgressAclSet within
// the Acl_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface) RenameEgressAclSet(oldK, newK Acl_Interface_EgressAclSet_Key) error {
	if _, ok := t.EgressAclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in EgressAclSet", newK)
	}

	e, ok := t.EgressAclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EgressAclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.EgressAclSet[newK] = e
	delete(t.EgressAclSet, oldK)
	return nil
}

// GetOrCreateEgressAclSetMap returns the list (map) from Acl_Interface.
//
// It initializes the field if not already initialized.
func (t *Acl_Interface) GetOrCreateEgressAclSetMap() map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet {
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet)
	}
	return t.EgressAclSet
}

// GetOrCreateEgressAclSet retrieves the value with the specified keys from
// the receiver Acl_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface) GetOrCreateEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSet {

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.EgressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetEgressAclSet retrieves the value with the specified key from
// the EgressAclSet map field of Acl_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface) GetEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSet {

	if t == nil {
		return nil
	}

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.EgressAclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteEgressAclSet deletes the value with the specified keys from
// the receiver Acl_Interface. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface) DeleteEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) {
	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.EgressAclSet, key)
}

// AppendEgressAclSet appends the supplied Acl_Interface_EgressAclSet struct to the
// list EgressAclSet of Acl_Interface. If the key value(s) specified in
// the supplied Acl_Interface_EgressAclSet already exist in the list, an error is
// returned.
func (t *Acl_Interface) AppendEgressAclSet(v *Acl_Interface_EgressAclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := Acl_Interface_EgressAclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet)
	}

	if _, ok := t.EgressAclSet[key]; ok {
		return fmt.Errorf("duplicate key for list EgressAclSet %v", key)
	}

	t.EgressAclSet[key] = v
	return nil
}

// NewIngressAclSet creates a new entry in the IngressAclSet list of the
// Acl_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface) NewIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) (*Acl_Interface_IngressAclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet)
	}

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IngressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IngressAclSet", key)
	}

	t.IngressAclSet[key] = &Acl_Interface_IngressAclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.IngressAclSet[key], nil
}

// RenameIngressAclSet renames an entry in the list IngressAclSet within
// the Acl_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface) RenameIngressAclSet(oldK, newK Acl_Interface_IngressAclSet_Key) error {
	if _, ok := t.IngressAclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in IngressAclSet", newK)
	}

	e, ok := t.IngressAclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IngressAclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.IngressAclSet[newK] = e
	delete(t.IngressAclSet, oldK)
	return nil
}

// GetOrCreateIngressAclSetMap returns the list (map) from Acl_Interface.
//
// It initializes the field if not already initialized.
func (t *Acl_Interface) GetOrCreateIngressAclSetMap() map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet {
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet)
	}
	return t.IngressAclSet
}

// GetOrCreateIngressAclSet retrieves the value with the specified keys from
// the receiver Acl_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface) GetOrCreateIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSet {

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.IngressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIngressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIngressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetIngressAclSet retrieves the value with the specified key from
// the IngressAclSet map field of Acl_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface) GetIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSet {

	if t == nil {
		return nil
	}

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.IngressAclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIngressAclSet deletes the value with the specified keys from
// the receiver Acl_Interface. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface) DeleteIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) {
	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.IngressAclSet, key)
}

// AppendIngressAclSet appends the supplied Acl_Interface_IngressAclSet struct to the
// list IngressAclSet of Acl_Interface. If the key value(s) specified in
// the supplied Acl_Interface_IngressAclSet already exist in the list, an error is
// returned.
func (t *Acl_Interface) AppendIngressAclSet(v *Acl_Interface_IngressAclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := Acl_Interface_IngressAclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet)
	}

	if _, ok := t.IngressAclSet[key]; ok {
		return fmt.Errorf("duplicate key for list IngressAclSet %v", key)
	}

	t.IngressAclSet[key] = v
	return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Acl_Interface) GetOrCreateInterfaceRef() *Acl_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Acl_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Acl_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_Interface) GetInterfaceRef() *Acl_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the Acl_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Acl_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// SetId sets the value of the leaf Id in the Acl_Interface
// struct.
func (t *Acl_Interface) SetId(v string) {
	t.Id = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceRef.PopulateDefaults()
	for _, e := range t.EgressAclSet {
		e.PopulateDefaults()
	}
	for _, e := range t.IngressAclSet {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_Interface struct, which is a YANG list entry.
func (t *Acl_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface.
func (*Acl_Interface) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_EgressAclSet represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSet struct {
	AclEntry map[uint32]*Acl_Interface_EgressAclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-acl/openconfig-acl"`
	SetName  *string                                         `path:"state/set-name|set-name" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/set-name|set-name" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	Type     E_Acl_ACL_TYPE                                  `path:"state/type|type" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/type|type" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_Interface_EgressAclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface_EgressAclSet) NewAclEntry(SequenceId uint32) (*Acl_Interface_EgressAclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_EgressAclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_Interface_EgressAclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the Acl_Interface_EgressAclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface_EgressAclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from Acl_Interface_EgressAclSet.
//
// It initializes the field if not already initialized.
func (t *Acl_Interface_EgressAclSet) GetOrCreateAclEntryMap() map[uint32]*Acl_Interface_EgressAclSet_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_EgressAclSet_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_Interface_EgressAclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface_EgressAclSet) GetOrCreateAclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_Interface_EgressAclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface_EgressAclSet) GetAclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver Acl_Interface_EgressAclSet. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface_EgressAclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied Acl_Interface_EgressAclSet_AclEntry struct to the
// list AclEntry of Acl_Interface_EgressAclSet. If the key value(s) specified in
// the supplied Acl_Interface_EgressAclSet_AclEntry already exist in the list, an error is
// returned.
func (t *Acl_Interface_EgressAclSet) AppendAclEntry(v *Acl_Interface_EgressAclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_EgressAclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetSetName retrieves the value of the leaf SetName from the Acl_Interface_EgressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetName is set, it can
// safely use t.GetSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetName == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet) GetSetName() string {
	if t == nil || t.SetName == nil {
		return ""
	}
	return *t.SetName
}

// GetType retrieves the value of the leaf Type from the Acl_Interface_EgressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetSetName sets the value of the leaf SetName in the Acl_Interface_EgressAclSet
// struct.
func (t *Acl_Interface_EgressAclSet) SetSetName(v string) {
	t.SetName = &v
}

// SetType sets the value of the leaf Type in the Acl_Interface_EgressAclSet
// struct.
func (t *Acl_Interface_EgressAclSet) SetType(v E_Acl_ACL_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_EgressAclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_EgressAclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_Interface_EgressAclSet struct, which is a YANG list entry.
func (t *Acl_Interface_EgressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_EgressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_EgressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_EgressAclSet.
func (*Acl_Interface_EgressAclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_EgressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry struct {
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-acl/openconfig-acl"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-acl/openconfig-acl"`
	SequenceId     *uint32 `path:"state/sequence-id|sequence-id" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"sequence-id" shadow-module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet_AclEntry) IsYANGGoStruct() {}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Acl_Interface_EgressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Acl_Interface_EgressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the Acl_Interface_EgressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the Acl_Interface_EgressAclSet_AclEntry
// struct.
func (t *Acl_Interface_EgressAclSet_AclEntry) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the Acl_Interface_EgressAclSet_AclEntry
// struct.
func (t *Acl_Interface_EgressAclSet_AclEntry) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// SetSequenceId sets the value of the leaf SequenceId in the Acl_Interface_EgressAclSet_AclEntry
// struct.
func (t *Acl_Interface_EgressAclSet_AclEntry) SetSequenceId(v uint32) {
	t.SequenceId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_EgressAclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_EgressAclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Acl_Interface_EgressAclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_EgressAclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_EgressAclSet_AclEntry.
func (*Acl_Interface_EgressAclSet_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_IngressAclSet represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSet struct {
	AclEntry map[uint32]*Acl_Interface_IngressAclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-acl/openconfig-acl"`
	SetName  *string                                          `path:"state/set-name|set-name" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/set-name|set-name" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	Type     E_Acl_ACL_TYPE                                   `path:"state/type|type" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"config/type|type" shadow-module:"openconfig-acl/openconfig-acl|openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_Interface_IngressAclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface_IngressAclSet) NewAclEntry(SequenceId uint32) (*Acl_Interface_IngressAclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_IngressAclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_Interface_IngressAclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the Acl_Interface_IngressAclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface_IngressAclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from Acl_Interface_IngressAclSet.
//
// It initializes the field if not already initialized.
func (t *Acl_Interface_IngressAclSet) GetOrCreateAclEntryMap() map[uint32]*Acl_Interface_IngressAclSet_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_IngressAclSet_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_Interface_IngressAclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface_IngressAclSet) GetOrCreateAclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_Interface_IngressAclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface_IngressAclSet) GetAclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver Acl_Interface_IngressAclSet. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface_IngressAclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied Acl_Interface_IngressAclSet_AclEntry struct to the
// list AclEntry of Acl_Interface_IngressAclSet. If the key value(s) specified in
// the supplied Acl_Interface_IngressAclSet_AclEntry already exist in the list, an error is
// returned.
func (t *Acl_Interface_IngressAclSet) AppendAclEntry(v *Acl_Interface_IngressAclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_IngressAclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetSetName retrieves the value of the leaf SetName from the Acl_Interface_IngressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetName is set, it can
// safely use t.GetSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetName == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet) GetSetName() string {
	if t == nil || t.SetName == nil {
		return ""
	}
	return *t.SetName
}

// GetType retrieves the value of the leaf Type from the Acl_Interface_IngressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetSetName sets the value of the leaf SetName in the Acl_Interface_IngressAclSet
// struct.
func (t *Acl_Interface_IngressAclSet) SetSetName(v string) {
	t.SetName = &v
}

// SetType sets the value of the leaf Type in the Acl_Interface_IngressAclSet
// struct.
func (t *Acl_Interface_IngressAclSet) SetType(v E_Acl_ACL_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_IngressAclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_IngressAclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_Interface_IngressAclSet struct, which is a YANG list entry.
func (t *Acl_Interface_IngressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_IngressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_IngressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_IngressAclSet.
func (*Acl_Interface_IngressAclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_IngressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry struct {
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-acl/openconfig-acl"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-acl/openconfig-acl"`
	SequenceId     *uint32 `path:"state/sequence-id|sequence-id" module:"openconfig-acl/openconfig-acl|openconfig-acl" shadow-path:"sequence-id" shadow-module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet_AclEntry) IsYANGGoStruct() {}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Acl_Interface_IngressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Acl_Interface_IngressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the Acl_Interface_IngressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// SetMatchedOctets sets the value of the leaf MatchedOctets in the Acl_Interface_IngressAclSet_AclEntry
// struct.
func (t *Acl_Interface_IngressAclSet_AclEntry) SetMatchedOctets(v uint64) {
	t.MatchedOctets = &v
}

// SetMatchedPackets sets the value of the leaf MatchedPackets in the Acl_Interface_IngressAclSet_AclEntry
// struct.
func (t *Acl_Interface_IngressAclSet_AclEntry) SetMatchedPackets(v uint64) {
	t.MatchedPackets = &v
}

// SetSequenceId sets the value of the leaf SequenceId in the Acl_Interface_IngressAclSet_AclEntry
// struct.
func (t *Acl_Interface_IngressAclSet_AclEntry) SetSequenceId(v uint32) {
	t.SequenceId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_IngressAclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_IngressAclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Acl_Interface_IngressAclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_IngressAclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_IngressAclSet_AclEntry.
func (*Acl_Interface_IngressAclSet_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_InterfaceRef represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-acl/openconfig-acl" shadow-path:"config/interface" shadow-module:"openconfig-acl/openconfig-acl"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-acl/openconfig-acl" shadow-path:"config/subinterface" shadow-module:"openconfig-acl/openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Acl_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Acl_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Acl_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Acl_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the Acl_Interface_InterfaceRef
// struct.
func (t *Acl_Interface_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the Acl_Interface_InterfaceRef
// struct.
func (t *Acl_Interface_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_InterfaceRef.
func (*Acl_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-acl"
}

// BgpGueIpv4GlobalPolicy represents the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-global-policy YANG schema element.
type BgpGueIpv4GlobalPolicy struct {
	DstPortIpv4 *uint16 `path:"state/dst-port-ipv4" module:"openconfig-bgp-gue/openconfig-bgp-gue" shadow-path:"config/dst-port-ipv4" shadow-module:"openconfig-bgp-gue/openconfig-bgp-gue"`
	DstPortIpv6 *uint16 `path:"state/dst-port-ipv6" module:"openconfig-bgp-gue/openconfig-bgp-gue" shadow-path:"config/dst-port-ipv6" shadow-module:"openconfig-bgp-gue/openconfig-bgp-gue"`
	Prefix      *string `path:"state/prefix|prefix" module:"openconfig-bgp-gue/openconfig-bgp-gue|openconfig-bgp-gue" shadow-path:"config/prefix|prefix" shadow-module:"openconfig-bgp-gue/openconfig-bgp-gue|openconfig-bgp-gue"`
	SrcIp       *string `path:"state/src-ip" module:"openconfig-bgp-gue/openconfig-bgp-gue" shadow-path:"config/src-ip" shadow-module:"openconfig-bgp-gue/openconfig-bgp-gue"`
}

// IsYANGGoStruct ensures that BgpGueIpv4GlobalPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpGueIpv4GlobalPolicy) IsYANGGoStruct() {}

// GetDstPortIpv4 retrieves the value of the leaf DstPortIpv4 from the BgpGueIpv4GlobalPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstPortIpv4 is set, it can
// safely use t.GetDstPortIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstPortIpv4 == nil' before retrieving the leaf's value.
func (t *BgpGueIpv4GlobalPolicy) GetDstPortIpv4() uint16 {
	if t == nil || t.DstPortIpv4 == nil {
		return 0
	}
	return *t.DstPortIpv4
}

// GetDstPortIpv6 retrieves the value of the leaf DstPortIpv6 from the BgpGueIpv4GlobalPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstPortIpv6 is set, it can
// safely use t.GetDstPortIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstPortIpv6 == nil' before retrieving the leaf's value.
func (t *BgpGueIpv4GlobalPolicy) GetDstPortIpv6() uint16 {
	if t == nil || t.DstPortIpv6 == nil {
		return 0
	}
	return *t.DstPortIpv6
}

// GetPrefix retrieves the value of the leaf Prefix from the BgpGueIpv4GlobalPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *BgpGueIpv4GlobalPolicy) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetSrcIp retrieves the value of the leaf SrcIp from the BgpGueIpv4GlobalPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIp is set, it can
// safely use t.GetSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIp == nil' before retrieving the leaf's value.
func (t *BgpGueIpv4GlobalPolicy) GetSrcIp() string {
	if t == nil || t.SrcIp == nil {
		return ""
	}
	return *t.SrcIp
}

// SetDstPortIpv4 sets the value of the leaf DstPortIpv4 in the BgpGueIpv4GlobalPolicy
// struct.
func (t *BgpGueIpv4GlobalPolicy) SetDstPortIpv4(v uint16) {
	t.DstPortIpv4 = &v
}

// SetDstPortIpv6 sets the value of the leaf DstPortIpv6 in the BgpGueIpv4GlobalPolicy
// struct.
func (t *BgpGueIpv4GlobalPolicy) SetDstPortIpv6(v uint16) {
	t.DstPortIpv6 = &v
}

// SetPrefix sets the value of the leaf Prefix in the BgpGueIpv4GlobalPolicy
// struct.
func (t *BgpGueIpv4GlobalPolicy) SetPrefix(v string) {
	t.Prefix = &v
}

// SetSrcIp sets the value of the leaf SrcIp in the BgpGueIpv4GlobalPolicy
// struct.
func (t *BgpGueIpv4GlobalPolicy) SetSrcIp(v string) {
	t.SrcIp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpGueIpv4GlobalPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpGueIpv4GlobalPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the BgpGueIpv4GlobalPolicy struct, which is a YANG list entry.
func (t *BgpGueIpv4GlobalPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpGueIpv4GlobalPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpGueIpv4GlobalPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpGueIpv4GlobalPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpGueIpv4GlobalPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpGueIpv4GlobalPolicy.
func (*BgpGueIpv4GlobalPolicy) ΛBelongingModule() string {
	return "openconfig-bgp-gue"
}

// BgpGueIpv6GlobalPolicy represents the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy YANG schema element.
type BgpGueIpv6GlobalPolicy struct {
	DstPortIpv6 *uint16 `path:"state/dst-port-ipv6" module:"openconfig-bgp-gue/openconfig-bgp-gue" shadow-path:"config/dst-port-ipv6" shadow-module:"openconfig-bgp-gue/openconfig-bgp-gue"`
	Prefix      *string `path:"state/prefix|prefix" module:"openconfig-bgp-gue/openconfig-bgp-gue|openconfig-bgp-gue" shadow-path:"config/prefix|prefix" shadow-module:"openconfig-bgp-gue/openconfig-bgp-gue|openconfig-bgp-gue"`
	SrcIp       *string `path:"state/src-ip" module:"openconfig-bgp-gue/openconfig-bgp-gue" shadow-path:"config/src-ip" shadow-module:"openconfig-bgp-gue/openconfig-bgp-gue"`
}

// IsYANGGoStruct ensures that BgpGueIpv6GlobalPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BgpGueIpv6GlobalPolicy) IsYANGGoStruct() {}

// GetDstPortIpv6 retrieves the value of the leaf DstPortIpv6 from the BgpGueIpv6GlobalPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstPortIpv6 is set, it can
// safely use t.GetDstPortIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstPortIpv6 == nil' before retrieving the leaf's value.
func (t *BgpGueIpv6GlobalPolicy) GetDstPortIpv6() uint16 {
	if t == nil || t.DstPortIpv6 == nil {
		return 0
	}
	return *t.DstPortIpv6
}

// GetPrefix retrieves the value of the leaf Prefix from the BgpGueIpv6GlobalPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *BgpGueIpv6GlobalPolicy) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetSrcIp retrieves the value of the leaf SrcIp from the BgpGueIpv6GlobalPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIp is set, it can
// safely use t.GetSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIp == nil' before retrieving the leaf's value.
func (t *BgpGueIpv6GlobalPolicy) GetSrcIp() string {
	if t == nil || t.SrcIp == nil {
		return ""
	}
	return *t.SrcIp
}

// SetDstPortIpv6 sets the value of the leaf DstPortIpv6 in the BgpGueIpv6GlobalPolicy
// struct.
func (t *BgpGueIpv6GlobalPolicy) SetDstPortIpv6(v uint16) {
	t.DstPortIpv6 = &v
}

// SetPrefix sets the value of the leaf Prefix in the BgpGueIpv6GlobalPolicy
// struct.
func (t *BgpGueIpv6GlobalPolicy) SetPrefix(v string) {
	t.Prefix = &v
}

// SetSrcIp sets the value of the leaf SrcIp in the BgpGueIpv6GlobalPolicy
// struct.
func (t *BgpGueIpv6GlobalPolicy) SetSrcIp(v string) {
	t.SrcIp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the BgpGueIpv6GlobalPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *BgpGueIpv6GlobalPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the BgpGueIpv6GlobalPolicy struct, which is a YANG list entry.
func (t *BgpGueIpv6GlobalPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpGueIpv6GlobalPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["BgpGueIpv6GlobalPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *BgpGueIpv6GlobalPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *BgpGueIpv6GlobalPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of BgpGueIpv6GlobalPolicy.
func (*BgpGueIpv6GlobalPolicy) ΛBelongingModule() string {
	return "openconfig-bgp-gue"
}

// Component represents the /openconfig-platform/components/component YANG schema element.
type Component struct {
	AllocatedPower       *uint32                                 `path:"state/allocated-power" module:"openconfig-platform/openconfig-platform"`
	Backplane            *Component_Backplane                    `path:"backplane" module:"openconfig-platform"`
	BaseMacAddress       *string                                 `path:"state/base-mac-address" module:"openconfig-platform/openconfig-platform"`
	Chassis              *Component_Chassis                      `path:"chassis" module:"openconfig-platform"`
	CleiCode             *string                                 `path:"state/clei-code" module:"openconfig-platform/openconfig-platform"`
	ControllerCard       *Component_ControllerCard               `path:"controller-card" module:"openconfig-platform"`
	Cpu                  *Component_Cpu                          `path:"cpu" module:"openconfig-platform"`
	Description          *string                                 `path:"state/description" module:"openconfig-platform/openconfig-platform"`
	Empty                *bool                                   `path:"state/empty" module:"openconfig-platform/openconfig-platform"`
	EquipmentFailure     *bool                                   `path:"state/equipment-failure" module:"openconfig-platform/openconfig-alarms"`
	EquipmentMismatch    *bool                                   `path:"state/equipment-mismatch" module:"openconfig-platform/openconfig-alarms"`
	Fabric               *Component_Fabric                       `path:"fabric" module:"openconfig-platform"`
	Fan                  *Component_Fan                          `path:"fan" module:"openconfig-platform"`
	FirmwareVersion      *string                                 `path:"state/firmware-version" module:"openconfig-platform/openconfig-platform"`
	HardwareVersion      *string                                 `path:"state/hardware-version" module:"openconfig-platform/openconfig-platform"`
	Id                   *string                                 `path:"state/id" module:"openconfig-platform/openconfig-platform"`
	InstallComponent     *string                                 `path:"state/install-component" module:"openconfig-platform/openconfig-platform"`
	InstallPosition      *string                                 `path:"state/install-position" module:"openconfig-platform/openconfig-platform"`
	IntegratedCircuit    *Component_IntegratedCircuit            `path:"integrated-circuit" module:"openconfig-platform"`
	LastPoweroffReason   *Component_LastPoweroffReason           `path:"state/last-poweroff-reason" module:"openconfig-platform/openconfig-platform"`
	LastPoweroffTime     *uint64                                 `path:"state/last-poweroff-time" module:"openconfig-platform/openconfig-platform"`
	LastRebootReason     E_PlatformTypes_COMPONENT_REBOOT_REASON `path:"state/last-reboot-reason" module:"openconfig-platform/openconfig-platform"`
	LastRebootTime       *uint64                                 `path:"state/last-reboot-time" module:"openconfig-platform/openconfig-platform"`
	LastSwitchoverReason *Component_LastSwitchoverReason         `path:"state/last-switchover-reason" module:"openconfig-platform/openconfig-platform"`
	LastSwitchoverTime   *uint64                                 `path:"state/last-switchover-time" module:"openconfig-platform/openconfig-platform"`
	Location             *string                                 `path:"state/location" module:"openconfig-platform/openconfig-platform"`
	Memory               *Component_Memory                       `path:"state/memory" module:"openconfig-platform/openconfig-platform"`
	MfgDate              *string                                 `path:"state/mfg-date" module:"openconfig-platform/openconfig-platform"`
	MfgName              *string                                 `path:"state/mfg-name" module:"openconfig-platform/openconfig-platform"`
	ModelName            *string                                 `path:"state/model-name" module:"openconfig-platform/openconfig-platform"`
	Name                 *string                                 `path:"state/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform" shadow-path:"config/name|name" shadow-module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	OperStatus           E_PlatformTypes_COMPONENT_OPER_STATUS   `path:"state/oper-status" module:"openconfig-platform/openconfig-platform"`
	Parent               *string                                 `path:"state/parent" module:"openconfig-platform/openconfig-platform"`
	PartNo               *string                                 `path:"state/part-no" module:"openconfig-platform/openconfig-platform"`
	Pcie                 *Component_Pcie                         `path:"state/pcie" module:"openconfig-platform/openconfig-platform"`
	Port                 *Component_Port                         `path:"port" module:"openconfig-platform"`
	PowerSupply          *Component_PowerSupply                  `path:"power-supply" module:"openconfig-platform"`
	Property             map[string]*Component_Property          `path:"properties/property" module:"openconfig-platform/openconfig-platform"`
	RedundantRole        E_PlatformTypes_ComponentRedundantRole  `path:"state/redundant-role" module:"openconfig-platform/openconfig-platform"`
	Removable            *bool                                   `path:"state/removable" module:"openconfig-platform/openconfig-platform"`
	SerialNo             *string                                 `path:"state/serial-no" module:"openconfig-platform/openconfig-platform"`
	SoftwareModule       *Component_SoftwareModule               `path:"software-module" module:"openconfig-platform"`
	SoftwareVersion      *string                                 `path:"state/software-version" module:"openconfig-platform/openconfig-platform"`
	Storage              *Component_Storage                      `path:"storage" module:"openconfig-platform"`
	Subcomponent         map[string]*Component_Subcomponent      `path:"subcomponents/subcomponent" module:"openconfig-platform/openconfig-platform"`
	SwitchoverReady      *bool                                   `path:"state/switchover-ready" module:"openconfig-platform/openconfig-platform"`
	Temperature          *Component_Temperature                  `path:"state/temperature" module:"openconfig-platform/openconfig-platform"`
	Transceiver          *Component_Transceiver                  `path:"transceiver" module:"openconfig-platform-transceiver"`
	Type                 Component_Type_Union                    `path:"state/type" module:"openconfig-platform/openconfig-platform"`
	UsedPower            *uint32                                 `path:"state/used-power" module:"openconfig-platform/openconfig-platform"`
}

// IsYANGGoStruct ensures that Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewProperty(Name string) (*Component_Property, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &Component_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// RenameProperty renames an entry in the list Property within
// the Component struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component) RenameProperty(oldK, newK string) error {
	if _, ok := t.Property[newK]; ok {
		return fmt.Errorf("key %v already exists in Property", newK)
	}

	e, ok := t.Property[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Property", oldK)
	}
	e.Name = &newK

	t.Property[newK] = e
	delete(t.Property, oldK)
	return nil
}

// GetOrCreatePropertyMap returns the list (map) from Component.
//
// It initializes the field if not already initialized.
func (t *Component) GetOrCreatePropertyMap() map[string]*Component_Property {
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}
	return t.Property
}

// GetOrCreateProperty retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateProperty(Name string) *Component_Property {

	key := Name

	if v, ok := t.Property[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProperty(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProperty got unexpected error: %v", err))
	}
	return v
}

// GetProperty retrieves the value with the specified key from
// the Property map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetProperty(Name string) *Component_Property {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Property[key]; ok {
		return lm
	}
	return nil
}

// DeleteProperty deletes the value with the specified keys from
// the receiver Component. If there is no such element, the function
// is a no-op.
func (t *Component) DeleteProperty(Name string) {
	key := Name

	delete(t.Property, key)
}

// AppendProperty appends the supplied Component_Property struct to the
// list Property of Component. If the key value(s) specified in
// the supplied Component_Property already exist in the list, an error is
// returned.
func (t *Component) AppendProperty(v *Component_Property) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}

	if _, ok := t.Property[key]; ok {
		return fmt.Errorf("duplicate key for list Property %v", key)
	}

	t.Property[key] = v
	return nil
}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewSubcomponent(Name string) (*Component_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &Component_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the Component struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponentMap returns the list (map) from Component.
//
// It initializes the field if not already initialized.
func (t *Component) GetOrCreateSubcomponentMap() map[string]*Component_Subcomponent {
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}
	return t.Subcomponent
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateSubcomponent(Name string) *Component_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetSubcomponent(Name string) *Component_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubcomponent deletes the value with the specified keys from
// the receiver Component. If there is no such element, the function
// is a no-op.
func (t *Component) DeleteSubcomponent(Name string) {
	key := Name

	delete(t.Subcomponent, key)
}

// AppendSubcomponent appends the supplied Component_Subcomponent struct to the
// list Subcomponent of Component. If the key value(s) specified in
// the supplied Component_Subcomponent already exist in the list, an error is
// returned.
func (t *Component) AppendSubcomponent(v *Component_Subcomponent) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateBackplane() *Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateChassis() *Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &Component_Chassis{}
	return t.Chassis
}

// GetOrCreateControllerCard retrieves the value of the ControllerCard field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateControllerCard() *Component_ControllerCard {
	if t.ControllerCard != nil {
		return t.ControllerCard
	}
	t.ControllerCard = &Component_ControllerCard{}
	return t.ControllerCard
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateCpu() *Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFabric() *Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFan() *Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateIntegratedCircuit() *Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreateLastPoweroffReason retrieves the value of the LastPoweroffReason field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateLastPoweroffReason() *Component_LastPoweroffReason {
	if t.LastPoweroffReason != nil {
		return t.LastPoweroffReason
	}
	t.LastPoweroffReason = &Component_LastPoweroffReason{}
	return t.LastPoweroffReason
}

// GetOrCreateLastSwitchoverReason retrieves the value of the LastSwitchoverReason field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateLastSwitchoverReason() *Component_LastSwitchoverReason {
	if t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	t.LastSwitchoverReason = &Component_LastSwitchoverReason{}
	return t.LastSwitchoverReason
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateMemory() *Component_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &Component_Memory{}
	return t.Memory
}

// GetOrCreatePcie retrieves the value of the Pcie field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePcie() *Component_Pcie {
	if t.Pcie != nil {
		return t.Pcie
	}
	t.Pcie = &Component_Pcie{}
	return t.Pcie
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePort() *Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePowerSupply() *Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateSoftwareModule retrieves the value of the SoftwareModule field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateSoftwareModule() *Component_SoftwareModule {
	if t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	t.SoftwareModule = &Component_SoftwareModule{}
	return t.SoftwareModule
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateStorage() *Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &Component_Storage{}
	return t.Storage
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateTemperature() *Component_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &Component_Temperature{}
	return t.Temperature
}

// GetOrCreateTransceiver retrieves the value of the Transceiver field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateTransceiver() *Component_Transceiver {
	if t.Transceiver != nil {
		return t.Transceiver
	}
	t.Transceiver = &Component_Transceiver{}
	return t.Transceiver
}

// GetBackplane returns the value of the Backplane struct pointer
// from Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetBackplane() *Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetChassis() *Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetControllerCard returns the value of the ControllerCard struct pointer
// from Component. If the receiver or the field ControllerCard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetControllerCard() *Component_ControllerCard {
	if t != nil && t.ControllerCard != nil {
		return t.ControllerCard
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetCpu() *Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFabric() *Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFan() *Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetIntegratedCircuit() *Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetLastPoweroffReason returns the value of the LastPoweroffReason struct pointer
// from Component. If the receiver or the field LastPoweroffReason is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetLastPoweroffReason() *Component_LastPoweroffReason {
	if t != nil && t.LastPoweroffReason != nil {
		return t.LastPoweroffReason
	}
	return nil
}

// GetLastSwitchoverReason returns the value of the LastSwitchoverReason struct pointer
// from Component. If the receiver or the field LastSwitchoverReason is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetLastSwitchoverReason() *Component_LastSwitchoverReason {
	if t != nil && t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from Component. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetMemory() *Component_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetPcie returns the value of the Pcie struct pointer
// from Component. If the receiver or the field Pcie is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPcie() *Component_Pcie {
	if t != nil && t.Pcie != nil {
		return t.Pcie
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPort() *Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPowerSupply() *Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetSoftwareModule returns the value of the SoftwareModule struct pointer
// from Component. If the receiver or the field SoftwareModule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetSoftwareModule() *Component_SoftwareModule {
	if t != nil && t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetStorage() *Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from Component. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetTemperature() *Component_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// GetTransceiver returns the value of the Transceiver struct pointer
// from Component. If the receiver or the field Transceiver is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetTransceiver() *Component_Transceiver {
	if t != nil && t.Transceiver != nil {
		return t.Transceiver
	}
	return nil
}

// GetAllocatedPower retrieves the value of the leaf AllocatedPower from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocatedPower is set, it can
// safely use t.GetAllocatedPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocatedPower == nil' before retrieving the leaf's value.
func (t *Component) GetAllocatedPower() uint32 {
	if t == nil || t.AllocatedPower == nil {
		return 0
	}
	return *t.AllocatedPower
}

// GetBaseMacAddress retrieves the value of the leaf BaseMacAddress from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseMacAddress is set, it can
// safely use t.GetBaseMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseMacAddress == nil' before retrieving the leaf's value.
func (t *Component) GetBaseMacAddress() string {
	if t == nil || t.BaseMacAddress == nil {
		return ""
	}
	return *t.BaseMacAddress
}

// GetCleiCode retrieves the value of the leaf CleiCode from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CleiCode is set, it can
// safely use t.GetCleiCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CleiCode == nil' before retrieving the leaf's value.
func (t *Component) GetCleiCode() string {
	if t == nil || t.CleiCode == nil {
		return ""
	}
	return *t.CleiCode
}

// GetDescription retrieves the value of the leaf Description from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Component) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEmpty retrieves the value of the leaf Empty from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *Component) GetEmpty() bool {
	if t == nil || t.Empty == nil {
		return false
	}
	return *t.Empty
}

// GetEquipmentFailure retrieves the value of the leaf EquipmentFailure from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EquipmentFailure is set, it can
// safely use t.GetEquipmentFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EquipmentFailure == nil' before retrieving the leaf's value.
func (t *Component) GetEquipmentFailure() bool {
	if t == nil || t.EquipmentFailure == nil {
		return false
	}
	return *t.EquipmentFailure
}

// GetEquipmentMismatch retrieves the value of the leaf EquipmentMismatch from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EquipmentMismatch is set, it can
// safely use t.GetEquipmentMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EquipmentMismatch == nil' before retrieving the leaf's value.
func (t *Component) GetEquipmentMismatch() bool {
	if t == nil || t.EquipmentMismatch == nil {
		return false
	}
	return *t.EquipmentMismatch
}

// GetFirmwareVersion retrieves the value of the leaf FirmwareVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirmwareVersion is set, it can
// safely use t.GetFirmwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirmwareVersion == nil' before retrieving the leaf's value.
func (t *Component) GetFirmwareVersion() string {
	if t == nil || t.FirmwareVersion == nil {
		return ""
	}
	return *t.FirmwareVersion
}

// GetHardwareVersion retrieves the value of the leaf HardwareVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HardwareVersion is set, it can
// safely use t.GetHardwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HardwareVersion == nil' before retrieving the leaf's value.
func (t *Component) GetHardwareVersion() string {
	if t == nil || t.HardwareVersion == nil {
		return ""
	}
	return *t.HardwareVersion
}

// GetId retrieves the value of the leaf Id from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Component) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetInstallComponent retrieves the value of the leaf InstallComponent from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallComponent is set, it can
// safely use t.GetInstallComponent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallComponent == nil' before retrieving the leaf's value.
func (t *Component) GetInstallComponent() string {
	if t == nil || t.InstallComponent == nil {
		return ""
	}
	return *t.InstallComponent
}

// GetInstallPosition retrieves the value of the leaf InstallPosition from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallPosition is set, it can
// safely use t.GetInstallPosition() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallPosition == nil' before retrieving the leaf's value.
func (t *Component) GetInstallPosition() string {
	if t == nil || t.InstallPosition == nil {
		return ""
	}
	return *t.InstallPosition
}

// GetLastPoweroffTime retrieves the value of the leaf LastPoweroffTime from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastPoweroffTime is set, it can
// safely use t.GetLastPoweroffTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastPoweroffTime == nil' before retrieving the leaf's value.
func (t *Component) GetLastPoweroffTime() uint64 {
	if t == nil || t.LastPoweroffTime == nil {
		return 0
	}
	return *t.LastPoweroffTime
}

// GetLastRebootReason retrieves the value of the leaf LastRebootReason from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastRebootReason is set, it can
// safely use t.GetLastRebootReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastRebootReason == nil' before retrieving the leaf's value.
func (t *Component) GetLastRebootReason() E_PlatformTypes_COMPONENT_REBOOT_REASON {
	if t == nil || t.LastRebootReason == 0 {
		return 0
	}
	return t.LastRebootReason
}

// GetLastRebootTime retrieves the value of the leaf LastRebootTime from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastRebootTime is set, it can
// safely use t.GetLastRebootTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastRebootTime == nil' before retrieving the leaf's value.
func (t *Component) GetLastRebootTime() uint64 {
	if t == nil || t.LastRebootTime == nil {
		return 0
	}
	return *t.LastRebootTime
}

// GetLastSwitchoverTime retrieves the value of the leaf LastSwitchoverTime from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastSwitchoverTime is set, it can
// safely use t.GetLastSwitchoverTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastSwitchoverTime == nil' before retrieving the leaf's value.
func (t *Component) GetLastSwitchoverTime() uint64 {
	if t == nil || t.LastSwitchoverTime == nil {
		return 0
	}
	return *t.LastSwitchoverTime
}

// GetLocation retrieves the value of the leaf Location from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *Component) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetMfgDate retrieves the value of the leaf MfgDate from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MfgDate is set, it can
// safely use t.GetMfgDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MfgDate == nil' before retrieving the leaf's value.
func (t *Component) GetMfgDate() string {
	if t == nil || t.MfgDate == nil {
		return ""
	}
	return *t.MfgDate
}

// GetMfgName retrieves the value of the leaf MfgName from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MfgName is set, it can
// safely use t.GetMfgName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MfgName == nil' before retrieving the leaf's value.
func (t *Component) GetMfgName() string {
	if t == nil || t.MfgName == nil {
		return ""
	}
	return *t.MfgName
}

// GetModelName retrieves the value of the leaf ModelName from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModelName is set, it can
// safely use t.GetModelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModelName == nil' before retrieving the leaf's value.
func (t *Component) GetModelName() string {
	if t == nil || t.ModelName == nil {
		return ""
	}
	return *t.ModelName
}

// GetName retrieves the value of the leaf Name from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Component) GetOperStatus() E_PlatformTypes_COMPONENT_OPER_STATUS {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetParent retrieves the value of the leaf Parent from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Parent is set, it can
// safely use t.GetParent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Parent == nil' before retrieving the leaf's value.
func (t *Component) GetParent() string {
	if t == nil || t.Parent == nil {
		return ""
	}
	return *t.Parent
}

// GetPartNo retrieves the value of the leaf PartNo from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartNo is set, it can
// safely use t.GetPartNo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartNo == nil' before retrieving the leaf's value.
func (t *Component) GetPartNo() string {
	if t == nil || t.PartNo == nil {
		return ""
	}
	return *t.PartNo
}

// GetRedundantRole retrieves the value of the leaf RedundantRole from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantRole is set, it can
// safely use t.GetRedundantRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantRole == nil' before retrieving the leaf's value.
func (t *Component) GetRedundantRole() E_PlatformTypes_ComponentRedundantRole {
	if t == nil || t.RedundantRole == 0 {
		return 0
	}
	return t.RedundantRole
}

// GetRemovable retrieves the value of the leaf Removable from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Removable is set, it can
// safely use t.GetRemovable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Removable == nil' before retrieving the leaf's value.
func (t *Component) GetRemovable() bool {
	if t == nil || t.Removable == nil {
		return false
	}
	return *t.Removable
}

// GetSerialNo retrieves the value of the leaf SerialNo from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SerialNo is set, it can
// safely use t.GetSerialNo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SerialNo == nil' before retrieving the leaf's value.
func (t *Component) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareVersion is set, it can
// safely use t.GetSoftwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareVersion == nil' before retrieving the leaf's value.
func (t *Component) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// GetSwitchoverReady retrieves the value of the leaf SwitchoverReady from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchoverReady is set, it can
// safely use t.GetSwitchoverReady() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchoverReady == nil' before retrieving the leaf's value.
func (t *Component) GetSwitchoverReady() bool {
	if t == nil || t.SwitchoverReady == nil {
		return false
	}
	return *t.SwitchoverReady
}

// GetType retrieves the value of the leaf Type from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Component) GetType() Component_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// GetUsedPower retrieves the value of the leaf UsedPower from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedPower is set, it can
// safely use t.GetUsedPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedPower == nil' before retrieving the leaf's value.
func (t *Component) GetUsedPower() uint32 {
	if t == nil || t.UsedPower == nil {
		return 0
	}
	return *t.UsedPower
}

// SetAllocatedPower sets the value of the leaf AllocatedPower in the Component
// struct.
func (t *Component) SetAllocatedPower(v uint32) {
	t.AllocatedPower = &v
}

// SetBaseMacAddress sets the value of the leaf BaseMacAddress in the Component
// struct.
func (t *Component) SetBaseMacAddress(v string) {
	t.BaseMacAddress = &v
}

// SetCleiCode sets the value of the leaf CleiCode in the Component
// struct.
func (t *Component) SetCleiCode(v string) {
	t.CleiCode = &v
}

// SetDescription sets the value of the leaf Description in the Component
// struct.
func (t *Component) SetDescription(v string) {
	t.Description = &v
}

// SetEmpty sets the value of the leaf Empty in the Component
// struct.
func (t *Component) SetEmpty(v bool) {
	t.Empty = &v
}

// SetEquipmentFailure sets the value of the leaf EquipmentFailure in the Component
// struct.
func (t *Component) SetEquipmentFailure(v bool) {
	t.EquipmentFailure = &v
}

// SetEquipmentMismatch sets the value of the leaf EquipmentMismatch in the Component
// struct.
func (t *Component) SetEquipmentMismatch(v bool) {
	t.EquipmentMismatch = &v
}

// SetFirmwareVersion sets the value of the leaf FirmwareVersion in the Component
// struct.
func (t *Component) SetFirmwareVersion(v string) {
	t.FirmwareVersion = &v
}

// SetHardwareVersion sets the value of the leaf HardwareVersion in the Component
// struct.
func (t *Component) SetHardwareVersion(v string) {
	t.HardwareVersion = &v
}

// SetId sets the value of the leaf Id in the Component
// struct.
func (t *Component) SetId(v string) {
	t.Id = &v
}

// SetInstallComponent sets the value of the leaf InstallComponent in the Component
// struct.
func (t *Component) SetInstallComponent(v string) {
	t.InstallComponent = &v
}

// SetInstallPosition sets the value of the leaf InstallPosition in the Component
// struct.
func (t *Component) SetInstallPosition(v string) {
	t.InstallPosition = &v
}

// SetLastPoweroffTime sets the value of the leaf LastPoweroffTime in the Component
// struct.
func (t *Component) SetLastPoweroffTime(v uint64) {
	t.LastPoweroffTime = &v
}

// SetLastRebootReason sets the value of the leaf LastRebootReason in the Component
// struct.
func (t *Component) SetLastRebootReason(v E_PlatformTypes_COMPONENT_REBOOT_REASON) {
	t.LastRebootReason = v
}

// SetLastRebootTime sets the value of the leaf LastRebootTime in the Component
// struct.
func (t *Component) SetLastRebootTime(v uint64) {
	t.LastRebootTime = &v
}

// SetLastSwitchoverTime sets the value of the leaf LastSwitchoverTime in the Component
// struct.
func (t *Component) SetLastSwitchoverTime(v uint64) {
	t.LastSwitchoverTime = &v
}

// SetLocation sets the value of the leaf Location in the Component
// struct.
func (t *Component) SetLocation(v string) {
	t.Location = &v
}

// SetMfgDate sets the value of the leaf MfgDate in the Component
// struct.
func (t *Component) SetMfgDate(v string) {
	t.MfgDate = &v
}

// SetMfgName sets the value of the leaf MfgName in the Component
// struct.
func (t *Component) SetMfgName(v string) {
	t.MfgName = &v
}

// SetModelName sets the value of the leaf ModelName in the Component
// struct.
func (t *Component) SetModelName(v string) {
	t.ModelName = &v
}

// SetName sets the value of the leaf Name in the Component
// struct.
func (t *Component) SetName(v string) {
	t.Name = &v
}

// SetOperStatus sets the value of the leaf OperStatus in the Component
// struct.
func (t *Component) SetOperStatus(v E_PlatformTypes_COMPONENT_OPER_STATUS) {
	t.OperStatus = v
}

// SetParent sets the value of the leaf Parent in the Component
// struct.
func (t *Component) SetParent(v string) {
	t.Parent = &v
}

// SetPartNo sets the value of the leaf PartNo in the Component
// struct.
func (t *Component) SetPartNo(v string) {
	t.PartNo = &v
}

// SetRedundantRole sets the value of the leaf RedundantRole in the Component
// struct.
func (t *Component) SetRedundantRole(v E_PlatformTypes_ComponentRedundantRole) {
	t.RedundantRole = v
}

// SetRemovable sets the value of the leaf Removable in the Component
// struct.
func (t *Component) SetRemovable(v bool) {
	t.Removable = &v
}

// SetSerialNo sets the value of the leaf SerialNo in the Component
// struct.
func (t *Component) SetSerialNo(v string) {
	t.SerialNo = &v
}

// SetSoftwareVersion sets the value of the leaf SoftwareVersion in the Component
// struct.
func (t *Component) SetSoftwareVersion(v string) {
	t.SoftwareVersion = &v
}

// SetSwitchoverReady sets the value of the leaf SwitchoverReady in the Component
// struct.
func (t *Component) SetSwitchoverReady(v bool) {
	t.SwitchoverReady = &v
}

// SetType sets the value of the leaf Type in the Component
// struct.
func (t *Component) SetType(v Component_Type_Union) {
	t.Type = v
}

// SetUsedPower sets the value of the leaf UsedPower in the Component
// struct.
func (t *Component) SetUsedPower(v uint32) {
	t.UsedPower = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Empty == nil {
		var v bool = false
		t.Empty = &v
	}
	if t.EquipmentFailure == nil {
		var v bool = false
		t.EquipmentFailure = &v
	}
	if t.EquipmentMismatch == nil {
		var v bool = false
		t.EquipmentMismatch = &v
	}
	t.Backplane.PopulateDefaults()
	t.Chassis.PopulateDefaults()
	t.ControllerCard.PopulateDefaults()
	t.Cpu.PopulateDefaults()
	t.Fabric.PopulateDefaults()
	t.Fan.PopulateDefaults()
	t.IntegratedCircuit.PopulateDefaults()
	t.LastPoweroffReason.PopulateDefaults()
	t.LastSwitchoverReason.PopulateDefaults()
	t.Memory.PopulateDefaults()
	t.Pcie.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.PowerSupply.PopulateDefaults()
	t.SoftwareModule.PopulateDefaults()
	t.Storage.PopulateDefaults()
	t.Temperature.PopulateDefaults()
	t.Transceiver.PopulateDefaults()
	for _, e := range t.Property {
		e.PopulateDefaults()
	}
	for _, e := range t.Subcomponent {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Component struct, which is a YANG list entry.
func (t *Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component.
func (*Component) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_Backplane struct {
}

// IsYANGGoStruct ensures that Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Backplane) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Backplane
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Backplane) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Backplane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Backplane.
func (*Component_Backplane) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_Chassis struct {
	Utilization *Component_Chassis_Utilization `path:"utilization" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis) IsYANGGoStruct() {}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *Component_Chassis) GetOrCreateUtilization() *Component_Chassis_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &Component_Chassis_Utilization{}
	return t.Utilization
}

// GetUtilization returns the value of the Utilization struct pointer
// from Component_Chassis. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Chassis) GetUtilization() *Component_Chassis_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Chassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Chassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Utilization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Chassis.
func (*Component_Chassis) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Chassis_Utilization represents the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_Utilization struct {
	Resource map[string]*Component_Chassis_Utilization_Resource `path:"resources/resource" module:"openconfig-platform/openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Chassis_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis_Utilization) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// Component_Chassis_Utilization struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Chassis_Utilization) NewResource(Name string) (*Component_Chassis_Utilization_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_Chassis_Utilization_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &Component_Chassis_Utilization_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the Component_Chassis_Utilization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Chassis_Utilization) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResourceMap returns the list (map) from Component_Chassis_Utilization.
//
// It initializes the field if not already initialized.
func (t *Component_Chassis_Utilization) GetOrCreateResourceMap() map[string]*Component_Chassis_Utilization_Resource {
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_Chassis_Utilization_Resource)
	}
	return t.Resource
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver Component_Chassis_Utilization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Chassis_Utilization) GetOrCreateResource(Name string) *Component_Chassis_Utilization_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of Component_Chassis_Utilization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Chassis_Utilization) GetResource(Name string) *Component_Chassis_Utilization_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver Component_Chassis_Utilization. If there is no such element, the function
// is a no-op.
func (t *Component_Chassis_Utilization) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied Component_Chassis_Utilization_Resource struct to the
// list Resource of Component_Chassis_Utilization. If the key value(s) specified in
// the supplied Component_Chassis_Utilization_Resource already exist in the list, an error is
// returned.
func (t *Component_Chassis_Utilization) AppendResource(v *Component_Chassis_Utilization_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_Chassis_Utilization_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Chassis_Utilization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Chassis_Utilization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis_Utilization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Chassis_Utilization.
func (*Component_Chassis_Utilization) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Chassis_Utilization_Resource represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_Resource struct {
	Committed                  *uint64 `path:"state/committed" module:"openconfig-platform/openconfig-platform"`
	Free                       *uint64 `path:"state/free" module:"openconfig-platform/openconfig-platform"`
	HighWatermark              *uint64 `path:"state/high-watermark" module:"openconfig-platform/openconfig-platform"`
	LastHighWatermark          *uint64 `path:"state/last-high-watermark" module:"openconfig-platform/openconfig-platform"`
	MaxLimit                   *uint64 `path:"state/max-limit" module:"openconfig-platform/openconfig-platform"`
	Name                       *string `path:"state/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform" shadow-path:"config/name|name" shadow-module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	Used                       *uint64 `path:"state/used" module:"openconfig-platform/openconfig-platform"`
	UsedThresholdUpper         *uint8  `path:"state/used-threshold-upper" module:"openconfig-platform/openconfig-platform" shadow-path:"config/used-threshold-upper" shadow-module:"openconfig-platform/openconfig-platform"`
	UsedThresholdUpperClear    *uint8  `path:"state/used-threshold-upper-clear" module:"openconfig-platform/openconfig-platform" shadow-path:"config/used-threshold-upper-clear" shadow-module:"openconfig-platform/openconfig-platform"`
	UsedThresholdUpperExceeded *bool   `path:"state/used-threshold-upper-exceeded" module:"openconfig-platform/openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Chassis_Utilization_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis_Utilization_Resource) IsYANGGoStruct() {}

// GetCommitted retrieves the value of the leaf Committed from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Committed is set, it can
// safely use t.GetCommitted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Committed == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetCommitted() uint64 {
	if t == nil || t.Committed == nil {
		return 0
	}
	return *t.Committed
}

// GetFree retrieves the value of the leaf Free from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetHighWatermark() uint64 {
	if t == nil || t.HighWatermark == nil {
		return 0
	}
	return *t.HighWatermark
}

// GetLastHighWatermark retrieves the value of the leaf LastHighWatermark from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastHighWatermark is set, it can
// safely use t.GetLastHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastHighWatermark == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetLastHighWatermark() uint64 {
	if t == nil || t.LastHighWatermark == nil {
		return 0
	}
	return *t.LastHighWatermark
}

// GetMaxLimit retrieves the value of the leaf MaxLimit from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLimit is set, it can
// safely use t.GetMaxLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLimit == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetMaxLimit() uint64 {
	if t == nil || t.MaxLimit == nil {
		return 0
	}
	return *t.MaxLimit
}

// GetName retrieves the value of the leaf Name from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUsed retrieves the value of the leaf Used from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// GetUsedThresholdUpper retrieves the value of the leaf UsedThresholdUpper from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpper is set, it can
// safely use t.GetUsedThresholdUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpper == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsedThresholdUpper() uint8 {
	if t == nil || t.UsedThresholdUpper == nil {
		return 0
	}
	return *t.UsedThresholdUpper
}

// GetUsedThresholdUpperClear retrieves the value of the leaf UsedThresholdUpperClear from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperClear is set, it can
// safely use t.GetUsedThresholdUpperClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperClear == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsedThresholdUpperClear() uint8 {
	if t == nil || t.UsedThresholdUpperClear == nil {
		return 0
	}
	return *t.UsedThresholdUpperClear
}

// GetUsedThresholdUpperExceeded retrieves the value of the leaf UsedThresholdUpperExceeded from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperExceeded is set, it can
// safely use t.GetUsedThresholdUpperExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperExceeded == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsedThresholdUpperExceeded() bool {
	if t == nil || t.UsedThresholdUpperExceeded == nil {
		return false
	}
	return *t.UsedThresholdUpperExceeded
}

// SetCommitted sets the value of the leaf Committed in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetCommitted(v uint64) {
	t.Committed = &v
}

// SetFree sets the value of the leaf Free in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetFree(v uint64) {
	t.Free = &v
}

// SetHighWatermark sets the value of the leaf HighWatermark in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetHighWatermark(v uint64) {
	t.HighWatermark = &v
}

// SetLastHighWatermark sets the value of the leaf LastHighWatermark in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetLastHighWatermark(v uint64) {
	t.LastHighWatermark = &v
}

// SetMaxLimit sets the value of the leaf MaxLimit in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetMaxLimit(v uint64) {
	t.MaxLimit = &v
}

// SetName sets the value of the leaf Name in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetName(v string) {
	t.Name = &v
}

// SetUsed sets the value of the leaf Used in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetUsed(v uint64) {
	t.Used = &v
}

// SetUsedThresholdUpper sets the value of the leaf UsedThresholdUpper in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetUsedThresholdUpper(v uint8) {
	t.UsedThresholdUpper = &v
}

// SetUsedThresholdUpperClear sets the value of the leaf UsedThresholdUpperClear in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetUsedThresholdUpperClear(v uint8) {
	t.UsedThresholdUpperClear = &v
}

// SetUsedThresholdUpperExceeded sets the value of the leaf UsedThresholdUpperExceeded in the Component_Chassis_Utilization_Resource
// struct.
func (t *Component_Chassis_Utilization_Resource) SetUsedThresholdUpperExceeded(v bool) {
	t.UsedThresholdUpperExceeded = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Chassis_Utilization_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Chassis_Utilization_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Chassis_Utilization_Resource struct, which is a YANG list entry.
func (t *Component_Chassis_Utilization_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis_Utilization_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis_Utilization_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Chassis_Utilization_Resource.
func (*Component_Chassis_Utilization_Resource) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_ControllerCard represents the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCard struct {
}

// IsYANGGoStruct ensures that Component_ControllerCard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_ControllerCard) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_ControllerCard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_ControllerCard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_ControllerCard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_ControllerCard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_ControllerCard) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_ControllerCard) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_ControllerCard.
func (*Component_ControllerCard) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_Cpu struct {
	Utilization *Component_Cpu_Utilization `path:"utilization" module:"openconfig-platform-cpu"`
}

// IsYANGGoStruct ensures that Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Cpu) IsYANGGoStruct() {}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *Component_Cpu) GetOrCreateUtilization() *Component_Cpu_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &Component_Cpu_Utilization{}
	return t.Utilization
}

// GetUtilization returns the value of the Utilization struct pointer
// from Component_Cpu. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Cpu) GetUtilization() *Component_Cpu_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Cpu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Cpu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Utilization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Cpu.
func (*Component_Cpu) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Cpu_Utilization represents the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_Utilization struct {
	Avg      *uint8  `path:"state/avg" module:"openconfig-platform-cpu/openconfig-platform-cpu"`
	Instant  *uint8  `path:"state/instant" module:"openconfig-platform-cpu/openconfig-platform-cpu"`
	Interval *uint64 `path:"state/interval" module:"openconfig-platform-cpu/openconfig-platform-cpu"`
	Max      *uint8  `path:"state/max" module:"openconfig-platform-cpu/openconfig-platform-cpu"`
	MaxTime  *uint64 `path:"state/max-time" module:"openconfig-platform-cpu/openconfig-platform-cpu"`
	Min      *uint8  `path:"state/min" module:"openconfig-platform-cpu/openconfig-platform-cpu"`
	MinTime  *uint64 `path:"state/min-time" module:"openconfig-platform-cpu/openconfig-platform-cpu"`
}

// IsYANGGoStruct ensures that Component_Cpu_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Cpu_Utilization) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Cpu_Utilization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Cpu_Utilization) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Cpu_Utilization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Cpu_Utilization) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Cpu_Utilization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Cpu_Utilization) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Cpu_Utilization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Cpu_Utilization) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Cpu_Utilization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Cpu_Utilization) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Cpu_Utilization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Cpu_Utilization) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Cpu_Utilization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Cpu_Utilization) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Cpu_Utilization
// struct.
func (t *Component_Cpu_Utilization) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Cpu_Utilization
// struct.
func (t *Component_Cpu_Utilization) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Cpu_Utilization
// struct.
func (t *Component_Cpu_Utilization) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Cpu_Utilization
// struct.
func (t *Component_Cpu_Utilization) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Cpu_Utilization
// struct.
func (t *Component_Cpu_Utilization) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Cpu_Utilization
// struct.
func (t *Component_Cpu_Utilization) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Cpu_Utilization
// struct.
func (t *Component_Cpu_Utilization) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Cpu_Utilization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Cpu_Utilization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Cpu_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Cpu_Utilization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Cpu_Utilization.
func (*Component_Cpu_Utilization) ΛBelongingModule() string {
	return "openconfig-platform-cpu"
}

// Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_Fabric struct {
}

// IsYANGGoStruct ensures that Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fabric) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Fabric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Fabric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fabric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Fabric.
func (*Component_Fabric) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_Fan struct {
}

// IsYANGGoStruct ensures that Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fan) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Fan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Fan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Fan.
func (*Component_Fan) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuit struct {
	BackplaneFacingCapacity *Component_IntegratedCircuit_BackplaneFacingCapacity `path:"backplane-facing-capacity" module:"openconfig-platform-integrated-circuit"`
	Memory                  *Component_IntegratedCircuit_Memory                  `path:"memory" module:"openconfig-platform-integrated-circuit"`
	Utilization             *Component_IntegratedCircuit_Utilization             `path:"utilization" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit) IsYANGGoStruct() {}

// GetOrCreateBackplaneFacingCapacity retrieves the value of the BackplaneFacingCapacity field
// or returns the existing field if it already exists.
func (t *Component_IntegratedCircuit) GetOrCreateBackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity {
	if t.BackplaneFacingCapacity != nil {
		return t.BackplaneFacingCapacity
	}
	t.BackplaneFacingCapacity = &Component_IntegratedCircuit_BackplaneFacingCapacity{}
	return t.BackplaneFacingCapacity
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *Component_IntegratedCircuit) GetOrCreateMemory() *Component_IntegratedCircuit_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &Component_IntegratedCircuit_Memory{}
	return t.Memory
}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *Component_IntegratedCircuit) GetOrCreateUtilization() *Component_IntegratedCircuit_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &Component_IntegratedCircuit_Utilization{}
	return t.Utilization
}

// GetBackplaneFacingCapacity returns the value of the BackplaneFacingCapacity struct pointer
// from Component_IntegratedCircuit. If the receiver or the field BackplaneFacingCapacity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_IntegratedCircuit) GetBackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity {
	if t != nil && t.BackplaneFacingCapacity != nil {
		return t.BackplaneFacingCapacity
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from Component_IntegratedCircuit. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_IntegratedCircuit) GetMemory() *Component_IntegratedCircuit_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetUtilization returns the value of the Utilization struct pointer
// from Component_IntegratedCircuit. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_IntegratedCircuit) GetUtilization() *Component_IntegratedCircuit_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BackplaneFacingCapacity.PopulateDefaults()
	t.Memory.PopulateDefaults()
	t.Utilization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit.
func (*Component_IntegratedCircuit) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_IntegratedCircuit_BackplaneFacingCapacity represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity struct {
	AvailablePct             *uint16 `path:"state/available-pct" module:"openconfig-platform-integrated-circuit/openconfig-platform-integrated-circuit"`
	ConsumedCapacity         *uint64 `path:"state/consumed-capacity" module:"openconfig-platform-integrated-circuit/openconfig-platform-integrated-circuit"`
	Total                    *uint64 `path:"state/total" module:"openconfig-platform-integrated-circuit/openconfig-platform-integrated-circuit"`
	TotalOperationalCapacity *uint64 `path:"state/total-operational-capacity" module:"openconfig-platform-integrated-circuit/openconfig-platform-integrated-circuit"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit_BackplaneFacingCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit_BackplaneFacingCapacity) IsYANGGoStruct() {}

// GetAvailablePct retrieves the value of the leaf AvailablePct from the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvailablePct is set, it can
// safely use t.GetAvailablePct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvailablePct == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) GetAvailablePct() uint16 {
	if t == nil || t.AvailablePct == nil {
		return 0
	}
	return *t.AvailablePct
}

// GetConsumedCapacity retrieves the value of the leaf ConsumedCapacity from the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConsumedCapacity is set, it can
// safely use t.GetConsumedCapacity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConsumedCapacity == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) GetConsumedCapacity() uint64 {
	if t == nil || t.ConsumedCapacity == nil {
		return 0
	}
	return *t.ConsumedCapacity
}

// GetTotal retrieves the value of the leaf Total from the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) GetTotal() uint64 {
	if t == nil || t.Total == nil {
		return 0
	}
	return *t.Total
}

// GetTotalOperationalCapacity retrieves the value of the leaf TotalOperationalCapacity from the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalOperationalCapacity is set, it can
// safely use t.GetTotalOperationalCapacity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalOperationalCapacity == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) GetTotalOperationalCapacity() uint64 {
	if t == nil || t.TotalOperationalCapacity == nil {
		return 0
	}
	return *t.TotalOperationalCapacity
}

// SetAvailablePct sets the value of the leaf AvailablePct in the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) SetAvailablePct(v uint16) {
	t.AvailablePct = &v
}

// SetConsumedCapacity sets the value of the leaf ConsumedCapacity in the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) SetConsumedCapacity(v uint64) {
	t.ConsumedCapacity = &v
}

// SetTotal sets the value of the leaf Total in the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) SetTotal(v uint64) {
	t.Total = &v
}

// SetTotalOperationalCapacity sets the value of the leaf TotalOperationalCapacity in the Component_IntegratedCircuit_BackplaneFacingCapacity
// struct.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) SetTotalOperationalCapacity(v uint64) {
	t.TotalOperationalCapacity = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit_BackplaneFacingCapacity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit_BackplaneFacingCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit_BackplaneFacingCapacity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit_BackplaneFacingCapacity.
func (*Component_IntegratedCircuit_BackplaneFacingCapacity) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// Component_IntegratedCircuit_Memory represents the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_Memory struct {
	CorrectedParityErrors   *uint64 `path:"state/corrected-parity-errors" module:"openconfig-platform-integrated-circuit/openconfig-platform-integrated-circuit"`
	TotalParityErrors       *uint64 `path:"state/total-parity-errors" module:"openconfig-platform-integrated-circuit/openconfig-platform-integrated-circuit"`
	UncorrectedParityErrors *uint64 `path:"state/uncorrected-parity-errors" module:"openconfig-platform-integrated-circuit/openconfig-platform-integrated-circuit"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit_Memory) IsYANGGoStruct() {}

// GetCorrectedParityErrors retrieves the value of the leaf CorrectedParityErrors from the Component_IntegratedCircuit_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CorrectedParityErrors is set, it can
// safely use t.GetCorrectedParityErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CorrectedParityErrors == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Memory) GetCorrectedParityErrors() uint64 {
	if t == nil || t.CorrectedParityErrors == nil {
		return 0
	}
	return *t.CorrectedParityErrors
}

// GetTotalParityErrors retrieves the value of the leaf TotalParityErrors from the Component_IntegratedCircuit_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalParityErrors is set, it can
// safely use t.GetTotalParityErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalParityErrors == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Memory) GetTotalParityErrors() uint64 {
	if t == nil || t.TotalParityErrors == nil {
		return 0
	}
	return *t.TotalParityErrors
}

// GetUncorrectedParityErrors retrieves the value of the leaf UncorrectedParityErrors from the Component_IntegratedCircuit_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncorrectedParityErrors is set, it can
// safely use t.GetUncorrectedParityErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncorrectedParityErrors == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Memory) GetUncorrectedParityErrors() uint64 {
	if t == nil || t.UncorrectedParityErrors == nil {
		return 0
	}
	return *t.UncorrectedParityErrors
}

// SetCorrectedParityErrors sets the value of the leaf CorrectedParityErrors in the Component_IntegratedCircuit_Memory
// struct.
func (t *Component_IntegratedCircuit_Memory) SetCorrectedParityErrors(v uint64) {
	t.CorrectedParityErrors = &v
}

// SetTotalParityErrors sets the value of the leaf TotalParityErrors in the Component_IntegratedCircuit_Memory
// struct.
func (t *Component_IntegratedCircuit_Memory) SetTotalParityErrors(v uint64) {
	t.TotalParityErrors = &v
}

// SetUncorrectedParityErrors sets the value of the leaf UncorrectedParityErrors in the Component_IntegratedCircuit_Memory
// struct.
func (t *Component_IntegratedCircuit_Memory) SetUncorrectedParityErrors(v uint64) {
	t.UncorrectedParityErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit_Memory.
func (*Component_IntegratedCircuit_Memory) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// Component_IntegratedCircuit_Utilization represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_Utilization struct {
	Resource map[string]*Component_IntegratedCircuit_Utilization_Resource `path:"resources/resource" module:"openconfig-platform/openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit_Utilization) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// Component_IntegratedCircuit_Utilization struct. The keys of the list are populated from the input
// arguments.
func (t *Component_IntegratedCircuit_Utilization) NewResource(Name string) (*Component_IntegratedCircuit_Utilization_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_IntegratedCircuit_Utilization_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &Component_IntegratedCircuit_Utilization_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the Component_IntegratedCircuit_Utilization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_IntegratedCircuit_Utilization) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResourceMap returns the list (map) from Component_IntegratedCircuit_Utilization.
//
// It initializes the field if not already initialized.
func (t *Component_IntegratedCircuit_Utilization) GetOrCreateResourceMap() map[string]*Component_IntegratedCircuit_Utilization_Resource {
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_IntegratedCircuit_Utilization_Resource)
	}
	return t.Resource
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver Component_IntegratedCircuit_Utilization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_IntegratedCircuit_Utilization) GetOrCreateResource(Name string) *Component_IntegratedCircuit_Utilization_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of Component_IntegratedCircuit_Utilization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_IntegratedCircuit_Utilization) GetResource(Name string) *Component_IntegratedCircuit_Utilization_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver Component_IntegratedCircuit_Utilization. If there is no such element, the function
// is a no-op.
func (t *Component_IntegratedCircuit_Utilization) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied Component_IntegratedCircuit_Utilization_Resource struct to the
// list Resource of Component_IntegratedCircuit_Utilization. If the key value(s) specified in
// the supplied Component_IntegratedCircuit_Utilization_Resource already exist in the list, an error is
// returned.
func (t *Component_IntegratedCircuit_Utilization) AppendResource(v *Component_IntegratedCircuit_Utilization_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_IntegratedCircuit_Utilization_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit_Utilization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit_Utilization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit_Utilization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit_Utilization.
func (*Component_IntegratedCircuit_Utilization) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_IntegratedCircuit_Utilization_Resource represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource struct {
	Committed                  *uint64 `path:"state/committed" module:"openconfig-platform/openconfig-platform"`
	Free                       *uint64 `path:"state/free" module:"openconfig-platform/openconfig-platform"`
	HighWatermark              *uint64 `path:"state/high-watermark" module:"openconfig-platform/openconfig-platform"`
	LastHighWatermark          *uint64 `path:"state/last-high-watermark" module:"openconfig-platform/openconfig-platform"`
	MaxLimit                   *uint64 `path:"state/max-limit" module:"openconfig-platform/openconfig-platform"`
	Name                       *string `path:"state/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform" shadow-path:"config/name|name" shadow-module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	Used                       *uint64 `path:"state/used" module:"openconfig-platform/openconfig-platform"`
	UsedThresholdUpper         *uint8  `path:"state/used-threshold-upper" module:"openconfig-platform/openconfig-platform" shadow-path:"config/used-threshold-upper" shadow-module:"openconfig-platform/openconfig-platform"`
	UsedThresholdUpperClear    *uint8  `path:"state/used-threshold-upper-clear" module:"openconfig-platform/openconfig-platform" shadow-path:"config/used-threshold-upper-clear" shadow-module:"openconfig-platform/openconfig-platform"`
	UsedThresholdUpperExceeded *bool   `path:"state/used-threshold-upper-exceeded" module:"openconfig-platform/openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit_Utilization_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit_Utilization_Resource) IsYANGGoStruct() {}

// GetCommitted retrieves the value of the leaf Committed from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Committed is set, it can
// safely use t.GetCommitted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Committed == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetCommitted() uint64 {
	if t == nil || t.Committed == nil {
		return 0
	}
	return *t.Committed
}

// GetFree retrieves the value of the leaf Free from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetHighWatermark() uint64 {
	if t == nil || t.HighWatermark == nil {
		return 0
	}
	return *t.HighWatermark
}

// GetLastHighWatermark retrieves the value of the leaf LastHighWatermark from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastHighWatermark is set, it can
// safely use t.GetLastHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastHighWatermark == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetLastHighWatermark() uint64 {
	if t == nil || t.LastHighWatermark == nil {
		return 0
	}
	return *t.LastHighWatermark
}

// GetMaxLimit retrieves the value of the leaf MaxLimit from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLimit is set, it can
// safely use t.GetMaxLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLimit == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetMaxLimit() uint64 {
	if t == nil || t.MaxLimit == nil {
		return 0
	}
	return *t.MaxLimit
}

// GetName retrieves the value of the leaf Name from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUsed retrieves the value of the leaf Used from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// GetUsedThresholdUpper retrieves the value of the leaf UsedThresholdUpper from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpper is set, it can
// safely use t.GetUsedThresholdUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpper == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsedThresholdUpper() uint8 {
	if t == nil || t.UsedThresholdUpper == nil {
		return 0
	}
	return *t.UsedThresholdUpper
}

// GetUsedThresholdUpperClear retrieves the value of the leaf UsedThresholdUpperClear from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperClear is set, it can
// safely use t.GetUsedThresholdUpperClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperClear == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsedThresholdUpperClear() uint8 {
	if t == nil || t.UsedThresholdUpperClear == nil {
		return 0
	}
	return *t.UsedThresholdUpperClear
}

// GetUsedThresholdUpperExceeded retrieves the value of the leaf UsedThresholdUpperExceeded from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperExceeded is set, it can
// safely use t.GetUsedThresholdUpperExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperExceeded == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsedThresholdUpperExceeded() bool {
	if t == nil || t.UsedThresholdUpperExceeded == nil {
		return false
	}
	return *t.UsedThresholdUpperExceeded
}

// SetCommitted sets the value of the leaf Committed in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetCommitted(v uint64) {
	t.Committed = &v
}

// SetFree sets the value of the leaf Free in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetFree(v uint64) {
	t.Free = &v
}

// SetHighWatermark sets the value of the leaf HighWatermark in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetHighWatermark(v uint64) {
	t.HighWatermark = &v
}

// SetLastHighWatermark sets the value of the leaf LastHighWatermark in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetLastHighWatermark(v uint64) {
	t.LastHighWatermark = &v
}

// SetMaxLimit sets the value of the leaf MaxLimit in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetMaxLimit(v uint64) {
	t.MaxLimit = &v
}

// SetName sets the value of the leaf Name in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetName(v string) {
	t.Name = &v
}

// SetUsed sets the value of the leaf Used in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetUsed(v uint64) {
	t.Used = &v
}

// SetUsedThresholdUpper sets the value of the leaf UsedThresholdUpper in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetUsedThresholdUpper(v uint8) {
	t.UsedThresholdUpper = &v
}

// SetUsedThresholdUpperClear sets the value of the leaf UsedThresholdUpperClear in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetUsedThresholdUpperClear(v uint8) {
	t.UsedThresholdUpperClear = &v
}

// SetUsedThresholdUpperExceeded sets the value of the leaf UsedThresholdUpperExceeded in the Component_IntegratedCircuit_Utilization_Resource
// struct.
func (t *Component_IntegratedCircuit_Utilization_Resource) SetUsedThresholdUpperExceeded(v bool) {
	t.UsedThresholdUpperExceeded = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit_Utilization_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit_Utilization_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_IntegratedCircuit_Utilization_Resource struct, which is a YANG list entry.
func (t *Component_IntegratedCircuit_Utilization_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit_Utilization_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit_Utilization_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit_Utilization_Resource.
func (*Component_IntegratedCircuit_Utilization_Resource) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_LastPoweroffReason represents the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type Component_LastPoweroffReason struct {
	Details *string                                            `path:"details" module:"openconfig-platform"`
	Trigger E_PlatformTypes_ComponentLastPoweroffReasonTrigger `path:"trigger" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_LastPoweroffReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_LastPoweroffReason) IsYANGGoStruct() {}

// GetDetails retrieves the value of the leaf Details from the Component_LastPoweroffReason
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Details is set, it can
// safely use t.GetDetails() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Details == nil' before retrieving the leaf's value.
func (t *Component_LastPoweroffReason) GetDetails() string {
	if t == nil || t.Details == nil {
		return ""
	}
	return *t.Details
}

// GetTrigger retrieves the value of the leaf Trigger from the Component_LastPoweroffReason
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trigger is set, it can
// safely use t.GetTrigger() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trigger == nil' before retrieving the leaf's value.
func (t *Component_LastPoweroffReason) GetTrigger() E_PlatformTypes_ComponentLastPoweroffReasonTrigger {
	if t == nil || t.Trigger == 0 {
		return 0
	}
	return t.Trigger
}

// SetDetails sets the value of the leaf Details in the Component_LastPoweroffReason
// struct.
func (t *Component_LastPoweroffReason) SetDetails(v string) {
	t.Details = &v
}

// SetTrigger sets the value of the leaf Trigger in the Component_LastPoweroffReason
// struct.
func (t *Component_LastPoweroffReason) SetTrigger(v E_PlatformTypes_ComponentLastPoweroffReasonTrigger) {
	t.Trigger = v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_LastPoweroffReason
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_LastPoweroffReason) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_LastPoweroffReason) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_LastPoweroffReason"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_LastPoweroffReason) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_LastPoweroffReason) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_LastPoweroffReason.
func (*Component_LastPoweroffReason) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_LastSwitchoverReason represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReason struct {
	Details *string                                                       `path:"details" module:"openconfig-platform"`
	Trigger E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger `path:"trigger" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_LastSwitchoverReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_LastSwitchoverReason) IsYANGGoStruct() {}

// GetDetails retrieves the value of the leaf Details from the Component_LastSwitchoverReason
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Details is set, it can
// safely use t.GetDetails() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Details == nil' before retrieving the leaf's value.
func (t *Component_LastSwitchoverReason) GetDetails() string {
	if t == nil || t.Details == nil {
		return ""
	}
	return *t.Details
}

// GetTrigger retrieves the value of the leaf Trigger from the Component_LastSwitchoverReason
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trigger is set, it can
// safely use t.GetTrigger() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trigger == nil' before retrieving the leaf's value.
func (t *Component_LastSwitchoverReason) GetTrigger() E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger {
	if t == nil || t.Trigger == 0 {
		return 0
	}
	return t.Trigger
}

// SetDetails sets the value of the leaf Details in the Component_LastSwitchoverReason
// struct.
func (t *Component_LastSwitchoverReason) SetDetails(v string) {
	t.Details = &v
}

// SetTrigger sets the value of the leaf Trigger in the Component_LastSwitchoverReason
// struct.
func (t *Component_LastSwitchoverReason) SetTrigger(v E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger) {
	t.Trigger = v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_LastSwitchoverReason
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_LastSwitchoverReason) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_LastSwitchoverReason) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_LastSwitchoverReason"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_LastSwitchoverReason) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_LastSwitchoverReason) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_LastSwitchoverReason.
func (*Component_LastSwitchoverReason) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_Memory struct {
	Available *uint64 `path:"available" module:"openconfig-platform"`
	Utilized  *uint64 `path:"utilized" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Memory) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the Component_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Available is set, it can
// safely use t.GetAvailable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Available == nil' before retrieving the leaf's value.
func (t *Component_Memory) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetUtilized retrieves the value of the leaf Utilized from the Component_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Utilized is set, it can
// safely use t.GetUtilized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Utilized == nil' before retrieving the leaf's value.
func (t *Component_Memory) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// SetAvailable sets the value of the leaf Available in the Component_Memory
// struct.
func (t *Component_Memory) SetAvailable(v uint64) {
	t.Available = &v
}

// SetUtilized sets the value of the leaf Utilized in the Component_Memory
// struct.
func (t *Component_Memory) SetUtilized(v uint64) {
	t.Utilized = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Memory.
func (*Component_Memory) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Pcie represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_Pcie struct {
	CorrectableErrors *Component_Pcie_CorrectableErrors `path:"correctable-errors" module:"openconfig-platform"`
	FatalErrors       *Component_Pcie_FatalErrors       `path:"fatal-errors" module:"openconfig-platform"`
	NonFatalErrors    *Component_Pcie_NonFatalErrors    `path:"non-fatal-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Pcie implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie) IsYANGGoStruct() {}

// GetOrCreateCorrectableErrors retrieves the value of the CorrectableErrors field
// or returns the existing field if it already exists.
func (t *Component_Pcie) GetOrCreateCorrectableErrors() *Component_Pcie_CorrectableErrors {
	if t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	t.CorrectableErrors = &Component_Pcie_CorrectableErrors{}
	return t.CorrectableErrors
}

// GetOrCreateFatalErrors retrieves the value of the FatalErrors field
// or returns the existing field if it already exists.
func (t *Component_Pcie) GetOrCreateFatalErrors() *Component_Pcie_FatalErrors {
	if t.FatalErrors != nil {
		return t.FatalErrors
	}
	t.FatalErrors = &Component_Pcie_FatalErrors{}
	return t.FatalErrors
}

// GetOrCreateNonFatalErrors retrieves the value of the NonFatalErrors field
// or returns the existing field if it already exists.
func (t *Component_Pcie) GetOrCreateNonFatalErrors() *Component_Pcie_NonFatalErrors {
	if t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	t.NonFatalErrors = &Component_Pcie_NonFatalErrors{}
	return t.NonFatalErrors
}

// GetCorrectableErrors returns the value of the CorrectableErrors struct pointer
// from Component_Pcie. If the receiver or the field CorrectableErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Pcie) GetCorrectableErrors() *Component_Pcie_CorrectableErrors {
	if t != nil && t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	return nil
}

// GetFatalErrors returns the value of the FatalErrors struct pointer
// from Component_Pcie. If the receiver or the field FatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Pcie) GetFatalErrors() *Component_Pcie_FatalErrors {
	if t != nil && t.FatalErrors != nil {
		return t.FatalErrors
	}
	return nil
}

// GetNonFatalErrors returns the value of the NonFatalErrors struct pointer
// from Component_Pcie. If the receiver or the field NonFatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Pcie) GetNonFatalErrors() *Component_Pcie_NonFatalErrors {
	if t != nil && t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CorrectableErrors.PopulateDefaults()
	t.FatalErrors.PopulateDefaults()
	t.NonFatalErrors.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie.
func (*Component_Pcie) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Pcie_CorrectableErrors represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrors struct {
	AdvisoryNonFatalErrors *uint64 `path:"advisory-non-fatal-errors" module:"openconfig-platform"`
	BadDllpErrors          *uint64 `path:"bad-dllp-errors" module:"openconfig-platform"`
	BadTlpErrors           *uint64 `path:"bad-tlp-errors" module:"openconfig-platform"`
	HdrLogOverflowErrors   *uint64 `path:"hdr-log-overflow-errors" module:"openconfig-platform"`
	InternalErrors         *uint64 `path:"internal-errors" module:"openconfig-platform"`
	ReceiverErrors         *uint64 `path:"receiver-errors" module:"openconfig-platform"`
	RelayRolloverErrors    *uint64 `path:"relay-rollover-errors" module:"openconfig-platform"`
	ReplayTimeoutErrors    *uint64 `path:"replay-timeout-errors" module:"openconfig-platform"`
	TotalErrors            *uint64 `path:"total-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Pcie_CorrectableErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie_CorrectableErrors) IsYANGGoStruct() {}

// GetAdvisoryNonFatalErrors retrieves the value of the leaf AdvisoryNonFatalErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvisoryNonFatalErrors is set, it can
// safely use t.GetAdvisoryNonFatalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvisoryNonFatalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetAdvisoryNonFatalErrors() uint64 {
	if t == nil || t.AdvisoryNonFatalErrors == nil {
		return 0
	}
	return *t.AdvisoryNonFatalErrors
}

// GetBadDllpErrors retrieves the value of the leaf BadDllpErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadDllpErrors is set, it can
// safely use t.GetBadDllpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadDllpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetBadDllpErrors() uint64 {
	if t == nil || t.BadDllpErrors == nil {
		return 0
	}
	return *t.BadDllpErrors
}

// GetBadTlpErrors retrieves the value of the leaf BadTlpErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadTlpErrors is set, it can
// safely use t.GetBadTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetBadTlpErrors() uint64 {
	if t == nil || t.BadTlpErrors == nil {
		return 0
	}
	return *t.BadTlpErrors
}

// GetHdrLogOverflowErrors retrieves the value of the leaf HdrLogOverflowErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HdrLogOverflowErrors is set, it can
// safely use t.GetHdrLogOverflowErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HdrLogOverflowErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetHdrLogOverflowErrors() uint64 {
	if t == nil || t.HdrLogOverflowErrors == nil {
		return 0
	}
	return *t.HdrLogOverflowErrors
}

// GetInternalErrors retrieves the value of the leaf InternalErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalErrors is set, it can
// safely use t.GetInternalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetInternalErrors() uint64 {
	if t == nil || t.InternalErrors == nil {
		return 0
	}
	return *t.InternalErrors
}

// GetReceiverErrors retrieves the value of the leaf ReceiverErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiverErrors is set, it can
// safely use t.GetReceiverErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiverErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetReceiverErrors() uint64 {
	if t == nil || t.ReceiverErrors == nil {
		return 0
	}
	return *t.ReceiverErrors
}

// GetRelayRolloverErrors retrieves the value of the leaf RelayRolloverErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayRolloverErrors is set, it can
// safely use t.GetRelayRolloverErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayRolloverErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetRelayRolloverErrors() uint64 {
	if t == nil || t.RelayRolloverErrors == nil {
		return 0
	}
	return *t.RelayRolloverErrors
}

// GetReplayTimeoutErrors retrieves the value of the leaf ReplayTimeoutErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplayTimeoutErrors is set, it can
// safely use t.GetReplayTimeoutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplayTimeoutErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetReplayTimeoutErrors() uint64 {
	if t == nil || t.ReplayTimeoutErrors == nil {
		return 0
	}
	return *t.ReplayTimeoutErrors
}

// GetTotalErrors retrieves the value of the leaf TotalErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalErrors is set, it can
// safely use t.GetTotalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetTotalErrors() uint64 {
	if t == nil || t.TotalErrors == nil {
		return 0
	}
	return *t.TotalErrors
}

// SetAdvisoryNonFatalErrors sets the value of the leaf AdvisoryNonFatalErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetAdvisoryNonFatalErrors(v uint64) {
	t.AdvisoryNonFatalErrors = &v
}

// SetBadDllpErrors sets the value of the leaf BadDllpErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetBadDllpErrors(v uint64) {
	t.BadDllpErrors = &v
}

// SetBadTlpErrors sets the value of the leaf BadTlpErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetBadTlpErrors(v uint64) {
	t.BadTlpErrors = &v
}

// SetHdrLogOverflowErrors sets the value of the leaf HdrLogOverflowErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetHdrLogOverflowErrors(v uint64) {
	t.HdrLogOverflowErrors = &v
}

// SetInternalErrors sets the value of the leaf InternalErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetInternalErrors(v uint64) {
	t.InternalErrors = &v
}

// SetReceiverErrors sets the value of the leaf ReceiverErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetReceiverErrors(v uint64) {
	t.ReceiverErrors = &v
}

// SetRelayRolloverErrors sets the value of the leaf RelayRolloverErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetRelayRolloverErrors(v uint64) {
	t.RelayRolloverErrors = &v
}

// SetReplayTimeoutErrors sets the value of the leaf ReplayTimeoutErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetReplayTimeoutErrors(v uint64) {
	t.ReplayTimeoutErrors = &v
}

// SetTotalErrors sets the value of the leaf TotalErrors in the Component_Pcie_CorrectableErrors
// struct.
func (t *Component_Pcie_CorrectableErrors) SetTotalErrors(v uint64) {
	t.TotalErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie_CorrectableErrors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie_CorrectableErrors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_CorrectableErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie_CorrectableErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_CorrectableErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie_CorrectableErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie_CorrectableErrors.
func (*Component_Pcie_CorrectableErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Pcie_FatalErrors represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrors struct {
	AcsViolationErrors         *uint64 `path:"acs-violation-errors" module:"openconfig-platform"`
	AtomicOpBlockedErrors      *uint64 `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	BlockedTlpErrors           *uint64 `path:"blocked-tlp-errors" module:"openconfig-platform"`
	CompletionAbortErrors      *uint64 `path:"completion-abort-errors" module:"openconfig-platform"`
	CompletionTimeoutErrors    *uint64 `path:"completion-timeout-errors" module:"openconfig-platform"`
	DataLinkErrors             *uint64 `path:"data-link-errors" module:"openconfig-platform"`
	EcrcErrors                 *uint64 `path:"ecrc-errors" module:"openconfig-platform"`
	FlowControlProtocolErrors  *uint64 `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	InternalErrors             *uint64 `path:"internal-errors" module:"openconfig-platform"`
	MalformedTlpErrors         *uint64 `path:"malformed-tlp-errors" module:"openconfig-platform"`
	PoisonedTlpErrors          *uint64 `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ReceiverOverflowErrors     *uint64 `path:"receiver-overflow-errors" module:"openconfig-platform"`
	SurpriseDownErrors         *uint64 `path:"surprise-down-errors" module:"openconfig-platform"`
	TlpPrefixBlockedErrors     *uint64 `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	TotalErrors                *uint64 `path:"total-errors" module:"openconfig-platform"`
	UndefinedErrors            *uint64 `path:"undefined-errors" module:"openconfig-platform"`
	UnexpectedCompletionErrors *uint64 `path:"unexpected-completion-errors" module:"openconfig-platform"`
	UnsupportedRequestErrors   *uint64 `path:"unsupported-request-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Pcie_FatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie_FatalErrors) IsYANGGoStruct() {}

// GetAcsViolationErrors retrieves the value of the leaf AcsViolationErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcsViolationErrors is set, it can
// safely use t.GetAcsViolationErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcsViolationErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetAcsViolationErrors() uint64 {
	if t == nil || t.AcsViolationErrors == nil {
		return 0
	}
	return *t.AcsViolationErrors
}

// GetAtomicOpBlockedErrors retrieves the value of the leaf AtomicOpBlockedErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtomicOpBlockedErrors is set, it can
// safely use t.GetAtomicOpBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtomicOpBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetAtomicOpBlockedErrors() uint64 {
	if t == nil || t.AtomicOpBlockedErrors == nil {
		return 0
	}
	return *t.AtomicOpBlockedErrors
}

// GetBlockedTlpErrors retrieves the value of the leaf BlockedTlpErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockedTlpErrors is set, it can
// safely use t.GetBlockedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetBlockedTlpErrors() uint64 {
	if t == nil || t.BlockedTlpErrors == nil {
		return 0
	}
	return *t.BlockedTlpErrors
}

// GetCompletionAbortErrors retrieves the value of the leaf CompletionAbortErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionAbortErrors is set, it can
// safely use t.GetCompletionAbortErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionAbortErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetCompletionAbortErrors() uint64 {
	if t == nil || t.CompletionAbortErrors == nil {
		return 0
	}
	return *t.CompletionAbortErrors
}

// GetCompletionTimeoutErrors retrieves the value of the leaf CompletionTimeoutErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionTimeoutErrors is set, it can
// safely use t.GetCompletionTimeoutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionTimeoutErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetCompletionTimeoutErrors() uint64 {
	if t == nil || t.CompletionTimeoutErrors == nil {
		return 0
	}
	return *t.CompletionTimeoutErrors
}

// GetDataLinkErrors retrieves the value of the leaf DataLinkErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataLinkErrors is set, it can
// safely use t.GetDataLinkErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataLinkErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetDataLinkErrors() uint64 {
	if t == nil || t.DataLinkErrors == nil {
		return 0
	}
	return *t.DataLinkErrors
}

// GetEcrcErrors retrieves the value of the leaf EcrcErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcrcErrors is set, it can
// safely use t.GetEcrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcrcErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetEcrcErrors() uint64 {
	if t == nil || t.EcrcErrors == nil {
		return 0
	}
	return *t.EcrcErrors
}

// GetFlowControlProtocolErrors retrieves the value of the leaf FlowControlProtocolErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowControlProtocolErrors is set, it can
// safely use t.GetFlowControlProtocolErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowControlProtocolErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetFlowControlProtocolErrors() uint64 {
	if t == nil || t.FlowControlProtocolErrors == nil {
		return 0
	}
	return *t.FlowControlProtocolErrors
}

// GetInternalErrors retrieves the value of the leaf InternalErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalErrors is set, it can
// safely use t.GetInternalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetInternalErrors() uint64 {
	if t == nil || t.InternalErrors == nil {
		return 0
	}
	return *t.InternalErrors
}

// GetMalformedTlpErrors retrieves the value of the leaf MalformedTlpErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MalformedTlpErrors is set, it can
// safely use t.GetMalformedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MalformedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetMalformedTlpErrors() uint64 {
	if t == nil || t.MalformedTlpErrors == nil {
		return 0
	}
	return *t.MalformedTlpErrors
}

// GetPoisonedTlpErrors retrieves the value of the leaf PoisonedTlpErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoisonedTlpErrors is set, it can
// safely use t.GetPoisonedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoisonedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetPoisonedTlpErrors() uint64 {
	if t == nil || t.PoisonedTlpErrors == nil {
		return 0
	}
	return *t.PoisonedTlpErrors
}

// GetReceiverOverflowErrors retrieves the value of the leaf ReceiverOverflowErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiverOverflowErrors is set, it can
// safely use t.GetReceiverOverflowErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiverOverflowErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetReceiverOverflowErrors() uint64 {
	if t == nil || t.ReceiverOverflowErrors == nil {
		return 0
	}
	return *t.ReceiverOverflowErrors
}

// GetSurpriseDownErrors retrieves the value of the leaf SurpriseDownErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SurpriseDownErrors is set, it can
// safely use t.GetSurpriseDownErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SurpriseDownErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetSurpriseDownErrors() uint64 {
	if t == nil || t.SurpriseDownErrors == nil {
		return 0
	}
	return *t.SurpriseDownErrors
}

// GetTlpPrefixBlockedErrors retrieves the value of the leaf TlpPrefixBlockedErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlpPrefixBlockedErrors is set, it can
// safely use t.GetTlpPrefixBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlpPrefixBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetTlpPrefixBlockedErrors() uint64 {
	if t == nil || t.TlpPrefixBlockedErrors == nil {
		return 0
	}
	return *t.TlpPrefixBlockedErrors
}

// GetTotalErrors retrieves the value of the leaf TotalErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalErrors is set, it can
// safely use t.GetTotalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetTotalErrors() uint64 {
	if t == nil || t.TotalErrors == nil {
		return 0
	}
	return *t.TotalErrors
}

// GetUndefinedErrors retrieves the value of the leaf UndefinedErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UndefinedErrors is set, it can
// safely use t.GetUndefinedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UndefinedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetUndefinedErrors() uint64 {
	if t == nil || t.UndefinedErrors == nil {
		return 0
	}
	return *t.UndefinedErrors
}

// GetUnexpectedCompletionErrors retrieves the value of the leaf UnexpectedCompletionErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnexpectedCompletionErrors is set, it can
// safely use t.GetUnexpectedCompletionErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnexpectedCompletionErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetUnexpectedCompletionErrors() uint64 {
	if t == nil || t.UnexpectedCompletionErrors == nil {
		return 0
	}
	return *t.UnexpectedCompletionErrors
}

// GetUnsupportedRequestErrors retrieves the value of the leaf UnsupportedRequestErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnsupportedRequestErrors is set, it can
// safely use t.GetUnsupportedRequestErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnsupportedRequestErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetUnsupportedRequestErrors() uint64 {
	if t == nil || t.UnsupportedRequestErrors == nil {
		return 0
	}
	return *t.UnsupportedRequestErrors
}

// SetAcsViolationErrors sets the value of the leaf AcsViolationErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetAcsViolationErrors(v uint64) {
	t.AcsViolationErrors = &v
}

// SetAtomicOpBlockedErrors sets the value of the leaf AtomicOpBlockedErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetAtomicOpBlockedErrors(v uint64) {
	t.AtomicOpBlockedErrors = &v
}

// SetBlockedTlpErrors sets the value of the leaf BlockedTlpErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetBlockedTlpErrors(v uint64) {
	t.BlockedTlpErrors = &v
}

// SetCompletionAbortErrors sets the value of the leaf CompletionAbortErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetCompletionAbortErrors(v uint64) {
	t.CompletionAbortErrors = &v
}

// SetCompletionTimeoutErrors sets the value of the leaf CompletionTimeoutErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetCompletionTimeoutErrors(v uint64) {
	t.CompletionTimeoutErrors = &v
}

// SetDataLinkErrors sets the value of the leaf DataLinkErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetDataLinkErrors(v uint64) {
	t.DataLinkErrors = &v
}

// SetEcrcErrors sets the value of the leaf EcrcErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetEcrcErrors(v uint64) {
	t.EcrcErrors = &v
}

// SetFlowControlProtocolErrors sets the value of the leaf FlowControlProtocolErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetFlowControlProtocolErrors(v uint64) {
	t.FlowControlProtocolErrors = &v
}

// SetInternalErrors sets the value of the leaf InternalErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetInternalErrors(v uint64) {
	t.InternalErrors = &v
}

// SetMalformedTlpErrors sets the value of the leaf MalformedTlpErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetMalformedTlpErrors(v uint64) {
	t.MalformedTlpErrors = &v
}

// SetPoisonedTlpErrors sets the value of the leaf PoisonedTlpErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetPoisonedTlpErrors(v uint64) {
	t.PoisonedTlpErrors = &v
}

// SetReceiverOverflowErrors sets the value of the leaf ReceiverOverflowErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetReceiverOverflowErrors(v uint64) {
	t.ReceiverOverflowErrors = &v
}

// SetSurpriseDownErrors sets the value of the leaf SurpriseDownErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetSurpriseDownErrors(v uint64) {
	t.SurpriseDownErrors = &v
}

// SetTlpPrefixBlockedErrors sets the value of the leaf TlpPrefixBlockedErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetTlpPrefixBlockedErrors(v uint64) {
	t.TlpPrefixBlockedErrors = &v
}

// SetTotalErrors sets the value of the leaf TotalErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetTotalErrors(v uint64) {
	t.TotalErrors = &v
}

// SetUndefinedErrors sets the value of the leaf UndefinedErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetUndefinedErrors(v uint64) {
	t.UndefinedErrors = &v
}

// SetUnexpectedCompletionErrors sets the value of the leaf UnexpectedCompletionErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetUnexpectedCompletionErrors(v uint64) {
	t.UnexpectedCompletionErrors = &v
}

// SetUnsupportedRequestErrors sets the value of the leaf UnsupportedRequestErrors in the Component_Pcie_FatalErrors
// struct.
func (t *Component_Pcie_FatalErrors) SetUnsupportedRequestErrors(v uint64) {
	t.UnsupportedRequestErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie_FatalErrors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie_FatalErrors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_FatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie_FatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_FatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie_FatalErrors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie_FatalErrors.
func (*Component_Pcie_FatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Pcie_NonFatalErrors represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrors struct {
	AcsViolationErrors         *uint64 `path:"acs-violation-errors" module:"openconfig-platform"`
	AtomicOpBlockedErrors      *uint64 `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	BlockedTlpErrors           *uint64 `path:"blocked-tlp-errors" module:"openconfig-platform"`
	CompletionAbortErrors      *uint64 `path:"completion-abort-errors" module:"openconfig-platform"`
	CompletionTimeoutErrors    *uint64 `path:"completion-timeout-errors" module:"openconfig-platform"`
	DataLinkErrors             *uint64 `path:"data-link-errors" module:"openconfig-platform"`
	EcrcErrors                 *uint64 `path:"ecrc-errors" module:"openconfig-platform"`
	FlowControlProtocolErrors  *uint64 `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	InternalErrors             *uint64 `path:"internal-errors" module:"openconfig-platform"`
	MalformedTlpErrors         *uint64 `path:"malformed-tlp-errors" module:"openconfig-platform"`
	PoisonedTlpErrors          *uint64 `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ReceiverOverflowErrors     *uint64 `path:"receiver-overflow-errors" module:"openconfig-platform"`
	SurpriseDownErrors         *uint64 `path:"surprise-down-errors" module:"openconfig-platform"`
	TlpPrefixBlockedErrors     *uint64 `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	TotalErrors                *uint64 `path:"total-errors" module:"openconfig-platform"`
	UndefinedErrors            *uint64 `path:"undefined-errors" module:"openconfig-platform"`
	UnexpectedCompletionErrors *uint64 `path:"unexpected-completion-errors" module:"openconfig-platform"`
	UnsupportedRequestErrors   *uint64 `path:"unsupported-request-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Pcie_NonFatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie_NonFatalErrors) IsYANGGoStruct() {}

// GetAcsViolationErrors retrieves the value of the leaf AcsViolationErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcsViolationErrors is set, it can
// safely use t.GetAcsViolationErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcsViolationErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetAcsViolationErrors() uint64 {
	if t == nil || t.AcsViolationErrors == nil {
		return 0
	}
	return *t.AcsViolationErrors
}

// GetAtomicOpBlockedErrors retrieves the value of the leaf AtomicOpBlockedErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtomicOpBlockedErrors is set, it can
// safely use t.GetAtomicOpBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtomicOpBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetAtomicOpBlockedErrors() uint64 {
	if t == nil || t.AtomicOpBlockedErrors == nil {
		return 0
	}
	return *t.AtomicOpBlockedErrors
}

// GetBlockedTlpErrors retrieves the value of the leaf BlockedTlpErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockedTlpErrors is set, it can
// safely use t.GetBlockedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetBlockedTlpErrors() uint64 {
	if t == nil || t.BlockedTlpErrors == nil {
		return 0
	}
	return *t.BlockedTlpErrors
}

// GetCompletionAbortErrors retrieves the value of the leaf CompletionAbortErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionAbortErrors is set, it can
// safely use t.GetCompletionAbortErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionAbortErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetCompletionAbortErrors() uint64 {
	if t == nil || t.CompletionAbortErrors == nil {
		return 0
	}
	return *t.CompletionAbortErrors
}

// GetCompletionTimeoutErrors retrieves the value of the leaf CompletionTimeoutErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionTimeoutErrors is set, it can
// safely use t.GetCompletionTimeoutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionTimeoutErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetCompletionTimeoutErrors() uint64 {
	if t == nil || t.CompletionTimeoutErrors == nil {
		return 0
	}
	return *t.CompletionTimeoutErrors
}

// GetDataLinkErrors retrieves the value of the leaf DataLinkErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataLinkErrors is set, it can
// safely use t.GetDataLinkErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataLinkErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetDataLinkErrors() uint64 {
	if t == nil || t.DataLinkErrors == nil {
		return 0
	}
	return *t.DataLinkErrors
}

// GetEcrcErrors retrieves the value of the leaf EcrcErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcrcErrors is set, it can
// safely use t.GetEcrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcrcErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetEcrcErrors() uint64 {
	if t == nil || t.EcrcErrors == nil {
		return 0
	}
	return *t.EcrcErrors
}

// GetFlowControlProtocolErrors retrieves the value of the leaf FlowControlProtocolErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowControlProtocolErrors is set, it can
// safely use t.GetFlowControlProtocolErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowControlProtocolErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetFlowControlProtocolErrors() uint64 {
	if t == nil || t.FlowControlProtocolErrors == nil {
		return 0
	}
	return *t.FlowControlProtocolErrors
}

// GetInternalErrors retrieves the value of the leaf InternalErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalErrors is set, it can
// safely use t.GetInternalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetInternalErrors() uint64 {
	if t == nil || t.InternalErrors == nil {
		return 0
	}
	return *t.InternalErrors
}

// GetMalformedTlpErrors retrieves the value of the leaf MalformedTlpErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MalformedTlpErrors is set, it can
// safely use t.GetMalformedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MalformedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetMalformedTlpErrors() uint64 {
	if t == nil || t.MalformedTlpErrors == nil {
		return 0
	}
	return *t.MalformedTlpErrors
}

// GetPoisonedTlpErrors retrieves the value of the leaf PoisonedTlpErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoisonedTlpErrors is set, it can
// safely use t.GetPoisonedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoisonedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetPoisonedTlpErrors() uint64 {
	if t == nil || t.PoisonedTlpErrors == nil {
		return 0
	}
	return *t.PoisonedTlpErrors
}

// GetReceiverOverflowErrors retrieves the value of the leaf ReceiverOverflowErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiverOverflowErrors is set, it can
// safely use t.GetReceiverOverflowErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiverOverflowErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetReceiverOverflowErrors() uint64 {
	if t == nil || t.ReceiverOverflowErrors == nil {
		return 0
	}
	return *t.ReceiverOverflowErrors
}

// GetSurpriseDownErrors retrieves the value of the leaf SurpriseDownErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SurpriseDownErrors is set, it can
// safely use t.GetSurpriseDownErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SurpriseDownErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetSurpriseDownErrors() uint64 {
	if t == nil || t.SurpriseDownErrors == nil {
		return 0
	}
	return *t.SurpriseDownErrors
}

// GetTlpPrefixBlockedErrors retrieves the value of the leaf TlpPrefixBlockedErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlpPrefixBlockedErrors is set, it can
// safely use t.GetTlpPrefixBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlpPrefixBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetTlpPrefixBlockedErrors() uint64 {
	if t == nil || t.TlpPrefixBlockedErrors == nil {
		return 0
	}
	return *t.TlpPrefixBlockedErrors
}

// GetTotalErrors retrieves the value of the leaf TotalErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalErrors is set, it can
// safely use t.GetTotalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetTotalErrors() uint64 {
	if t == nil || t.TotalErrors == nil {
		return 0
	}
	return *t.TotalErrors
}

// GetUndefinedErrors retrieves the value of the leaf UndefinedErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UndefinedErrors is set, it can
// safely use t.GetUndefinedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UndefinedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetUndefinedErrors() uint64 {
	if t == nil || t.UndefinedErrors == nil {
		return 0
	}
	return *t.UndefinedErrors
}

// GetUnexpectedCompletionErrors retrieves the value of the leaf UnexpectedCompletionErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnexpectedCompletionErrors is set, it can
// safely use t.GetUnexpectedCompletionErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnexpectedCompletionErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetUnexpectedCompletionErrors() uint64 {
	if t == nil || t.UnexpectedCompletionErrors == nil {
		return 0
	}
	return *t.UnexpectedCompletionErrors
}

// GetUnsupportedRequestErrors retrieves the value of the leaf UnsupportedRequestErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnsupportedRequestErrors is set, it can
// safely use t.GetUnsupportedRequestErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnsupportedRequestErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetUnsupportedRequestErrors() uint64 {
	if t == nil || t.UnsupportedRequestErrors == nil {
		return 0
	}
	return *t.UnsupportedRequestErrors
}

// SetAcsViolationErrors sets the value of the leaf AcsViolationErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetAcsViolationErrors(v uint64) {
	t.AcsViolationErrors = &v
}

// SetAtomicOpBlockedErrors sets the value of the leaf AtomicOpBlockedErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetAtomicOpBlockedErrors(v uint64) {
	t.AtomicOpBlockedErrors = &v
}

// SetBlockedTlpErrors sets the value of the leaf BlockedTlpErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetBlockedTlpErrors(v uint64) {
	t.BlockedTlpErrors = &v
}

// SetCompletionAbortErrors sets the value of the leaf CompletionAbortErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetCompletionAbortErrors(v uint64) {
	t.CompletionAbortErrors = &v
}

// SetCompletionTimeoutErrors sets the value of the leaf CompletionTimeoutErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetCompletionTimeoutErrors(v uint64) {
	t.CompletionTimeoutErrors = &v
}

// SetDataLinkErrors sets the value of the leaf DataLinkErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetDataLinkErrors(v uint64) {
	t.DataLinkErrors = &v
}

// SetEcrcErrors sets the value of the leaf EcrcErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetEcrcErrors(v uint64) {
	t.EcrcErrors = &v
}

// SetFlowControlProtocolErrors sets the value of the leaf FlowControlProtocolErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetFlowControlProtocolErrors(v uint64) {
	t.FlowControlProtocolErrors = &v
}

// SetInternalErrors sets the value of the leaf InternalErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetInternalErrors(v uint64) {
	t.InternalErrors = &v
}

// SetMalformedTlpErrors sets the value of the leaf MalformedTlpErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetMalformedTlpErrors(v uint64) {
	t.MalformedTlpErrors = &v
}

// SetPoisonedTlpErrors sets the value of the leaf PoisonedTlpErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetPoisonedTlpErrors(v uint64) {
	t.PoisonedTlpErrors = &v
}

// SetReceiverOverflowErrors sets the value of the leaf ReceiverOverflowErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetReceiverOverflowErrors(v uint64) {
	t.ReceiverOverflowErrors = &v
}

// SetSurpriseDownErrors sets the value of the leaf SurpriseDownErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetSurpriseDownErrors(v uint64) {
	t.SurpriseDownErrors = &v
}

// SetTlpPrefixBlockedErrors sets the value of the leaf TlpPrefixBlockedErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetTlpPrefixBlockedErrors(v uint64) {
	t.TlpPrefixBlockedErrors = &v
}

// SetTotalErrors sets the value of the leaf TotalErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetTotalErrors(v uint64) {
	t.TotalErrors = &v
}

// SetUndefinedErrors sets the value of the leaf UndefinedErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetUndefinedErrors(v uint64) {
	t.UndefinedErrors = &v
}

// SetUnexpectedCompletionErrors sets the value of the leaf UnexpectedCompletionErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetUnexpectedCompletionErrors(v uint64) {
	t.UnexpectedCompletionErrors = &v
}

// SetUnsupportedRequestErrors sets the value of the leaf UnsupportedRequestErrors in the Component_Pcie_NonFatalErrors
// struct.
func (t *Component_Pcie_NonFatalErrors) SetUnsupportedRequestErrors(v uint64) {
	t.UnsupportedRequestErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie_NonFatalErrors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie_NonFatalErrors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_NonFatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie_NonFatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_NonFatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie_NonFatalErrors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie_NonFatalErrors.
func (*Component_Pcie_NonFatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type Component_Port struct {
	BreakoutMode *Component_Port_BreakoutMode `path:"breakout-mode" module:"openconfig-platform-port"`
}

// IsYANGGoStruct ensures that Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port) IsYANGGoStruct() {}

// GetOrCreateBreakoutMode retrieves the value of the BreakoutMode field
// or returns the existing field if it already exists.
func (t *Component_Port) GetOrCreateBreakoutMode() *Component_Port_BreakoutMode {
	if t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	t.BreakoutMode = &Component_Port_BreakoutMode{}
	return t.BreakoutMode
}

// GetBreakoutMode returns the value of the BreakoutMode struct pointer
// from Component_Port. If the receiver or the field BreakoutMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Port) GetBreakoutMode() *Component_Port_BreakoutMode {
	if t != nil && t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BreakoutMode.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port.
func (*Component_Port) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Port_BreakoutMode represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutMode struct {
	Group map[uint8]*Component_Port_BreakoutMode_Group `path:"groups/group" module:"openconfig-platform-port/openconfig-platform-port"`
}

// IsYANGGoStruct ensures that Component_Port_BreakoutMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_BreakoutMode) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// Component_Port_BreakoutMode struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Port_BreakoutMode) NewGroup(Index uint8) (*Component_Port_BreakoutMode_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint8]*Component_Port_BreakoutMode_Group)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &Component_Port_BreakoutMode_Group{
		Index: &Index,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the Component_Port_BreakoutMode struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Port_BreakoutMode) RenameGroup(oldK, newK uint8) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Index = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroupMap returns the list (map) from Component_Port_BreakoutMode.
//
// It initializes the field if not already initialized.
func (t *Component_Port_BreakoutMode) GetOrCreateGroupMap() map[uint8]*Component_Port_BreakoutMode_Group {
	if t.Group == nil {
		t.Group = make(map[uint8]*Component_Port_BreakoutMode_Group)
	}
	return t.Group
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver Component_Port_BreakoutMode. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Port_BreakoutMode) GetOrCreateGroup(Index uint8) *Component_Port_BreakoutMode_Group {

	key := Index

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of Component_Port_BreakoutMode. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Port_BreakoutMode) GetGroup(Index uint8) *Component_Port_BreakoutMode_Group {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver Component_Port_BreakoutMode. If there is no such element, the function
// is a no-op.
func (t *Component_Port_BreakoutMode) DeleteGroup(Index uint8) {
	key := Index

	delete(t.Group, key)
}

// AppendGroup appends the supplied Component_Port_BreakoutMode_Group struct to the
// list Group of Component_Port_BreakoutMode. If the key value(s) specified in
// the supplied Component_Port_BreakoutMode_Group already exist in the list, an error is
// returned.
func (t *Component_Port_BreakoutMode) AppendGroup(v *Component_Port_BreakoutMode_Group) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint8]*Component_Port_BreakoutMode_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port_BreakoutMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port_BreakoutMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_BreakoutMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_BreakoutMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port_BreakoutMode.
func (*Component_Port_BreakoutMode) ΛBelongingModule() string {
	return "openconfig-platform-port"
}

// Component_Port_BreakoutMode_Group represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_Group struct {
	BreakoutSpeed       E_IfEthernet_ETHERNET_SPEED `path:"state/breakout-speed" module:"openconfig-platform-port/openconfig-platform-port" shadow-path:"config/breakout-speed" shadow-module:"openconfig-platform-port/openconfig-platform-port"`
	Index               *uint8                      `path:"state/index|index" module:"openconfig-platform-port/openconfig-platform-port|openconfig-platform-port" shadow-path:"config/index|index" shadow-module:"openconfig-platform-port/openconfig-platform-port|openconfig-platform-port"`
	NumBreakouts        *uint8                      `path:"state/num-breakouts" module:"openconfig-platform-port/openconfig-platform-port" shadow-path:"config/num-breakouts" shadow-module:"openconfig-platform-port/openconfig-platform-port"`
	NumPhysicalChannels *uint8                      `path:"state/num-physical-channels" module:"openconfig-platform-port/openconfig-platform-port" shadow-path:"config/num-physical-channels" shadow-module:"openconfig-platform-port/openconfig-platform-port"`
}

// IsYANGGoStruct ensures that Component_Port_BreakoutMode_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_BreakoutMode_Group) IsYANGGoStruct() {}

// GetBreakoutSpeed retrieves the value of the leaf BreakoutSpeed from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BreakoutSpeed is set, it can
// safely use t.GetBreakoutSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BreakoutSpeed == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetBreakoutSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.BreakoutSpeed == 0 {
		return 0
	}
	return t.BreakoutSpeed
}

// GetIndex retrieves the value of the leaf Index from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetNumBreakouts retrieves the value of the leaf NumBreakouts from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumBreakouts is set, it can
// safely use t.GetNumBreakouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumBreakouts == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetNumBreakouts() uint8 {
	if t == nil || t.NumBreakouts == nil {
		return 0
	}
	return *t.NumBreakouts
}

// GetNumPhysicalChannels retrieves the value of the leaf NumPhysicalChannels from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumPhysicalChannels is set, it can
// safely use t.GetNumPhysicalChannels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumPhysicalChannels == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetNumPhysicalChannels() uint8 {
	if t == nil || t.NumPhysicalChannels == nil {
		return 0
	}
	return *t.NumPhysicalChannels
}

// SetBreakoutSpeed sets the value of the leaf BreakoutSpeed in the Component_Port_BreakoutMode_Group
// struct.
func (t *Component_Port_BreakoutMode_Group) SetBreakoutSpeed(v E_IfEthernet_ETHERNET_SPEED) {
	t.BreakoutSpeed = v
}

// SetIndex sets the value of the leaf Index in the Component_Port_BreakoutMode_Group
// struct.
func (t *Component_Port_BreakoutMode_Group) SetIndex(v uint8) {
	t.Index = &v
}

// SetNumBreakouts sets the value of the leaf NumBreakouts in the Component_Port_BreakoutMode_Group
// struct.
func (t *Component_Port_BreakoutMode_Group) SetNumBreakouts(v uint8) {
	t.NumBreakouts = &v
}

// SetNumPhysicalChannels sets the value of the leaf NumPhysicalChannels in the Component_Port_BreakoutMode_Group
// struct.
func (t *Component_Port_BreakoutMode_Group) SetNumPhysicalChannels(v uint8) {
	t.NumPhysicalChannels = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port_BreakoutMode_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port_BreakoutMode_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Port_BreakoutMode_Group struct, which is a YANG list entry.
func (t *Component_Port_BreakoutMode_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_BreakoutMode_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_BreakoutMode_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port_BreakoutMode_Group.
func (*Component_Port_BreakoutMode_Group) ΛBelongingModule() string {
	return "openconfig-platform-port"
}

// Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupply struct {
}

// IsYANGGoStruct ensures that Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_PowerSupply) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_PowerSupply
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_PowerSupply) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_PowerSupply) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_PowerSupply.
func (*Component_PowerSupply) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_Property struct {
	Configurable *bool                          `path:"state/configurable" module:"openconfig-platform/openconfig-platform"`
	Name         *string                        `path:"state/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform" shadow-path:"config/name|name" shadow-module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	Value        Component_Property_Value_Union `path:"state/value" module:"openconfig-platform/openconfig-platform" shadow-path:"config/value" shadow-module:"openconfig-platform/openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Property) IsYANGGoStruct() {}

// GetConfigurable retrieves the value of the leaf Configurable from the Component_Property
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Configurable is set, it can
// safely use t.GetConfigurable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Configurable == nil' before retrieving the leaf's value.
func (t *Component_Property) GetConfigurable() bool {
	if t == nil || t.Configurable == nil {
		return false
	}
	return *t.Configurable
}

// GetName retrieves the value of the leaf Name from the Component_Property
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_Property) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the Component_Property
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *Component_Property) GetValue() Component_Property_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// SetConfigurable sets the value of the leaf Configurable in the Component_Property
// struct.
func (t *Component_Property) SetConfigurable(v bool) {
	t.Configurable = &v
}

// SetName sets the value of the leaf Name in the Component_Property
// struct.
func (t *Component_Property) SetName(v string) {
	t.Name = &v
}

// SetValue sets the value of the leaf Value in the Component_Property
// struct.
func (t *Component_Property) SetValue(v Component_Property_Value_Union) {
	t.Value = v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Property
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Property) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Property struct, which is a YANG list entry.
func (t *Component_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Property) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Property) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Property) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Property.
func (*Component_Property) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_SoftwareModule represents the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModule struct {
	ModuleType E_PlatformSoftware_SOFTWARE_MODULE_TYPE `path:"state/module-type" module:"openconfig-platform/openconfig-platform-software"`
}

// IsYANGGoStruct ensures that Component_SoftwareModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_SoftwareModule) IsYANGGoStruct() {}

// GetModuleType retrieves the value of the leaf ModuleType from the Component_SoftwareModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModuleType is set, it can
// safely use t.GetModuleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModuleType == nil' before retrieving the leaf's value.
func (t *Component_SoftwareModule) GetModuleType() E_PlatformSoftware_SOFTWARE_MODULE_TYPE {
	if t == nil || t.ModuleType == 0 {
		return 0
	}
	return t.ModuleType
}

// SetModuleType sets the value of the leaf ModuleType in the Component_SoftwareModule
// struct.
func (t *Component_SoftwareModule) SetModuleType(v E_PlatformSoftware_SOFTWARE_MODULE_TYPE) {
	t.ModuleType = v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_SoftwareModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_SoftwareModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_SoftwareModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_SoftwareModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_SoftwareModule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_SoftwareModule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_SoftwareModule.
func (*Component_SoftwareModule) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_Storage struct {
}

// IsYANGGoStruct ensures that Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Storage) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Storage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Storage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Storage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Storage.
func (*Component_Storage) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_Subcomponent struct {
	Name *string `path:"state/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform" shadow-path:"config/name|name" shadow-module:"openconfig-platform/openconfig-platform|openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Subcomponent) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the Component_Subcomponent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_Subcomponent) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the Component_Subcomponent
// struct.
func (t *Component_Subcomponent) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Subcomponent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Subcomponent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Subcomponent struct, which is a YANG list entry.
func (t *Component_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Subcomponent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Subcomponent.
func (*Component_Subcomponent) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_Temperature struct {
	AlarmSeverity  E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	AlarmStatus    *bool                                  `path:"alarm-status" module:"openconfig-platform"`
	AlarmThreshold *uint32                                `path:"alarm-threshold" module:"openconfig-platform"`
	Avg            *float64                               `path:"avg" module:"openconfig-platform"`
	Instant        *float64                               `path:"instant" module:"openconfig-platform"`
	Interval       *uint64                                `path:"interval" module:"openconfig-platform"`
	Max            *float64                               `path:"max" module:"openconfig-platform"`
	MaxTime        *uint64                                `path:"max-time" module:"openconfig-platform"`
	Min            *float64                               `path:"min" module:"openconfig-platform"`
	MinTime        *uint64                                `path:"min-time" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Temperature) IsYANGGoStruct() {}

// GetAlarmSeverity retrieves the value of the leaf AlarmSeverity from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmSeverity is set, it can
// safely use t.GetAlarmSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmSeverity == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.AlarmSeverity == 0 {
		return 0
	}
	return t.AlarmSeverity
}

// GetAlarmStatus retrieves the value of the leaf AlarmStatus from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmStatus is set, it can
// safely use t.GetAlarmStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmStatus == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmStatus() bool {
	if t == nil || t.AlarmStatus == nil {
		return false
	}
	return *t.AlarmStatus
}

// GetAlarmThreshold retrieves the value of the leaf AlarmThreshold from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmThreshold is set, it can
// safely use t.GetAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmThreshold == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmThreshold() uint32 {
	if t == nil || t.AlarmThreshold == nil {
		return 0
	}
	return *t.AlarmThreshold
}

// GetAvg retrieves the value of the leaf Avg from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAlarmSeverity sets the value of the leaf AlarmSeverity in the Component_Temperature
// struct.
func (t *Component_Temperature) SetAlarmSeverity(v E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	t.AlarmSeverity = v
}

// SetAlarmStatus sets the value of the leaf AlarmStatus in the Component_Temperature
// struct.
func (t *Component_Temperature) SetAlarmStatus(v bool) {
	t.AlarmStatus = &v
}

// SetAlarmThreshold sets the value of the leaf AlarmThreshold in the Component_Temperature
// struct.
func (t *Component_Temperature) SetAlarmThreshold(v uint32) {
	t.AlarmThreshold = &v
}

// SetAvg sets the value of the leaf Avg in the Component_Temperature
// struct.
func (t *Component_Temperature) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Temperature
// struct.
func (t *Component_Temperature) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Temperature
// struct.
func (t *Component_Temperature) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Temperature
// struct.
func (t *Component_Temperature) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Temperature
// struct.
func (t *Component_Temperature) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Temperature
// struct.
func (t *Component_Temperature) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Temperature
// struct.
func (t *Component_Temperature) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Temperature
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Temperature) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Temperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Temperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Temperature.
func (*Component_Temperature) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Transceiver represents the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_Transceiver struct {
	Channel                map[uint16]*Component_Transceiver_Channel                                   `path:"physical-channels/channel" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ConnectorType          E_TransportTypes_FIBER_CONNECTOR_TYPE                                       `path:"state/connector-type" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	DateCode               *string                                                                     `path:"state/date-code" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Enabled                *bool                                                                       `path:"state/enabled" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/enabled" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	EthernetPmd            E_TransportTypes_ETHERNET_PMD_TYPE                                          `path:"state/ethernet-pmd" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	EthernetPmdPreconf     E_TransportTypes_ETHERNET_PMD_TYPE                                          `path:"state/ethernet-pmd-preconf" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/ethernet-pmd-preconf" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FaultCondition         *bool                                                                       `path:"state/fault-condition" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FecCorrectedBits       *uint64                                                                     `path:"state/fec-corrected-bits" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FecCorrectedBytes      *uint64                                                                     `path:"state/fec-corrected-bytes" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FecMode                E_PlatformTypes_FEC_MODE_TYPE                                               `path:"state/fec-mode" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/fec-mode" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FecStatus              E_PlatformTypes_FEC_STATUS_TYPE                                             `path:"state/fec-status" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FecUncorrectableBlocks *uint64                                                                     `path:"state/fec-uncorrectable-blocks" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FecUncorrectableWords  *uint64                                                                     `path:"state/fec-uncorrectable-words" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FormFactor             E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                               `path:"state/form-factor" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	FormFactorPreconf      E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                               `path:"state/form-factor-preconf" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/form-factor-preconf" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	InputPower             *Component_Transceiver_InputPower                                           `path:"state/input-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Lane                   map[uint8]*Component_Transceiver_Lane                                       `path:"host-lanes/lane" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserBiasCurrent       *Component_Transceiver_LaserBiasCurrent                                     `path:"state/laser-bias-current" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ModuleFunctionalType   E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE                         `path:"state/module-functional-type" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/module-functional-type" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	OtnComplianceCode      E_TransportTypes_OTN_APPLICATION_CODE                                       `path:"state/otn-compliance-code" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	OutputPower            *Component_Transceiver_OutputPower                                          `path:"state/output-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	PostFecBer             *Component_Transceiver_PostFecBer                                           `path:"state/post-fec-ber" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	PreFecBer              *Component_Transceiver_PreFecBer                                            `path:"state/pre-fec-ber" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Present                E_Transceiver_Present                                                       `path:"state/present" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	SerialNo               *string                                                                     `path:"state/serial-no" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	SonetSdhComplianceCode E_TransportTypes_SONET_APPLICATION_CODE                                     `path:"state/sonet-sdh-compliance-code" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	SupplyVoltage          *Component_Transceiver_SupplyVoltage                                        `path:"state/supply-voltage" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Threshold              map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold `path:"thresholds/threshold" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Vendor                 *string                                                                     `path:"state/vendor" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	VendorPart             *string                                                                     `path:"state/vendor-part" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	VendorRev              *string                                                                     `path:"state/vendor-rev" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// Component_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Transceiver) NewChannel(Index uint16) (*Component_Transceiver_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*Component_Transceiver_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &Component_Transceiver_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the Component_Transceiver struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Transceiver) RenameChannel(oldK, newK uint16) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannelMap returns the list (map) from Component_Transceiver.
//
// It initializes the field if not already initialized.
func (t *Component_Transceiver) GetOrCreateChannelMap() map[uint16]*Component_Transceiver_Channel {
	if t.Channel == nil {
		t.Channel = make(map[uint16]*Component_Transceiver_Channel)
	}
	return t.Channel
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver Component_Transceiver. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Transceiver) GetOrCreateChannel(Index uint16) *Component_Transceiver_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of Component_Transceiver. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Transceiver) GetChannel(Index uint16) *Component_Transceiver_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver Component_Transceiver. If there is no such element, the function
// is a no-op.
func (t *Component_Transceiver) DeleteChannel(Index uint16) {
	key := Index

	delete(t.Channel, key)
}

// AppendChannel appends the supplied Component_Transceiver_Channel struct to the
// list Channel of Component_Transceiver. If the key value(s) specified in
// the supplied Component_Transceiver_Channel already exist in the list, an error is
// returned.
func (t *Component_Transceiver) AppendChannel(v *Component_Transceiver_Channel) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*Component_Transceiver_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// NewLane creates a new entry in the Lane list of the
// Component_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Transceiver) NewLane(LaneNumber uint8) (*Component_Transceiver_Lane, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lane == nil {
		t.Lane = make(map[uint8]*Component_Transceiver_Lane)
	}

	key := LaneNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lane[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lane", key)
	}

	t.Lane[key] = &Component_Transceiver_Lane{
		LaneNumber: &LaneNumber,
	}

	return t.Lane[key], nil
}

// RenameLane renames an entry in the list Lane within
// the Component_Transceiver struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Transceiver) RenameLane(oldK, newK uint8) error {
	if _, ok := t.Lane[newK]; ok {
		return fmt.Errorf("key %v already exists in Lane", newK)
	}

	e, ok := t.Lane[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lane", oldK)
	}
	e.LaneNumber = &newK

	t.Lane[newK] = e
	delete(t.Lane, oldK)
	return nil
}

// GetOrCreateLaneMap returns the list (map) from Component_Transceiver.
//
// It initializes the field if not already initialized.
func (t *Component_Transceiver) GetOrCreateLaneMap() map[uint8]*Component_Transceiver_Lane {
	if t.Lane == nil {
		t.Lane = make(map[uint8]*Component_Transceiver_Lane)
	}
	return t.Lane
}

// GetOrCreateLane retrieves the value with the specified keys from
// the receiver Component_Transceiver. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Transceiver) GetOrCreateLane(LaneNumber uint8) *Component_Transceiver_Lane {

	key := LaneNumber

	if v, ok := t.Lane[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLane(LaneNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLane got unexpected error: %v", err))
	}
	return v
}

// GetLane retrieves the value with the specified key from
// the Lane map field of Component_Transceiver. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Transceiver) GetLane(LaneNumber uint8) *Component_Transceiver_Lane {

	if t == nil {
		return nil
	}

	key := LaneNumber

	if lm, ok := t.Lane[key]; ok {
		return lm
	}
	return nil
}

// DeleteLane deletes the value with the specified keys from
// the receiver Component_Transceiver. If there is no such element, the function
// is a no-op.
func (t *Component_Transceiver) DeleteLane(LaneNumber uint8) {
	key := LaneNumber

	delete(t.Lane, key)
}

// AppendLane appends the supplied Component_Transceiver_Lane struct to the
// list Lane of Component_Transceiver. If the key value(s) specified in
// the supplied Component_Transceiver_Lane already exist in the list, an error is
// returned.
func (t *Component_Transceiver) AppendLane(v *Component_Transceiver_Lane) error {
	if v.LaneNumber == nil {
		return fmt.Errorf("invalid nil key received for LaneNumber")
	}

	key := *v.LaneNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lane == nil {
		t.Lane = make(map[uint8]*Component_Transceiver_Lane)
	}

	if _, ok := t.Lane[key]; ok {
		return fmt.Errorf("duplicate key for list Lane %v", key)
	}

	t.Lane[key] = v
	return nil
}

// NewThreshold creates a new entry in the Threshold list of the
// Component_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Transceiver) NewThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) (*Component_Transceiver_Threshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Threshold == nil {
		t.Threshold = make(map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold)
	}

	key := Severity

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Threshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Threshold", key)
	}

	t.Threshold[key] = &Component_Transceiver_Threshold{
		Severity: Severity,
	}

	return t.Threshold[key], nil
}

// RenameThreshold renames an entry in the list Threshold within
// the Component_Transceiver struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Transceiver) RenameThreshold(oldK, newK E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) error {
	if _, ok := t.Threshold[newK]; ok {
		return fmt.Errorf("key %v already exists in Threshold", newK)
	}

	e, ok := t.Threshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Threshold", oldK)
	}
	e.Severity = newK

	t.Threshold[newK] = e
	delete(t.Threshold, oldK)
	return nil
}

// GetOrCreateThresholdMap returns the list (map) from Component_Transceiver.
//
// It initializes the field if not already initialized.
func (t *Component_Transceiver) GetOrCreateThresholdMap() map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold {
	if t.Threshold == nil {
		t.Threshold = make(map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold)
	}
	return t.Threshold
}

// GetOrCreateThreshold retrieves the value with the specified keys from
// the receiver Component_Transceiver. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Transceiver) GetOrCreateThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_Threshold {

	key := Severity

	if v, ok := t.Threshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewThreshold(Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateThreshold got unexpected error: %v", err))
	}
	return v
}

// GetThreshold retrieves the value with the specified key from
// the Threshold map field of Component_Transceiver. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Transceiver) GetThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_Threshold {

	if t == nil {
		return nil
	}

	key := Severity

	if lm, ok := t.Threshold[key]; ok {
		return lm
	}
	return nil
}

// DeleteThreshold deletes the value with the specified keys from
// the receiver Component_Transceiver. If there is no such element, the function
// is a no-op.
func (t *Component_Transceiver) DeleteThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	key := Severity

	delete(t.Threshold, key)
}

// AppendThreshold appends the supplied Component_Transceiver_Threshold struct to the
// list Threshold of Component_Transceiver. If the key value(s) specified in
// the supplied Component_Transceiver_Threshold already exist in the list, an error is
// returned.
func (t *Component_Transceiver) AppendThreshold(v *Component_Transceiver_Threshold) error {
	key := v.Severity

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Threshold == nil {
		t.Threshold = make(map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold)
	}

	if _, ok := t.Threshold[key]; ok {
		return fmt.Errorf("duplicate key for list Threshold %v", key)
	}

	t.Threshold[key] = v
	return nil
}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateInputPower() *Component_Transceiver_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_Transceiver_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateLaserBiasCurrent() *Component_Transceiver_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &Component_Transceiver_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateOutputPower() *Component_Transceiver_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_Transceiver_OutputPower{}
	return t.OutputPower
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreatePostFecBer() *Component_Transceiver_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &Component_Transceiver_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreatePreFecBer() *Component_Transceiver_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &Component_Transceiver_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateSupplyVoltage retrieves the value of the SupplyVoltage field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateSupplyVoltage() *Component_Transceiver_SupplyVoltage {
	if t.SupplyVoltage != nil {
		return t.SupplyVoltage
	}
	t.SupplyVoltage = &Component_Transceiver_SupplyVoltage{}
	return t.SupplyVoltage
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_Transceiver. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetInputPower() *Component_Transceiver_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from Component_Transceiver. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetLaserBiasCurrent() *Component_Transceiver_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_Transceiver. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetOutputPower() *Component_Transceiver_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from Component_Transceiver. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetPostFecBer() *Component_Transceiver_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from Component_Transceiver. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetPreFecBer() *Component_Transceiver_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetSupplyVoltage returns the value of the SupplyVoltage struct pointer
// from Component_Transceiver. If the receiver or the field SupplyVoltage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetSupplyVoltage() *Component_Transceiver_SupplyVoltage {
	if t != nil && t.SupplyVoltage != nil {
		return t.SupplyVoltage
	}
	return nil
}

// GetConnectorType retrieves the value of the leaf ConnectorType from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectorType is set, it can
// safely use t.GetConnectorType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectorType == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetConnectorType() E_TransportTypes_FIBER_CONNECTOR_TYPE {
	if t == nil || t.ConnectorType == 0 {
		return 0
	}
	return t.ConnectorType
}

// GetDateCode retrieves the value of the leaf DateCode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DateCode is set, it can
// safely use t.GetDateCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DateCode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetDateCode() string {
	if t == nil || t.DateCode == nil {
		return ""
	}
	return *t.DateCode
}

// GetEnabled retrieves the value of the leaf Enabled from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetEthernetPmd retrieves the value of the leaf EthernetPmd from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetPmd is set, it can
// safely use t.GetEthernetPmd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetPmd == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetEthernetPmd() E_TransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmd == 0 {
		return 0
	}
	return t.EthernetPmd
}

// GetEthernetPmdPreconf retrieves the value of the leaf EthernetPmdPreconf from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetPmdPreconf is set, it can
// safely use t.GetEthernetPmdPreconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetPmdPreconf == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetEthernetPmdPreconf() E_TransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmdPreconf == 0 {
		return 0
	}
	return t.EthernetPmdPreconf
}

// GetFaultCondition retrieves the value of the leaf FaultCondition from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultCondition is set, it can
// safely use t.GetFaultCondition() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultCondition == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFaultCondition() bool {
	if t == nil || t.FaultCondition == nil {
		return false
	}
	return *t.FaultCondition
}

// GetFecCorrectedBits retrieves the value of the leaf FecCorrectedBits from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBits is set, it can
// safely use t.GetFecCorrectedBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBits == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecCorrectedBits() uint64 {
	if t == nil || t.FecCorrectedBits == nil {
		return 0
	}
	return *t.FecCorrectedBits
}

// GetFecCorrectedBytes retrieves the value of the leaf FecCorrectedBytes from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBytes is set, it can
// safely use t.GetFecCorrectedBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBytes == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecCorrectedBytes() uint64 {
	if t == nil || t.FecCorrectedBytes == nil {
		return 0
	}
	return *t.FecCorrectedBytes
}

// GetFecMode retrieves the value of the leaf FecMode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecMode is set, it can
// safely use t.GetFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecMode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecMode() E_PlatformTypes_FEC_MODE_TYPE {
	if t == nil || t.FecMode == 0 {
		return 0
	}
	return t.FecMode
}

// GetFecStatus retrieves the value of the leaf FecStatus from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecStatus is set, it can
// safely use t.GetFecStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecStatus == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecStatus() E_PlatformTypes_FEC_STATUS_TYPE {
	if t == nil || t.FecStatus == 0 {
		return 0
	}
	return t.FecStatus
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableBlocks is set, it can
// safely use t.GetFecUncorrectableBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableBlocks == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFecUncorrectableWords retrieves the value of the leaf FecUncorrectableWords from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableWords is set, it can
// safely use t.GetFecUncorrectableWords() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableWords == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecUncorrectableWords() uint64 {
	if t == nil || t.FecUncorrectableWords == nil {
		return 0
	}
	return *t.FecUncorrectableWords
}

// GetFormFactor retrieves the value of the leaf FormFactor from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FormFactor is set, it can
// safely use t.GetFormFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FormFactor == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFormFactor() E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactor == 0 {
		return 0
	}
	return t.FormFactor
}

// GetFormFactorPreconf retrieves the value of the leaf FormFactorPreconf from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FormFactorPreconf is set, it can
// safely use t.GetFormFactorPreconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FormFactorPreconf == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFormFactorPreconf() E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactorPreconf == 0 {
		return 0
	}
	return t.FormFactorPreconf
}

// GetModuleFunctionalType retrieves the value of the leaf ModuleFunctionalType from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModuleFunctionalType is set, it can
// safely use t.GetModuleFunctionalType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModuleFunctionalType == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetModuleFunctionalType() E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE {
	if t == nil || t.ModuleFunctionalType == 0 {
		return 0
	}
	return t.ModuleFunctionalType
}

// GetOtnComplianceCode retrieves the value of the leaf OtnComplianceCode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtnComplianceCode is set, it can
// safely use t.GetOtnComplianceCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtnComplianceCode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetOtnComplianceCode() E_TransportTypes_OTN_APPLICATION_CODE {
	if t == nil || t.OtnComplianceCode == 0 {
		return 0
	}
	return t.OtnComplianceCode
}

// GetPresent retrieves the value of the leaf Present from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Present is set, it can
// safely use t.GetPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Present == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetPresent() E_Transceiver_Present {
	if t == nil || t.Present == 0 {
		return 0
	}
	return t.Present
}

// GetSerialNo retrieves the value of the leaf SerialNo from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SerialNo is set, it can
// safely use t.GetSerialNo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SerialNo == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSonetSdhComplianceCode retrieves the value of the leaf SonetSdhComplianceCode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SonetSdhComplianceCode is set, it can
// safely use t.GetSonetSdhComplianceCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SonetSdhComplianceCode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetSonetSdhComplianceCode() E_TransportTypes_SONET_APPLICATION_CODE {
	if t == nil || t.SonetSdhComplianceCode == 0 {
		return 0
	}
	return t.SonetSdhComplianceCode
}

// GetVendor retrieves the value of the leaf Vendor from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendor() string {
	if t == nil || t.Vendor == nil {
		return ""
	}
	return *t.Vendor
}

// GetVendorPart retrieves the value of the leaf VendorPart from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorPart is set, it can
// safely use t.GetVendorPart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorPart == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendorPart() string {
	if t == nil || t.VendorPart == nil {
		return ""
	}
	return *t.VendorPart
}

// GetVendorRev retrieves the value of the leaf VendorRev from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorRev is set, it can
// safely use t.GetVendorRev() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorRev == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendorRev() string {
	if t == nil || t.VendorRev == nil {
		return ""
	}
	return *t.VendorRev
}

// SetConnectorType sets the value of the leaf ConnectorType in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetConnectorType(v E_TransportTypes_FIBER_CONNECTOR_TYPE) {
	t.ConnectorType = v
}

// SetDateCode sets the value of the leaf DateCode in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetDateCode(v string) {
	t.DateCode = &v
}

// SetEnabled sets the value of the leaf Enabled in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetEthernetPmd sets the value of the leaf EthernetPmd in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetEthernetPmd(v E_TransportTypes_ETHERNET_PMD_TYPE) {
	t.EthernetPmd = v
}

// SetEthernetPmdPreconf sets the value of the leaf EthernetPmdPreconf in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetEthernetPmdPreconf(v E_TransportTypes_ETHERNET_PMD_TYPE) {
	t.EthernetPmdPreconf = v
}

// SetFaultCondition sets the value of the leaf FaultCondition in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFaultCondition(v bool) {
	t.FaultCondition = &v
}

// SetFecCorrectedBits sets the value of the leaf FecCorrectedBits in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFecCorrectedBits(v uint64) {
	t.FecCorrectedBits = &v
}

// SetFecCorrectedBytes sets the value of the leaf FecCorrectedBytes in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFecCorrectedBytes(v uint64) {
	t.FecCorrectedBytes = &v
}

// SetFecMode sets the value of the leaf FecMode in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFecMode(v E_PlatformTypes_FEC_MODE_TYPE) {
	t.FecMode = v
}

// SetFecStatus sets the value of the leaf FecStatus in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFecStatus(v E_PlatformTypes_FEC_STATUS_TYPE) {
	t.FecStatus = v
}

// SetFecUncorrectableBlocks sets the value of the leaf FecUncorrectableBlocks in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFecUncorrectableBlocks(v uint64) {
	t.FecUncorrectableBlocks = &v
}

// SetFecUncorrectableWords sets the value of the leaf FecUncorrectableWords in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFecUncorrectableWords(v uint64) {
	t.FecUncorrectableWords = &v
}

// SetFormFactor sets the value of the leaf FormFactor in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFormFactor(v E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE) {
	t.FormFactor = v
}

// SetFormFactorPreconf sets the value of the leaf FormFactorPreconf in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetFormFactorPreconf(v E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE) {
	t.FormFactorPreconf = v
}

// SetModuleFunctionalType sets the value of the leaf ModuleFunctionalType in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetModuleFunctionalType(v E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE) {
	t.ModuleFunctionalType = v
}

// SetOtnComplianceCode sets the value of the leaf OtnComplianceCode in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetOtnComplianceCode(v E_TransportTypes_OTN_APPLICATION_CODE) {
	t.OtnComplianceCode = v
}

// SetPresent sets the value of the leaf Present in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetPresent(v E_Transceiver_Present) {
	t.Present = v
}

// SetSerialNo sets the value of the leaf SerialNo in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetSerialNo(v string) {
	t.SerialNo = &v
}

// SetSonetSdhComplianceCode sets the value of the leaf SonetSdhComplianceCode in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetSonetSdhComplianceCode(v E_TransportTypes_SONET_APPLICATION_CODE) {
	t.SonetSdhComplianceCode = v
}

// SetVendor sets the value of the leaf Vendor in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetVendor(v string) {
	t.Vendor = &v
}

// SetVendorPart sets the value of the leaf VendorPart in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetVendorPart(v string) {
	t.VendorPart = &v
}

// SetVendorRev sets the value of the leaf VendorRev in the Component_Transceiver
// struct.
func (t *Component_Transceiver) SetVendorRev(v string) {
	t.VendorRev = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InputPower.PopulateDefaults()
	t.LaserBiasCurrent.PopulateDefaults()
	t.OutputPower.PopulateDefaults()
	t.PostFecBer.PopulateDefaults()
	t.PreFecBer.PopulateDefaults()
	t.SupplyVoltage.PopulateDefaults()
	for _, e := range t.Channel {
		e.PopulateDefaults()
	}
	for _, e := range t.Lane {
		e.PopulateDefaults()
	}
	for _, e := range t.Threshold {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver.
func (*Component_Transceiver) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_Channel struct {
	AssociatedOpticalChannel *string                                                 `path:"state/associated-optical-channel" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/associated-optical-channel" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Description              *string                                                 `path:"state/description" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/description" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Index                    *uint16                                                 `path:"state/index|index" module:"openconfig-platform-transceiver/openconfig-platform-transceiver|openconfig-platform-transceiver" shadow-path:"config/index|index" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver|openconfig-platform-transceiver"`
	InputPower               *Component_Transceiver_Channel_InputPower               `path:"state/input-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserAge                 *uint8                                                  `path:"state/laser-age" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserBiasCurrent         *Component_Transceiver_Channel_LaserBiasCurrent         `path:"state/laser-bias-current" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserTemperature         *Component_Transceiver_Channel_LaserTemperature         `path:"state/laser-temperature" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	OutputFrequency          *uint64                                                 `path:"state/output-frequency" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	OutputPower              *Component_Transceiver_Channel_OutputPower              `path:"state/output-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	RxCdrLol                 *bool                                                   `path:"state/rx-cdr-lol" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	RxLos                    *bool                                                   `path:"state/rx-los" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	TargetFrequencyDeviation *Component_Transceiver_Channel_TargetFrequencyDeviation `path:"state/target-frequency-deviation" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	TargetOutputPower        *float64                                                `path:"state/target-output-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/target-output-power" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	TecCurrent               *Component_Transceiver_Channel_TecCurrent               `path:"state/tec-current" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	TxFailure                *bool                                                   `path:"state/tx-failure" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	TxLaser                  *bool                                                   `path:"state/tx-laser" module:"openconfig-platform-transceiver/openconfig-platform-transceiver" shadow-path:"config/tx-laser" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel) IsYANGGoStruct() {}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateInputPower() *Component_Transceiver_Channel_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_Transceiver_Channel_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateLaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &Component_Transceiver_Channel_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateLaserTemperature retrieves the value of the LaserTemperature field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateLaserTemperature() *Component_Transceiver_Channel_LaserTemperature {
	if t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	t.LaserTemperature = &Component_Transceiver_Channel_LaserTemperature{}
	return t.LaserTemperature
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateOutputPower() *Component_Transceiver_Channel_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_Transceiver_Channel_OutputPower{}
	return t.OutputPower
}

// GetOrCreateTargetFrequencyDeviation retrieves the value of the TargetFrequencyDeviation field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateTargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviation {
	if t.TargetFrequencyDeviation != nil {
		return t.TargetFrequencyDeviation
	}
	t.TargetFrequencyDeviation = &Component_Transceiver_Channel_TargetFrequencyDeviation{}
	return t.TargetFrequencyDeviation
}

// GetOrCreateTecCurrent retrieves the value of the TecCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateTecCurrent() *Component_Transceiver_Channel_TecCurrent {
	if t.TecCurrent != nil {
		return t.TecCurrent
	}
	t.TecCurrent = &Component_Transceiver_Channel_TecCurrent{}
	return t.TecCurrent
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_Transceiver_Channel. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetInputPower() *Component_Transceiver_Channel_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from Component_Transceiver_Channel. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetLaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetLaserTemperature returns the value of the LaserTemperature struct pointer
// from Component_Transceiver_Channel. If the receiver or the field LaserTemperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetLaserTemperature() *Component_Transceiver_Channel_LaserTemperature {
	if t != nil && t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_Transceiver_Channel. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetOutputPower() *Component_Transceiver_Channel_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetTargetFrequencyDeviation returns the value of the TargetFrequencyDeviation struct pointer
// from Component_Transceiver_Channel. If the receiver or the field TargetFrequencyDeviation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetTargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviation {
	if t != nil && t.TargetFrequencyDeviation != nil {
		return t.TargetFrequencyDeviation
	}
	return nil
}

// GetTecCurrent returns the value of the TecCurrent struct pointer
// from Component_Transceiver_Channel. If the receiver or the field TecCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetTecCurrent() *Component_Transceiver_Channel_TecCurrent {
	if t != nil && t.TecCurrent != nil {
		return t.TecCurrent
	}
	return nil
}

// GetAssociatedOpticalChannel retrieves the value of the leaf AssociatedOpticalChannel from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociatedOpticalChannel is set, it can
// safely use t.GetAssociatedOpticalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociatedOpticalChannel == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetAssociatedOpticalChannel() string {
	if t == nil || t.AssociatedOpticalChannel == nil {
		return ""
	}
	return *t.AssociatedOpticalChannel
}

// GetDescription retrieves the value of the leaf Description from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLaserAge retrieves the value of the leaf LaserAge from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserAge is set, it can
// safely use t.GetLaserAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserAge == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetLaserAge() uint8 {
	if t == nil || t.LaserAge == nil {
		return 0
	}
	return *t.LaserAge
}

// GetOutputFrequency retrieves the value of the leaf OutputFrequency from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFrequency is set, it can
// safely use t.GetOutputFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFrequency == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetOutputFrequency() uint64 {
	if t == nil || t.OutputFrequency == nil {
		return 0
	}
	return *t.OutputFrequency
}

// GetRxCdrLol retrieves the value of the leaf RxCdrLol from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxCdrLol is set, it can
// safely use t.GetRxCdrLol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxCdrLol == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetRxCdrLol() bool {
	if t == nil || t.RxCdrLol == nil {
		return false
	}
	return *t.RxCdrLol
}

// GetRxLos retrieves the value of the leaf RxLos from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxLos is set, it can
// safely use t.GetRxLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxLos == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetRxLos() bool {
	if t == nil || t.RxLos == nil {
		return false
	}
	return *t.RxLos
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetOutputPower is set, it can
// safely use t.GetTargetOutputPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetOutputPower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// GetTxFailure retrieves the value of the leaf TxFailure from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxFailure is set, it can
// safely use t.GetTxFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxFailure == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetTxFailure() bool {
	if t == nil || t.TxFailure == nil {
		return false
	}
	return *t.TxFailure
}

// GetTxLaser retrieves the value of the leaf TxLaser from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxLaser is set, it can
// safely use t.GetTxLaser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxLaser == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetTxLaser() bool {
	if t == nil || t.TxLaser == nil {
		return false
	}
	return *t.TxLaser
}

// SetAssociatedOpticalChannel sets the value of the leaf AssociatedOpticalChannel in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetAssociatedOpticalChannel(v string) {
	t.AssociatedOpticalChannel = &v
}

// SetDescription sets the value of the leaf Description in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetDescription(v string) {
	t.Description = &v
}

// SetIndex sets the value of the leaf Index in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetIndex(v uint16) {
	t.Index = &v
}

// SetLaserAge sets the value of the leaf LaserAge in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetLaserAge(v uint8) {
	t.LaserAge = &v
}

// SetOutputFrequency sets the value of the leaf OutputFrequency in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetOutputFrequency(v uint64) {
	t.OutputFrequency = &v
}

// SetRxCdrLol sets the value of the leaf RxCdrLol in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetRxCdrLol(v bool) {
	t.RxCdrLol = &v
}

// SetRxLos sets the value of the leaf RxLos in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetRxLos(v bool) {
	t.RxLos = &v
}

// SetTargetOutputPower sets the value of the leaf TargetOutputPower in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetTargetOutputPower(v float64) {
	t.TargetOutputPower = &v
}

// SetTxFailure sets the value of the leaf TxFailure in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetTxFailure(v bool) {
	t.TxFailure = &v
}

// SetTxLaser sets the value of the leaf TxLaser in the Component_Transceiver_Channel
// struct.
func (t *Component_Transceiver_Channel) SetTxLaser(v bool) {
	t.TxLaser = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InputPower.PopulateDefaults()
	t.LaserBiasCurrent.PopulateDefaults()
	t.LaserTemperature.PopulateDefaults()
	t.OutputPower.PopulateDefaults()
	t.TargetFrequencyDeviation.PopulateDefaults()
	t.TecCurrent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Component_Transceiver_Channel struct, which is a YANG list entry.
func (t *Component_Transceiver_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel.
func (*Component_Transceiver_Channel) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_InputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type Component_Transceiver_Channel_InputPower struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_Channel_InputPower
// struct.
func (t *Component_Transceiver_Channel_InputPower) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_Channel_InputPower
// struct.
func (t *Component_Transceiver_Channel_InputPower) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_Channel_InputPower
// struct.
func (t *Component_Transceiver_Channel_InputPower) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_Channel_InputPower
// struct.
func (t *Component_Transceiver_Channel_InputPower) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_Channel_InputPower
// struct.
func (t *Component_Transceiver_Channel_InputPower) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_Channel_InputPower
// struct.
func (t *Component_Transceiver_Channel_InputPower) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_Channel_InputPower
// struct.
func (t *Component_Transceiver_Channel_InputPower) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_InputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_InputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_InputPower.
func (*Component_Transceiver_Channel_InputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_Channel_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_Channel_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_Channel_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_Channel_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_Channel_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_Channel_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_Channel_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_LaserBiasCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_LaserBiasCurrent.
func (*Component_Transceiver_Channel_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_LaserTemperature represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature YANG schema element.
type Component_Transceiver_Channel_LaserTemperature struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_LaserTemperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_LaserTemperature) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_Channel_LaserTemperature
// struct.
func (t *Component_Transceiver_Channel_LaserTemperature) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_Channel_LaserTemperature
// struct.
func (t *Component_Transceiver_Channel_LaserTemperature) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_Channel_LaserTemperature
// struct.
func (t *Component_Transceiver_Channel_LaserTemperature) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_Channel_LaserTemperature
// struct.
func (t *Component_Transceiver_Channel_LaserTemperature) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_Channel_LaserTemperature
// struct.
func (t *Component_Transceiver_Channel_LaserTemperature) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_Channel_LaserTemperature
// struct.
func (t *Component_Transceiver_Channel_LaserTemperature) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_Channel_LaserTemperature
// struct.
func (t *Component_Transceiver_Channel_LaserTemperature) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_LaserTemperature
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_LaserTemperature) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserTemperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_LaserTemperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserTemperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_LaserTemperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_LaserTemperature.
func (*Component_Transceiver_Channel_LaserTemperature) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_OutputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type Component_Transceiver_Channel_OutputPower struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_Channel_OutputPower
// struct.
func (t *Component_Transceiver_Channel_OutputPower) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_Channel_OutputPower
// struct.
func (t *Component_Transceiver_Channel_OutputPower) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_Channel_OutputPower
// struct.
func (t *Component_Transceiver_Channel_OutputPower) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_Channel_OutputPower
// struct.
func (t *Component_Transceiver_Channel_OutputPower) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_Channel_OutputPower
// struct.
func (t *Component_Transceiver_Channel_OutputPower) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_Channel_OutputPower
// struct.
func (t *Component_Transceiver_Channel_OutputPower) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_Channel_OutputPower
// struct.
func (t *Component_Transceiver_Channel_OutputPower) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_OutputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_OutputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_OutputPower.
func (*Component_Transceiver_Channel_OutputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_TargetFrequencyDeviation represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_TargetFrequencyDeviation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_TargetFrequencyDeviation) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_TargetFrequencyDeviation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_TargetFrequencyDeviation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_TargetFrequencyDeviation.
func (*Component_Transceiver_Channel_TargetFrequencyDeviation) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_TecCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrent struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_TecCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_TecCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_Channel_TecCurrent
// struct.
func (t *Component_Transceiver_Channel_TecCurrent) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_Channel_TecCurrent
// struct.
func (t *Component_Transceiver_Channel_TecCurrent) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_Channel_TecCurrent
// struct.
func (t *Component_Transceiver_Channel_TecCurrent) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_Channel_TecCurrent
// struct.
func (t *Component_Transceiver_Channel_TecCurrent) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_Channel_TecCurrent
// struct.
func (t *Component_Transceiver_Channel_TecCurrent) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_Channel_TecCurrent
// struct.
func (t *Component_Transceiver_Channel_TecCurrent) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_Channel_TecCurrent
// struct.
func (t *Component_Transceiver_Channel_TecCurrent) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_TecCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_TecCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TecCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_TecCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TecCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_TecCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_TecCurrent.
func (*Component_Transceiver_Channel_TecCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_InputPower represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPower struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_InputPower
// struct.
func (t *Component_Transceiver_InputPower) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_InputPower
// struct.
func (t *Component_Transceiver_InputPower) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_InputPower
// struct.
func (t *Component_Transceiver_InputPower) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_InputPower
// struct.
func (t *Component_Transceiver_InputPower) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_InputPower
// struct.
func (t *Component_Transceiver_InputPower) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_InputPower
// struct.
func (t *Component_Transceiver_InputPower) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_InputPower
// struct.
func (t *Component_Transceiver_InputPower) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_InputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_InputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_InputPower.
func (*Component_Transceiver_InputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Lane represents the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_Lane struct {
	LaneNumber *uint8 `path:"state/lane-number|lane-number" module:"openconfig-platform-transceiver/openconfig-platform-transceiver|openconfig-platform-transceiver" shadow-path:"config/lane-number|lane-number" shadow-module:"openconfig-platform-transceiver/openconfig-platform-transceiver|openconfig-platform-transceiver"`
	TxCdrLol   *bool  `path:"state/tx-cdr-lol" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	TxLos      *bool  `path:"state/tx-los" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Lane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Lane) IsYANGGoStruct() {}

// GetLaneNumber retrieves the value of the leaf LaneNumber from the Component_Transceiver_Lane
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaneNumber is set, it can
// safely use t.GetLaneNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaneNumber == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Lane) GetLaneNumber() uint8 {
	if t == nil || t.LaneNumber == nil {
		return 0
	}
	return *t.LaneNumber
}

// GetTxCdrLol retrieves the value of the leaf TxCdrLol from the Component_Transceiver_Lane
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxCdrLol is set, it can
// safely use t.GetTxCdrLol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxCdrLol == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Lane) GetTxCdrLol() bool {
	if t == nil || t.TxCdrLol == nil {
		return false
	}
	return *t.TxCdrLol
}

// GetTxLos retrieves the value of the leaf TxLos from the Component_Transceiver_Lane
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxLos is set, it can
// safely use t.GetTxLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxLos == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Lane) GetTxLos() bool {
	if t == nil || t.TxLos == nil {
		return false
	}
	return *t.TxLos
}

// SetLaneNumber sets the value of the leaf LaneNumber in the Component_Transceiver_Lane
// struct.
func (t *Component_Transceiver_Lane) SetLaneNumber(v uint8) {
	t.LaneNumber = &v
}

// SetTxCdrLol sets the value of the leaf TxCdrLol in the Component_Transceiver_Lane
// struct.
func (t *Component_Transceiver_Lane) SetTxCdrLol(v bool) {
	t.TxCdrLol = &v
}

// SetTxLos sets the value of the leaf TxLos in the Component_Transceiver_Lane
// struct.
func (t *Component_Transceiver_Lane) SetTxLos(v bool) {
	t.TxLos = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Lane
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Lane) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Transceiver_Lane struct, which is a YANG list entry.
func (t *Component_Transceiver_Lane) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LaneNumber == nil {
		return nil, fmt.Errorf("nil value for key LaneNumber")
	}

	return map[string]interface{}{
		"lane-number": *t.LaneNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Lane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Lane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Lane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Lane) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Lane.
func (*Component_Transceiver_Lane) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type Component_Transceiver_LaserBiasCurrent struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_LaserBiasCurrent) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_LaserBiasCurrent) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_LaserBiasCurrent) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_LaserBiasCurrent) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_LaserBiasCurrent) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_LaserBiasCurrent) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_LaserBiasCurrent
// struct.
func (t *Component_Transceiver_LaserBiasCurrent) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_LaserBiasCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_LaserBiasCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_LaserBiasCurrent.
func (*Component_Transceiver_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_OutputPower represents the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type Component_Transceiver_OutputPower struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_OutputPower
// struct.
func (t *Component_Transceiver_OutputPower) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_OutputPower
// struct.
func (t *Component_Transceiver_OutputPower) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_OutputPower
// struct.
func (t *Component_Transceiver_OutputPower) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_OutputPower
// struct.
func (t *Component_Transceiver_OutputPower) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_OutputPower
// struct.
func (t *Component_Transceiver_OutputPower) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_OutputPower
// struct.
func (t *Component_Transceiver_OutputPower) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_OutputPower
// struct.
func (t *Component_Transceiver_OutputPower) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_OutputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_OutputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_OutputPower.
func (*Component_Transceiver_OutputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_PostFecBer represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type Component_Transceiver_PostFecBer struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_PostFecBer
// struct.
func (t *Component_Transceiver_PostFecBer) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_PostFecBer
// struct.
func (t *Component_Transceiver_PostFecBer) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_PostFecBer
// struct.
func (t *Component_Transceiver_PostFecBer) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_PostFecBer
// struct.
func (t *Component_Transceiver_PostFecBer) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_PostFecBer
// struct.
func (t *Component_Transceiver_PostFecBer) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_PostFecBer
// struct.
func (t *Component_Transceiver_PostFecBer) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_PostFecBer
// struct.
func (t *Component_Transceiver_PostFecBer) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_PostFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_PostFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_PostFecBer.
func (*Component_Transceiver_PostFecBer) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_PreFecBer represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type Component_Transceiver_PreFecBer struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_PreFecBer
// struct.
func (t *Component_Transceiver_PreFecBer) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_PreFecBer
// struct.
func (t *Component_Transceiver_PreFecBer) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_PreFecBer
// struct.
func (t *Component_Transceiver_PreFecBer) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_PreFecBer
// struct.
func (t *Component_Transceiver_PreFecBer) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_PreFecBer
// struct.
func (t *Component_Transceiver_PreFecBer) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_PreFecBer
// struct.
func (t *Component_Transceiver_PreFecBer) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_PreFecBer
// struct.
func (t *Component_Transceiver_PreFecBer) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_PreFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_PreFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_PreFecBer.
func (*Component_Transceiver_PreFecBer) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_SupplyVoltage represents the /openconfig-platform/components/component/transceiver/state/supply-voltage YANG schema element.
type Component_Transceiver_SupplyVoltage struct {
	Avg      *float64 `path:"avg" module:"openconfig-platform-transceiver"`
	Instant  *float64 `path:"instant" module:"openconfig-platform-transceiver"`
	Interval *uint64  `path:"interval" module:"openconfig-platform-transceiver"`
	Max      *float64 `path:"max" module:"openconfig-platform-transceiver"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-platform-transceiver"`
	Min      *float64 `path:"min" module:"openconfig-platform-transceiver"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_SupplyVoltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_SupplyVoltage) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the Component_Transceiver_SupplyVoltage
// struct.
func (t *Component_Transceiver_SupplyVoltage) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the Component_Transceiver_SupplyVoltage
// struct.
func (t *Component_Transceiver_SupplyVoltage) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the Component_Transceiver_SupplyVoltage
// struct.
func (t *Component_Transceiver_SupplyVoltage) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the Component_Transceiver_SupplyVoltage
// struct.
func (t *Component_Transceiver_SupplyVoltage) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the Component_Transceiver_SupplyVoltage
// struct.
func (t *Component_Transceiver_SupplyVoltage) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the Component_Transceiver_SupplyVoltage
// struct.
func (t *Component_Transceiver_SupplyVoltage) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the Component_Transceiver_SupplyVoltage
// struct.
func (t *Component_Transceiver_SupplyVoltage) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_SupplyVoltage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_SupplyVoltage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_SupplyVoltage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_SupplyVoltage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_SupplyVoltage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_SupplyVoltage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_SupplyVoltage.
func (*Component_Transceiver_SupplyVoltage) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Threshold represents the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_Threshold struct {
	InputPowerLower        *float64                               `path:"state/input-power-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	InputPowerUpper        *float64                               `path:"state/input-power-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserBiasCurrentLower  *float64                               `path:"state/laser-bias-current-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserBiasCurrentUpper  *float64                               `path:"state/laser-bias-current-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserTemperatureLower  *float64                               `path:"state/laser-temperature-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	LaserTemperatureUpper  *float64                               `path:"state/laser-temperature-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ModuleTemperatureLower *float64                               `path:"state/module-temperature-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ModuleTemperatureUpper *float64                               `path:"state/module-temperature-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	OutputPowerLower       *float64                               `path:"state/output-power-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	OutputPowerUpper       *float64                               `path:"state/output-power-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	Severity               E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"state/severity|severity" module:"openconfig-platform-transceiver/openconfig-platform-transceiver|openconfig-platform-transceiver" shadow-path:"severity" shadow-module:"openconfig-platform-transceiver"`
	SupplyVoltageLower     *float64                               `path:"state/supply-voltage-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	SupplyVoltageUpper     *float64                               `path:"state/supply-voltage-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Threshold) IsYANGGoStruct() {}

// GetInputPowerLower retrieves the value of the leaf InputPowerLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputPowerLower is set, it can
// safely use t.GetInputPowerLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputPowerLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetInputPowerLower() float64 {
	if t == nil || t.InputPowerLower == nil {
		return 0.0
	}
	return *t.InputPowerLower
}

// GetInputPowerUpper retrieves the value of the leaf InputPowerUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputPowerUpper is set, it can
// safely use t.GetInputPowerUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputPowerUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetInputPowerUpper() float64 {
	if t == nil || t.InputPowerUpper == nil {
		return 0.0
	}
	return *t.InputPowerUpper
}

// GetLaserBiasCurrentLower retrieves the value of the leaf LaserBiasCurrentLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserBiasCurrentLower is set, it can
// safely use t.GetLaserBiasCurrentLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserBiasCurrentLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserBiasCurrentLower() float64 {
	if t == nil || t.LaserBiasCurrentLower == nil {
		return 0.0
	}
	return *t.LaserBiasCurrentLower
}

// GetLaserBiasCurrentUpper retrieves the value of the leaf LaserBiasCurrentUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserBiasCurrentUpper is set, it can
// safely use t.GetLaserBiasCurrentUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserBiasCurrentUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserBiasCurrentUpper() float64 {
	if t == nil || t.LaserBiasCurrentUpper == nil {
		return 0.0
	}
	return *t.LaserBiasCurrentUpper
}

// GetLaserTemperatureLower retrieves the value of the leaf LaserTemperatureLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserTemperatureLower is set, it can
// safely use t.GetLaserTemperatureLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserTemperatureLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserTemperatureLower() float64 {
	if t == nil || t.LaserTemperatureLower == nil {
		return 0.0
	}
	return *t.LaserTemperatureLower
}

// GetLaserTemperatureUpper retrieves the value of the leaf LaserTemperatureUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserTemperatureUpper is set, it can
// safely use t.GetLaserTemperatureUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserTemperatureUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserTemperatureUpper() float64 {
	if t == nil || t.LaserTemperatureUpper == nil {
		return 0.0
	}
	return *t.LaserTemperatureUpper
}

// GetModuleTemperatureLower retrieves the value of the leaf ModuleTemperatureLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModuleTemperatureLower is set, it can
// safely use t.GetModuleTemperatureLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModuleTemperatureLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetModuleTemperatureLower() float64 {
	if t == nil || t.ModuleTemperatureLower == nil {
		return 0.0
	}
	return *t.ModuleTemperatureLower
}

// GetModuleTemperatureUpper retrieves the value of the leaf ModuleTemperatureUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModuleTemperatureUpper is set, it can
// safely use t.GetModuleTemperatureUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModuleTemperatureUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetModuleTemperatureUpper() float64 {
	if t == nil || t.ModuleTemperatureUpper == nil {
		return 0.0
	}
	return *t.ModuleTemperatureUpper
}

// GetOutputPowerLower retrieves the value of the leaf OutputPowerLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputPowerLower is set, it can
// safely use t.GetOutputPowerLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputPowerLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetOutputPowerLower() float64 {
	if t == nil || t.OutputPowerLower == nil {
		return 0.0
	}
	return *t.OutputPowerLower
}

// GetOutputPowerUpper retrieves the value of the leaf OutputPowerUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputPowerUpper is set, it can
// safely use t.GetOutputPowerUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputPowerUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetOutputPowerUpper() float64 {
	if t == nil || t.OutputPowerUpper == nil {
		return 0.0
	}
	return *t.OutputPowerUpper
}

// GetSeverity retrieves the value of the leaf Severity from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetSupplyVoltageLower retrieves the value of the leaf SupplyVoltageLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplyVoltageLower is set, it can
// safely use t.GetSupplyVoltageLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplyVoltageLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetSupplyVoltageLower() float64 {
	if t == nil || t.SupplyVoltageLower == nil {
		return 0.0
	}
	return *t.SupplyVoltageLower
}

// GetSupplyVoltageUpper retrieves the value of the leaf SupplyVoltageUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplyVoltageUpper is set, it can
// safely use t.GetSupplyVoltageUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplyVoltageUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetSupplyVoltageUpper() float64 {
	if t == nil || t.SupplyVoltageUpper == nil {
		return 0.0
	}
	return *t.SupplyVoltageUpper
}

// SetInputPowerLower sets the value of the leaf InputPowerLower in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetInputPowerLower(v float64) {
	t.InputPowerLower = &v
}

// SetInputPowerUpper sets the value of the leaf InputPowerUpper in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetInputPowerUpper(v float64) {
	t.InputPowerUpper = &v
}

// SetLaserBiasCurrentLower sets the value of the leaf LaserBiasCurrentLower in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetLaserBiasCurrentLower(v float64) {
	t.LaserBiasCurrentLower = &v
}

// SetLaserBiasCurrentUpper sets the value of the leaf LaserBiasCurrentUpper in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetLaserBiasCurrentUpper(v float64) {
	t.LaserBiasCurrentUpper = &v
}

// SetLaserTemperatureLower sets the value of the leaf LaserTemperatureLower in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetLaserTemperatureLower(v float64) {
	t.LaserTemperatureLower = &v
}

// SetLaserTemperatureUpper sets the value of the leaf LaserTemperatureUpper in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetLaserTemperatureUpper(v float64) {
	t.LaserTemperatureUpper = &v
}

// SetModuleTemperatureLower sets the value of the leaf ModuleTemperatureLower in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetModuleTemperatureLower(v float64) {
	t.ModuleTemperatureLower = &v
}

// SetModuleTemperatureUpper sets the value of the leaf ModuleTemperatureUpper in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetModuleTemperatureUpper(v float64) {
	t.ModuleTemperatureUpper = &v
}

// SetOutputPowerLower sets the value of the leaf OutputPowerLower in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetOutputPowerLower(v float64) {
	t.OutputPowerLower = &v
}

// SetOutputPowerUpper sets the value of the leaf OutputPowerUpper in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetOutputPowerUpper(v float64) {
	t.OutputPowerUpper = &v
}

// SetSeverity sets the value of the leaf Severity in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetSeverity(v E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	t.Severity = v
}

// SetSupplyVoltageLower sets the value of the leaf SupplyVoltageLower in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetSupplyVoltageLower(v float64) {
	t.SupplyVoltageLower = &v
}

// SetSupplyVoltageUpper sets the value of the leaf SupplyVoltageUpper in the Component_Transceiver_Threshold
// struct.
func (t *Component_Transceiver_Threshold) SetSupplyVoltageUpper(v float64) {
	t.SupplyVoltageUpper = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Transceiver_Threshold struct, which is a YANG list entry.
func (t *Component_Transceiver_Threshold) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Threshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Threshold.
func (*Component_Transceiver_Threshold) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// DefinedSets represents the /openconfig-defined-sets/defined-sets YANG schema element.
type DefinedSets struct {
	Ipv4PrefixSet map[string]*DefinedSets_Ipv4PrefixSet `path:"ipv4-prefix-sets/ipv4-prefix-set" module:"openconfig-defined-sets/openconfig-defined-sets"`
	Ipv6PrefixSet map[string]*DefinedSets_Ipv6PrefixSet `path:"ipv6-prefix-sets/ipv6-prefix-set" module:"openconfig-defined-sets/openconfig-defined-sets"`
	PortSet       map[string]*DefinedSets_PortSet       `path:"port-sets/port-set" module:"openconfig-defined-sets/openconfig-defined-sets"`
}

// IsYANGGoStruct ensures that DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets) IsYANGGoStruct() {}

// NewIpv4PrefixSet creates a new entry in the Ipv4PrefixSet list of the
// DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *DefinedSets) NewIpv4PrefixSet(Name string) (*DefinedSets_Ipv4PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*DefinedSets_Ipv4PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4PrefixSet", key)
	}

	t.Ipv4PrefixSet[key] = &DefinedSets_Ipv4PrefixSet{
		Name: &Name,
	}

	return t.Ipv4PrefixSet[key], nil
}

// RenameIpv4PrefixSet renames an entry in the list Ipv4PrefixSet within
// the DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *DefinedSets) RenameIpv4PrefixSet(oldK, newK string) error {
	if _, ok := t.Ipv4PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4PrefixSet", newK)
	}

	e, ok := t.Ipv4PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4PrefixSet", oldK)
	}
	e.Name = &newK

	t.Ipv4PrefixSet[newK] = e
	delete(t.Ipv4PrefixSet, oldK)
	return nil
}

// GetOrCreateIpv4PrefixSetMap returns the list (map) from DefinedSets.
//
// It initializes the field if not already initialized.
func (t *DefinedSets) GetOrCreateIpv4PrefixSetMap() map[string]*DefinedSets_Ipv4PrefixSet {
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*DefinedSets_Ipv4PrefixSet)
	}
	return t.Ipv4PrefixSet
}

// GetOrCreateIpv4PrefixSet retrieves the value with the specified keys from
// the receiver DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *DefinedSets) GetOrCreateIpv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSet {

	key := Name

	if v, ok := t.Ipv4PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4PrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4PrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetIpv4PrefixSet retrieves the value with the specified key from
// the Ipv4PrefixSet map field of DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *DefinedSets) GetIpv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv4PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4PrefixSet deletes the value with the specified keys from
// the receiver DefinedSets. If there is no such element, the function
// is a no-op.
func (t *DefinedSets) DeleteIpv4PrefixSet(Name string) {
	key := Name

	delete(t.Ipv4PrefixSet, key)
}

// AppendIpv4PrefixSet appends the supplied DefinedSets_Ipv4PrefixSet struct to the
// list Ipv4PrefixSet of DefinedSets. If the key value(s) specified in
// the supplied DefinedSets_Ipv4PrefixSet already exist in the list, an error is
// returned.
func (t *DefinedSets) AppendIpv4PrefixSet(v *DefinedSets_Ipv4PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*DefinedSets_Ipv4PrefixSet)
	}

	if _, ok := t.Ipv4PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4PrefixSet %v", key)
	}

	t.Ipv4PrefixSet[key] = v
	return nil
}

// NewIpv6PrefixSet creates a new entry in the Ipv6PrefixSet list of the
// DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *DefinedSets) NewIpv6PrefixSet(Name string) (*DefinedSets_Ipv6PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*DefinedSets_Ipv6PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6PrefixSet", key)
	}

	t.Ipv6PrefixSet[key] = &DefinedSets_Ipv6PrefixSet{
		Name: &Name,
	}

	return t.Ipv6PrefixSet[key], nil
}

// RenameIpv6PrefixSet renames an entry in the list Ipv6PrefixSet within
// the DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *DefinedSets) RenameIpv6PrefixSet(oldK, newK string) error {
	if _, ok := t.Ipv6PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6PrefixSet", newK)
	}

	e, ok := t.Ipv6PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6PrefixSet", oldK)
	}
	e.Name = &newK

	t.Ipv6PrefixSet[newK] = e
	delete(t.Ipv6PrefixSet, oldK)
	return nil
}

// GetOrCreateIpv6PrefixSetMap returns the list (map) from DefinedSets.
//
// It initializes the field if not already initialized.
func (t *DefinedSets) GetOrCreateIpv6PrefixSetMap() map[string]*DefinedSets_Ipv6PrefixSet {
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*DefinedSets_Ipv6PrefixSet)
	}
	return t.Ipv6PrefixSet
}

// GetOrCreateIpv6PrefixSet retrieves the value with the specified keys from
// the receiver DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *DefinedSets) GetOrCreateIpv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSet {

	key := Name

	if v, ok := t.Ipv6PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6PrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6PrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetIpv6PrefixSet retrieves the value with the specified key from
// the Ipv6PrefixSet map field of DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *DefinedSets) GetIpv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv6PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6PrefixSet deletes the value with the specified keys from
// the receiver DefinedSets. If there is no such element, the function
// is a no-op.
func (t *DefinedSets) DeleteIpv6PrefixSet(Name string) {
	key := Name

	delete(t.Ipv6PrefixSet, key)
}

// AppendIpv6PrefixSet appends the supplied DefinedSets_Ipv6PrefixSet struct to the
// list Ipv6PrefixSet of DefinedSets. If the key value(s) specified in
// the supplied DefinedSets_Ipv6PrefixSet already exist in the list, an error is
// returned.
func (t *DefinedSets) AppendIpv6PrefixSet(v *DefinedSets_Ipv6PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*DefinedSets_Ipv6PrefixSet)
	}

	if _, ok := t.Ipv6PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6PrefixSet %v", key)
	}

	t.Ipv6PrefixSet[key] = v
	return nil
}

// NewPortSet creates a new entry in the PortSet list of the
// DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *DefinedSets) NewPortSet(Name string) (*DefinedSets_PortSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSet == nil {
		t.PortSet = make(map[string]*DefinedSets_PortSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortSet", key)
	}

	t.PortSet[key] = &DefinedSets_PortSet{
		Name: &Name,
	}

	return t.PortSet[key], nil
}

// RenamePortSet renames an entry in the list PortSet within
// the DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *DefinedSets) RenamePortSet(oldK, newK string) error {
	if _, ok := t.PortSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PortSet", newK)
	}

	e, ok := t.PortSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortSet", oldK)
	}
	e.Name = &newK

	t.PortSet[newK] = e
	delete(t.PortSet, oldK)
	return nil
}

// GetOrCreatePortSetMap returns the list (map) from DefinedSets.
//
// It initializes the field if not already initialized.
func (t *DefinedSets) GetOrCreatePortSetMap() map[string]*DefinedSets_PortSet {
	if t.PortSet == nil {
		t.PortSet = make(map[string]*DefinedSets_PortSet)
	}
	return t.PortSet
}

// GetOrCreatePortSet retrieves the value with the specified keys from
// the receiver DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *DefinedSets) GetOrCreatePortSet(Name string) *DefinedSets_PortSet {

	key := Name

	if v, ok := t.PortSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortSet got unexpected error: %v", err))
	}
	return v
}

// GetPortSet retrieves the value with the specified key from
// the PortSet map field of DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *DefinedSets) GetPortSet(Name string) *DefinedSets_PortSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PortSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePortSet deletes the value with the specified keys from
// the receiver DefinedSets. If there is no such element, the function
// is a no-op.
func (t *DefinedSets) DeletePortSet(Name string) {
	key := Name

	delete(t.PortSet, key)
}

// AppendPortSet appends the supplied DefinedSets_PortSet struct to the
// list PortSet of DefinedSets. If the key value(s) specified in
// the supplied DefinedSets_PortSet already exist in the list, an error is
// returned.
func (t *DefinedSets) AppendPortSet(v *DefinedSets_PortSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSet == nil {
		t.PortSet = make(map[string]*DefinedSets_PortSet)
	}

	if _, ok := t.PortSet[key]; ok {
		return fmt.Errorf("duplicate key for list PortSet %v", key)
	}

	t.PortSet[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4PrefixSet {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6PrefixSet {
		e.PopulateDefaults()
	}
	for _, e := range t.PortSet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets.
func (*DefinedSets) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// DefinedSets_Ipv4PrefixSet represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSet struct {
	Description *string  `path:"state/description" module:"openconfig-defined-sets/openconfig-defined-sets" shadow-path:"config/description" shadow-module:"openconfig-defined-sets/openconfig-defined-sets"`
	Name        *string  `path:"state/name|name" module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets" shadow-path:"config/name|name" shadow-module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets"`
	Prefix      []string `path:"state/prefix" module:"openconfig-defined-sets/openconfig-defined-sets" shadow-path:"config/prefix" shadow-module:"openconfig-defined-sets/openconfig-defined-sets"`
}

// IsYANGGoStruct ensures that DefinedSets_Ipv4PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets_Ipv4PrefixSet) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the DefinedSets_Ipv4PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv4PrefixSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the DefinedSets_Ipv4PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv4PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrefix retrieves the value of the leaf Prefix from the DefinedSets_Ipv4PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv4PrefixSet) GetPrefix() []string {
	if t == nil || t.Prefix == nil {
		return nil
	}
	return t.Prefix
}

// SetDescription sets the value of the leaf Description in the DefinedSets_Ipv4PrefixSet
// struct.
func (t *DefinedSets_Ipv4PrefixSet) SetDescription(v string) {
	t.Description = &v
}

// SetName sets the value of the leaf Name in the DefinedSets_Ipv4PrefixSet
// struct.
func (t *DefinedSets_Ipv4PrefixSet) SetName(v string) {
	t.Name = &v
}

// SetPrefix sets the value of the leaf Prefix in the DefinedSets_Ipv4PrefixSet
// struct.
func (t *DefinedSets_Ipv4PrefixSet) SetPrefix(v []string) {
	t.Prefix = v
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets_Ipv4PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets_Ipv4PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the DefinedSets_Ipv4PrefixSet struct, which is a YANG list entry.
func (t *DefinedSets_Ipv4PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv4PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets_Ipv4PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv4PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets_Ipv4PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets_Ipv4PrefixSet.
func (*DefinedSets_Ipv4PrefixSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// DefinedSets_Ipv6PrefixSet represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set YANG schema element.
type DefinedSets_Ipv6PrefixSet struct {
	Description *string  `path:"state/description" module:"openconfig-defined-sets/openconfig-defined-sets" shadow-path:"config/description" shadow-module:"openconfig-defined-sets/openconfig-defined-sets"`
	Name        *string  `path:"state/name|name" module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets" shadow-path:"config/name|name" shadow-module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets"`
	Prefix      []string `path:"state/prefix" module:"openconfig-defined-sets/openconfig-defined-sets" shadow-path:"config/prefix" shadow-module:"openconfig-defined-sets/openconfig-defined-sets"`
}

// IsYANGGoStruct ensures that DefinedSets_Ipv6PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets_Ipv6PrefixSet) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the DefinedSets_Ipv6PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv6PrefixSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the DefinedSets_Ipv6PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv6PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrefix retrieves the value of the leaf Prefix from the DefinedSets_Ipv6PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv6PrefixSet) GetPrefix() []string {
	if t == nil || t.Prefix == nil {
		return nil
	}
	return t.Prefix
}

// SetDescription sets the value of the leaf Description in the DefinedSets_Ipv6PrefixSet
// struct.
func (t *DefinedSets_Ipv6PrefixSet) SetDescription(v string) {
	t.Description = &v
}

// SetName sets the value of the leaf Name in the DefinedSets_Ipv6PrefixSet
// struct.
func (t *DefinedSets_Ipv6PrefixSet) SetName(v string) {
	t.Name = &v
}

// SetPrefix sets the value of the leaf Prefix in the DefinedSets_Ipv6PrefixSet
// struct.
func (t *DefinedSets_Ipv6PrefixSet) SetPrefix(v []string) {
	t.Prefix = v
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets_Ipv6PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets_Ipv6PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the DefinedSets_Ipv6PrefixSet struct, which is a YANG list entry.
func (t *DefinedSets_Ipv6PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv6PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets_Ipv6PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv6PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets_Ipv6PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets_Ipv6PrefixSet.
func (*DefinedSets_Ipv6PrefixSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// DefinedSets_PortSet represents the /openconfig-defined-sets/defined-sets/port-sets/port-set YANG schema element.
type DefinedSets_PortSet struct {
	Description *string                          `path:"state/description" module:"openconfig-defined-sets/openconfig-defined-sets" shadow-path:"config/description" shadow-module:"openconfig-defined-sets/openconfig-defined-sets"`
	Name        *string                          `path:"state/name|name" module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets" shadow-path:"config/name|name" shadow-module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets"`
	Port        []DefinedSets_PortSet_Port_Union `path:"state/port" module:"openconfig-defined-sets/openconfig-defined-sets" shadow-path:"config/port" shadow-module:"openconfig-defined-sets/openconfig-defined-sets"`
}

// IsYANGGoStruct ensures that DefinedSets_PortSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets_PortSet) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the DefinedSets_PortSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *DefinedSets_PortSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the DefinedSets_PortSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *DefinedSets_PortSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPort retrieves the value of the leaf Port from the DefinedSets_PortSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *DefinedSets_PortSet) GetPort() []DefinedSets_PortSet_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// SetDescription sets the value of the leaf Description in the DefinedSets_PortSet
// struct.
func (t *DefinedSets_PortSet) SetDescription(v string) {
	t.Description = &v
}

// SetName sets the value of the leaf Name in the DefinedSets_PortSet
// struct.
func (t *DefinedSets_PortSet) SetName(v string) {
	t.Name = &v
}

// SetPort sets the value of the leaf Port in the DefinedSets_PortSet
// struct.
func (t *DefinedSets_PortSet) SetPort(v []DefinedSets_PortSet_Port_Union) {
	t.Port = v
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets_PortSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets_PortSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the DefinedSets_PortSet struct, which is a YANG list entry.
func (t *DefinedSets_PortSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_PortSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets_PortSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_PortSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets_PortSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets_PortSet.
func (*DefinedSets_PortSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	AdminStatus      E_Interface_AdminStatus            `path:"state/admin-status" module:"openconfig-interfaces/openconfig-interfaces"`
	Aggregation      *Interface_Aggregation             `path:"aggregation" module:"openconfig-if-aggregate"`
	Counters         *Interface_Counters                `path:"state/counters" module:"openconfig-interfaces/openconfig-interfaces"`
	Cpu              *bool                              `path:"state/cpu" module:"openconfig-interfaces/openconfig-interfaces"`
	Description      *string                            `path:"state/description" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/description" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	Enabled          *bool                              `path:"state/enabled" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/enabled" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	Ethernet         *Interface_Ethernet                `path:"ethernet" module:"openconfig-if-ethernet"`
	HardwarePort     *string                            `path:"state/hardware-port" module:"openconfig-interfaces/openconfig-platform-port"`
	HoldTime         *Interface_HoldTime                `path:"hold-time" module:"openconfig-interfaces"`
	Ifindex          *uint32                            `path:"state/ifindex" module:"openconfig-interfaces/openconfig-interfaces"`
	LastChange       *uint64                            `path:"state/last-change" module:"openconfig-interfaces/openconfig-interfaces"`
	Logical          *bool                              `path:"state/logical" module:"openconfig-interfaces/openconfig-interfaces"`
	LoopbackMode     E_TransportTypes_LoopbackModeType  `path:"state/loopback-mode" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/loopback-mode" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	Management       *bool                              `path:"state/management" module:"openconfig-interfaces/openconfig-interfaces"`
	Mtu              *uint16                            `path:"state/mtu" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/mtu" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	Name             *string                            `path:"state/name|name" module:"openconfig-interfaces/openconfig-interfaces|openconfig-interfaces" shadow-path:"config/name|name" shadow-module:"openconfig-interfaces/openconfig-interfaces|openconfig-interfaces"`
	OperStatus       E_Interface_OperStatus             `path:"state/oper-status" module:"openconfig-interfaces/openconfig-interfaces"`
	PenaltyBasedAied *Interface_PenaltyBasedAied        `path:"penalty-based-aied" module:"openconfig-interfaces"`
	PhysicalChannel  []uint16                           `path:"state/physical-channel" module:"openconfig-interfaces/openconfig-platform-transceiver"`
	RoutedVlan       *Interface_RoutedVlan              `path:"routed-vlan" module:"openconfig-vlan"`
	Subinterface     map[uint32]*Interface_Subinterface `path:"subinterfaces/subinterface" module:"openconfig-interfaces/openconfig-interfaces"`
	Tpid             E_VlanTypes_TPID_TYPES             `path:"state/tpid" module:"openconfig-interfaces/openconfig-vlan" shadow-path:"config/tpid" shadow-module:"openconfig-interfaces/openconfig-vlan"`
	Transceiver      *string                            `path:"state/transceiver" module:"openconfig-interfaces/openconfig-platform-transceiver"`
	Type             E_IETFInterfaces_InterfaceType     `path:"state/type" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/type" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// RenameSubinterface renames an entry in the list Subinterface within
// the Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface) RenameSubinterface(oldK, newK uint32) error {
	if _, ok := t.Subinterface[newK]; ok {
		return fmt.Errorf("key %v already exists in Subinterface", newK)
	}

	e, ok := t.Subinterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subinterface", oldK)
	}
	e.Index = &newK

	t.Subinterface[newK] = e
	delete(t.Subinterface, oldK)
	return nil
}

// GetOrCreateSubinterfaceMap returns the list (map) from Interface.
//
// It initializes the field if not already initialized.
func (t *Interface) GetOrCreateSubinterfaceMap() map[uint32]*Interface_Subinterface {
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}
	return t.Subinterface
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) *Interface_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) *Interface_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubinterface deletes the value with the specified keys from
// the receiver Interface. If there is no such element, the function
// is a no-op.
func (t *Interface) DeleteSubinterface(Index uint32) {
	key := Index

	delete(t.Subinterface, key)
}

// AppendSubinterface appends the supplied Interface_Subinterface struct to the
// list Subinterface of Interface. If the key value(s) specified in
// the supplied Interface_Subinterface already exist in the list, an error is
// returned.
func (t *Interface) AppendSubinterface(v *Interface_Subinterface) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// GetOrCreateAggregation retrieves the value of the Aggregation field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateAggregation() *Interface_Aggregation {
	if t.Aggregation != nil {
		return t.Aggregation
	}
	t.Aggregation = &Interface_Aggregation{}
	return t.Aggregation
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateEthernet() *Interface_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &Interface_Ethernet{}
	return t.Ethernet
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreatePenaltyBasedAied retrieves the value of the PenaltyBasedAied field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreatePenaltyBasedAied() *Interface_PenaltyBasedAied {
	if t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	t.PenaltyBasedAied = &Interface_PenaltyBasedAied{}
	return t.PenaltyBasedAied
}

// GetOrCreateRoutedVlan retrieves the value of the RoutedVlan field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateRoutedVlan() *Interface_RoutedVlan {
	if t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	t.RoutedVlan = &Interface_RoutedVlan{}
	return t.RoutedVlan
}

// GetAggregation returns the value of the Aggregation struct pointer
// from Interface. If the receiver or the field Aggregation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetAggregation() *Interface_Aggregation {
	if t != nil && t.Aggregation != nil {
		return t.Aggregation
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from Interface. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetEthernet() *Interface_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetPenaltyBasedAied returns the value of the PenaltyBasedAied struct pointer
// from Interface. If the receiver or the field PenaltyBasedAied is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetPenaltyBasedAied() *Interface_PenaltyBasedAied {
	if t != nil && t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	return nil
}

// GetRoutedVlan returns the value of the RoutedVlan struct pointer
// from Interface. If the receiver or the field RoutedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetRoutedVlan() *Interface_RoutedVlan {
	if t != nil && t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminStatus is set, it can
// safely use t.GetAdminStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminStatus == nil' before retrieving the leaf's value.
func (t *Interface) GetAdminStatus() E_Interface_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetCpu retrieves the value of the leaf Cpu from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cpu is set, it can
// safely use t.GetCpu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cpu == nil' before retrieving the leaf's value.
func (t *Interface) GetCpu() bool {
	if t == nil || t.Cpu == nil {
		return false
	}
	return *t.Cpu
}

// GetDescription retrieves the value of the leaf Description from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHardwarePort retrieves the value of the leaf HardwarePort from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HardwarePort is set, it can
// safely use t.GetHardwarePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HardwarePort == nil' before retrieving the leaf's value.
func (t *Interface) GetHardwarePort() string {
	if t == nil || t.HardwarePort == nil {
		return ""
	}
	return *t.HardwarePort
}

// GetIfindex retrieves the value of the leaf Ifindex from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *Interface) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetLastChange retrieves the value of the leaf LastChange from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastChange is set, it can
// safely use t.GetLastChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastChange == nil' before retrieving the leaf's value.
func (t *Interface) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Logical is set, it can
// safely use t.GetLogical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Logical == nil' before retrieving the leaf's value.
func (t *Interface) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackMode is set, it can
// safely use t.GetLoopbackMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackMode == nil' before retrieving the leaf's value.
func (t *Interface) GetLoopbackMode() E_TransportTypes_LoopbackModeType {
	if t == nil || t.LoopbackMode == 0 {
		return TransportTypes_LoopbackModeType_NONE
	}
	return t.LoopbackMode
}

// GetManagement retrieves the value of the leaf Management from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Management is set, it can
// safely use t.GetManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Management == nil' before retrieving the leaf's value.
func (t *Interface) GetManagement() bool {
	if t == nil || t.Management == nil {
		return false
	}
	return *t.Management
}

// GetMtu retrieves the value of the leaf Mtu from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *Interface) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Interface) GetOperStatus() E_Interface_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PhysicalChannel is set, it can
// safely use t.GetPhysicalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PhysicalChannel == nil' before retrieving the leaf's value.
func (t *Interface) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTpid retrieves the value of the leaf Tpid from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tpid is set, it can
// safely use t.GetTpid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tpid == nil' before retrieving the leaf's value.
func (t *Interface) GetTpid() E_VlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return VlanTypes_TPID_TYPES_TPID_0X8100
	}
	return t.Tpid
}

// GetTransceiver retrieves the value of the leaf Transceiver from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transceiver is set, it can
// safely use t.GetTransceiver() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transceiver == nil' before retrieving the leaf's value.
func (t *Interface) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// GetType retrieves the value of the leaf Type from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Interface) GetType() E_IETFInterfaces_InterfaceType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetAdminStatus sets the value of the leaf AdminStatus in the Interface
// struct.
func (t *Interface) SetAdminStatus(v E_Interface_AdminStatus) {
	t.AdminStatus = v
}

// SetCpu sets the value of the leaf Cpu in the Interface
// struct.
func (t *Interface) SetCpu(v bool) {
	t.Cpu = &v
}

// SetDescription sets the value of the leaf Description in the Interface
// struct.
func (t *Interface) SetDescription(v string) {
	t.Description = &v
}

// SetEnabled sets the value of the leaf Enabled in the Interface
// struct.
func (t *Interface) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetHardwarePort sets the value of the leaf HardwarePort in the Interface
// struct.
func (t *Interface) SetHardwarePort(v string) {
	t.HardwarePort = &v
}

// SetIfindex sets the value of the leaf Ifindex in the Interface
// struct.
func (t *Interface) SetIfindex(v uint32) {
	t.Ifindex = &v
}

// SetLastChange sets the value of the leaf LastChange in the Interface
// struct.
func (t *Interface) SetLastChange(v uint64) {
	t.LastChange = &v
}

// SetLogical sets the value of the leaf Logical in the Interface
// struct.
func (t *Interface) SetLogical(v bool) {
	t.Logical = &v
}

// SetLoopbackMode sets the value of the leaf LoopbackMode in the Interface
// struct.
func (t *Interface) SetLoopbackMode(v E_TransportTypes_LoopbackModeType) {
	t.LoopbackMode = v
}

// SetManagement sets the value of the leaf Management in the Interface
// struct.
func (t *Interface) SetManagement(v bool) {
	t.Management = &v
}

// SetMtu sets the value of the leaf Mtu in the Interface
// struct.
func (t *Interface) SetMtu(v uint16) {
	t.Mtu = &v
}

// SetName sets the value of the leaf Name in the Interface
// struct.
func (t *Interface) SetName(v string) {
	t.Name = &v
}

// SetOperStatus sets the value of the leaf OperStatus in the Interface
// struct.
func (t *Interface) SetOperStatus(v E_Interface_OperStatus) {
	t.OperStatus = v
}

// SetPhysicalChannel sets the value of the leaf PhysicalChannel in the Interface
// struct.
func (t *Interface) SetPhysicalChannel(v []uint16) {
	t.PhysicalChannel = v
}

// SetTpid sets the value of the leaf Tpid in the Interface
// struct.
func (t *Interface) SetTpid(v E_VlanTypes_TPID_TYPES) {
	t.Tpid = v
}

// SetTransceiver sets the value of the leaf Transceiver in the Interface
// struct.
func (t *Interface) SetTransceiver(v string) {
	t.Transceiver = &v
}

// SetType sets the value of the leaf Type in the Interface
// struct.
func (t *Interface) SetType(v E_IETFInterfaces_InterfaceType) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	if t.LoopbackMode == 0 {
		t.LoopbackMode = TransportTypes_LoopbackModeType_NONE
	}
	if t.Tpid == 0 {
		t.Tpid = VlanTypes_TPID_TYPES_TPID_0X8100
	}
	t.Aggregation.PopulateDefaults()
	t.Counters.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.PenaltyBasedAied.PopulateDefaults()
	t.RoutedVlan.PopulateDefaults()
	for _, e := range t.Subinterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface.
func (*Interface) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_Aggregation represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_Aggregation struct {
	LagSpeed     *uint32                             `path:"state/lag-speed" module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	LagType      E_IfAggregate_AggregationType       `path:"state/lag-type" module:"openconfig-if-aggregate/openconfig-if-aggregate" shadow-path:"config/lag-type" shadow-module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	Member       []string                            `path:"state/member" module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	MinLinks     *uint16                             `path:"state/min-links" module:"openconfig-if-aggregate/openconfig-if-aggregate" shadow-path:"config/min-links" shadow-module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	SwitchedVlan *Interface_Aggregation_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation) IsYANGGoStruct() {}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Aggregation) GetOrCreateSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Aggregation_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Aggregation. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Aggregation) GetSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetLagSpeed retrieves the value of the leaf LagSpeed from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagSpeed is set, it can
// safely use t.GetLagSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagSpeed == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagSpeed() uint32 {
	if t == nil || t.LagSpeed == nil {
		return 0
	}
	return *t.LagSpeed
}

// GetLagType retrieves the value of the leaf LagType from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagType is set, it can
// safely use t.GetLagType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagType == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagType() E_IfAggregate_AggregationType {
	if t == nil || t.LagType == 0 {
		return 0
	}
	return t.LagType
}

// GetMember retrieves the value of the leaf Member from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMember() []string {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetMinLinks retrieves the value of the leaf MinLinks from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinLinks is set, it can
// safely use t.GetMinLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinLinks == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMinLinks() uint16 {
	if t == nil || t.MinLinks == nil {
		return 0
	}
	return *t.MinLinks
}

// SetLagSpeed sets the value of the leaf LagSpeed in the Interface_Aggregation
// struct.
func (t *Interface_Aggregation) SetLagSpeed(v uint32) {
	t.LagSpeed = &v
}

// SetLagType sets the value of the leaf LagType in the Interface_Aggregation
// struct.
func (t *Interface_Aggregation) SetLagType(v E_IfAggregate_AggregationType) {
	t.LagType = v
}

// SetMember sets the value of the leaf Member in the Interface_Aggregation
// struct.
func (t *Interface_Aggregation) SetMember(v []string) {
	t.Member = v
}

// SetMinLinks sets the value of the leaf MinLinks in the Interface_Aggregation
// struct.
func (t *Interface_Aggregation) SetMinLinks(v uint16) {
	t.MinLinks = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Aggregation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Aggregation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SwitchedVlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Aggregation.
func (*Interface_Aggregation) ΛBelongingModule() string {
	return "openconfig-if-aggregate"
}

// Interface_Aggregation_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan struct {
	AccessVlan    *uint16                                               `path:"state/access-vlan" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/access-vlan" shadow-module:"openconfig-vlan/openconfig-vlan"`
	InterfaceMode E_VlanTypes_VlanModeType                              `path:"state/interface-mode" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/interface-mode" shadow-module:"openconfig-vlan/openconfig-vlan"`
	NativeVlan    *uint16                                               `path:"state/native-vlan" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/native-vlan" shadow-module:"openconfig-vlan/openconfig-vlan"`
	TrunkVlans    []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union `path:"state/trunk-vlans" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/trunk-vlans" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Aggregation_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessVlan is set, it can
// safely use t.GetAccessVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessVlan == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceMode is set, it can
// safely use t.GetInterfaceMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceMode == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetInterfaceMode() E_VlanTypes_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NativeVlan is set, it can
// safely use t.GetNativeVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NativeVlan == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrunkVlans is set, it can
// safely use t.GetTrunkVlans() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrunkVlans == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetTrunkVlans() []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// SetAccessVlan sets the value of the leaf AccessVlan in the Interface_Aggregation_SwitchedVlan
// struct.
func (t *Interface_Aggregation_SwitchedVlan) SetAccessVlan(v uint16) {
	t.AccessVlan = &v
}

// SetInterfaceMode sets the value of the leaf InterfaceMode in the Interface_Aggregation_SwitchedVlan
// struct.
func (t *Interface_Aggregation_SwitchedVlan) SetInterfaceMode(v E_VlanTypes_VlanModeType) {
	t.InterfaceMode = v
}

// SetNativeVlan sets the value of the leaf NativeVlan in the Interface_Aggregation_SwitchedVlan
// struct.
func (t *Interface_Aggregation_SwitchedVlan) SetNativeVlan(v uint16) {
	t.NativeVlan = &v
}

// SetTrunkVlans sets the value of the leaf TrunkVlans in the Interface_Aggregation_SwitchedVlan
// struct.
func (t *Interface_Aggregation_SwitchedVlan) SetTrunkVlans(v []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union) {
	t.TrunkVlans = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Aggregation_SwitchedVlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Aggregation_SwitchedVlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation_SwitchedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Aggregation_SwitchedVlan.
func (*Interface_Aggregation_SwitchedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	CarrierTransitions *uint64 `path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts    *uint64 `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards         *uint64 `path:"in-discards" module:"openconfig-interfaces"`
	InErrors           *uint64 `path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors        *uint64 `path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-interfaces"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts      *uint64 `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos    *uint64 `path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear          *uint64 `path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts   *uint64 `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards        *uint64 `path:"out-discards" module:"openconfig-interfaces"`
	OutErrors          *uint64 `path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-interfaces"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts     *uint64 `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	Resets             *uint64 `path:"resets" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CarrierTransitions is set, it can
// safely use t.GetCarrierTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CarrierTransitions == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBroadcastPkts is set, it can
// safely use t.GetInBroadcastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBroadcastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDiscards is set, it can
// safely use t.GetInDiscards() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDiscards == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InErrors is set, it can
// safely use t.GetInErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InErrors == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFcsErrors is set, it can
// safely use t.GetInFcsErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFcsErrors == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastPkts is set, it can
// safely use t.GetInMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUnicastPkts is set, it can
// safely use t.GetInUnicastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUnicastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUnknownProtos is set, it can
// safely use t.GetInUnknownProtos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUnknownProtos == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastClear is set, it can
// safely use t.GetLastClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastClear == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBroadcastPkts is set, it can
// safely use t.GetOutBroadcastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBroadcastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDiscards is set, it can
// safely use t.GetOutDiscards() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDiscards == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutErrors is set, it can
// safely use t.GetOutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutErrors == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastPkts is set, it can
// safely use t.GetOutMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutUnicastPkts is set, it can
// safely use t.GetOutUnicastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutUnicastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// GetResets retrieves the value of the leaf Resets from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resets is set, it can
// safely use t.GetResets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resets == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetResets() uint64 {
	if t == nil || t.Resets == nil {
		return 0
	}
	return *t.Resets
}

// SetCarrierTransitions sets the value of the leaf CarrierTransitions in the Interface_Counters
// struct.
func (t *Interface_Counters) SetCarrierTransitions(v uint64) {
	t.CarrierTransitions = &v
}

// SetInBroadcastPkts sets the value of the leaf InBroadcastPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInBroadcastPkts(v uint64) {
	t.InBroadcastPkts = &v
}

// SetInDiscards sets the value of the leaf InDiscards in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInDiscards(v uint64) {
	t.InDiscards = &v
}

// SetInErrors sets the value of the leaf InErrors in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInErrors(v uint64) {
	t.InErrors = &v
}

// SetInFcsErrors sets the value of the leaf InFcsErrors in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInFcsErrors(v uint64) {
	t.InFcsErrors = &v
}

// SetInMulticastPkts sets the value of the leaf InMulticastPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInMulticastPkts(v uint64) {
	t.InMulticastPkts = &v
}

// SetInOctets sets the value of the leaf InOctets in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetInUnicastPkts sets the value of the leaf InUnicastPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInUnicastPkts(v uint64) {
	t.InUnicastPkts = &v
}

// SetInUnknownProtos sets the value of the leaf InUnknownProtos in the Interface_Counters
// struct.
func (t *Interface_Counters) SetInUnknownProtos(v uint64) {
	t.InUnknownProtos = &v
}

// SetLastClear sets the value of the leaf LastClear in the Interface_Counters
// struct.
func (t *Interface_Counters) SetLastClear(v uint64) {
	t.LastClear = &v
}

// SetOutBroadcastPkts sets the value of the leaf OutBroadcastPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetOutBroadcastPkts(v uint64) {
	t.OutBroadcastPkts = &v
}

// SetOutDiscards sets the value of the leaf OutDiscards in the Interface_Counters
// struct.
func (t *Interface_Counters) SetOutDiscards(v uint64) {
	t.OutDiscards = &v
}

// SetOutErrors sets the value of the leaf OutErrors in the Interface_Counters
// struct.
func (t *Interface_Counters) SetOutErrors(v uint64) {
	t.OutErrors = &v
}

// SetOutMulticastPkts sets the value of the leaf OutMulticastPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetOutMulticastPkts(v uint64) {
	t.OutMulticastPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Interface_Counters
// struct.
func (t *Interface_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// SetOutUnicastPkts sets the value of the leaf OutUnicastPkts in the Interface_Counters
// struct.
func (t *Interface_Counters) SetOutUnicastPkts(v uint64) {
	t.OutUnicastPkts = &v
}

// SetResets sets the value of the leaf Resets in the Interface_Counters
// struct.
func (t *Interface_Counters) SetResets(v uint64) {
	t.Resets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Counters.
func (*Interface_Counters) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_Ethernet struct {
	AggregateId            *string                          `path:"state/aggregate-id" module:"openconfig-if-ethernet/openconfig-if-aggregate" shadow-path:"config/aggregate-id" shadow-module:"openconfig-if-ethernet/openconfig-if-aggregate"`
	AutoNegotiate          *bool                            `path:"state/auto-negotiate" module:"openconfig-if-ethernet/openconfig-if-ethernet" shadow-path:"config/auto-negotiate" shadow-module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	Counters               *Interface_Ethernet_Counters     `path:"state/counters" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	DuplexMode             E_Ethernet_DuplexMode            `path:"state/duplex-mode" module:"openconfig-if-ethernet/openconfig-if-ethernet" shadow-path:"config/duplex-mode" shadow-module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	EnableFlowControl      *bool                            `path:"state/enable-flow-control" module:"openconfig-if-ethernet/openconfig-if-ethernet" shadow-path:"config/enable-flow-control" shadow-module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	FecMode                E_IfEthernet_INTERFACE_FEC       `path:"state/fec-mode" module:"openconfig-if-ethernet/openconfig-if-ethernet" shadow-path:"config/fec-mode" shadow-module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	HwMacAddress           *string                          `path:"state/hw-mac-address" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	MacAddress             *string                          `path:"state/mac-address" module:"openconfig-if-ethernet/openconfig-if-ethernet" shadow-path:"config/mac-address" shadow-module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	NegotiatedDuplexMode   E_Ethernet_NegotiatedDuplexMode  `path:"state/negotiated-duplex-mode" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	NegotiatedPortSpeed    E_IfEthernet_ETHERNET_SPEED      `path:"state/negotiated-port-speed" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	PortSpeed              E_IfEthernet_ETHERNET_SPEED      `path:"state/port-speed" module:"openconfig-if-ethernet/openconfig-if-ethernet" shadow-path:"config/port-speed" shadow-module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	StandaloneLinkTraining *bool                            `path:"state/standalone-link-training" module:"openconfig-if-ethernet/openconfig-if-ethernet" shadow-path:"config/standalone-link-training" shadow-module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	SwitchedVlan           *Interface_Ethernet_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateCounters() *Interface_Ethernet_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Ethernet_Counters{}
	return t.Counters
}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Ethernet_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Ethernet. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetCounters() *Interface_Ethernet_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Ethernet. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetAggregateId retrieves the value of the leaf AggregateId from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateId is set, it can
// safely use t.GetAggregateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateId == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAggregateId() string {
	if t == nil || t.AggregateId == nil {
		return ""
	}
	return *t.AggregateId
}

// GetAutoNegotiate retrieves the value of the leaf AutoNegotiate from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoNegotiate is set, it can
// safely use t.GetAutoNegotiate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoNegotiate == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAutoNegotiate() bool {
	if t == nil || t.AutoNegotiate == nil {
		return true
	}
	return *t.AutoNegotiate
}

// GetDuplexMode retrieves the value of the leaf DuplexMode from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplexMode is set, it can
// safely use t.GetDuplexMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplexMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetDuplexMode() E_Ethernet_DuplexMode {
	if t == nil || t.DuplexMode == 0 {
		return 0
	}
	return t.DuplexMode
}

// GetEnableFlowControl retrieves the value of the leaf EnableFlowControl from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableFlowControl is set, it can
// safely use t.GetEnableFlowControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableFlowControl == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetEnableFlowControl() bool {
	if t == nil || t.EnableFlowControl == nil {
		return false
	}
	return *t.EnableFlowControl
}

// GetFecMode retrieves the value of the leaf FecMode from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecMode is set, it can
// safely use t.GetFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetFecMode() E_IfEthernet_INTERFACE_FEC {
	if t == nil || t.FecMode == 0 {
		return 0
	}
	return t.FecMode
}

// GetHwMacAddress retrieves the value of the leaf HwMacAddress from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HwMacAddress is set, it can
// safely use t.GetHwMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HwMacAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetHwMacAddress() string {
	if t == nil || t.HwMacAddress == nil {
		return ""
	}
	return *t.HwMacAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetNegotiatedDuplexMode retrieves the value of the leaf NegotiatedDuplexMode from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NegotiatedDuplexMode is set, it can
// safely use t.GetNegotiatedDuplexMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NegotiatedDuplexMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedDuplexMode() E_Ethernet_NegotiatedDuplexMode {
	if t == nil || t.NegotiatedDuplexMode == 0 {
		return 0
	}
	return t.NegotiatedDuplexMode
}

// GetNegotiatedPortSpeed retrieves the value of the leaf NegotiatedPortSpeed from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NegotiatedPortSpeed is set, it can
// safely use t.GetNegotiatedPortSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NegotiatedPortSpeed == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedPortSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.NegotiatedPortSpeed == 0 {
		return 0
	}
	return t.NegotiatedPortSpeed
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSpeed is set, it can
// safely use t.GetPortSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSpeed == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetPortSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.PortSpeed == 0 {
		return 0
	}
	return t.PortSpeed
}

// GetStandaloneLinkTraining retrieves the value of the leaf StandaloneLinkTraining from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandaloneLinkTraining is set, it can
// safely use t.GetStandaloneLinkTraining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandaloneLinkTraining == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetStandaloneLinkTraining() bool {
	if t == nil || t.StandaloneLinkTraining == nil {
		return false
	}
	return *t.StandaloneLinkTraining
}

// SetAggregateId sets the value of the leaf AggregateId in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetAggregateId(v string) {
	t.AggregateId = &v
}

// SetAutoNegotiate sets the value of the leaf AutoNegotiate in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetAutoNegotiate(v bool) {
	t.AutoNegotiate = &v
}

// SetDuplexMode sets the value of the leaf DuplexMode in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetDuplexMode(v E_Ethernet_DuplexMode) {
	t.DuplexMode = v
}

// SetEnableFlowControl sets the value of the leaf EnableFlowControl in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetEnableFlowControl(v bool) {
	t.EnableFlowControl = &v
}

// SetFecMode sets the value of the leaf FecMode in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetFecMode(v E_IfEthernet_INTERFACE_FEC) {
	t.FecMode = v
}

// SetHwMacAddress sets the value of the leaf HwMacAddress in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetHwMacAddress(v string) {
	t.HwMacAddress = &v
}

// SetMacAddress sets the value of the leaf MacAddress in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetMacAddress(v string) {
	t.MacAddress = &v
}

// SetNegotiatedDuplexMode sets the value of the leaf NegotiatedDuplexMode in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetNegotiatedDuplexMode(v E_Ethernet_NegotiatedDuplexMode) {
	t.NegotiatedDuplexMode = v
}

// SetNegotiatedPortSpeed sets the value of the leaf NegotiatedPortSpeed in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetNegotiatedPortSpeed(v E_IfEthernet_ETHERNET_SPEED) {
	t.NegotiatedPortSpeed = v
}

// SetPortSpeed sets the value of the leaf PortSpeed in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetPortSpeed(v E_IfEthernet_ETHERNET_SPEED) {
	t.PortSpeed = v
}

// SetStandaloneLinkTraining sets the value of the leaf StandaloneLinkTraining in the Interface_Ethernet
// struct.
func (t *Interface_Ethernet) SetStandaloneLinkTraining(v bool) {
	t.StandaloneLinkTraining = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoNegotiate == nil {
		var v bool = true
		t.AutoNegotiate = &v
	}
	if t.EnableFlowControl == nil {
		var v bool = false
		t.EnableFlowControl = &v
	}
	if t.StandaloneLinkTraining == nil {
		var v bool = false
		t.StandaloneLinkTraining = &v
	}
	t.Counters.PopulateDefaults()
	t.SwitchedVlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ethernet.
func (*Interface_Ethernet) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// Interface_Ethernet_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_Counters struct {
	In_8021QFrames      *uint64 `path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	InBlockErrors       *uint64 `path:"in-block-errors" module:"openconfig-if-ethernet"`
	InCarrierErrors     *uint64 `path:"in-carrier-errors" module:"openconfig-if-ethernet"`
	InCrcErrors         *uint64 `path:"in-crc-errors" module:"openconfig-if-ethernet"`
	InFragmentFrames    *uint64 `path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	InInterruptedTx     *uint64 `path:"in-interrupted-tx" module:"openconfig-if-ethernet"`
	InJabberFrames      *uint64 `path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	InLateCollision     *uint64 `path:"in-late-collision" module:"openconfig-if-ethernet"`
	InMacControlFrames  *uint64 `path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	InMacErrorsRx       *uint64 `path:"in-mac-errors-rx" module:"openconfig-if-ethernet"`
	InMacPauseFrames    *uint64 `path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	InMaxsizeExceeded   *uint64 `path:"in-maxsize-exceeded" module:"openconfig-if-ethernet"`
	InOversizeFrames    *uint64 `path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	InSingleCollision   *uint64 `path:"in-single-collision" module:"openconfig-if-ethernet"`
	InSymbolError       *uint64 `path:"in-symbol-error" module:"openconfig-if-ethernet"`
	InUndersizeFrames   *uint64 `path:"in-undersize-frames" module:"openconfig-if-ethernet"`
	Out_8021QFrames     *uint64 `path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	OutMacControlFrames *uint64 `path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	OutMacErrorsTx      *uint64 `path:"out-mac-errors-tx" module:"openconfig-if-ethernet"`
	OutMacPauseFrames   *uint64 `path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_Counters) IsYANGGoStruct() {}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if In_8021QFrames is set, it can
// safely use t.GetIn_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.In_8021QFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBlockErrors is set, it can
// safely use t.GetInBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBlockErrors == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCarrierErrors retrieves the value of the leaf InCarrierErrors from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCarrierErrors is set, it can
// safely use t.GetInCarrierErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCarrierErrors == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInCarrierErrors() uint64 {
	if t == nil || t.InCarrierErrors == nil {
		return 0
	}
	return *t.InCarrierErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCrcErrors is set, it can
// safely use t.GetInCrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCrcErrors == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFragmentFrames is set, it can
// safely use t.GetInFragmentFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFragmentFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInInterruptedTx retrieves the value of the leaf InInterruptedTx from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InInterruptedTx is set, it can
// safely use t.GetInInterruptedTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InInterruptedTx == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInInterruptedTx() uint64 {
	if t == nil || t.InInterruptedTx == nil {
		return 0
	}
	return *t.InInterruptedTx
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InJabberFrames is set, it can
// safely use t.GetInJabberFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InJabberFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInLateCollision retrieves the value of the leaf InLateCollision from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLateCollision is set, it can
// safely use t.GetInLateCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLateCollision == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInLateCollision() uint64 {
	if t == nil || t.InLateCollision == nil {
		return 0
	}
	return *t.InLateCollision
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacControlFrames is set, it can
// safely use t.GetInMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacControlFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacErrorsRx retrieves the value of the leaf InMacErrorsRx from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacErrorsRx is set, it can
// safely use t.GetInMacErrorsRx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacErrorsRx == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacErrorsRx() uint64 {
	if t == nil || t.InMacErrorsRx == nil {
		return 0
	}
	return *t.InMacErrorsRx
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacPauseFrames is set, it can
// safely use t.GetInMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacPauseFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInMaxsizeExceeded retrieves the value of the leaf InMaxsizeExceeded from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMaxsizeExceeded is set, it can
// safely use t.GetInMaxsizeExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMaxsizeExceeded == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMaxsizeExceeded() uint64 {
	if t == nil || t.InMaxsizeExceeded == nil {
		return 0
	}
	return *t.InMaxsizeExceeded
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOversizeFrames is set, it can
// safely use t.GetInOversizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOversizeFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInSingleCollision retrieves the value of the leaf InSingleCollision from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSingleCollision is set, it can
// safely use t.GetInSingleCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSingleCollision == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInSingleCollision() uint64 {
	if t == nil || t.InSingleCollision == nil {
		return 0
	}
	return *t.InSingleCollision
}

// GetInSymbolError retrieves the value of the leaf InSymbolError from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSymbolError is set, it can
// safely use t.GetInSymbolError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSymbolError == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInSymbolError() uint64 {
	if t == nil || t.InSymbolError == nil {
		return 0
	}
	return *t.InSymbolError
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUndersizeFrames is set, it can
// safely use t.GetInUndersizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUndersizeFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Out_8021QFrames is set, it can
// safely use t.GetOut_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Out_8021QFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacControlFrames is set, it can
// safely use t.GetOutMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacControlFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacErrorsTx retrieves the value of the leaf OutMacErrorsTx from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacErrorsTx is set, it can
// safely use t.GetOutMacErrorsTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacErrorsTx == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacErrorsTx() uint64 {
	if t == nil || t.OutMacErrorsTx == nil {
		return 0
	}
	return *t.OutMacErrorsTx
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacPauseFrames is set, it can
// safely use t.GetOutMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacPauseFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// SetIn_8021QFrames sets the value of the leaf In_8021QFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetIn_8021QFrames(v uint64) {
	t.In_8021QFrames = &v
}

// SetInBlockErrors sets the value of the leaf InBlockErrors in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInBlockErrors(v uint64) {
	t.InBlockErrors = &v
}

// SetInCarrierErrors sets the value of the leaf InCarrierErrors in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInCarrierErrors(v uint64) {
	t.InCarrierErrors = &v
}

// SetInCrcErrors sets the value of the leaf InCrcErrors in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInCrcErrors(v uint64) {
	t.InCrcErrors = &v
}

// SetInFragmentFrames sets the value of the leaf InFragmentFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInFragmentFrames(v uint64) {
	t.InFragmentFrames = &v
}

// SetInInterruptedTx sets the value of the leaf InInterruptedTx in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInInterruptedTx(v uint64) {
	t.InInterruptedTx = &v
}

// SetInJabberFrames sets the value of the leaf InJabberFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInJabberFrames(v uint64) {
	t.InJabberFrames = &v
}

// SetInLateCollision sets the value of the leaf InLateCollision in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInLateCollision(v uint64) {
	t.InLateCollision = &v
}

// SetInMacControlFrames sets the value of the leaf InMacControlFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInMacControlFrames(v uint64) {
	t.InMacControlFrames = &v
}

// SetInMacErrorsRx sets the value of the leaf InMacErrorsRx in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInMacErrorsRx(v uint64) {
	t.InMacErrorsRx = &v
}

// SetInMacPauseFrames sets the value of the leaf InMacPauseFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInMacPauseFrames(v uint64) {
	t.InMacPauseFrames = &v
}

// SetInMaxsizeExceeded sets the value of the leaf InMaxsizeExceeded in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInMaxsizeExceeded(v uint64) {
	t.InMaxsizeExceeded = &v
}

// SetInOversizeFrames sets the value of the leaf InOversizeFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInOversizeFrames(v uint64) {
	t.InOversizeFrames = &v
}

// SetInSingleCollision sets the value of the leaf InSingleCollision in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInSingleCollision(v uint64) {
	t.InSingleCollision = &v
}

// SetInSymbolError sets the value of the leaf InSymbolError in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInSymbolError(v uint64) {
	t.InSymbolError = &v
}

// SetInUndersizeFrames sets the value of the leaf InUndersizeFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetInUndersizeFrames(v uint64) {
	t.InUndersizeFrames = &v
}

// SetOut_8021QFrames sets the value of the leaf Out_8021QFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetOut_8021QFrames(v uint64) {
	t.Out_8021QFrames = &v
}

// SetOutMacControlFrames sets the value of the leaf OutMacControlFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetOutMacControlFrames(v uint64) {
	t.OutMacControlFrames = &v
}

// SetOutMacErrorsTx sets the value of the leaf OutMacErrorsTx in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetOutMacErrorsTx(v uint64) {
	t.OutMacErrorsTx = &v
}

// SetOutMacPauseFrames sets the value of the leaf OutMacPauseFrames in the Interface_Ethernet_Counters
// struct.
func (t *Interface_Ethernet_Counters) SetOutMacPauseFrames(v uint64) {
	t.OutMacPauseFrames = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ethernet_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ethernet_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ethernet_Counters.
func (*Interface_Ethernet_Counters) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// Interface_Ethernet_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan struct {
	AccessVlan    *uint16                                            `path:"state/access-vlan" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/access-vlan" shadow-module:"openconfig-vlan/openconfig-vlan"`
	InterfaceMode E_VlanTypes_VlanModeType                           `path:"state/interface-mode" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/interface-mode" shadow-module:"openconfig-vlan/openconfig-vlan"`
	NativeVlan    *uint16                                            `path:"state/native-vlan" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/native-vlan" shadow-module:"openconfig-vlan/openconfig-vlan"`
	TrunkVlans    []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union `path:"state/trunk-vlans" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/trunk-vlans" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessVlan is set, it can
// safely use t.GetAccessVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessVlan == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceMode is set, it can
// safely use t.GetInterfaceMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetInterfaceMode() E_VlanTypes_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NativeVlan is set, it can
// safely use t.GetNativeVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NativeVlan == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrunkVlans is set, it can
// safely use t.GetTrunkVlans() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrunkVlans == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetTrunkVlans() []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// SetAccessVlan sets the value of the leaf AccessVlan in the Interface_Ethernet_SwitchedVlan
// struct.
func (t *Interface_Ethernet_SwitchedVlan) SetAccessVlan(v uint16) {
	t.AccessVlan = &v
}

// SetInterfaceMode sets the value of the leaf InterfaceMode in the Interface_Ethernet_SwitchedVlan
// struct.
func (t *Interface_Ethernet_SwitchedVlan) SetInterfaceMode(v E_VlanTypes_VlanModeType) {
	t.InterfaceMode = v
}

// SetNativeVlan sets the value of the leaf NativeVlan in the Interface_Ethernet_SwitchedVlan
// struct.
func (t *Interface_Ethernet_SwitchedVlan) SetNativeVlan(v uint16) {
	t.NativeVlan = &v
}

// SetTrunkVlans sets the value of the leaf TrunkVlans in the Interface_Ethernet_SwitchedVlan
// struct.
func (t *Interface_Ethernet_SwitchedVlan) SetTrunkVlans(v []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union) {
	t.TrunkVlans = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ethernet_SwitchedVlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ethernet_SwitchedVlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_SwitchedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ethernet_SwitchedVlan.
func (*Interface_Ethernet_SwitchedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	Down *uint32 `path:"state/down" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/down" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	Up   *uint32 `path:"state/up" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/up" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the Interface_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *Interface_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the Interface_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *Interface_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// SetDown sets the value of the leaf Down in the Interface_HoldTime
// struct.
func (t *Interface_HoldTime) SetDown(v uint32) {
	t.Down = &v
}

// SetUp sets the value of the leaf Up in the Interface_HoldTime
// struct.
func (t *Interface_HoldTime) SetUp(v uint32) {
	t.Up = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 0
		t.Down = &v
	}
	if t.Up == nil {
		var v uint32 = 0
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_HoldTime.
func (*Interface_HoldTime) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_PenaltyBasedAied represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied YANG schema element.
type Interface_PenaltyBasedAied struct {
	DecayHalfLife     *uint32 `path:"state/decay-half-life" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/decay-half-life" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	FlapPenalty       *uint32 `path:"state/flap-penalty" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/flap-penalty" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	MaxSuppressTime   *uint32 `path:"state/max-suppress-time" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/max-suppress-time" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	ReuseThreshold    *uint32 `path:"state/reuse-threshold" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/reuse-threshold" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	SuppressThreshold *uint32 `path:"state/suppress-threshold" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/suppress-threshold" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_PenaltyBasedAied implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_PenaltyBasedAied) IsYANGGoStruct() {}

// GetDecayHalfLife retrieves the value of the leaf DecayHalfLife from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecayHalfLife is set, it can
// safely use t.GetDecayHalfLife() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecayHalfLife == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetDecayHalfLife() uint32 {
	if t == nil || t.DecayHalfLife == nil {
		return 0
	}
	return *t.DecayHalfLife
}

// GetFlapPenalty retrieves the value of the leaf FlapPenalty from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlapPenalty is set, it can
// safely use t.GetFlapPenalty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlapPenalty == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetFlapPenalty() uint32 {
	if t == nil || t.FlapPenalty == nil {
		return 0
	}
	return *t.FlapPenalty
}

// GetMaxSuppressTime retrieves the value of the leaf MaxSuppressTime from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSuppressTime is set, it can
// safely use t.GetMaxSuppressTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSuppressTime == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetMaxSuppressTime() uint32 {
	if t == nil || t.MaxSuppressTime == nil {
		return 0
	}
	return *t.MaxSuppressTime
}

// GetReuseThreshold retrieves the value of the leaf ReuseThreshold from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReuseThreshold is set, it can
// safely use t.GetReuseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReuseThreshold == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetReuseThreshold() uint32 {
	if t == nil || t.ReuseThreshold == nil {
		return 0
	}
	return *t.ReuseThreshold
}

// GetSuppressThreshold retrieves the value of the leaf SuppressThreshold from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressThreshold is set, it can
// safely use t.GetSuppressThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressThreshold == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetSuppressThreshold() uint32 {
	if t == nil || t.SuppressThreshold == nil {
		return 0
	}
	return *t.SuppressThreshold
}

// SetDecayHalfLife sets the value of the leaf DecayHalfLife in the Interface_PenaltyBasedAied
// struct.
func (t *Interface_PenaltyBasedAied) SetDecayHalfLife(v uint32) {
	t.DecayHalfLife = &v
}

// SetFlapPenalty sets the value of the leaf FlapPenalty in the Interface_PenaltyBasedAied
// struct.
func (t *Interface_PenaltyBasedAied) SetFlapPenalty(v uint32) {
	t.FlapPenalty = &v
}

// SetMaxSuppressTime sets the value of the leaf MaxSuppressTime in the Interface_PenaltyBasedAied
// struct.
func (t *Interface_PenaltyBasedAied) SetMaxSuppressTime(v uint32) {
	t.MaxSuppressTime = &v
}

// SetReuseThreshold sets the value of the leaf ReuseThreshold in the Interface_PenaltyBasedAied
// struct.
func (t *Interface_PenaltyBasedAied) SetReuseThreshold(v uint32) {
	t.ReuseThreshold = &v
}

// SetSuppressThreshold sets the value of the leaf SuppressThreshold in the Interface_PenaltyBasedAied
// struct.
func (t *Interface_PenaltyBasedAied) SetSuppressThreshold(v uint32) {
	t.SuppressThreshold = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_PenaltyBasedAied
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_PenaltyBasedAied) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DecayHalfLife == nil {
		var v uint32 = 0
		t.DecayHalfLife = &v
	}
	if t.FlapPenalty == nil {
		var v uint32 = 0
		t.FlapPenalty = &v
	}
	if t.MaxSuppressTime == nil {
		var v uint32 = 0
		t.MaxSuppressTime = &v
	}
	if t.ReuseThreshold == nil {
		var v uint32 = 0
		t.ReuseThreshold = &v
	}
	if t.SuppressThreshold == nil {
		var v uint32 = 0
		t.SuppressThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_PenaltyBasedAied) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_PenaltyBasedAied"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_PenaltyBasedAied) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_PenaltyBasedAied) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_PenaltyBasedAied.
func (*Interface_PenaltyBasedAied) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_RoutedVlan represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlan struct {
	Ipv4 *Interface_RoutedVlan_Ipv4      `path:"ipv4" module:"openconfig-if-ip"`
	Ipv6 *Interface_RoutedVlan_Ipv6      `path:"ipv6" module:"openconfig-if-ip"`
	Vlan Interface_RoutedVlan_Vlan_Union `path:"state/vlan" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan) GetOrCreateIpv4() *Interface_RoutedVlan_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Interface_RoutedVlan_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan) GetOrCreateIpv6() *Interface_RoutedVlan_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Interface_RoutedVlan_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Interface_RoutedVlan. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan) GetIpv4() *Interface_RoutedVlan_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Interface_RoutedVlan. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan) GetIpv6() *Interface_RoutedVlan_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetVlan retrieves the value of the leaf Vlan from the Interface_RoutedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan) GetVlan() Interface_RoutedVlan_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// SetVlan sets the value of the leaf Vlan in the Interface_RoutedVlan
// struct.
func (t *Interface_RoutedVlan) SetVlan(v Interface_RoutedVlan_Vlan_Union) {
	t.Vlan = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan.
func (*Interface_RoutedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_RoutedVlan_Ipv4 represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4 struct {
	Address               map[string]*Interface_RoutedVlan_Ipv4_Address  `path:"addresses/address" module:"openconfig-if-ip/openconfig-if-ip"`
	Counters              *Interface_RoutedVlan_Ipv4_Counters            `path:"state/counters" module:"openconfig-if-ip/openconfig-if-ip"`
	DhcpClient            *bool                                          `path:"state/dhcp-client" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/dhcp-client" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Enabled               *bool                                          `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	GratuitousArpAccepted *bool                                          `path:"state/gratuitous-arp-accepted" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/gratuitous-arp-accepted" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Mtu                   *uint16                                        `path:"state/mtu" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mtu" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Neighbor              map[string]*Interface_RoutedVlan_Ipv4_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip/openconfig-if-ip"`
	ProxyArp              *Interface_RoutedVlan_Ipv4_ProxyArp            `path:"proxy-arp" module:"openconfig-if-ip"`
	Unnumbered            *Interface_RoutedVlan_Ipv4_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_RoutedVlan_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4) NewAddress(Ip string) (*Interface_RoutedVlan_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_RoutedVlan_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_RoutedVlan_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv4) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddressMap returns the list (map) from Interface_RoutedVlan_Ipv4.
//
// It initializes the field if not already initialized.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateAddressMap() map[string]*Interface_RoutedVlan_Ipv4_Address {
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv4_Address)
	}
	return t.Address
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateAddress(Ip string) *Interface_RoutedVlan_Ipv4_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_RoutedVlan_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetAddress(Ip string) *Interface_RoutedVlan_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv4) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_RoutedVlan_Ipv4_Address struct to the
// list Address of Interface_RoutedVlan_Ipv4. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Address already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4) AppendAddress(v *Interface_RoutedVlan_Ipv4_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_RoutedVlan_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4) NewNeighbor(Ip string) (*Interface_RoutedVlan_Ipv4_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_RoutedVlan_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_RoutedVlan_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv4) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from Interface_RoutedVlan_Ipv4.
//
// It initializes the field if not already initialized.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateNeighborMap() map[string]*Interface_RoutedVlan_Ipv4_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv4_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateNeighbor(Ip string) *Interface_RoutedVlan_Ipv4_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_RoutedVlan_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetNeighbor(Ip string) *Interface_RoutedVlan_Ipv4_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv4) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_RoutedVlan_Ipv4_Neighbor struct to the
// list Neighbor of Interface_RoutedVlan_Ipv4. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4) AppendNeighbor(v *Interface_RoutedVlan_Ipv4_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv4_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateCounters() *Interface_RoutedVlan_Ipv4_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_RoutedVlan_Ipv4_Counters{}
	return t.Counters
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &Interface_RoutedVlan_Ipv4_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateUnnumbered() *Interface_RoutedVlan_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_RoutedVlan_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetCounters() *Interface_RoutedVlan_Ipv4_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetUnnumbered() *Interface_RoutedVlan_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_RoutedVlan_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpClient is set, it can
// safely use t.GetDhcpClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpClient == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetGratuitousArpAccepted retrieves the value of the leaf GratuitousArpAccepted from the Interface_RoutedVlan_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousArpAccepted is set, it can
// safely use t.GetGratuitousArpAccepted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousArpAccepted == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetGratuitousArpAccepted() bool {
	if t == nil || t.GratuitousArpAccepted == nil {
		return false
	}
	return *t.GratuitousArpAccepted
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_RoutedVlan_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// SetDhcpClient sets the value of the leaf DhcpClient in the Interface_RoutedVlan_Ipv4
// struct.
func (t *Interface_RoutedVlan_Ipv4) SetDhcpClient(v bool) {
	t.DhcpClient = &v
}

// SetEnabled sets the value of the leaf Enabled in the Interface_RoutedVlan_Ipv4
// struct.
func (t *Interface_RoutedVlan_Ipv4) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetGratuitousArpAccepted sets the value of the leaf GratuitousArpAccepted in the Interface_RoutedVlan_Ipv4
// struct.
func (t *Interface_RoutedVlan_Ipv4) SetGratuitousArpAccepted(v bool) {
	t.GratuitousArpAccepted = &v
}

// SetMtu sets the value of the leaf Mtu in the Interface_RoutedVlan_Ipv4
// struct.
func (t *Interface_RoutedVlan_Ipv4) SetMtu(v uint16) {
	t.Mtu = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DhcpClient == nil {
		var v bool = false
		t.DhcpClient = &v
	}
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	t.Counters.PopulateDefaults()
	t.ProxyArp.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4.
func (*Interface_RoutedVlan_Ipv4) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_Address represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address struct {
	Ip           *string                                                `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                 `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
	PrefixLength *uint8                                                 `path:"state/prefix-length" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/prefix-length" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Type         E_IfIp_Ipv4AddressType                                 `path:"state/type" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/type" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_RoutedVlan_Ipv4_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_RoutedVlan_Ipv4_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_RoutedVlan_Ipv4_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv4_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroupMap returns the list (map) from Interface_RoutedVlan_Ipv4_Address.
//
// It initializes the field if not already initialized.
func (t *Interface_RoutedVlan_Ipv4_Address) GetOrCreateVrrpGroupMap() map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup {
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup)
	}
	return t.VrrpGroup
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_RoutedVlan_Ipv4_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv4_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_RoutedVlan_Ipv4_Address. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4_Address) AppendVrrpGroup(v *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_RoutedVlan_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetType retrieves the value of the leaf Type from the Interface_RoutedVlan_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetType() E_IfIp_Ipv4AddressType {
	if t == nil || t.Type == 0 {
		return IfIp_Ipv4AddressType_PRIMARY
	}
	return t.Type
}

// SetIp sets the value of the leaf Ip in the Interface_RoutedVlan_Ipv4_Address
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address) SetIp(v string) {
	t.Ip = &v
}

// SetOrigin sets the value of the leaf Origin in the Interface_RoutedVlan_Ipv4_Address
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address) SetOrigin(v E_IfIp_IpAddressOrigin) {
	t.Origin = v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Interface_RoutedVlan_Ipv4_Address
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address) SetPrefixLength(v uint8) {
	t.PrefixLength = &v
}

// SetType sets the value of the leaf Type in the Interface_RoutedVlan_Ipv4_Address
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address) SetType(v E_IfIp_Ipv4AddressType) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = IfIp_Ipv4AddressType_PRIMARY
	}
	for _, e := range t.VrrpGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Address struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_Address.
func (*Interface_RoutedVlan_Ipv4_Address) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct {
	AcceptMode            *bool                                                          `path:"state/accept-mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/accept-mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	AdvertisementInterval *uint16                                                        `path:"state/advertisement-interval" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/advertisement-interval" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	CurrentPriority       *uint8                                                         `path:"state/current-priority" module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceTracking     *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                          `path:"state/preempt" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	PreemptDelay          *uint16                                                        `path:"state/preempt-delay" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt-delay" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Priority              *uint8                                                         `path:"state/priority" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualAddress        []string                                                       `path:"state/virtual-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/virtual-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualRouterId       *uint8                                                         `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/virtual-router-id|virtual-router-id" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_RoutedVlan_Ipv4_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetInterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptMode is set, it can
// safely use t.GetAcceptMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptMode == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisementInterval is set, it can
// safely use t.GetAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisementInterval == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentPriority is set, it can
// safely use t.GetCurrentPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentPriority == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreemptDelay is set, it can
// safely use t.GetPreemptDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreemptDelay == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualAddress is set, it can
// safely use t.GetVirtualAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualAddress == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// SetAcceptMode sets the value of the leaf AcceptMode in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetAcceptMode(v bool) {
	t.AcceptMode = &v
}

// SetAdvertisementInterval sets the value of the leaf AdvertisementInterval in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetAdvertisementInterval(v uint16) {
	t.AdvertisementInterval = &v
}

// SetCurrentPriority sets the value of the leaf CurrentPriority in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetCurrentPriority(v uint8) {
	t.CurrentPriority = &v
}

// SetPreempt sets the value of the leaf Preempt in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetPreempt(v bool) {
	t.Preempt = &v
}

// SetPreemptDelay sets the value of the leaf PreemptDelay in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetPreemptDelay(v uint16) {
	t.PreemptDelay = &v
}

// SetPriority sets the value of the leaf Priority in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetPriority(v uint8) {
	t.Priority = &v
}

// SetVirtualAddress sets the value of the leaf VirtualAddress in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetVirtualAddress(v []string) {
	t.VirtualAddress = v
}

// SetVirtualRouterId sets the value of the leaf VirtualRouterId in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) SetVirtualRouterId(v uint8) {
	t.VirtualRouterId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptMode == nil {
		var v bool = false
		t.AcceptMode = &v
	}
	if t.AdvertisementInterval == nil {
		var v uint16 = 100
		t.AdvertisementInterval = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.PreemptDelay == nil {
		var v uint16 = 0
		t.PreemptDelay = &v
	}
	if t.Priority == nil {
		var v uint8 = 100
		t.Priority = &v
	}
	t.InterfaceTracking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_Address_VrrpGroup.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority-decrement" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/track-interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDecrement is set, it can
// safely use t.GetPriorityDecrement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDecrement == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackInterface is set, it can
// safely use t.GetTrackInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackInterface == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// SetPriorityDecrement sets the value of the leaf PriorityDecrement in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) SetPriorityDecrement(v uint8) {
	t.PriorityDecrement = &v
}

// SetTrackInterface sets the value of the leaf TrackInterface in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) SetTrackInterface(v []string) {
	t.TrackInterface = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PriorityDecrement == nil {
		var v uint8 = 0
		t.PriorityDecrement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_Counters represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InMulticastOctets  *uint64 `path:"in-multicast-octets" module:"openconfig-if-ip"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutMulticastOctets *uint64 `path:"out-multicast-octets" module:"openconfig-if-ip"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDiscardedPkts is set, it can
// safely use t.GetInDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InErrorPkts is set, it can
// safely use t.GetInErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedOctets is set, it can
// safely use t.GetInForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedPkts is set, it can
// safely use t.GetInForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInMulticastOctets retrieves the value of the leaf InMulticastOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastOctets is set, it can
// safely use t.GetInMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInMulticastOctets() uint64 {
	if t == nil || t.InMulticastOctets == nil {
		return 0
	}
	return *t.InMulticastOctets
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastPkts is set, it can
// safely use t.GetInMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDiscardedPkts is set, it can
// safely use t.GetOutDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutErrorPkts is set, it can
// safely use t.GetOutErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedOctets is set, it can
// safely use t.GetOutForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedPkts is set, it can
// safely use t.GetOutForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutMulticastOctets retrieves the value of the leaf OutMulticastOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastOctets is set, it can
// safely use t.GetOutMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutMulticastOctets() uint64 {
	if t == nil || t.OutMulticastOctets == nil {
		return 0
	}
	return *t.OutMulticastOctets
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastPkts is set, it can
// safely use t.GetOutMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// SetInDiscardedPkts sets the value of the leaf InDiscardedPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInDiscardedPkts(v uint64) {
	t.InDiscardedPkts = &v
}

// SetInErrorPkts sets the value of the leaf InErrorPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInErrorPkts(v uint64) {
	t.InErrorPkts = &v
}

// SetInForwardedOctets sets the value of the leaf InForwardedOctets in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInForwardedOctets(v uint64) {
	t.InForwardedOctets = &v
}

// SetInForwardedPkts sets the value of the leaf InForwardedPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInForwardedPkts(v uint64) {
	t.InForwardedPkts = &v
}

// SetInMulticastOctets sets the value of the leaf InMulticastOctets in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInMulticastOctets(v uint64) {
	t.InMulticastOctets = &v
}

// SetInMulticastPkts sets the value of the leaf InMulticastPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInMulticastPkts(v uint64) {
	t.InMulticastPkts = &v
}

// SetInOctets sets the value of the leaf InOctets in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetOutDiscardedPkts sets the value of the leaf OutDiscardedPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutDiscardedPkts(v uint64) {
	t.OutDiscardedPkts = &v
}

// SetOutErrorPkts sets the value of the leaf OutErrorPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutErrorPkts(v uint64) {
	t.OutErrorPkts = &v
}

// SetOutForwardedOctets sets the value of the leaf OutForwardedOctets in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutForwardedOctets(v uint64) {
	t.OutForwardedOctets = &v
}

// SetOutForwardedPkts sets the value of the leaf OutForwardedPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutForwardedPkts(v uint64) {
	t.OutForwardedPkts = &v
}

// SetOutMulticastOctets sets the value of the leaf OutMulticastOctets in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutMulticastOctets(v uint64) {
	t.OutMulticastOctets = &v
}

// SetOutMulticastPkts sets the value of the leaf OutMulticastPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutMulticastPkts(v uint64) {
	t.OutMulticastPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Interface_RoutedVlan_Ipv4_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv4_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_Counters.
func (*Interface_RoutedVlan_Ipv4_Counters) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_Neighbor represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor struct {
	Ip               *string               `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	LinkLayerAddress *string               `path:"state/link-layer-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/link-layer-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// SetIp sets the value of the leaf Ip in the Interface_RoutedVlan_Ipv4_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) SetIp(v string) {
	t.Ip = &v
}

// SetLinkLayerAddress sets the value of the leaf LinkLayerAddress in the Interface_RoutedVlan_Ipv4_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) SetLinkLayerAddress(v string) {
	t.LinkLayerAddress = &v
}

// SetOrigin sets the value of the leaf Origin in the Interface_RoutedVlan_Ipv4_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) SetOrigin(v E_IfIp_NeighborOrigin) {
	t.Origin = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_Neighbor.
func (*Interface_RoutedVlan_Ipv4_Neighbor) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_ProxyArp represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp struct {
	Mode E_ProxyArp_Mode `path:"state/mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_ProxyArp) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the Interface_RoutedVlan_Ipv4_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) GetMode() E_ProxyArp_Mode {
	if t == nil || t.Mode == 0 {
		return ProxyArp_Mode_DISABLE
	}
	return t.Mode
}

// SetMode sets the value of the leaf Mode in the Interface_RoutedVlan_Ipv4_ProxyArp
// struct.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) SetMode(v E_ProxyArp_Mode) {
	t.Mode = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_ProxyArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = ProxyArp_Mode_DISABLE
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_ProxyArp.
func (*Interface_RoutedVlan_Ipv4_ProxyArp) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_Unnumbered represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered struct {
	Enabled      *bool                                              `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceRef *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetOrCreateInterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_RoutedVlan_Ipv4_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetInterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetEnabled sets the value of the leaf Enabled in the Interface_RoutedVlan_Ipv4_Unnumbered
// struct.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	t.InterfaceRef.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_Unnumbered.
func (*Interface_RoutedVlan_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/subinterface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef.
func (*Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6 represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6 struct {
	Address                map[string]*Interface_RoutedVlan_Ipv6_Address  `path:"addresses/address" module:"openconfig-if-ip/openconfig-if-ip"`
	Counters               *Interface_RoutedVlan_Ipv6_Counters            `path:"state/counters" module:"openconfig-if-ip/openconfig-if-ip"`
	DhcpClient             *bool                                          `path:"state/dhcp-client" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/dhcp-client" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	DupAddrDetectTransmits *uint32                                        `path:"state/dup-addr-detect-transmits" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/dup-addr-detect-transmits" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Enabled                *bool                                          `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	LearnUnsolicited       E_Ipv6_LearnUnsolicited                        `path:"state/learn-unsolicited" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/learn-unsolicited" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Mtu                    *uint32                                        `path:"state/mtu" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mtu" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Neighbor               map[string]*Interface_RoutedVlan_Ipv6_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip/openconfig-if-ip"`
	RouterAdvertisement    *Interface_RoutedVlan_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"openconfig-if-ip"`
	Unnumbered             *Interface_RoutedVlan_Ipv6_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_RoutedVlan_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6) NewAddress(Ip string) (*Interface_RoutedVlan_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_RoutedVlan_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_RoutedVlan_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddressMap returns the list (map) from Interface_RoutedVlan_Ipv6.
//
// It initializes the field if not already initialized.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateAddressMap() map[string]*Interface_RoutedVlan_Ipv6_Address {
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv6_Address)
	}
	return t.Address
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateAddress(Ip string) *Interface_RoutedVlan_Ipv6_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_RoutedVlan_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetAddress(Ip string) *Interface_RoutedVlan_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv6) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_RoutedVlan_Ipv6_Address struct to the
// list Address of Interface_RoutedVlan_Ipv6. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Address already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6) AppendAddress(v *Interface_RoutedVlan_Ipv6_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_RoutedVlan_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6) NewNeighbor(Ip string) (*Interface_RoutedVlan_Ipv6_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_RoutedVlan_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_RoutedVlan_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv6) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from Interface_RoutedVlan_Ipv6.
//
// It initializes the field if not already initialized.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateNeighborMap() map[string]*Interface_RoutedVlan_Ipv6_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv6_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateNeighbor(Ip string) *Interface_RoutedVlan_Ipv6_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_RoutedVlan_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetNeighbor(Ip string) *Interface_RoutedVlan_Ipv6_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv6) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_RoutedVlan_Ipv6_Neighbor struct to the
// list Neighbor of Interface_RoutedVlan_Ipv6. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6) AppendNeighbor(v *Interface_RoutedVlan_Ipv6_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv6_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateCounters() *Interface_RoutedVlan_Ipv6_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_RoutedVlan_Ipv6_Counters{}
	return t.Counters
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateRouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &Interface_RoutedVlan_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateUnnumbered() *Interface_RoutedVlan_Ipv6_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_RoutedVlan_Ipv6_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetCounters() *Interface_RoutedVlan_Ipv6_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetRouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetUnnumbered() *Interface_RoutedVlan_Ipv6_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_RoutedVlan_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpClient is set, it can
// safely use t.GetDhcpClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpClient == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetDupAddrDetectTransmits retrieves the value of the leaf DupAddrDetectTransmits from the Interface_RoutedVlan_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DupAddrDetectTransmits is set, it can
// safely use t.GetDupAddrDetectTransmits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DupAddrDetectTransmits == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetDupAddrDetectTransmits() uint32 {
	if t == nil || t.DupAddrDetectTransmits == nil {
		return 1
	}
	return *t.DupAddrDetectTransmits
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the Interface_RoutedVlan_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetLearnUnsolicited() E_Ipv6_LearnUnsolicited {
	if t == nil || t.LearnUnsolicited == 0 {
		return Ipv6_LearnUnsolicited_NONE
	}
	return t.LearnUnsolicited
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_RoutedVlan_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// SetDhcpClient sets the value of the leaf DhcpClient in the Interface_RoutedVlan_Ipv6
// struct.
func (t *Interface_RoutedVlan_Ipv6) SetDhcpClient(v bool) {
	t.DhcpClient = &v
}

// SetDupAddrDetectTransmits sets the value of the leaf DupAddrDetectTransmits in the Interface_RoutedVlan_Ipv6
// struct.
func (t *Interface_RoutedVlan_Ipv6) SetDupAddrDetectTransmits(v uint32) {
	t.DupAddrDetectTransmits = &v
}

// SetEnabled sets the value of the leaf Enabled in the Interface_RoutedVlan_Ipv6
// struct.
func (t *Interface_RoutedVlan_Ipv6) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetLearnUnsolicited sets the value of the leaf LearnUnsolicited in the Interface_RoutedVlan_Ipv6
// struct.
func (t *Interface_RoutedVlan_Ipv6) SetLearnUnsolicited(v E_Ipv6_LearnUnsolicited) {
	t.LearnUnsolicited = v
}

// SetMtu sets the value of the leaf Mtu in the Interface_RoutedVlan_Ipv6
// struct.
func (t *Interface_RoutedVlan_Ipv6) SetMtu(v uint32) {
	t.Mtu = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DhcpClient == nil {
		var v bool = false
		t.DhcpClient = &v
	}
	if t.DupAddrDetectTransmits == nil {
		var v uint32 = 1
		t.DupAddrDetectTransmits = &v
	}
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	if t.LearnUnsolicited == 0 {
		t.LearnUnsolicited = Ipv6_LearnUnsolicited_NONE
	}
	t.Counters.PopulateDefaults()
	t.RouterAdvertisement.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6.
func (*Interface_RoutedVlan_Ipv6) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_Address represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address struct {
	Ip           *string                                                `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                 `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
	PrefixLength *uint8                                                 `path:"state/prefix-length" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/prefix-length" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Status       E_Address_Status                                       `path:"state/status" module:"openconfig-if-ip/openconfig-if-ip"`
	Type         E_InetTypes_Ipv6AddressType                            `path:"state/type" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/type" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_RoutedVlan_Ipv6_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_RoutedVlan_Ipv6_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_RoutedVlan_Ipv6_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv6_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroupMap returns the list (map) from Interface_RoutedVlan_Ipv6_Address.
//
// It initializes the field if not already initialized.
func (t *Interface_RoutedVlan_Ipv6_Address) GetOrCreateVrrpGroupMap() map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup {
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup)
	}
	return t.VrrpGroup
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_RoutedVlan_Ipv6_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv6_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_RoutedVlan_Ipv6_Address. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6_Address) AppendVrrpGroup(v *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_RoutedVlan_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetStatus retrieves the value of the leaf Status from the Interface_RoutedVlan_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Status is set, it can
// safely use t.GetStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Status == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetStatus() E_Address_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// GetType retrieves the value of the leaf Type from the Interface_RoutedVlan_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetType() E_InetTypes_Ipv6AddressType {
	if t == nil || t.Type == 0 {
		return InetTypes_Ipv6AddressType_GLOBAL_UNICAST
	}
	return t.Type
}

// SetIp sets the value of the leaf Ip in the Interface_RoutedVlan_Ipv6_Address
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address) SetIp(v string) {
	t.Ip = &v
}

// SetOrigin sets the value of the leaf Origin in the Interface_RoutedVlan_Ipv6_Address
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address) SetOrigin(v E_IfIp_IpAddressOrigin) {
	t.Origin = v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Interface_RoutedVlan_Ipv6_Address
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address) SetPrefixLength(v uint8) {
	t.PrefixLength = &v
}

// SetStatus sets the value of the leaf Status in the Interface_RoutedVlan_Ipv6_Address
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address) SetStatus(v E_Address_Status) {
	t.Status = v
}

// SetType sets the value of the leaf Type in the Interface_RoutedVlan_Ipv6_Address
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address) SetType(v E_InetTypes_Ipv6AddressType) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = InetTypes_Ipv6AddressType_GLOBAL_UNICAST
	}
	for _, e := range t.VrrpGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Address struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_Address.
func (*Interface_RoutedVlan_Ipv6_Address) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct {
	AcceptMode            *bool                                                          `path:"state/accept-mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/accept-mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	AdvertisementInterval *uint16                                                        `path:"state/advertisement-interval" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/advertisement-interval" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	CurrentPriority       *uint8                                                         `path:"state/current-priority" module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceTracking     *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                          `path:"state/preempt" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	PreemptDelay          *uint16                                                        `path:"state/preempt-delay" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt-delay" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Priority              *uint8                                                         `path:"state/priority" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualAddress        []string                                                       `path:"state/virtual-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/virtual-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualLinkLocal      *string                                                        `path:"state/virtual-link-local" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/virtual-link-local" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualRouterId       *uint8                                                         `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/virtual-router-id|virtual-router-id" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_RoutedVlan_Ipv6_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetInterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptMode is set, it can
// safely use t.GetAcceptMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptMode == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisementInterval is set, it can
// safely use t.GetAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisementInterval == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentPriority is set, it can
// safely use t.GetCurrentPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentPriority == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreemptDelay is set, it can
// safely use t.GetPreemptDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreemptDelay == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualAddress is set, it can
// safely use t.GetVirtualAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualAddress == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualLinkLocal retrieves the value of the leaf VirtualLinkLocal from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualLinkLocal is set, it can
// safely use t.GetVirtualLinkLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualLinkLocal == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualLinkLocal() string {
	if t == nil || t.VirtualLinkLocal == nil {
		return ""
	}
	return *t.VirtualLinkLocal
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// SetAcceptMode sets the value of the leaf AcceptMode in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetAcceptMode(v bool) {
	t.AcceptMode = &v
}

// SetAdvertisementInterval sets the value of the leaf AdvertisementInterval in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetAdvertisementInterval(v uint16) {
	t.AdvertisementInterval = &v
}

// SetCurrentPriority sets the value of the leaf CurrentPriority in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetCurrentPriority(v uint8) {
	t.CurrentPriority = &v
}

// SetPreempt sets the value of the leaf Preempt in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetPreempt(v bool) {
	t.Preempt = &v
}

// SetPreemptDelay sets the value of the leaf PreemptDelay in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetPreemptDelay(v uint16) {
	t.PreemptDelay = &v
}

// SetPriority sets the value of the leaf Priority in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetPriority(v uint8) {
	t.Priority = &v
}

// SetVirtualAddress sets the value of the leaf VirtualAddress in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetVirtualAddress(v []string) {
	t.VirtualAddress = v
}

// SetVirtualLinkLocal sets the value of the leaf VirtualLinkLocal in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetVirtualLinkLocal(v string) {
	t.VirtualLinkLocal = &v
}

// SetVirtualRouterId sets the value of the leaf VirtualRouterId in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) SetVirtualRouterId(v uint8) {
	t.VirtualRouterId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptMode == nil {
		var v bool = false
		t.AcceptMode = &v
	}
	if t.AdvertisementInterval == nil {
		var v uint16 = 100
		t.AdvertisementInterval = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.PreemptDelay == nil {
		var v uint16 = 0
		t.PreemptDelay = &v
	}
	if t.Priority == nil {
		var v uint8 = 100
		t.Priority = &v
	}
	t.InterfaceTracking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_Address_VrrpGroup.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority-decrement" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/track-interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDecrement is set, it can
// safely use t.GetPriorityDecrement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDecrement == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackInterface is set, it can
// safely use t.GetTrackInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackInterface == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// SetPriorityDecrement sets the value of the leaf PriorityDecrement in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) SetPriorityDecrement(v uint8) {
	t.PriorityDecrement = &v
}

// SetTrackInterface sets the value of the leaf TrackInterface in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) SetTrackInterface(v []string) {
	t.TrackInterface = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PriorityDecrement == nil {
		var v uint8 = 0
		t.PriorityDecrement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_Counters represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InMulticastOctets  *uint64 `path:"in-multicast-octets" module:"openconfig-if-ip"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutMulticastOctets *uint64 `path:"out-multicast-octets" module:"openconfig-if-ip"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDiscardedPkts is set, it can
// safely use t.GetInDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InErrorPkts is set, it can
// safely use t.GetInErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedOctets is set, it can
// safely use t.GetInForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedPkts is set, it can
// safely use t.GetInForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInMulticastOctets retrieves the value of the leaf InMulticastOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastOctets is set, it can
// safely use t.GetInMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInMulticastOctets() uint64 {
	if t == nil || t.InMulticastOctets == nil {
		return 0
	}
	return *t.InMulticastOctets
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastPkts is set, it can
// safely use t.GetInMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDiscardedPkts is set, it can
// safely use t.GetOutDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutErrorPkts is set, it can
// safely use t.GetOutErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedOctets is set, it can
// safely use t.GetOutForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedPkts is set, it can
// safely use t.GetOutForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutMulticastOctets retrieves the value of the leaf OutMulticastOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastOctets is set, it can
// safely use t.GetOutMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutMulticastOctets() uint64 {
	if t == nil || t.OutMulticastOctets == nil {
		return 0
	}
	return *t.OutMulticastOctets
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastPkts is set, it can
// safely use t.GetOutMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// SetInDiscardedPkts sets the value of the leaf InDiscardedPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInDiscardedPkts(v uint64) {
	t.InDiscardedPkts = &v
}

// SetInErrorPkts sets the value of the leaf InErrorPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInErrorPkts(v uint64) {
	t.InErrorPkts = &v
}

// SetInForwardedOctets sets the value of the leaf InForwardedOctets in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInForwardedOctets(v uint64) {
	t.InForwardedOctets = &v
}

// SetInForwardedPkts sets the value of the leaf InForwardedPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInForwardedPkts(v uint64) {
	t.InForwardedPkts = &v
}

// SetInMulticastOctets sets the value of the leaf InMulticastOctets in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInMulticastOctets(v uint64) {
	t.InMulticastOctets = &v
}

// SetInMulticastPkts sets the value of the leaf InMulticastPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInMulticastPkts(v uint64) {
	t.InMulticastPkts = &v
}

// SetInOctets sets the value of the leaf InOctets in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetOutDiscardedPkts sets the value of the leaf OutDiscardedPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutDiscardedPkts(v uint64) {
	t.OutDiscardedPkts = &v
}

// SetOutErrorPkts sets the value of the leaf OutErrorPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutErrorPkts(v uint64) {
	t.OutErrorPkts = &v
}

// SetOutForwardedOctets sets the value of the leaf OutForwardedOctets in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutForwardedOctets(v uint64) {
	t.OutForwardedOctets = &v
}

// SetOutForwardedPkts sets the value of the leaf OutForwardedPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutForwardedPkts(v uint64) {
	t.OutForwardedPkts = &v
}

// SetOutMulticastOctets sets the value of the leaf OutMulticastOctets in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutMulticastOctets(v uint64) {
	t.OutMulticastOctets = &v
}

// SetOutMulticastPkts sets the value of the leaf OutMulticastPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutMulticastPkts(v uint64) {
	t.OutMulticastPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Interface_RoutedVlan_Ipv6_Counters
// struct.
func (t *Interface_RoutedVlan_Ipv6_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_Counters.
func (*Interface_RoutedVlan_Ipv6_Counters) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_Neighbor represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor struct {
	Ip               *string                  `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	IsRouter         *bool                    `path:"state/is-router" module:"openconfig-if-ip/openconfig-if-ip"`
	LinkLayerAddress *string                  `path:"state/link-layer-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/link-layer-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	NeighborState    E_Neighbor_NeighborState `path:"state/neighbor-state" module:"openconfig-if-ip/openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin    `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIsRouter retrieves the value of the leaf IsRouter from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsRouter is set, it can
// safely use t.GetIsRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsRouter == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetIsRouter() bool {
	if t == nil || t.IsRouter == nil {
		return false
	}
	return *t.IsRouter
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetNeighborState retrieves the value of the leaf NeighborState from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborState is set, it can
// safely use t.GetNeighborState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborState == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetNeighborState() E_Neighbor_NeighborState {
	if t == nil || t.NeighborState == 0 {
		return 0
	}
	return t.NeighborState
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// SetIp sets the value of the leaf Ip in the Interface_RoutedVlan_Ipv6_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) SetIp(v string) {
	t.Ip = &v
}

// SetIsRouter sets the value of the leaf IsRouter in the Interface_RoutedVlan_Ipv6_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) SetIsRouter(v bool) {
	t.IsRouter = &v
}

// SetLinkLayerAddress sets the value of the leaf LinkLayerAddress in the Interface_RoutedVlan_Ipv6_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) SetLinkLayerAddress(v string) {
	t.LinkLayerAddress = &v
}

// SetNeighborState sets the value of the leaf NeighborState in the Interface_RoutedVlan_Ipv6_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) SetNeighborState(v E_Neighbor_NeighborState) {
	t.NeighborState = v
}

// SetOrigin sets the value of the leaf Origin in the Interface_RoutedVlan_Ipv6_Neighbor
// struct.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) SetOrigin(v E_IfIp_NeighborOrigin) {
	t.Origin = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_Neighbor.
func (*Interface_RoutedVlan_Ipv6_Neighbor) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement struct {
	Enable      *bool                                                            `path:"state/enable" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enable" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Interval    *uint32                                                          `path:"state/interval" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/interval" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Lifetime    *uint32                                                          `path:"state/lifetime" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/lifetime" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Managed     *bool                                                            `path:"state/managed" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/managed" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Mode        E_RouterAdvertisement_Mode                                       `path:"state/mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	OtherConfig *bool                                                            `path:"state/other-config" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/other-config" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Prefix      map[string]*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix `path:"prefixes/prefix" module:"openconfig-if-ip/openconfig-if-ip"`
	Suppress    *bool                                                            `path:"state/suppress" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/suppress" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// Interface_RoutedVlan_Ipv6_RouterAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) NewPrefix(Prefix string) (*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the Interface_RoutedVlan_Ipv6_RouterAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from Interface_RoutedVlan_Ipv6_RouterAdvertisement.
//
// It initializes the field if not already initialized.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetOrCreatePrefixMap() map[string]*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[string]*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6_RouterAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetOrCreatePrefix(Prefix string) *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of Interface_RoutedVlan_Ipv6_RouterAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetPrefix(Prefix string) *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6_RouterAdvertisement. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix struct to the
// list Prefix of Interface_RoutedVlan_Ipv6_RouterAdvertisement. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) AppendPrefix(v *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetInterval retrieves the value of the leaf Interval from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLifetime retrieves the value of the leaf Lifetime from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetManaged retrieves the value of the leaf Managed from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Managed is set, it can
// safely use t.GetManaged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Managed == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetManaged() bool {
	if t == nil || t.Managed == nil {
		return false
	}
	return *t.Managed
}

// GetMode retrieves the value of the leaf Mode from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetMode() E_RouterAdvertisement_Mode {
	if t == nil || t.Mode == 0 {
		return RouterAdvertisement_Mode_ALL
	}
	return t.Mode
}

// GetOtherConfig retrieves the value of the leaf OtherConfig from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherConfig is set, it can
// safely use t.GetOtherConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherConfig == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetOtherConfig() bool {
	if t == nil || t.OtherConfig == nil {
		return false
	}
	return *t.OtherConfig
}

// GetSuppress retrieves the value of the leaf Suppress from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suppress is set, it can
// safely use t.GetSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suppress == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// SetEnable sets the value of the leaf Enable in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) SetEnable(v bool) {
	t.Enable = &v
}

// SetInterval sets the value of the leaf Interval in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) SetInterval(v uint32) {
	t.Interval = &v
}

// SetLifetime sets the value of the leaf Lifetime in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) SetLifetime(v uint32) {
	t.Lifetime = &v
}

// SetManaged sets the value of the leaf Managed in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) SetManaged(v bool) {
	t.Managed = &v
}

// SetMode sets the value of the leaf Mode in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) SetMode(v E_RouterAdvertisement_Mode) {
	t.Mode = v
}

// SetOtherConfig sets the value of the leaf OtherConfig in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) SetOtherConfig(v bool) {
	t.OtherConfig = &v
}

// SetSuppress sets the value of the leaf Suppress in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) SetSuppress(v bool) {
	t.Suppress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = true
		t.Enable = &v
	}
	if t.Managed == nil {
		var v bool = false
		t.Managed = &v
	}
	if t.Mode == 0 {
		t.Mode = RouterAdvertisement_Mode_ALL
	}
	if t.OtherConfig == nil {
		var v bool = false
		t.OtherConfig = &v
	}
	if t.Suppress == nil {
		var v bool = false
		t.Suppress = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_RouterAdvertisement.
func (*Interface_RoutedVlan_Ipv6_RouterAdvertisement) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix struct {
	DisableAdvertisement     *bool   `path:"state/disable-advertisement" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/disable-advertisement" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	DisableAutoconfiguration *bool   `path:"state/disable-autoconfiguration" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/disable-autoconfiguration" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	EnableOnlink             *bool   `path:"state/enable-onlink" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enable-onlink" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	PreferredLifetime        *uint32 `path:"state/preferred-lifetime" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preferred-lifetime" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Prefix                   *string `path:"state/prefix|prefix" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/prefix|prefix" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	ValidLifetime            *uint32 `path:"state/valid-lifetime" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/valid-lifetime" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) IsYANGGoStruct() {}

// GetDisableAdvertisement retrieves the value of the leaf DisableAdvertisement from the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisableAdvertisement is set, it can
// safely use t.GetDisableAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisableAdvertisement == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) GetDisableAdvertisement() bool {
	if t == nil || t.DisableAdvertisement == nil {
		return false
	}
	return *t.DisableAdvertisement
}

// GetDisableAutoconfiguration retrieves the value of the leaf DisableAutoconfiguration from the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisableAutoconfiguration is set, it can
// safely use t.GetDisableAutoconfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisableAutoconfiguration == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) GetDisableAutoconfiguration() bool {
	if t == nil || t.DisableAutoconfiguration == nil {
		return false
	}
	return *t.DisableAutoconfiguration
}

// GetEnableOnlink retrieves the value of the leaf EnableOnlink from the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableOnlink is set, it can
// safely use t.GetEnableOnlink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableOnlink == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) GetEnableOnlink() bool {
	if t == nil || t.EnableOnlink == nil {
		return false
	}
	return *t.EnableOnlink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 0
	}
	return *t.PreferredLifetime
}

// GetPrefix retrieves the value of the leaf Prefix from the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 0
	}
	return *t.ValidLifetime
}

// SetDisableAdvertisement sets the value of the leaf DisableAdvertisement in the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) SetDisableAdvertisement(v bool) {
	t.DisableAdvertisement = &v
}

// SetDisableAutoconfiguration sets the value of the leaf DisableAutoconfiguration in the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) SetDisableAutoconfiguration(v bool) {
	t.DisableAutoconfiguration = &v
}

// SetEnableOnlink sets the value of the leaf EnableOnlink in the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) SetEnableOnlink(v bool) {
	t.EnableOnlink = &v
}

// SetPreferredLifetime sets the value of the leaf PreferredLifetime in the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) SetPreferredLifetime(v uint32) {
	t.PreferredLifetime = &v
}

// SetPrefix sets the value of the leaf Prefix in the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetValidLifetime sets the value of the leaf ValidLifetime in the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) SetValidLifetime(v uint32) {
	t.ValidLifetime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix.
func (*Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_Unnumbered represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered struct {
	Enabled      *bool                                              `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceRef *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetOrCreateInterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_RoutedVlan_Ipv6_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetInterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv6_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetEnabled sets the value of the leaf Enabled in the Interface_RoutedVlan_Ipv6_Unnumbered
// struct.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	t.InterfaceRef.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_Unnumbered.
func (*Interface_RoutedVlan_Ipv6_Unnumbered) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/subinterface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef.
func (*Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	AdminStatus E_Interface_AdminStatus          `path:"state/admin-status" module:"openconfig-interfaces/openconfig-interfaces"`
	Counters    *Interface_Subinterface_Counters `path:"state/counters" module:"openconfig-interfaces/openconfig-interfaces"`
	Cpu         *bool                            `path:"state/cpu" module:"openconfig-interfaces/openconfig-interfaces"`
	Description *string                          `path:"state/description" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/description" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	Enabled     *bool                            `path:"state/enabled" module:"openconfig-interfaces/openconfig-interfaces" shadow-path:"config/enabled" shadow-module:"openconfig-interfaces/openconfig-interfaces"`
	Ifindex     *uint32                          `path:"state/ifindex" module:"openconfig-interfaces/openconfig-interfaces"`
	Index       *uint32                          `path:"state/index|index" module:"openconfig-interfaces/openconfig-interfaces|openconfig-interfaces" shadow-path:"config/index|index" shadow-module:"openconfig-interfaces/openconfig-interfaces|openconfig-interfaces"`
	Ipv4        *Interface_Subinterface_Ipv4     `path:"ipv4" module:"openconfig-if-ip"`
	Ipv6        *Interface_Subinterface_Ipv6     `path:"ipv6" module:"openconfig-if-ip"`
	LastChange  *uint64                          `path:"state/last-change" module:"openconfig-interfaces/openconfig-interfaces"`
	Logical     *bool                            `path:"state/logical" module:"openconfig-interfaces/openconfig-interfaces"`
	Management  *bool                            `path:"state/management" module:"openconfig-interfaces/openconfig-interfaces"`
	Name        *string                          `path:"state/name" module:"openconfig-interfaces/openconfig-interfaces"`
	OperStatus  E_Interface_OperStatus           `path:"state/oper-status" module:"openconfig-interfaces/openconfig-interfaces"`
	Vlan        *Interface_Subinterface_Vlan     `path:"vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateCounters() *Interface_Subinterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Counters{}
	return t.Counters
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateIpv4() *Interface_Subinterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Interface_Subinterface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateIpv6() *Interface_Subinterface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Interface_Subinterface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateVlan retrieves the value of the Vlan field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateVlan() *Interface_Subinterface_Vlan {
	if t.Vlan != nil {
		return t.Vlan
	}
	t.Vlan = &Interface_Subinterface_Vlan{}
	return t.Vlan
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetCounters() *Interface_Subinterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Interface_Subinterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetIpv4() *Interface_Subinterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Interface_Subinterface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetIpv6() *Interface_Subinterface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetVlan returns the value of the Vlan struct pointer
// from Interface_Subinterface. If the receiver or the field Vlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetVlan() *Interface_Subinterface_Vlan {
	if t != nil && t.Vlan != nil {
		return t.Vlan
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminStatus is set, it can
// safely use t.GetAdminStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminStatus == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetAdminStatus() E_Interface_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetCpu retrieves the value of the leaf Cpu from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cpu is set, it can
// safely use t.GetCpu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cpu == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetCpu() bool {
	if t == nil || t.Cpu == nil {
		return false
	}
	return *t.Cpu
}

// GetDescription retrieves the value of the leaf Description from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetIfindex retrieves the value of the leaf Ifindex from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetIndex retrieves the value of the leaf Index from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLastChange retrieves the value of the leaf LastChange from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastChange is set, it can
// safely use t.GetLastChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastChange == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Logical is set, it can
// safely use t.GetLogical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Logical == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetManagement retrieves the value of the leaf Management from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Management is set, it can
// safely use t.GetManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Management == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetManagement() bool {
	if t == nil || t.Management == nil {
		return false
	}
	return *t.Management
}

// GetName retrieves the value of the leaf Name from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Interface_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface) GetOperStatus() E_Interface_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// SetAdminStatus sets the value of the leaf AdminStatus in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetAdminStatus(v E_Interface_AdminStatus) {
	t.AdminStatus = v
}

// SetCpu sets the value of the leaf Cpu in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetCpu(v bool) {
	t.Cpu = &v
}

// SetDescription sets the value of the leaf Description in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetDescription(v string) {
	t.Description = &v
}

// SetEnabled sets the value of the leaf Enabled in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetIfindex sets the value of the leaf Ifindex in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetIfindex(v uint32) {
	t.Ifindex = &v
}

// SetIndex sets the value of the leaf Index in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetIndex(v uint32) {
	t.Index = &v
}

// SetLastChange sets the value of the leaf LastChange in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetLastChange(v uint64) {
	t.LastChange = &v
}

// SetLogical sets the value of the leaf Logical in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetLogical(v bool) {
	t.Logical = &v
}

// SetManagement sets the value of the leaf Management in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetManagement(v bool) {
	t.Management = &v
}

// SetName sets the value of the leaf Name in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetName(v string) {
	t.Name = &v
}

// SetOperStatus sets the value of the leaf OperStatus in the Interface_Subinterface
// struct.
func (t *Interface_Subinterface) SetOperStatus(v E_Interface_OperStatus) {
	t.OperStatus = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	if t.Index == nil {
		var v uint32 = 0
		t.Index = &v
	}
	t.Counters.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Vlan.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Interface_Subinterface struct, which is a YANG list entry.
func (t *Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface.
func (*Interface_Subinterface) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	CarrierTransitions *uint64 `path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts    *uint64 `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards         *uint64 `path:"in-discards" module:"openconfig-interfaces"`
	InErrors           *uint64 `path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors        *uint64 `path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-interfaces"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts      *uint64 `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos    *uint64 `path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear          *uint64 `path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts   *uint64 `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards        *uint64 `path:"out-discards" module:"openconfig-interfaces"`
	OutErrors          *uint64 `path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-interfaces"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts     *uint64 `path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CarrierTransitions is set, it can
// safely use t.GetCarrierTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CarrierTransitions == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBroadcastPkts is set, it can
// safely use t.GetInBroadcastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBroadcastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDiscards is set, it can
// safely use t.GetInDiscards() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDiscards == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InErrors is set, it can
// safely use t.GetInErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InErrors == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFcsErrors is set, it can
// safely use t.GetInFcsErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFcsErrors == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastPkts is set, it can
// safely use t.GetInMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUnicastPkts is set, it can
// safely use t.GetInUnicastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUnicastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUnknownProtos is set, it can
// safely use t.GetInUnknownProtos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUnknownProtos == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastClear is set, it can
// safely use t.GetLastClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastClear == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBroadcastPkts is set, it can
// safely use t.GetOutBroadcastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBroadcastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDiscards is set, it can
// safely use t.GetOutDiscards() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDiscards == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutErrors is set, it can
// safely use t.GetOutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutErrors == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastPkts is set, it can
// safely use t.GetOutMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the Interface_Subinterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutUnicastPkts is set, it can
// safely use t.GetOutUnicastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutUnicastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// SetCarrierTransitions sets the value of the leaf CarrierTransitions in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetCarrierTransitions(v uint64) {
	t.CarrierTransitions = &v
}

// SetInBroadcastPkts sets the value of the leaf InBroadcastPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInBroadcastPkts(v uint64) {
	t.InBroadcastPkts = &v
}

// SetInDiscards sets the value of the leaf InDiscards in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInDiscards(v uint64) {
	t.InDiscards = &v
}

// SetInErrors sets the value of the leaf InErrors in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInErrors(v uint64) {
	t.InErrors = &v
}

// SetInFcsErrors sets the value of the leaf InFcsErrors in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInFcsErrors(v uint64) {
	t.InFcsErrors = &v
}

// SetInMulticastPkts sets the value of the leaf InMulticastPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInMulticastPkts(v uint64) {
	t.InMulticastPkts = &v
}

// SetInOctets sets the value of the leaf InOctets in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetInUnicastPkts sets the value of the leaf InUnicastPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInUnicastPkts(v uint64) {
	t.InUnicastPkts = &v
}

// SetInUnknownProtos sets the value of the leaf InUnknownProtos in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetInUnknownProtos(v uint64) {
	t.InUnknownProtos = &v
}

// SetLastClear sets the value of the leaf LastClear in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetLastClear(v uint64) {
	t.LastClear = &v
}

// SetOutBroadcastPkts sets the value of the leaf OutBroadcastPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetOutBroadcastPkts(v uint64) {
	t.OutBroadcastPkts = &v
}

// SetOutDiscards sets the value of the leaf OutDiscards in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetOutDiscards(v uint64) {
	t.OutDiscards = &v
}

// SetOutErrors sets the value of the leaf OutErrors in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetOutErrors(v uint64) {
	t.OutErrors = &v
}

// SetOutMulticastPkts sets the value of the leaf OutMulticastPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetOutMulticastPkts(v uint64) {
	t.OutMulticastPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// SetOutUnicastPkts sets the value of the leaf OutUnicastPkts in the Interface_Subinterface_Counters
// struct.
func (t *Interface_Subinterface_Counters) SetOutUnicastPkts(v uint64) {
	t.OutUnicastPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Counters.
func (*Interface_Subinterface_Counters) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_Subinterface_Ipv4 represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4 struct {
	Address               map[string]*Interface_Subinterface_Ipv4_Address  `path:"addresses/address" module:"openconfig-if-ip/openconfig-if-ip"`
	Counters              *Interface_Subinterface_Ipv4_Counters            `path:"state/counters" module:"openconfig-if-ip/openconfig-if-ip"`
	DhcpClient            *bool                                            `path:"state/dhcp-client" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/dhcp-client" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Enabled               *bool                                            `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	GratuitousArpAccepted *bool                                            `path:"state/gratuitous-arp-accepted" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/gratuitous-arp-accepted" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Mtu                   *uint16                                          `path:"state/mtu" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mtu" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Neighbor              map[string]*Interface_Subinterface_Ipv4_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip/openconfig-if-ip"`
	ProxyArp              *Interface_Subinterface_Ipv4_ProxyArp            `path:"proxy-arp" module:"openconfig-if-ip"`
	Unnumbered            *Interface_Subinterface_Ipv4_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4) NewAddress(Ip string) (*Interface_Subinterface_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_Subinterface_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_Subinterface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv4) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddressMap returns the list (map) from Interface_Subinterface_Ipv4.
//
// It initializes the field if not already initialized.
func (t *Interface_Subinterface_Ipv4) GetOrCreateAddressMap() map[string]*Interface_Subinterface_Ipv4_Address {
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv4_Address)
	}
	return t.Address
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4) GetOrCreateAddress(Ip string) *Interface_Subinterface_Ipv4_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_Subinterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4) GetAddress(Ip string) *Interface_Subinterface_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv4) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_Subinterface_Ipv4_Address struct to the
// list Address of Interface_Subinterface_Ipv4. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Address already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4) AppendAddress(v *Interface_Subinterface_Ipv4_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4) NewNeighbor(Ip string) (*Interface_Subinterface_Ipv4_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_Subinterface_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_Subinterface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv4) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from Interface_Subinterface_Ipv4.
//
// It initializes the field if not already initialized.
func (t *Interface_Subinterface_Ipv4) GetOrCreateNeighborMap() map[string]*Interface_Subinterface_Ipv4_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv4_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4) GetOrCreateNeighbor(Ip string) *Interface_Subinterface_Ipv4_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_Subinterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4) GetNeighbor(Ip string) *Interface_Subinterface_Ipv4_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv4) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_Subinterface_Ipv4_Neighbor struct to the
// list Neighbor of Interface_Subinterface_Ipv4. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4) AppendNeighbor(v *Interface_Subinterface_Ipv4_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv4_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateCounters() *Interface_Subinterface_Ipv4_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Ipv4_Counters{}
	return t.Counters
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateProxyArp() *Interface_Subinterface_Ipv4_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &Interface_Subinterface_Ipv4_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateUnnumbered() *Interface_Subinterface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_Subinterface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetCounters() *Interface_Subinterface_Ipv4_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetProxyArp() *Interface_Subinterface_Ipv4_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetUnnumbered() *Interface_Subinterface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_Subinterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpClient is set, it can
// safely use t.GetDhcpClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpClient == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetGratuitousArpAccepted retrieves the value of the leaf GratuitousArpAccepted from the Interface_Subinterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousArpAccepted is set, it can
// safely use t.GetGratuitousArpAccepted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousArpAccepted == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetGratuitousArpAccepted() bool {
	if t == nil || t.GratuitousArpAccepted == nil {
		return false
	}
	return *t.GratuitousArpAccepted
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_Subinterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// SetDhcpClient sets the value of the leaf DhcpClient in the Interface_Subinterface_Ipv4
// struct.
func (t *Interface_Subinterface_Ipv4) SetDhcpClient(v bool) {
	t.DhcpClient = &v
}

// SetEnabled sets the value of the leaf Enabled in the Interface_Subinterface_Ipv4
// struct.
func (t *Interface_Subinterface_Ipv4) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetGratuitousArpAccepted sets the value of the leaf GratuitousArpAccepted in the Interface_Subinterface_Ipv4
// struct.
func (t *Interface_Subinterface_Ipv4) SetGratuitousArpAccepted(v bool) {
	t.GratuitousArpAccepted = &v
}

// SetMtu sets the value of the leaf Mtu in the Interface_Subinterface_Ipv4
// struct.
func (t *Interface_Subinterface_Ipv4) SetMtu(v uint16) {
	t.Mtu = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DhcpClient == nil {
		var v bool = false
		t.DhcpClient = &v
	}
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	t.Counters.PopulateDefaults()
	t.ProxyArp.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4.
func (*Interface_Subinterface_Ipv4) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_Address represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_Address struct {
	Ip           *string                                                  `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                   `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
	PrefixLength *uint8                                                   `path:"state/prefix-length" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/prefix-length" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Type         E_IfIp_Ipv4AddressType                                   `path:"state/type" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/type" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_Subinterface_Ipv4_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_Subinterface_Ipv4_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_Subinterface_Ipv4_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_Subinterface_Ipv4_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv4_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroupMap returns the list (map) from Interface_Subinterface_Ipv4_Address.
//
// It initializes the field if not already initialized.
func (t *Interface_Subinterface_Ipv4_Address) GetOrCreateVrrpGroupMap() map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup {
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup)
	}
	return t.VrrpGroup
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_Subinterface_Ipv4_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv4_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_Subinterface_Ipv4_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_Subinterface_Ipv4_Address. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4_Address) AppendVrrpGroup(v *Interface_Subinterface_Ipv4_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_Subinterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetType retrieves the value of the leaf Type from the Interface_Subinterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetType() E_IfIp_Ipv4AddressType {
	if t == nil || t.Type == 0 {
		return IfIp_Ipv4AddressType_PRIMARY
	}
	return t.Type
}

// SetIp sets the value of the leaf Ip in the Interface_Subinterface_Ipv4_Address
// struct.
func (t *Interface_Subinterface_Ipv4_Address) SetIp(v string) {
	t.Ip = &v
}

// SetOrigin sets the value of the leaf Origin in the Interface_Subinterface_Ipv4_Address
// struct.
func (t *Interface_Subinterface_Ipv4_Address) SetOrigin(v E_IfIp_IpAddressOrigin) {
	t.Origin = v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Interface_Subinterface_Ipv4_Address
// struct.
func (t *Interface_Subinterface_Ipv4_Address) SetPrefixLength(v uint8) {
	t.PrefixLength = &v
}

// SetType sets the value of the leaf Type in the Interface_Subinterface_Ipv4_Address
// struct.
func (t *Interface_Subinterface_Ipv4_Address) SetType(v E_IfIp_Ipv4AddressType) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = IfIp_Ipv4AddressType_PRIMARY
	}
	for _, e := range t.VrrpGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Address struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_Address.
func (*Interface_Subinterface_Ipv4_Address) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup struct {
	AcceptMode            *bool                                                            `path:"state/accept-mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/accept-mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	AdvertisementInterval *uint16                                                          `path:"state/advertisement-interval" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/advertisement-interval" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	CurrentPriority       *uint8                                                           `path:"state/current-priority" module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceTracking     *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                            `path:"state/preempt" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	PreemptDelay          *uint16                                                          `path:"state/preempt-delay" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt-delay" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Priority              *uint8                                                           `path:"state/priority" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualAddress        []string                                                         `path:"state/virtual-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/virtual-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualRouterId       *uint8                                                           `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/virtual-router-id|virtual-router-id" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_Subinterface_Ipv4_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetInterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptMode is set, it can
// safely use t.GetAcceptMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptMode == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisementInterval is set, it can
// safely use t.GetAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisementInterval == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentPriority is set, it can
// safely use t.GetCurrentPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentPriority == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreemptDelay is set, it can
// safely use t.GetPreemptDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreemptDelay == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualAddress is set, it can
// safely use t.GetVirtualAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualAddress == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// SetAcceptMode sets the value of the leaf AcceptMode in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetAcceptMode(v bool) {
	t.AcceptMode = &v
}

// SetAdvertisementInterval sets the value of the leaf AdvertisementInterval in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetAdvertisementInterval(v uint16) {
	t.AdvertisementInterval = &v
}

// SetCurrentPriority sets the value of the leaf CurrentPriority in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetCurrentPriority(v uint8) {
	t.CurrentPriority = &v
}

// SetPreempt sets the value of the leaf Preempt in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetPreempt(v bool) {
	t.Preempt = &v
}

// SetPreemptDelay sets the value of the leaf PreemptDelay in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetPreemptDelay(v uint16) {
	t.PreemptDelay = &v
}

// SetPriority sets the value of the leaf Priority in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetPriority(v uint8) {
	t.Priority = &v
}

// SetVirtualAddress sets the value of the leaf VirtualAddress in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetVirtualAddress(v []string) {
	t.VirtualAddress = v
}

// SetVirtualRouterId sets the value of the leaf VirtualRouterId in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) SetVirtualRouterId(v uint8) {
	t.VirtualRouterId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_Address_VrrpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptMode == nil {
		var v bool = false
		t.AcceptMode = &v
	}
	if t.AdvertisementInterval == nil {
		var v uint16 = 100
		t.AdvertisementInterval = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.PreemptDelay == nil {
		var v uint16 = 0
		t.PreemptDelay = &v
	}
	if t.Priority == nil {
		var v uint8 = 100
		t.Priority = &v
	}
	t.InterfaceTracking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_Address_VrrpGroup.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority-decrement" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/track-interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDecrement is set, it can
// safely use t.GetPriorityDecrement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDecrement == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackInterface is set, it can
// safely use t.GetTrackInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackInterface == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// SetPriorityDecrement sets the value of the leaf PriorityDecrement in the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) SetPriorityDecrement(v uint8) {
	t.PriorityDecrement = &v
}

// SetTrackInterface sets the value of the leaf TrackInterface in the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) SetTrackInterface(v []string) {
	t.TrackInterface = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PriorityDecrement == nil {
		var v uint8 = 0
		t.PriorityDecrement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InMulticastOctets  *uint64 `path:"in-multicast-octets" module:"openconfig-if-ip"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutMulticastOctets *uint64 `path:"out-multicast-octets" module:"openconfig-if-ip"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDiscardedPkts is set, it can
// safely use t.GetInDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InErrorPkts is set, it can
// safely use t.GetInErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedOctets is set, it can
// safely use t.GetInForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedPkts is set, it can
// safely use t.GetInForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInMulticastOctets retrieves the value of the leaf InMulticastOctets from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastOctets is set, it can
// safely use t.GetInMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInMulticastOctets() uint64 {
	if t == nil || t.InMulticastOctets == nil {
		return 0
	}
	return *t.InMulticastOctets
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastPkts is set, it can
// safely use t.GetInMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDiscardedPkts is set, it can
// safely use t.GetOutDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutErrorPkts is set, it can
// safely use t.GetOutErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedOctets is set, it can
// safely use t.GetOutForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedPkts is set, it can
// safely use t.GetOutForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutMulticastOctets retrieves the value of the leaf OutMulticastOctets from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastOctets is set, it can
// safely use t.GetOutMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutMulticastOctets() uint64 {
	if t == nil || t.OutMulticastOctets == nil {
		return 0
	}
	return *t.OutMulticastOctets
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastPkts is set, it can
// safely use t.GetOutMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Ipv4_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// SetInDiscardedPkts sets the value of the leaf InDiscardedPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInDiscardedPkts(v uint64) {
	t.InDiscardedPkts = &v
}

// SetInErrorPkts sets the value of the leaf InErrorPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInErrorPkts(v uint64) {
	t.InErrorPkts = &v
}

// SetInForwardedOctets sets the value of the leaf InForwardedOctets in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInForwardedOctets(v uint64) {
	t.InForwardedOctets = &v
}

// SetInForwardedPkts sets the value of the leaf InForwardedPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInForwardedPkts(v uint64) {
	t.InForwardedPkts = &v
}

// SetInMulticastOctets sets the value of the leaf InMulticastOctets in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInMulticastOctets(v uint64) {
	t.InMulticastOctets = &v
}

// SetInMulticastPkts sets the value of the leaf InMulticastPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInMulticastPkts(v uint64) {
	t.InMulticastPkts = &v
}

// SetInOctets sets the value of the leaf InOctets in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetOutDiscardedPkts sets the value of the leaf OutDiscardedPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutDiscardedPkts(v uint64) {
	t.OutDiscardedPkts = &v
}

// SetOutErrorPkts sets the value of the leaf OutErrorPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutErrorPkts(v uint64) {
	t.OutErrorPkts = &v
}

// SetOutForwardedOctets sets the value of the leaf OutForwardedOctets in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutForwardedOctets(v uint64) {
	t.OutForwardedOctets = &v
}

// SetOutForwardedPkts sets the value of the leaf OutForwardedPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutForwardedPkts(v uint64) {
	t.OutForwardedPkts = &v
}

// SetOutMulticastOctets sets the value of the leaf OutMulticastOctets in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutMulticastOctets(v uint64) {
	t.OutMulticastOctets = &v
}

// SetOutMulticastPkts sets the value of the leaf OutMulticastPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutMulticastPkts(v uint64) {
	t.OutMulticastPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Interface_Subinterface_Ipv4_Counters
// struct.
func (t *Interface_Subinterface_Ipv4_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_Counters.
func (*Interface_Subinterface_Ipv4_Counters) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_Neighbor represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor struct {
	Ip               *string               `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	LinkLayerAddress *string               `path:"state/link-layer-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/link-layer-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv4_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Subinterface_Ipv4_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv4_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// SetIp sets the value of the leaf Ip in the Interface_Subinterface_Ipv4_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv4_Neighbor) SetIp(v string) {
	t.Ip = &v
}

// SetLinkLayerAddress sets the value of the leaf LinkLayerAddress in the Interface_Subinterface_Ipv4_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv4_Neighbor) SetLinkLayerAddress(v string) {
	t.LinkLayerAddress = &v
}

// SetOrigin sets the value of the leaf Origin in the Interface_Subinterface_Ipv4_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv4_Neighbor) SetOrigin(v E_IfIp_NeighborOrigin) {
	t.Origin = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_Neighbor.
func (*Interface_Subinterface_Ipv4_Neighbor) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_ProxyArp represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp struct {
	Mode E_ProxyArp_Mode `path:"state/mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_ProxyArp) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the Interface_Subinterface_Ipv4_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_ProxyArp) GetMode() E_ProxyArp_Mode {
	if t == nil || t.Mode == 0 {
		return ProxyArp_Mode_DISABLE
	}
	return t.Mode
}

// SetMode sets the value of the leaf Mode in the Interface_Subinterface_Ipv4_ProxyArp
// struct.
func (t *Interface_Subinterface_Ipv4_ProxyArp) SetMode(v E_ProxyArp_Mode) {
	t.Mode = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_ProxyArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_ProxyArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = ProxyArp_Mode_DISABLE
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_ProxyArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_ProxyArp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_ProxyArp.
func (*Interface_Subinterface_Ipv4_ProxyArp) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_Unnumbered represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered struct {
	Enabled      *bool                                                `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceRef *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetOrCreateInterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_Subinterface_Ipv4_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetInterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetEnabled sets the value of the leaf Enabled in the Interface_Subinterface_Ipv4_Unnumbered
// struct.
func (t *Interface_Subinterface_Ipv4_Unnumbered) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	t.InterfaceRef.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_Unnumbered.
func (*Interface_Subinterface_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/subinterface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef.
func (*Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6 represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6 struct {
	Address                map[string]*Interface_Subinterface_Ipv6_Address  `path:"addresses/address" module:"openconfig-if-ip/openconfig-if-ip"`
	Autoconf               *Interface_Subinterface_Ipv6_Autoconf            `path:"autoconf" module:"openconfig-if-ip-ext"`
	Counters               *Interface_Subinterface_Ipv6_Counters            `path:"state/counters" module:"openconfig-if-ip/openconfig-if-ip"`
	DhcpClient             *bool                                            `path:"state/dhcp-client" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/dhcp-client" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	DupAddrDetectTransmits *uint32                                          `path:"state/dup-addr-detect-transmits" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/dup-addr-detect-transmits" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Enabled                *bool                                            `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	LearnUnsolicited       E_Ipv6_LearnUnsolicited                          `path:"state/learn-unsolicited" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/learn-unsolicited" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Mtu                    *uint32                                          `path:"state/mtu" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mtu" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Neighbor               map[string]*Interface_Subinterface_Ipv6_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip/openconfig-if-ip"`
	RouterAdvertisement    *Interface_Subinterface_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"openconfig-if-ip"`
	Unnumbered             *Interface_Subinterface_Ipv6_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6) NewAddress(Ip string) (*Interface_Subinterface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_Subinterface_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_Subinterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddressMap returns the list (map) from Interface_Subinterface_Ipv6.
//
// It initializes the field if not already initialized.
func (t *Interface_Subinterface_Ipv6) GetOrCreateAddressMap() map[string]*Interface_Subinterface_Ipv6_Address {
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv6_Address)
	}
	return t.Address
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6) GetOrCreateAddress(Ip string) *Interface_Subinterface_Ipv6_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_Subinterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6) GetAddress(Ip string) *Interface_Subinterface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv6) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_Subinterface_Ipv6_Address struct to the
// list Address of Interface_Subinterface_Ipv6. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6) AppendAddress(v *Interface_Subinterface_Ipv6_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6) NewNeighbor(Ip string) (*Interface_Subinterface_Ipv6_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_Subinterface_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_Subinterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv6) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from Interface_Subinterface_Ipv6.
//
// It initializes the field if not already initialized.
func (t *Interface_Subinterface_Ipv6) GetOrCreateNeighborMap() map[string]*Interface_Subinterface_Ipv6_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv6_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6) GetOrCreateNeighbor(Ip string) *Interface_Subinterface_Ipv6_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_Subinterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6) GetNeighbor(Ip string) *Interface_Subinterface_Ipv6_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv6) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_Subinterface_Ipv6_Neighbor struct to the
// list Neighbor of Interface_Subinterface_Ipv6. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6) AppendNeighbor(v *Interface_Subinterface_Ipv6_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv6_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAutoconf retrieves the value of the Autoconf field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateAutoconf() *Interface_Subinterface_Ipv6_Autoconf {
	if t.Autoconf != nil {
		return t.Autoconf
	}
	t.Autoconf = &Interface_Subinterface_Ipv6_Autoconf{}
	return t.Autoconf
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateCounters() *Interface_Subinterface_Ipv6_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Ipv6_Counters{}
	return t.Counters
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateRouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &Interface_Subinterface_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateUnnumbered() *Interface_Subinterface_Ipv6_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_Subinterface_Ipv6_Unnumbered{}
	return t.Unnumbered
}

// GetAutoconf returns the value of the Autoconf struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Autoconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetAutoconf() *Interface_Subinterface_Ipv6_Autoconf {
	if t != nil && t.Autoconf != nil {
		return t.Autoconf
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetCounters() *Interface_Subinterface_Ipv6_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetRouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetUnnumbered() *Interface_Subinterface_Ipv6_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_Subinterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpClient is set, it can
// safely use t.GetDhcpClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpClient == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetDupAddrDetectTransmits retrieves the value of the leaf DupAddrDetectTransmits from the Interface_Subinterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DupAddrDetectTransmits is set, it can
// safely use t.GetDupAddrDetectTransmits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DupAddrDetectTransmits == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetDupAddrDetectTransmits() uint32 {
	if t == nil || t.DupAddrDetectTransmits == nil {
		return 1
	}
	return *t.DupAddrDetectTransmits
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the Interface_Subinterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetLearnUnsolicited() E_Ipv6_LearnUnsolicited {
	if t == nil || t.LearnUnsolicited == 0 {
		return Ipv6_LearnUnsolicited_NONE
	}
	return t.LearnUnsolicited
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_Subinterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// SetDhcpClient sets the value of the leaf DhcpClient in the Interface_Subinterface_Ipv6
// struct.
func (t *Interface_Subinterface_Ipv6) SetDhcpClient(v bool) {
	t.DhcpClient = &v
}

// SetDupAddrDetectTransmits sets the value of the leaf DupAddrDetectTransmits in the Interface_Subinterface_Ipv6
// struct.
func (t *Interface_Subinterface_Ipv6) SetDupAddrDetectTransmits(v uint32) {
	t.DupAddrDetectTransmits = &v
}

// SetEnabled sets the value of the leaf Enabled in the Interface_Subinterface_Ipv6
// struct.
func (t *Interface_Subinterface_Ipv6) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetLearnUnsolicited sets the value of the leaf LearnUnsolicited in the Interface_Subinterface_Ipv6
// struct.
func (t *Interface_Subinterface_Ipv6) SetLearnUnsolicited(v E_Ipv6_LearnUnsolicited) {
	t.LearnUnsolicited = v
}

// SetMtu sets the value of the leaf Mtu in the Interface_Subinterface_Ipv6
// struct.
func (t *Interface_Subinterface_Ipv6) SetMtu(v uint32) {
	t.Mtu = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DhcpClient == nil {
		var v bool = false
		t.DhcpClient = &v
	}
	if t.DupAddrDetectTransmits == nil {
		var v uint32 = 1
		t.DupAddrDetectTransmits = &v
	}
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	if t.LearnUnsolicited == 0 {
		t.LearnUnsolicited = Ipv6_LearnUnsolicited_NONE
	}
	t.Autoconf.PopulateDefaults()
	t.Counters.PopulateDefaults()
	t.RouterAdvertisement.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6.
func (*Interface_Subinterface_Ipv6) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_Address represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_Address struct {
	Ip           *string                                                  `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                   `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
	PrefixLength *uint8                                                   `path:"state/prefix-length" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/prefix-length" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Status       E_Address_Status                                         `path:"state/status" module:"openconfig-if-ip/openconfig-if-ip"`
	Type         E_InetTypes_Ipv6AddressType                              `path:"state/type" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/type" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_Subinterface_Ipv6_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_Subinterface_Ipv6_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_Subinterface_Ipv6_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_Subinterface_Ipv6_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv6_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroupMap returns the list (map) from Interface_Subinterface_Ipv6_Address.
//
// It initializes the field if not already initialized.
func (t *Interface_Subinterface_Ipv6_Address) GetOrCreateVrrpGroupMap() map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup {
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup)
	}
	return t.VrrpGroup
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_Subinterface_Ipv6_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv6_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_Subinterface_Ipv6_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_Subinterface_Ipv6_Address. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6_Address) AppendVrrpGroup(v *Interface_Subinterface_Ipv6_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_Subinterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetStatus retrieves the value of the leaf Status from the Interface_Subinterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Status is set, it can
// safely use t.GetStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Status == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetStatus() E_Address_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// GetType retrieves the value of the leaf Type from the Interface_Subinterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetType() E_InetTypes_Ipv6AddressType {
	if t == nil || t.Type == 0 {
		return InetTypes_Ipv6AddressType_GLOBAL_UNICAST
	}
	return t.Type
}

// SetIp sets the value of the leaf Ip in the Interface_Subinterface_Ipv6_Address
// struct.
func (t *Interface_Subinterface_Ipv6_Address) SetIp(v string) {
	t.Ip = &v
}

// SetOrigin sets the value of the leaf Origin in the Interface_Subinterface_Ipv6_Address
// struct.
func (t *Interface_Subinterface_Ipv6_Address) SetOrigin(v E_IfIp_IpAddressOrigin) {
	t.Origin = v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the Interface_Subinterface_Ipv6_Address
// struct.
func (t *Interface_Subinterface_Ipv6_Address) SetPrefixLength(v uint8) {
	t.PrefixLength = &v
}

// SetStatus sets the value of the leaf Status in the Interface_Subinterface_Ipv6_Address
// struct.
func (t *Interface_Subinterface_Ipv6_Address) SetStatus(v E_Address_Status) {
	t.Status = v
}

// SetType sets the value of the leaf Type in the Interface_Subinterface_Ipv6_Address
// struct.
func (t *Interface_Subinterface_Ipv6_Address) SetType(v E_InetTypes_Ipv6AddressType) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = InetTypes_Ipv6AddressType_GLOBAL_UNICAST
	}
	for _, e := range t.VrrpGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Address struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Address.
func (*Interface_Subinterface_Ipv6_Address) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup struct {
	AcceptMode            *bool                                                            `path:"state/accept-mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/accept-mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	AdvertisementInterval *uint16                                                          `path:"state/advertisement-interval" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/advertisement-interval" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	CurrentPriority       *uint8                                                           `path:"state/current-priority" module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceTracking     *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                            `path:"state/preempt" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	PreemptDelay          *uint16                                                          `path:"state/preempt-delay" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preempt-delay" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Priority              *uint8                                                           `path:"state/priority" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualAddress        []string                                                         `path:"state/virtual-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/virtual-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualLinkLocal      *string                                                          `path:"state/virtual-link-local" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/virtual-link-local" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	VirtualRouterId       *uint8                                                           `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/virtual-router-id|virtual-router-id" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_Subinterface_Ipv6_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetInterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptMode is set, it can
// safely use t.GetAcceptMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptMode == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisementInterval is set, it can
// safely use t.GetAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisementInterval == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentPriority is set, it can
// safely use t.GetCurrentPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentPriority == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreemptDelay is set, it can
// safely use t.GetPreemptDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreemptDelay == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualAddress is set, it can
// safely use t.GetVirtualAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualAddress == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualLinkLocal retrieves the value of the leaf VirtualLinkLocal from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualLinkLocal is set, it can
// safely use t.GetVirtualLinkLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualLinkLocal == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualLinkLocal() string {
	if t == nil || t.VirtualLinkLocal == nil {
		return ""
	}
	return *t.VirtualLinkLocal
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// SetAcceptMode sets the value of the leaf AcceptMode in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetAcceptMode(v bool) {
	t.AcceptMode = &v
}

// SetAdvertisementInterval sets the value of the leaf AdvertisementInterval in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetAdvertisementInterval(v uint16) {
	t.AdvertisementInterval = &v
}

// SetCurrentPriority sets the value of the leaf CurrentPriority in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetCurrentPriority(v uint8) {
	t.CurrentPriority = &v
}

// SetPreempt sets the value of the leaf Preempt in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetPreempt(v bool) {
	t.Preempt = &v
}

// SetPreemptDelay sets the value of the leaf PreemptDelay in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetPreemptDelay(v uint16) {
	t.PreemptDelay = &v
}

// SetPriority sets the value of the leaf Priority in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetPriority(v uint8) {
	t.Priority = &v
}

// SetVirtualAddress sets the value of the leaf VirtualAddress in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetVirtualAddress(v []string) {
	t.VirtualAddress = v
}

// SetVirtualLinkLocal sets the value of the leaf VirtualLinkLocal in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetVirtualLinkLocal(v string) {
	t.VirtualLinkLocal = &v
}

// SetVirtualRouterId sets the value of the leaf VirtualRouterId in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) SetVirtualRouterId(v uint8) {
	t.VirtualRouterId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Address_VrrpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptMode == nil {
		var v bool = false
		t.AcceptMode = &v
	}
	if t.AdvertisementInterval == nil {
		var v uint16 = 100
		t.AdvertisementInterval = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.PreemptDelay == nil {
		var v uint16 = 0
		t.PreemptDelay = &v
	}
	if t.Priority == nil {
		var v uint8 = 100
		t.Priority = &v
	}
	t.InterfaceTracking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Address_VrrpGroup.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/priority-decrement" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/track-interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDecrement is set, it can
// safely use t.GetPriorityDecrement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDecrement == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackInterface is set, it can
// safely use t.GetTrackInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackInterface == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// SetPriorityDecrement sets the value of the leaf PriorityDecrement in the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) SetPriorityDecrement(v uint8) {
	t.PriorityDecrement = &v
}

// SetTrackInterface sets the value of the leaf TrackInterface in the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) SetTrackInterface(v []string) {
	t.TrackInterface = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PriorityDecrement == nil {
		var v uint8 = 0
		t.PriorityDecrement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_Autoconf represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf struct {
	CreateGlobalAddresses      *bool   `path:"state/create-global-addresses" module:"openconfig-if-ip-ext/openconfig-if-ip-ext" shadow-path:"config/create-global-addresses" shadow-module:"openconfig-if-ip-ext/openconfig-if-ip-ext"`
	CreateTemporaryAddresses   *bool   `path:"state/create-temporary-addresses" module:"openconfig-if-ip-ext/openconfig-if-ip-ext" shadow-path:"config/create-temporary-addresses" shadow-module:"openconfig-if-ip-ext/openconfig-if-ip-ext"`
	TemporaryPreferredLifetime *uint32 `path:"state/temporary-preferred-lifetime" module:"openconfig-if-ip-ext/openconfig-if-ip-ext" shadow-path:"config/temporary-preferred-lifetime" shadow-module:"openconfig-if-ip-ext/openconfig-if-ip-ext"`
	TemporaryValidLifetime     *uint32 `path:"state/temporary-valid-lifetime" module:"openconfig-if-ip-ext/openconfig-if-ip-ext" shadow-path:"config/temporary-valid-lifetime" shadow-module:"openconfig-if-ip-ext/openconfig-if-ip-ext"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Autoconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Autoconf) IsYANGGoStruct() {}

// GetCreateGlobalAddresses retrieves the value of the leaf CreateGlobalAddresses from the Interface_Subinterface_Ipv6_Autoconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateGlobalAddresses is set, it can
// safely use t.GetCreateGlobalAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateGlobalAddresses == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetCreateGlobalAddresses() bool {
	if t == nil || t.CreateGlobalAddresses == nil {
		return true
	}
	return *t.CreateGlobalAddresses
}

// GetCreateTemporaryAddresses retrieves the value of the leaf CreateTemporaryAddresses from the Interface_Subinterface_Ipv6_Autoconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateTemporaryAddresses is set, it can
// safely use t.GetCreateTemporaryAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateTemporaryAddresses == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetCreateTemporaryAddresses() bool {
	if t == nil || t.CreateTemporaryAddresses == nil {
		return false
	}
	return *t.CreateTemporaryAddresses
}

// GetTemporaryPreferredLifetime retrieves the value of the leaf TemporaryPreferredLifetime from the Interface_Subinterface_Ipv6_Autoconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemporaryPreferredLifetime is set, it can
// safely use t.GetTemporaryPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemporaryPreferredLifetime == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetTemporaryPreferredLifetime() uint32 {
	if t == nil || t.TemporaryPreferredLifetime == nil {
		return 86400
	}
	return *t.TemporaryPreferredLifetime
}

// GetTemporaryValidLifetime retrieves the value of the leaf TemporaryValidLifetime from the Interface_Subinterface_Ipv6_Autoconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemporaryValidLifetime is set, it can
// safely use t.GetTemporaryValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemporaryValidLifetime == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetTemporaryValidLifetime() uint32 {
	if t == nil || t.TemporaryValidLifetime == nil {
		return 604800
	}
	return *t.TemporaryValidLifetime
}

// SetCreateGlobalAddresses sets the value of the leaf CreateGlobalAddresses in the Interface_Subinterface_Ipv6_Autoconf
// struct.
func (t *Interface_Subinterface_Ipv6_Autoconf) SetCreateGlobalAddresses(v bool) {
	t.CreateGlobalAddresses = &v
}

// SetCreateTemporaryAddresses sets the value of the leaf CreateTemporaryAddresses in the Interface_Subinterface_Ipv6_Autoconf
// struct.
func (t *Interface_Subinterface_Ipv6_Autoconf) SetCreateTemporaryAddresses(v bool) {
	t.CreateTemporaryAddresses = &v
}

// SetTemporaryPreferredLifetime sets the value of the leaf TemporaryPreferredLifetime in the Interface_Subinterface_Ipv6_Autoconf
// struct.
func (t *Interface_Subinterface_Ipv6_Autoconf) SetTemporaryPreferredLifetime(v uint32) {
	t.TemporaryPreferredLifetime = &v
}

// SetTemporaryValidLifetime sets the value of the leaf TemporaryValidLifetime in the Interface_Subinterface_Ipv6_Autoconf
// struct.
func (t *Interface_Subinterface_Ipv6_Autoconf) SetTemporaryValidLifetime(v uint32) {
	t.TemporaryValidLifetime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Autoconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Autoconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CreateGlobalAddresses == nil {
		var v bool = true
		t.CreateGlobalAddresses = &v
	}
	if t.CreateTemporaryAddresses == nil {
		var v bool = false
		t.CreateTemporaryAddresses = &v
	}
	if t.TemporaryPreferredLifetime == nil {
		var v uint32 = 86400
		t.TemporaryPreferredLifetime = &v
	}
	if t.TemporaryValidLifetime == nil {
		var v uint32 = 604800
		t.TemporaryValidLifetime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Autoconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Autoconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Autoconf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Autoconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Autoconf.
func (*Interface_Subinterface_Ipv6_Autoconf) ΛBelongingModule() string {
	return "openconfig-if-ip-ext"
}

// Interface_Subinterface_Ipv6_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InMulticastOctets  *uint64 `path:"in-multicast-octets" module:"openconfig-if-ip"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutMulticastOctets *uint64 `path:"out-multicast-octets" module:"openconfig-if-ip"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDiscardedPkts is set, it can
// safely use t.GetInDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InErrorPkts is set, it can
// safely use t.GetInErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedOctets is set, it can
// safely use t.GetInForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InForwardedPkts is set, it can
// safely use t.GetInForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInMulticastOctets retrieves the value of the leaf InMulticastOctets from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastOctets is set, it can
// safely use t.GetInMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInMulticastOctets() uint64 {
	if t == nil || t.InMulticastOctets == nil {
		return 0
	}
	return *t.InMulticastOctets
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastPkts is set, it can
// safely use t.GetInMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDiscardedPkts is set, it can
// safely use t.GetOutDiscardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDiscardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutErrorPkts is set, it can
// safely use t.GetOutErrorPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutErrorPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedOctets is set, it can
// safely use t.GetOutForwardedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutForwardedPkts is set, it can
// safely use t.GetOutForwardedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutForwardedPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutMulticastOctets retrieves the value of the leaf OutMulticastOctets from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastOctets is set, it can
// safely use t.GetOutMulticastOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutMulticastOctets() uint64 {
	if t == nil || t.OutMulticastOctets == nil {
		return 0
	}
	return *t.OutMulticastOctets
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastPkts is set, it can
// safely use t.GetOutMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Ipv6_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// SetInDiscardedPkts sets the value of the leaf InDiscardedPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInDiscardedPkts(v uint64) {
	t.InDiscardedPkts = &v
}

// SetInErrorPkts sets the value of the leaf InErrorPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInErrorPkts(v uint64) {
	t.InErrorPkts = &v
}

// SetInForwardedOctets sets the value of the leaf InForwardedOctets in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInForwardedOctets(v uint64) {
	t.InForwardedOctets = &v
}

// SetInForwardedPkts sets the value of the leaf InForwardedPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInForwardedPkts(v uint64) {
	t.InForwardedPkts = &v
}

// SetInMulticastOctets sets the value of the leaf InMulticastOctets in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInMulticastOctets(v uint64) {
	t.InMulticastOctets = &v
}

// SetInMulticastPkts sets the value of the leaf InMulticastPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInMulticastPkts(v uint64) {
	t.InMulticastPkts = &v
}

// SetInOctets sets the value of the leaf InOctets in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetInPkts sets the value of the leaf InPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetInPkts(v uint64) {
	t.InPkts = &v
}

// SetOutDiscardedPkts sets the value of the leaf OutDiscardedPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutDiscardedPkts(v uint64) {
	t.OutDiscardedPkts = &v
}

// SetOutErrorPkts sets the value of the leaf OutErrorPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutErrorPkts(v uint64) {
	t.OutErrorPkts = &v
}

// SetOutForwardedOctets sets the value of the leaf OutForwardedOctets in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutForwardedOctets(v uint64) {
	t.OutForwardedOctets = &v
}

// SetOutForwardedPkts sets the value of the leaf OutForwardedPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutForwardedPkts(v uint64) {
	t.OutForwardedPkts = &v
}

// SetOutMulticastOctets sets the value of the leaf OutMulticastOctets in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutMulticastOctets(v uint64) {
	t.OutMulticastOctets = &v
}

// SetOutMulticastPkts sets the value of the leaf OutMulticastPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutMulticastPkts(v uint64) {
	t.OutMulticastPkts = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// SetOutPkts sets the value of the leaf OutPkts in the Interface_Subinterface_Ipv6_Counters
// struct.
func (t *Interface_Subinterface_Ipv6_Counters) SetOutPkts(v uint64) {
	t.OutPkts = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Counters.
func (*Interface_Subinterface_Ipv6_Counters) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_Neighbor represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor struct {
	Ip               *string                  `path:"state/ip|ip" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/ip|ip" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	IsRouter         *bool                    `path:"state/is-router" module:"openconfig-if-ip/openconfig-if-ip"`
	LinkLayerAddress *string                  `path:"state/link-layer-address" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/link-layer-address" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	NeighborState    E_Neighbor_NeighborState `path:"state/neighbor-state" module:"openconfig-if-ip/openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin    `path:"state/origin" module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIsRouter retrieves the value of the leaf IsRouter from the Interface_Subinterface_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsRouter is set, it can
// safely use t.GetIsRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsRouter == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetIsRouter() bool {
	if t == nil || t.IsRouter == nil {
		return false
	}
	return *t.IsRouter
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Subinterface_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetNeighborState retrieves the value of the leaf NeighborState from the Interface_Subinterface_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborState is set, it can
// safely use t.GetNeighborState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborState == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetNeighborState() E_Neighbor_NeighborState {
	if t == nil || t.NeighborState == 0 {
		return 0
	}
	return t.NeighborState
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv6_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// SetIp sets the value of the leaf Ip in the Interface_Subinterface_Ipv6_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv6_Neighbor) SetIp(v string) {
	t.Ip = &v
}

// SetIsRouter sets the value of the leaf IsRouter in the Interface_Subinterface_Ipv6_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv6_Neighbor) SetIsRouter(v bool) {
	t.IsRouter = &v
}

// SetLinkLayerAddress sets the value of the leaf LinkLayerAddress in the Interface_Subinterface_Ipv6_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv6_Neighbor) SetLinkLayerAddress(v string) {
	t.LinkLayerAddress = &v
}

// SetNeighborState sets the value of the leaf NeighborState in the Interface_Subinterface_Ipv6_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv6_Neighbor) SetNeighborState(v E_Neighbor_NeighborState) {
	t.NeighborState = v
}

// SetOrigin sets the value of the leaf Origin in the Interface_Subinterface_Ipv6_Neighbor
// struct.
func (t *Interface_Subinterface_Ipv6_Neighbor) SetOrigin(v E_IfIp_NeighborOrigin) {
	t.Origin = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Neighbor.
func (*Interface_Subinterface_Ipv6_Neighbor) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_RouterAdvertisement represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement struct {
	Enable      *bool                                                              `path:"state/enable" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enable" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Interval    *uint32                                                            `path:"state/interval" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/interval" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Lifetime    *uint32                                                            `path:"state/lifetime" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/lifetime" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Managed     *bool                                                              `path:"state/managed" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/managed" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Mode        E_RouterAdvertisement_Mode                                         `path:"state/mode" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/mode" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	OtherConfig *bool                                                              `path:"state/other-config" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/other-config" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Prefix      map[string]*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix `path:"prefixes/prefix" module:"openconfig-if-ip/openconfig-if-ip"`
	Suppress    *bool                                                              `path:"state/suppress" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/suppress" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// Interface_Subinterface_Ipv6_RouterAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) NewPrefix(Prefix string) (*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the Interface_Subinterface_Ipv6_RouterAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from Interface_Subinterface_Ipv6_RouterAdvertisement.
//
// It initializes the field if not already initialized.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetOrCreatePrefixMap() map[string]*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[string]*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6_RouterAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetOrCreatePrefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of Interface_Subinterface_Ipv6_RouterAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetPrefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6_RouterAdvertisement. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix struct to the
// list Prefix of Interface_Subinterface_Ipv6_RouterAdvertisement. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) AppendPrefix(v *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetInterval retrieves the value of the leaf Interval from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLifetime retrieves the value of the leaf Lifetime from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetManaged retrieves the value of the leaf Managed from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Managed is set, it can
// safely use t.GetManaged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Managed == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetManaged() bool {
	if t == nil || t.Managed == nil {
		return false
	}
	return *t.Managed
}

// GetMode retrieves the value of the leaf Mode from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetMode() E_RouterAdvertisement_Mode {
	if t == nil || t.Mode == 0 {
		return RouterAdvertisement_Mode_ALL
	}
	return t.Mode
}

// GetOtherConfig retrieves the value of the leaf OtherConfig from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherConfig is set, it can
// safely use t.GetOtherConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherConfig == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetOtherConfig() bool {
	if t == nil || t.OtherConfig == nil {
		return false
	}
	return *t.OtherConfig
}

// GetSuppress retrieves the value of the leaf Suppress from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suppress is set, it can
// safely use t.GetSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suppress == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// SetEnable sets the value of the leaf Enable in the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) SetEnable(v bool) {
	t.Enable = &v
}

// SetInterval sets the value of the leaf Interval in the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) SetInterval(v uint32) {
	t.Interval = &v
}

// SetLifetime sets the value of the leaf Lifetime in the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) SetLifetime(v uint32) {
	t.Lifetime = &v
}

// SetManaged sets the value of the leaf Managed in the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) SetManaged(v bool) {
	t.Managed = &v
}

// SetMode sets the value of the leaf Mode in the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) SetMode(v E_RouterAdvertisement_Mode) {
	t.Mode = v
}

// SetOtherConfig sets the value of the leaf OtherConfig in the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) SetOtherConfig(v bool) {
	t.OtherConfig = &v
}

// SetSuppress sets the value of the leaf Suppress in the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) SetSuppress(v bool) {
	t.Suppress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_RouterAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = true
		t.Enable = &v
	}
	if t.Managed == nil {
		var v bool = false
		t.Managed = &v
	}
	if t.Mode == 0 {
		t.Mode = RouterAdvertisement_Mode_ALL
	}
	if t.OtherConfig == nil {
		var v bool = false
		t.OtherConfig = &v
	}
	if t.Suppress == nil {
		var v bool = false
		t.Suppress = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_RouterAdvertisement.
func (*Interface_Subinterface_Ipv6_RouterAdvertisement) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix struct {
	DisableAdvertisement     *bool   `path:"state/disable-advertisement" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/disable-advertisement" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	DisableAutoconfiguration *bool   `path:"state/disable-autoconfiguration" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/disable-autoconfiguration" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	EnableOnlink             *bool   `path:"state/enable-onlink" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enable-onlink" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	PreferredLifetime        *uint32 `path:"state/preferred-lifetime" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/preferred-lifetime" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Prefix                   *string `path:"state/prefix|prefix" module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip" shadow-path:"config/prefix|prefix" shadow-module:"openconfig-if-ip/openconfig-if-ip|openconfig-if-ip"`
	ValidLifetime            *uint32 `path:"state/valid-lifetime" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/valid-lifetime" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) IsYANGGoStruct() {}

// GetDisableAdvertisement retrieves the value of the leaf DisableAdvertisement from the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisableAdvertisement is set, it can
// safely use t.GetDisableAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisableAdvertisement == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) GetDisableAdvertisement() bool {
	if t == nil || t.DisableAdvertisement == nil {
		return false
	}
	return *t.DisableAdvertisement
}

// GetDisableAutoconfiguration retrieves the value of the leaf DisableAutoconfiguration from the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisableAutoconfiguration is set, it can
// safely use t.GetDisableAutoconfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisableAutoconfiguration == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) GetDisableAutoconfiguration() bool {
	if t == nil || t.DisableAutoconfiguration == nil {
		return false
	}
	return *t.DisableAutoconfiguration
}

// GetEnableOnlink retrieves the value of the leaf EnableOnlink from the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableOnlink is set, it can
// safely use t.GetEnableOnlink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableOnlink == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) GetEnableOnlink() bool {
	if t == nil || t.EnableOnlink == nil {
		return false
	}
	return *t.EnableOnlink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 0
	}
	return *t.PreferredLifetime
}

// GetPrefix retrieves the value of the leaf Prefix from the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 0
	}
	return *t.ValidLifetime
}

// SetDisableAdvertisement sets the value of the leaf DisableAdvertisement in the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) SetDisableAdvertisement(v bool) {
	t.DisableAdvertisement = &v
}

// SetDisableAutoconfiguration sets the value of the leaf DisableAutoconfiguration in the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) SetDisableAutoconfiguration(v bool) {
	t.DisableAutoconfiguration = &v
}

// SetEnableOnlink sets the value of the leaf EnableOnlink in the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) SetEnableOnlink(v bool) {
	t.EnableOnlink = &v
}

// SetPreferredLifetime sets the value of the leaf PreferredLifetime in the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) SetPreferredLifetime(v uint32) {
	t.PreferredLifetime = &v
}

// SetPrefix sets the value of the leaf Prefix in the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetValidLifetime sets the value of the leaf ValidLifetime in the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// struct.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) SetValidLifetime(v uint32) {
	t.ValidLifetime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix.
func (*Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_Unnumbered represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered struct {
	Enabled      *bool                                                `path:"state/enabled" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/enabled" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	InterfaceRef *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetOrCreateInterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_Subinterface_Ipv6_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetInterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv6_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetEnabled sets the value of the leaf Enabled in the Interface_Subinterface_Ipv6_Unnumbered
// struct.
func (t *Interface_Subinterface_Ipv6_Unnumbered) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	t.InterfaceRef.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Unnumbered.
func (*Interface_Subinterface_Ipv6_Unnumbered) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/interface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip/openconfig-if-ip" shadow-path:"config/subinterface" shadow-module:"openconfig-if-ip/openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef.
func (*Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-if-ip"
}

// Interface_Subinterface_Vlan represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_Vlan struct {
	EgressMapping  *Interface_Subinterface_Vlan_EgressMapping  `path:"egress-mapping" module:"openconfig-vlan"`
	IngressMapping *Interface_Subinterface_Vlan_IngressMapping `path:"ingress-mapping" module:"openconfig-vlan"`
	Match          *Interface_Subinterface_Vlan_Match          `path:"match" module:"openconfig-vlan"`
	VlanId         Interface_Subinterface_Vlan_VlanId_Union    `path:"state/vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan) IsYANGGoStruct() {}

// GetOrCreateEgressMapping retrieves the value of the EgressMapping field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateEgressMapping() *Interface_Subinterface_Vlan_EgressMapping {
	if t.EgressMapping != nil {
		return t.EgressMapping
	}
	t.EgressMapping = &Interface_Subinterface_Vlan_EgressMapping{}
	return t.EgressMapping
}

// GetOrCreateIngressMapping retrieves the value of the IngressMapping field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateIngressMapping() *Interface_Subinterface_Vlan_IngressMapping {
	if t.IngressMapping != nil {
		return t.IngressMapping
	}
	t.IngressMapping = &Interface_Subinterface_Vlan_IngressMapping{}
	return t.IngressMapping
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateMatch() *Interface_Subinterface_Vlan_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &Interface_Subinterface_Vlan_Match{}
	return t.Match
}

// GetEgressMapping returns the value of the EgressMapping struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field EgressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetEgressMapping() *Interface_Subinterface_Vlan_EgressMapping {
	if t != nil && t.EgressMapping != nil {
		return t.EgressMapping
	}
	return nil
}

// GetIngressMapping returns the value of the IngressMapping struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field IngressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetIngressMapping() *Interface_Subinterface_Vlan_IngressMapping {
	if t != nil && t.IngressMapping != nil {
		return t.IngressMapping
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetMatch() *Interface_Subinterface_Vlan_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan) GetVlanId() Interface_Subinterface_Vlan_VlanId_Union {
	if t == nil || t.VlanId == nil {
		return nil
	}
	return t.VlanId
}

// SetVlanId sets the value of the leaf VlanId in the Interface_Subinterface_Vlan
// struct.
func (t *Interface_Subinterface_Vlan) SetVlanId(v Interface_Subinterface_Vlan_VlanId_Union) {
	t.VlanId = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressMapping.PopulateDefaults()
	t.IngressMapping.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan.
func (*Interface_Subinterface_Vlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_EgressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping struct {
	Tpid            E_VlanTypes_TPID_TYPES      `path:"state/tpid" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/tpid" shadow-module:"openconfig-vlan/openconfig-vlan"`
	VlanId          *uint16                     `path:"state/vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	VlanStackAction E_VlanTypes_VlanStackAction `path:"state/vlan-stack-action" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan-stack-action" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_EgressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_EgressMapping) IsYANGGoStruct() {}

// GetTpid retrieves the value of the leaf Tpid from the Interface_Subinterface_Vlan_EgressMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tpid is set, it can
// safely use t.GetTpid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tpid == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetTpid() E_VlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return 0
	}
	return t.Tpid
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_EgressMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// GetVlanStackAction retrieves the value of the leaf VlanStackAction from the Interface_Subinterface_Vlan_EgressMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanStackAction is set, it can
// safely use t.GetVlanStackAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanStackAction == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetVlanStackAction() E_VlanTypes_VlanStackAction {
	if t == nil || t.VlanStackAction == 0 {
		return 0
	}
	return t.VlanStackAction
}

// SetTpid sets the value of the leaf Tpid in the Interface_Subinterface_Vlan_EgressMapping
// struct.
func (t *Interface_Subinterface_Vlan_EgressMapping) SetTpid(v E_VlanTypes_TPID_TYPES) {
	t.Tpid = v
}

// SetVlanId sets the value of the leaf VlanId in the Interface_Subinterface_Vlan_EgressMapping
// struct.
func (t *Interface_Subinterface_Vlan_EgressMapping) SetVlanId(v uint16) {
	t.VlanId = &v
}

// SetVlanStackAction sets the value of the leaf VlanStackAction in the Interface_Subinterface_Vlan_EgressMapping
// struct.
func (t *Interface_Subinterface_Vlan_EgressMapping) SetVlanStackAction(v E_VlanTypes_VlanStackAction) {
	t.VlanStackAction = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_EgressMapping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_EgressMapping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_EgressMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_EgressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_EgressMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_EgressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_EgressMapping.
func (*Interface_Subinterface_Vlan_EgressMapping) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_IngressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping struct {
	Tpid            E_VlanTypes_TPID_TYPES      `path:"state/tpid" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/tpid" shadow-module:"openconfig-vlan/openconfig-vlan"`
	VlanId          *uint16                     `path:"state/vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	VlanStackAction E_VlanTypes_VlanStackAction `path:"state/vlan-stack-action" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan-stack-action" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_IngressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_IngressMapping) IsYANGGoStruct() {}

// GetTpid retrieves the value of the leaf Tpid from the Interface_Subinterface_Vlan_IngressMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tpid is set, it can
// safely use t.GetTpid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tpid == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetTpid() E_VlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return 0
	}
	return t.Tpid
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_IngressMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// GetVlanStackAction retrieves the value of the leaf VlanStackAction from the Interface_Subinterface_Vlan_IngressMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanStackAction is set, it can
// safely use t.GetVlanStackAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanStackAction == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetVlanStackAction() E_VlanTypes_VlanStackAction {
	if t == nil || t.VlanStackAction == 0 {
		return 0
	}
	return t.VlanStackAction
}

// SetTpid sets the value of the leaf Tpid in the Interface_Subinterface_Vlan_IngressMapping
// struct.
func (t *Interface_Subinterface_Vlan_IngressMapping) SetTpid(v E_VlanTypes_TPID_TYPES) {
	t.Tpid = v
}

// SetVlanId sets the value of the leaf VlanId in the Interface_Subinterface_Vlan_IngressMapping
// struct.
func (t *Interface_Subinterface_Vlan_IngressMapping) SetVlanId(v uint16) {
	t.VlanId = &v
}

// SetVlanStackAction sets the value of the leaf VlanStackAction in the Interface_Subinterface_Vlan_IngressMapping
// struct.
func (t *Interface_Subinterface_Vlan_IngressMapping) SetVlanStackAction(v E_VlanTypes_VlanStackAction) {
	t.VlanStackAction = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_IngressMapping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_IngressMapping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_IngressMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_IngressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_IngressMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_IngressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_IngressMapping.
func (*Interface_Subinterface_Vlan_IngressMapping) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_Match struct {
	DoubleTagged                *Interface_Subinterface_Vlan_Match_DoubleTagged                `path:"double-tagged" module:"openconfig-vlan"`
	DoubleTaggedInnerList       *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList       `path:"double-tagged-inner-list" module:"openconfig-vlan"`
	DoubleTaggedInnerOuterRange *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange `path:"double-tagged-inner-outer-range" module:"openconfig-vlan"`
	DoubleTaggedInnerRange      *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange      `path:"double-tagged-inner-range" module:"openconfig-vlan"`
	DoubleTaggedOuterList       *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList       `path:"double-tagged-outer-list" module:"openconfig-vlan"`
	DoubleTaggedOuterRange      *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange      `path:"double-tagged-outer-range" module:"openconfig-vlan"`
	SingleTagged                *Interface_Subinterface_Vlan_Match_SingleTagged                `path:"single-tagged" module:"openconfig-vlan"`
	SingleTaggedList            *Interface_Subinterface_Vlan_Match_SingleTaggedList            `path:"single-tagged-list" module:"openconfig-vlan"`
	SingleTaggedRange           *Interface_Subinterface_Vlan_Match_SingleTaggedRange           `path:"single-tagged-range" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match) IsYANGGoStruct() {}

// GetOrCreateDoubleTagged retrieves the value of the DoubleTagged field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTagged {
	if t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	t.DoubleTagged = &Interface_Subinterface_Vlan_Match_DoubleTagged{}
	return t.DoubleTagged
}

// GetOrCreateDoubleTaggedInnerList retrieves the value of the DoubleTaggedInnerList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	t.DoubleTaggedInnerList = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList{}
	return t.DoubleTaggedInnerList
}

// GetOrCreateDoubleTaggedInnerOuterRange retrieves the value of the DoubleTaggedInnerOuterRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	t.DoubleTaggedInnerOuterRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange{}
	return t.DoubleTaggedInnerOuterRange
}

// GetOrCreateDoubleTaggedInnerRange retrieves the value of the DoubleTaggedInnerRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	t.DoubleTaggedInnerRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange{}
	return t.DoubleTaggedInnerRange
}

// GetOrCreateDoubleTaggedOuterList retrieves the value of the DoubleTaggedOuterList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	t.DoubleTaggedOuterList = &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList{}
	return t.DoubleTaggedOuterList
}

// GetOrCreateDoubleTaggedOuterRange retrieves the value of the DoubleTaggedOuterRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	t.DoubleTaggedOuterRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange{}
	return t.DoubleTaggedOuterRange
}

// GetOrCreateSingleTagged retrieves the value of the SingleTagged field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTagged() *Interface_Subinterface_Vlan_Match_SingleTagged {
	if t.SingleTagged != nil {
		return t.SingleTagged
	}
	t.SingleTagged = &Interface_Subinterface_Vlan_Match_SingleTagged{}
	return t.SingleTagged
}

// GetOrCreateSingleTaggedList retrieves the value of the SingleTaggedList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedList {
	if t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	t.SingleTaggedList = &Interface_Subinterface_Vlan_Match_SingleTaggedList{}
	return t.SingleTaggedList
}

// GetOrCreateSingleTaggedRange retrieves the value of the SingleTaggedRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRange {
	if t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	t.SingleTaggedRange = &Interface_Subinterface_Vlan_Match_SingleTaggedRange{}
	return t.SingleTaggedRange
}

// GetDoubleTagged returns the value of the DoubleTagged struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTagged {
	if t != nil && t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	return nil
}

// GetDoubleTaggedInnerList returns the value of the DoubleTaggedInnerList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t != nil && t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	return nil
}

// GetDoubleTaggedInnerOuterRange returns the value of the DoubleTaggedInnerOuterRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t != nil && t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	return nil
}

// GetDoubleTaggedInnerRange returns the value of the DoubleTaggedInnerRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t != nil && t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	return nil
}

// GetDoubleTaggedOuterList returns the value of the DoubleTaggedOuterList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t != nil && t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	return nil
}

// GetDoubleTaggedOuterRange returns the value of the DoubleTaggedOuterRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t != nil && t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	return nil
}

// GetSingleTagged returns the value of the SingleTagged struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTagged() *Interface_Subinterface_Vlan_Match_SingleTagged {
	if t != nil && t.SingleTagged != nil {
		return t.SingleTagged
	}
	return nil
}

// GetSingleTaggedList returns the value of the SingleTaggedList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedList {
	if t != nil && t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	return nil
}

// GetSingleTaggedRange returns the value of the SingleTaggedRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRange {
	if t != nil && t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DoubleTagged.PopulateDefaults()
	t.DoubleTaggedInnerList.PopulateDefaults()
	t.DoubleTaggedInnerOuterRange.PopulateDefaults()
	t.DoubleTaggedInnerRange.PopulateDefaults()
	t.DoubleTaggedOuterList.PopulateDefaults()
	t.DoubleTaggedOuterRange.PopulateDefaults()
	t.SingleTagged.PopulateDefaults()
	t.SingleTaggedList.PopulateDefaults()
	t.SingleTaggedRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match.
func (*Interface_Subinterface_Vlan_Match) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_DoubleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged struct {
	InnerVlanId *uint16 `path:"state/inner-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterVlanId *uint16 `path:"state/outer-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTagged) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerVlanId is set, it can
// safely use t.GetInnerVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterVlanId is set, it can
// safely use t.GetOuterVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) GetOuterVlanId() uint16 {
	if t == nil || t.OuterVlanId == nil {
		return 0
	}
	return *t.OuterVlanId
}

// SetInnerVlanId sets the value of the leaf InnerVlanId in the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) SetInnerVlanId(v uint16) {
	t.InnerVlanId = &v
}

// SetOuterVlanId sets the value of the leaf OuterVlanId in the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) SetOuterVlanId(v uint16) {
	t.OuterVlanId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_DoubleTagged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_DoubleTagged.
func (*Interface_Subinterface_Vlan_Match_DoubleTagged) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList struct {
	InnerVlanIds []uint16 `path:"state/inner-vlan-ids" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-vlan-ids" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterVlanId  *uint16  `path:"state/outer-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) IsYANGGoStruct() {}

// GetInnerVlanIds retrieves the value of the leaf InnerVlanIds from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerVlanIds is set, it can
// safely use t.GetInnerVlanIds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerVlanIds == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetInnerVlanIds() []uint16 {
	if t == nil || t.InnerVlanIds == nil {
		return nil
	}
	return t.InnerVlanIds
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterVlanId is set, it can
// safely use t.GetOuterVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetOuterVlanId() uint16 {
	if t == nil || t.OuterVlanId == nil {
		return 0
	}
	return *t.OuterVlanId
}

// SetInnerVlanIds sets the value of the leaf InnerVlanIds in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) SetInnerVlanIds(v []uint16) {
	t.InnerVlanIds = v
}

// SetOuterVlanId sets the value of the leaf OuterVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) SetOuterVlanId(v uint16) {
	t.OuterVlanId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange struct {
	InnerHighVlanId *uint16 `path:"state/inner-high-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-high-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	InnerLowVlanId  *uint16 `path:"state/inner-low-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-low-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterHighVlanId *uint16 `path:"state/outer-high-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-high-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterLowVlanId  *uint16 `path:"state/outer-low-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-low-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) IsYANGGoStruct() {}

// GetInnerHighVlanId retrieves the value of the leaf InnerHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerHighVlanId is set, it can
// safely use t.GetInnerHighVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerHighVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetInnerHighVlanId() uint16 {
	if t == nil || t.InnerHighVlanId == nil {
		return 0
	}
	return *t.InnerHighVlanId
}

// GetInnerLowVlanId retrieves the value of the leaf InnerLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerLowVlanId is set, it can
// safely use t.GetInnerLowVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerLowVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetInnerLowVlanId() uint16 {
	if t == nil || t.InnerLowVlanId == nil {
		return 0
	}
	return *t.InnerLowVlanId
}

// GetOuterHighVlanId retrieves the value of the leaf OuterHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterHighVlanId is set, it can
// safely use t.GetOuterHighVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterHighVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOuterHighVlanId() uint16 {
	if t == nil || t.OuterHighVlanId == nil {
		return 0
	}
	return *t.OuterHighVlanId
}

// GetOuterLowVlanId retrieves the value of the leaf OuterLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterLowVlanId is set, it can
// safely use t.GetOuterLowVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterLowVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOuterLowVlanId() uint16 {
	if t == nil || t.OuterLowVlanId == nil {
		return 0
	}
	return *t.OuterLowVlanId
}

// SetInnerHighVlanId sets the value of the leaf InnerHighVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) SetInnerHighVlanId(v uint16) {
	t.InnerHighVlanId = &v
}

// SetInnerLowVlanId sets the value of the leaf InnerLowVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) SetInnerLowVlanId(v uint16) {
	t.InnerLowVlanId = &v
}

// SetOuterHighVlanId sets the value of the leaf OuterHighVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) SetOuterHighVlanId(v uint16) {
	t.OuterHighVlanId = &v
}

// SetOuterLowVlanId sets the value of the leaf OuterLowVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) SetOuterLowVlanId(v uint16) {
	t.OuterLowVlanId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange struct {
	InnerHighVlanId *uint16  `path:"state/inner-high-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-high-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	InnerLowVlanId  *uint16  `path:"state/inner-low-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-low-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterVlanId     []uint16 `path:"state/outer-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) IsYANGGoStruct() {}

// GetInnerHighVlanId retrieves the value of the leaf InnerHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerHighVlanId is set, it can
// safely use t.GetInnerHighVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerHighVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetInnerHighVlanId() uint16 {
	if t == nil || t.InnerHighVlanId == nil {
		return 0
	}
	return *t.InnerHighVlanId
}

// GetInnerLowVlanId retrieves the value of the leaf InnerLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerLowVlanId is set, it can
// safely use t.GetInnerLowVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerLowVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetInnerLowVlanId() uint16 {
	if t == nil || t.InnerLowVlanId == nil {
		return 0
	}
	return *t.InnerLowVlanId
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterVlanId is set, it can
// safely use t.GetOuterVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetOuterVlanId() []uint16 {
	if t == nil || t.OuterVlanId == nil {
		return nil
	}
	return t.OuterVlanId
}

// SetInnerHighVlanId sets the value of the leaf InnerHighVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) SetInnerHighVlanId(v uint16) {
	t.InnerHighVlanId = &v
}

// SetInnerLowVlanId sets the value of the leaf InnerLowVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) SetInnerLowVlanId(v uint16) {
	t.InnerLowVlanId = &v
}

// SetOuterVlanId sets the value of the leaf OuterVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) SetOuterVlanId(v []uint16) {
	t.OuterVlanId = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList struct {
	InnerVlanId  *uint16  `path:"state/inner-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterVlanIds []uint16 `path:"state/outer-vlan-ids" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-vlan-ids" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerVlanId is set, it can
// safely use t.GetInnerVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterVlanIds retrieves the value of the leaf OuterVlanIds from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterVlanIds is set, it can
// safely use t.GetOuterVlanIds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterVlanIds == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetOuterVlanIds() []uint16 {
	if t == nil || t.OuterVlanIds == nil {
		return nil
	}
	return t.OuterVlanIds
}

// SetInnerVlanId sets the value of the leaf InnerVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) SetInnerVlanId(v uint16) {
	t.InnerVlanId = &v
}

// SetOuterVlanIds sets the value of the leaf OuterVlanIds in the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) SetOuterVlanIds(v []uint16) {
	t.OuterVlanIds = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange struct {
	InnerVlanId     *uint16 `path:"state/inner-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/inner-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterHighVlanId *uint16 `path:"state/outer-high-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-high-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	OuterLowVlanId  *uint16 `path:"state/outer-low-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/outer-low-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerVlanId is set, it can
// safely use t.GetInnerVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterHighVlanId retrieves the value of the leaf OuterHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterHighVlanId is set, it can
// safely use t.GetOuterHighVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterHighVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOuterHighVlanId() uint16 {
	if t == nil || t.OuterHighVlanId == nil {
		return 0
	}
	return *t.OuterHighVlanId
}

// GetOuterLowVlanId retrieves the value of the leaf OuterLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterLowVlanId is set, it can
// safely use t.GetOuterLowVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterLowVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOuterLowVlanId() uint16 {
	if t == nil || t.OuterLowVlanId == nil {
		return 0
	}
	return *t.OuterLowVlanId
}

// SetInnerVlanId sets the value of the leaf InnerVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) SetInnerVlanId(v uint16) {
	t.InnerVlanId = &v
}

// SetOuterHighVlanId sets the value of the leaf OuterHighVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) SetOuterHighVlanId(v uint16) {
	t.OuterHighVlanId = &v
}

// SetOuterLowVlanId sets the value of the leaf OuterLowVlanId in the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) SetOuterLowVlanId(v uint16) {
	t.OuterLowVlanId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_SingleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged struct {
	VlanId *uint16 `path:"state/vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTagged) IsYANGGoStruct() {}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_Match_SingleTagged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// SetVlanId sets the value of the leaf VlanId in the Interface_Subinterface_Vlan_Match_SingleTagged
// struct.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) SetVlanId(v uint16) {
	t.VlanId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_SingleTagged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_SingleTagged.
func (*Interface_Subinterface_Vlan_Match_SingleTagged) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList struct {
	VlanIds []uint16 `path:"state/vlan-ids" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/vlan-ids" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTaggedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedList) IsYANGGoStruct() {}

// GetVlanIds retrieves the value of the leaf VlanIds from the Interface_Subinterface_Vlan_Match_SingleTaggedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanIds is set, it can
// safely use t.GetVlanIds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanIds == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) GetVlanIds() []uint16 {
	if t == nil || t.VlanIds == nil {
		return nil
	}
	return t.VlanIds
}

// SetVlanIds sets the value of the leaf VlanIds in the Interface_Subinterface_Vlan_Match_SingleTaggedList
// struct.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) SetVlanIds(v []uint16) {
	t.VlanIds = v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_SingleTaggedList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTaggedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_SingleTaggedList.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedList) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange struct {
	HighVlanId *uint16 `path:"state/high-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/high-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
	LowVlanId  *uint16 `path:"state/low-vlan-id" module:"openconfig-vlan/openconfig-vlan" shadow-path:"config/low-vlan-id" shadow-module:"openconfig-vlan/openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTaggedRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedRange) IsYANGGoStruct() {}

// GetHighVlanId retrieves the value of the leaf HighVlanId from the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighVlanId is set, it can
// safely use t.GetHighVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) GetHighVlanId() uint16 {
	if t == nil || t.HighVlanId == nil {
		return 0
	}
	return *t.HighVlanId
}

// GetLowVlanId retrieves the value of the leaf LowVlanId from the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowVlanId is set, it can
// safely use t.GetLowVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowVlanId == nil' before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) GetLowVlanId() uint16 {
	if t == nil || t.LowVlanId == nil {
		return 0
	}
	return *t.LowVlanId
}

// SetHighVlanId sets the value of the leaf HighVlanId in the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) SetHighVlanId(v uint16) {
	t.HighVlanId = &v
}

// SetLowVlanId sets the value of the leaf LowVlanId in the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) SetLowVlanId(v uint16) {
	t.LowVlanId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTaggedRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Subinterface_Vlan_Match_SingleTaggedRange.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Keychain represents the /openconfig-keychain/keychains/keychain YANG schema element.
type Keychain struct {
	Key       map[Keychain_Key_KeyId_Union]*Keychain_Key `path:"keys/key" module:"openconfig-keychain/openconfig-keychain"`
	Name      *string                                    `path:"state/name|name" module:"openconfig-keychain/openconfig-keychain|openconfig-keychain" shadow-path:"config/name|name" shadow-module:"openconfig-keychain/openconfig-keychain|openconfig-keychain"`
	Tolerance Keychain_Tolerance_Union                   `path:"state/tolerance" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/tolerance" shadow-module:"openconfig-keychain/openconfig-keychain"`
}

// IsYANGGoStruct ensures that Keychain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Keychain) IsYANGGoStruct() {}

// NewKey creates a new entry in the Key list of the
// Keychain struct. The keys of the list are populated from the input
// arguments.
func (t *Keychain) NewKey(KeyId Keychain_Key_KeyId_Union) (*Keychain_Key, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[Keychain_Key_KeyId_Union]*Keychain_Key)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Key[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Key", key)
	}

	t.Key[key] = &Keychain_Key{
		KeyId: KeyId,
	}

	return t.Key[key], nil
}

// RenameKey renames an entry in the list Key within
// the Keychain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Keychain) RenameKey(oldK, newK Keychain_Key_KeyId_Union) error {
	if _, ok := t.Key[newK]; ok {
		return fmt.Errorf("key %v already exists in Key", newK)
	}

	e, ok := t.Key[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Key", oldK)
	}
	e.KeyId = newK

	t.Key[newK] = e
	delete(t.Key, oldK)
	return nil
}

// GetOrCreateKeyMap returns the list (map) from Keychain.
//
// It initializes the field if not already initialized.
func (t *Keychain) GetOrCreateKeyMap() map[Keychain_Key_KeyId_Union]*Keychain_Key {
	if t.Key == nil {
		t.Key = make(map[Keychain_Key_KeyId_Union]*Keychain_Key)
	}
	return t.Key
}

// GetOrCreateKey retrieves the value with the specified keys from
// the receiver Keychain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Keychain) GetOrCreateKey(KeyId Keychain_Key_KeyId_Union) *Keychain_Key {

	key := KeyId

	if v, ok := t.Key[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKey got unexpected error: %v", err))
	}
	return v
}

// GetKey retrieves the value with the specified key from
// the Key map field of Keychain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Keychain) GetKey(KeyId Keychain_Key_KeyId_Union) *Keychain_Key {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.Key[key]; ok {
		return lm
	}
	return nil
}

// DeleteKey deletes the value with the specified keys from
// the receiver Keychain. If there is no such element, the function
// is a no-op.
func (t *Keychain) DeleteKey(KeyId Keychain_Key_KeyId_Union) {
	key := KeyId

	delete(t.Key, key)
}

// AppendKey appends the supplied Keychain_Key struct to the
// list Key of Keychain. If the key value(s) specified in
// the supplied Keychain_Key already exist in the list, an error is
// returned.
func (t *Keychain) AppendKey(v *Keychain_Key) error {
	key := v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[Keychain_Key_KeyId_Union]*Keychain_Key)
	}

	if _, ok := t.Key[key]; ok {
		return fmt.Errorf("duplicate key for list Key %v", key)
	}

	t.Key[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Keychain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTolerance retrieves the value of the leaf Tolerance from the Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tolerance is set, it can
// safely use t.GetTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tolerance == nil' before retrieving the leaf's value.
func (t *Keychain) GetTolerance() Keychain_Tolerance_Union {
	if t == nil || t.Tolerance == nil {
		return nil
	}
	return t.Tolerance
}

// SetName sets the value of the leaf Name in the Keychain
// struct.
func (t *Keychain) SetName(v string) {
	t.Name = &v
}

// SetTolerance sets the value of the leaf Tolerance in the Keychain
// struct.
func (t *Keychain) SetTolerance(v Keychain_Tolerance_Union) {
	t.Tolerance = v
}

// PopulateDefaults recursively populates unset leaf fields in the Keychain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Keychain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Key {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Keychain struct, which is a YANG list entry.
func (t *Keychain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Keychain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Keychain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Keychain.
func (*Keychain) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// Keychain_Key represents the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_Key struct {
	CryptoAlgorithm E_KeychainTypes_CRYPTO_TYPE   `path:"state/crypto-algorithm" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/crypto-algorithm" shadow-module:"openconfig-keychain/openconfig-keychain"`
	KeyId           Keychain_Key_KeyId_Union      `path:"state/key-id|key-id" module:"openconfig-keychain/openconfig-keychain|openconfig-keychain" shadow-path:"config/key-id|key-id" shadow-module:"openconfig-keychain/openconfig-keychain|openconfig-keychain"`
	ReceiveLifetime *Keychain_Key_ReceiveLifetime `path:"receive-lifetime" module:"openconfig-keychain"`
	SecretKey       *string                       `path:"state/secret-key" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/secret-key" shadow-module:"openconfig-keychain/openconfig-keychain"`
	SendLifetime    *Keychain_Key_SendLifetime    `path:"send-lifetime" module:"openconfig-keychain"`
}

// IsYANGGoStruct ensures that Keychain_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Keychain_Key) IsYANGGoStruct() {}

// GetOrCreateReceiveLifetime retrieves the value of the ReceiveLifetime field
// or returns the existing field if it already exists.
func (t *Keychain_Key) GetOrCreateReceiveLifetime() *Keychain_Key_ReceiveLifetime {
	if t.ReceiveLifetime != nil {
		return t.ReceiveLifetime
	}
	t.ReceiveLifetime = &Keychain_Key_ReceiveLifetime{}
	return t.ReceiveLifetime
}

// GetOrCreateSendLifetime retrieves the value of the SendLifetime field
// or returns the existing field if it already exists.
func (t *Keychain_Key) GetOrCreateSendLifetime() *Keychain_Key_SendLifetime {
	if t.SendLifetime != nil {
		return t.SendLifetime
	}
	t.SendLifetime = &Keychain_Key_SendLifetime{}
	return t.SendLifetime
}

// GetReceiveLifetime returns the value of the ReceiveLifetime struct pointer
// from Keychain_Key. If the receiver or the field ReceiveLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Keychain_Key) GetReceiveLifetime() *Keychain_Key_ReceiveLifetime {
	if t != nil && t.ReceiveLifetime != nil {
		return t.ReceiveLifetime
	}
	return nil
}

// GetSendLifetime returns the value of the SendLifetime struct pointer
// from Keychain_Key. If the receiver or the field SendLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Keychain_Key) GetSendLifetime() *Keychain_Key_SendLifetime {
	if t != nil && t.SendLifetime != nil {
		return t.SendLifetime
	}
	return nil
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the Keychain_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *Keychain_Key) GetCryptoAlgorithm() E_KeychainTypes_CRYPTO_TYPE {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// GetKeyId retrieves the value of the leaf KeyId from the Keychain_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *Keychain_Key) GetKeyId() Keychain_Key_KeyId_Union {
	if t == nil || t.KeyId == nil {
		return nil
	}
	return t.KeyId
}

// GetSecretKey retrieves the value of the leaf SecretKey from the Keychain_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *Keychain_Key) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// SetCryptoAlgorithm sets the value of the leaf CryptoAlgorithm in the Keychain_Key
// struct.
func (t *Keychain_Key) SetCryptoAlgorithm(v E_KeychainTypes_CRYPTO_TYPE) {
	t.CryptoAlgorithm = v
}

// SetKeyId sets the value of the leaf KeyId in the Keychain_Key
// struct.
func (t *Keychain_Key) SetKeyId(v Keychain_Key_KeyId_Union) {
	t.KeyId = v
}

// SetSecretKey sets the value of the leaf SecretKey in the Keychain_Key
// struct.
func (t *Keychain_Key) SetSecretKey(v string) {
	t.SecretKey = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Keychain_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Keychain_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ReceiveLifetime.PopulateDefaults()
	t.SendLifetime.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Keychain_Key struct, which is a YANG list entry.
func (t *Keychain_Key) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"key-id": t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Keychain_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Keychain_Key) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Keychain_Key.
func (*Keychain_Key) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// Keychain_Key_ReceiveLifetime represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type Keychain_Key_ReceiveLifetime struct {
	EndTime   *uint64 `path:"state/end-time" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/end-time" shadow-module:"openconfig-keychain/openconfig-keychain"`
	StartTime *uint64 `path:"state/start-time" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/start-time" shadow-module:"openconfig-keychain/openconfig-keychain"`
}

// IsYANGGoStruct ensures that Keychain_Key_ReceiveLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Keychain_Key_ReceiveLifetime) IsYANGGoStruct() {}

// GetEndTime retrieves the value of the leaf EndTime from the Keychain_Key_ReceiveLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndTime is set, it can
// safely use t.GetEndTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndTime == nil' before retrieving the leaf's value.
func (t *Keychain_Key_ReceiveLifetime) GetEndTime() uint64 {
	if t == nil || t.EndTime == nil {
		return 0
	}
	return *t.EndTime
}

// GetStartTime retrieves the value of the leaf StartTime from the Keychain_Key_ReceiveLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *Keychain_Key_ReceiveLifetime) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// SetEndTime sets the value of the leaf EndTime in the Keychain_Key_ReceiveLifetime
// struct.
func (t *Keychain_Key_ReceiveLifetime) SetEndTime(v uint64) {
	t.EndTime = &v
}

// SetStartTime sets the value of the leaf StartTime in the Keychain_Key_ReceiveLifetime
// struct.
func (t *Keychain_Key_ReceiveLifetime) SetStartTime(v uint64) {
	t.StartTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Keychain_Key_ReceiveLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Keychain_Key_ReceiveLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain_Key_ReceiveLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Keychain_Key_ReceiveLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain_Key_ReceiveLifetime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Keychain_Key_ReceiveLifetime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Keychain_Key_ReceiveLifetime.
func (*Keychain_Key_ReceiveLifetime) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// Keychain_Key_SendLifetime represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type Keychain_Key_SendLifetime struct {
	EndTime        *uint64 `path:"state/end-time" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/end-time" shadow-module:"openconfig-keychain/openconfig-keychain"`
	SendAndReceive *bool   `path:"state/send-and-receive" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/send-and-receive" shadow-module:"openconfig-keychain/openconfig-keychain"`
	StartTime      *uint64 `path:"state/start-time" module:"openconfig-keychain/openconfig-keychain" shadow-path:"config/start-time" shadow-module:"openconfig-keychain/openconfig-keychain"`
}

// IsYANGGoStruct ensures that Keychain_Key_SendLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Keychain_Key_SendLifetime) IsYANGGoStruct() {}

// GetEndTime retrieves the value of the leaf EndTime from the Keychain_Key_SendLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndTime is set, it can
// safely use t.GetEndTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndTime == nil' before retrieving the leaf's value.
func (t *Keychain_Key_SendLifetime) GetEndTime() uint64 {
	if t == nil || t.EndTime == nil {
		return 0
	}
	return *t.EndTime
}

// GetSendAndReceive retrieves the value of the leaf SendAndReceive from the Keychain_Key_SendLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendAndReceive is set, it can
// safely use t.GetSendAndReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendAndReceive == nil' before retrieving the leaf's value.
func (t *Keychain_Key_SendLifetime) GetSendAndReceive() bool {
	if t == nil || t.SendAndReceive == nil {
		return true
	}
	return *t.SendAndReceive
}

// GetStartTime retrieves the value of the leaf StartTime from the Keychain_Key_SendLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *Keychain_Key_SendLifetime) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// SetEndTime sets the value of the leaf EndTime in the Keychain_Key_SendLifetime
// struct.
func (t *Keychain_Key_SendLifetime) SetEndTime(v uint64) {
	t.EndTime = &v
}

// SetSendAndReceive sets the value of the leaf SendAndReceive in the Keychain_Key_SendLifetime
// struct.
func (t *Keychain_Key_SendLifetime) SetSendAndReceive(v bool) {
	t.SendAndReceive = &v
}

// SetStartTime sets the value of the leaf StartTime in the Keychain_Key_SendLifetime
// struct.
func (t *Keychain_Key_SendLifetime) SetStartTime(v uint64) {
	t.StartTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Keychain_Key_SendLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Keychain_Key_SendLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SendAndReceive == nil {
		var v bool = true
		t.SendAndReceive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain_Key_SendLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Keychain_Key_SendLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Keychain_Key_SendLifetime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Keychain_Key_SendLifetime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Keychain_Key_SendLifetime.
func (*Keychain_Key_SendLifetime) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// Lacp represents the /openconfig-lacp/lacp YANG schema element.
type Lacp struct {
	Interface      map[string]*Lacp_Interface `path:"interfaces/interface" module:"openconfig-lacp/openconfig-lacp"`
	SystemPriority *uint16                    `path:"state/system-priority" module:"openconfig-lacp/openconfig-lacp" shadow-path:"config/system-priority" shadow-module:"openconfig-lacp/openconfig-lacp"`
}

// IsYANGGoStruct ensures that Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Lacp struct. The keys of the list are populated from the input
// arguments.
func (t *Lacp) NewInterface(Name string) (*Lacp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Lacp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Lacp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Lacp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lacp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Lacp.
//
// It initializes the field if not already initialized.
func (t *Lacp) GetOrCreateInterfaceMap() map[string]*Lacp_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Lacp_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Lacp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lacp) GetOrCreateInterface(Name string) *Lacp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Lacp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lacp) GetInterface(Name string) *Lacp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Lacp. If there is no such element, the function
// is a no-op.
func (t *Lacp) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Lacp_Interface struct to the
// list Interface of Lacp. If the key value(s) specified in
// the supplied Lacp_Interface already exist in the list, an error is
// returned.
func (t *Lacp) AppendInterface(v *Lacp_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Lacp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemPriority is set, it can
// safely use t.GetSystemPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemPriority == nil' before retrieving the leaf's value.
func (t *Lacp) GetSystemPriority() uint16 {
	if t == nil || t.SystemPriority == nil {
		return 0
	}
	return *t.SystemPriority
}

// SetSystemPriority sets the value of the leaf SystemPriority in the Lacp
// struct.
func (t *Lacp) SetSystemPriority(v uint16) {
	t.SystemPriority = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp.
func (*Lacp) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// Lacp_Interface represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_Interface struct {
	Fallback       *bool                             `path:"state/fallback" module:"openconfig-lacp/openconfig-lacp" shadow-path:"config/fallback" shadow-module:"openconfig-lacp/openconfig-lacp"`
	Interval       E_Lacp_LacpPeriodType             `path:"state/interval" module:"openconfig-lacp/openconfig-lacp" shadow-path:"config/interval" shadow-module:"openconfig-lacp/openconfig-lacp"`
	LacpMode       E_Lacp_LacpActivityType           `path:"state/lacp-mode" module:"openconfig-lacp/openconfig-lacp" shadow-path:"config/lacp-mode" shadow-module:"openconfig-lacp/openconfig-lacp"`
	Member         map[string]*Lacp_Interface_Member `path:"members/member" module:"openconfig-lacp/openconfig-lacp"`
	Name           *string                           `path:"state/name|name" module:"openconfig-lacp/openconfig-lacp|openconfig-lacp" shadow-path:"config/name|name" shadow-module:"openconfig-lacp/openconfig-lacp|openconfig-lacp"`
	SystemIdMac    *string                           `path:"state/system-id-mac" module:"openconfig-lacp/openconfig-lacp" shadow-path:"config/system-id-mac" shadow-module:"openconfig-lacp/openconfig-lacp"`
	SystemPriority *uint16                           `path:"state/system-priority" module:"openconfig-lacp/openconfig-lacp" shadow-path:"config/system-priority" shadow-module:"openconfig-lacp/openconfig-lacp"`
}

// IsYANGGoStruct ensures that Lacp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_Interface) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// Lacp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Lacp_Interface) NewMember(Interface string) (*Lacp_Interface_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*Lacp_Interface_Member)
	}

	key := Interface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &Lacp_Interface_Member{
		Interface: &Interface,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the Lacp_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lacp_Interface) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.Interface = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMemberMap returns the list (map) from Lacp_Interface.
//
// It initializes the field if not already initialized.
func (t *Lacp_Interface) GetOrCreateMemberMap() map[string]*Lacp_Interface_Member {
	if t.Member == nil {
		t.Member = make(map[string]*Lacp_Interface_Member)
	}
	return t.Member
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver Lacp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lacp_Interface) GetOrCreateMember(Interface string) *Lacp_Interface_Member {

	key := Interface

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(Interface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of Lacp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lacp_Interface) GetMember(Interface string) *Lacp_Interface_Member {

	if t == nil {
		return nil
	}

	key := Interface

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// DeleteMember deletes the value with the specified keys from
// the receiver Lacp_Interface. If there is no such element, the function
// is a no-op.
func (t *Lacp_Interface) DeleteMember(Interface string) {
	key := Interface

	delete(t.Member, key)
}

// AppendMember appends the supplied Lacp_Interface_Member struct to the
// list Member of Lacp_Interface. If the key value(s) specified in
// the supplied Lacp_Interface_Member already exist in the list, an error is
// returned.
func (t *Lacp_Interface) AppendMember(v *Lacp_Interface_Member) error {
	if v.Interface == nil {
		return fmt.Errorf("invalid nil key received for Interface")
	}

	key := *v.Interface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*Lacp_Interface_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetFallback retrieves the value of the leaf Fallback from the Lacp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fallback is set, it can
// safely use t.GetFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fallback == nil' before retrieving the leaf's value.
func (t *Lacp_Interface) GetFallback() bool {
	if t == nil || t.Fallback == nil {
		return false
	}
	return *t.Fallback
}

// GetInterval retrieves the value of the leaf Interval from the Lacp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Lacp_Interface) GetInterval() E_Lacp_LacpPeriodType {
	if t == nil || t.Interval == 0 {
		return Lacp_LacpPeriodType_SLOW
	}
	return t.Interval
}

// GetLacpMode retrieves the value of the leaf LacpMode from the Lacp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpMode is set, it can
// safely use t.GetLacpMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpMode == nil' before retrieving the leaf's value.
func (t *Lacp_Interface) GetLacpMode() E_Lacp_LacpActivityType {
	if t == nil || t.LacpMode == 0 {
		return Lacp_LacpActivityType_ACTIVE
	}
	return t.LacpMode
}

// GetName retrieves the value of the leaf Name from the Lacp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Lacp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSystemIdMac retrieves the value of the leaf SystemIdMac from the Lacp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIdMac is set, it can
// safely use t.GetSystemIdMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIdMac == nil' before retrieving the leaf's value.
func (t *Lacp_Interface) GetSystemIdMac() string {
	if t == nil || t.SystemIdMac == nil {
		return ""
	}
	return *t.SystemIdMac
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the Lacp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemPriority is set, it can
// safely use t.GetSystemPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemPriority == nil' before retrieving the leaf's value.
func (t *Lacp_Interface) GetSystemPriority() uint16 {
	if t == nil || t.SystemPriority == nil {
		return 0
	}
	return *t.SystemPriority
}

// SetFallback sets the value of the leaf Fallback in the Lacp_Interface
// struct.
func (t *Lacp_Interface) SetFallback(v bool) {
	t.Fallback = &v
}

// SetInterval sets the value of the leaf Interval in the Lacp_Interface
// struct.
func (t *Lacp_Interface) SetInterval(v E_Lacp_LacpPeriodType) {
	t.Interval = v
}

// SetLacpMode sets the value of the leaf LacpMode in the Lacp_Interface
// struct.
func (t *Lacp_Interface) SetLacpMode(v E_Lacp_LacpActivityType) {
	t.LacpMode = v
}

// SetName sets the value of the leaf Name in the Lacp_Interface
// struct.
func (t *Lacp_Interface) SetName(v string) {
	t.Name = &v
}

// SetSystemIdMac sets the value of the leaf SystemIdMac in the Lacp_Interface
// struct.
func (t *Lacp_Interface) SetSystemIdMac(v string) {
	t.SystemIdMac = &v
}

// SetSystemPriority sets the value of the leaf SystemPriority in the Lacp_Interface
// struct.
func (t *Lacp_Interface) SetSystemPriority(v uint16) {
	t.SystemPriority = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == 0 {
		t.Interval = Lacp_LacpPeriodType_SLOW
	}
	if t.LacpMode == 0 {
		t.LacpMode = Lacp_LacpActivityType_ACTIVE
	}
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Lacp_Interface struct, which is a YANG list entry.
func (t *Lacp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_Interface.
func (*Lacp_Interface) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// Lacp_Interface_Member represents the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_Member struct {
	Activity            E_Lacp_LacpActivityType         `path:"state/activity" module:"openconfig-lacp/openconfig-lacp"`
	Aggregatable        *bool                           `path:"state/aggregatable" module:"openconfig-lacp/openconfig-lacp"`
	Collecting          *bool                           `path:"state/collecting" module:"openconfig-lacp/openconfig-lacp"`
	Counters            *Lacp_Interface_Member_Counters `path:"state/counters" module:"openconfig-lacp/openconfig-lacp"`
	Distributing        *bool                           `path:"state/distributing" module:"openconfig-lacp/openconfig-lacp"`
	Interface           *string                         `path:"state/interface|interface" module:"openconfig-lacp/openconfig-lacp|openconfig-lacp" shadow-path:"config/interface|interface" shadow-module:"openconfig-lacp/openconfig-lacp|openconfig-lacp"`
	LastChange          *uint64                         `path:"state/last-change" module:"openconfig-lacp/openconfig-lacp"`
	OperKey             *uint16                         `path:"state/oper-key" module:"openconfig-lacp/openconfig-lacp"`
	PartnerId           *string                         `path:"state/partner-id" module:"openconfig-lacp/openconfig-lacp"`
	PartnerKey          *uint16                         `path:"state/partner-key" module:"openconfig-lacp/openconfig-lacp"`
	PartnerPortNum      *uint16                         `path:"state/partner-port-num" module:"openconfig-lacp/openconfig-lacp"`
	PartnerPortPriority *uint16                         `path:"state/partner-port-priority" module:"openconfig-lacp/openconfig-lacp"`
	PortNum             *uint16                         `path:"state/port-num" module:"openconfig-lacp/openconfig-lacp"`
	PortPriority        *uint16                         `path:"state/port-priority" module:"openconfig-lacp/openconfig-lacp" shadow-path:"config/port-priority" shadow-module:"openconfig-lacp/openconfig-lacp"`
	Synchronization     E_Lacp_LacpSynchronizationType  `path:"state/synchronization" module:"openconfig-lacp/openconfig-lacp"`
	SystemId            *string                         `path:"state/system-id" module:"openconfig-lacp/openconfig-lacp"`
	Timeout             E_Lacp_LacpTimeoutType          `path:"state/timeout" module:"openconfig-lacp/openconfig-lacp"`
}

// IsYANGGoStruct ensures that Lacp_Interface_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_Interface_Member) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lacp_Interface_Member) GetOrCreateCounters() *Lacp_Interface_Member_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lacp_Interface_Member_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lacp_Interface_Member. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lacp_Interface_Member) GetCounters() *Lacp_Interface_Member_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActivity retrieves the value of the leaf Activity from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Activity is set, it can
// safely use t.GetActivity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Activity == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetActivity() E_Lacp_LacpActivityType {
	if t == nil || t.Activity == 0 {
		return 0
	}
	return t.Activity
}

// GetAggregatable retrieves the value of the leaf Aggregatable from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregatable is set, it can
// safely use t.GetAggregatable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregatable == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetAggregatable() bool {
	if t == nil || t.Aggregatable == nil {
		return false
	}
	return *t.Aggregatable
}

// GetCollecting retrieves the value of the leaf Collecting from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Collecting is set, it can
// safely use t.GetCollecting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Collecting == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetCollecting() bool {
	if t == nil || t.Collecting == nil {
		return false
	}
	return *t.Collecting
}

// GetDistributing retrieves the value of the leaf Distributing from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distributing is set, it can
// safely use t.GetDistributing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distributing == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetDistributing() bool {
	if t == nil || t.Distributing == nil {
		return false
	}
	return *t.Distributing
}

// GetInterface retrieves the value of the leaf Interface from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetLastChange retrieves the value of the leaf LastChange from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastChange is set, it can
// safely use t.GetLastChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastChange == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetOperKey retrieves the value of the leaf OperKey from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperKey is set, it can
// safely use t.GetOperKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperKey == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetOperKey() uint16 {
	if t == nil || t.OperKey == nil {
		return 0
	}
	return *t.OperKey
}

// GetPartnerId retrieves the value of the leaf PartnerId from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerId is set, it can
// safely use t.GetPartnerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerId == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPartnerId() string {
	if t == nil || t.PartnerId == nil {
		return ""
	}
	return *t.PartnerId
}

// GetPartnerKey retrieves the value of the leaf PartnerKey from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerKey is set, it can
// safely use t.GetPartnerKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerKey == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPartnerKey() uint16 {
	if t == nil || t.PartnerKey == nil {
		return 0
	}
	return *t.PartnerKey
}

// GetPartnerPortNum retrieves the value of the leaf PartnerPortNum from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerPortNum is set, it can
// safely use t.GetPartnerPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerPortNum == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPartnerPortNum() uint16 {
	if t == nil || t.PartnerPortNum == nil {
		return 0
	}
	return *t.PartnerPortNum
}

// GetPartnerPortPriority retrieves the value of the leaf PartnerPortPriority from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerPortPriority is set, it can
// safely use t.GetPartnerPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerPortPriority == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPartnerPortPriority() uint16 {
	if t == nil || t.PartnerPortPriority == nil {
		return 0
	}
	return *t.PartnerPortPriority
}

// GetPortNum retrieves the value of the leaf PortNum from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPriority is set, it can
// safely use t.GetPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPriority == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPortPriority() uint16 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetSynchronization retrieves the value of the leaf Synchronization from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Synchronization is set, it can
// safely use t.GetSynchronization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Synchronization == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetSynchronization() E_Lacp_LacpSynchronizationType {
	if t == nil || t.Synchronization == 0 {
		return 0
	}
	return t.Synchronization
}

// GetSystemId retrieves the value of the leaf SystemId from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// GetTimeout retrieves the value of the leaf Timeout from the Lacp_Interface_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetTimeout() E_Lacp_LacpTimeoutType {
	if t == nil || t.Timeout == 0 {
		return 0
	}
	return t.Timeout
}

// SetActivity sets the value of the leaf Activity in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetActivity(v E_Lacp_LacpActivityType) {
	t.Activity = v
}

// SetAggregatable sets the value of the leaf Aggregatable in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetAggregatable(v bool) {
	t.Aggregatable = &v
}

// SetCollecting sets the value of the leaf Collecting in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetCollecting(v bool) {
	t.Collecting = &v
}

// SetDistributing sets the value of the leaf Distributing in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetDistributing(v bool) {
	t.Distributing = &v
}

// SetInterface sets the value of the leaf Interface in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetInterface(v string) {
	t.Interface = &v
}

// SetLastChange sets the value of the leaf LastChange in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetLastChange(v uint64) {
	t.LastChange = &v
}

// SetOperKey sets the value of the leaf OperKey in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetOperKey(v uint16) {
	t.OperKey = &v
}

// SetPartnerId sets the value of the leaf PartnerId in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetPartnerId(v string) {
	t.PartnerId = &v
}

// SetPartnerKey sets the value of the leaf PartnerKey in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetPartnerKey(v uint16) {
	t.PartnerKey = &v
}

// SetPartnerPortNum sets the value of the leaf PartnerPortNum in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetPartnerPortNum(v uint16) {
	t.PartnerPortNum = &v
}

// SetPartnerPortPriority sets the value of the leaf PartnerPortPriority in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetPartnerPortPriority(v uint16) {
	t.PartnerPortPriority = &v
}

// SetPortNum sets the value of the leaf PortNum in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetPortNum(v uint16) {
	t.PortNum = &v
}

// SetPortPriority sets the value of the leaf PortPriority in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetPortPriority(v uint16) {
	t.PortPriority = &v
}

// SetSynchronization sets the value of the leaf Synchronization in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetSynchronization(v E_Lacp_LacpSynchronizationType) {
	t.Synchronization = v
}

// SetSystemId sets the value of the leaf SystemId in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetSystemId(v string) {
	t.SystemId = &v
}

// SetTimeout sets the value of the leaf Timeout in the Lacp_Interface_Member
// struct.
func (t *Lacp_Interface_Member) SetTimeout(v E_Lacp_LacpTimeoutType) {
	t.Timeout = v
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_Interface_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_Interface_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Lacp_Interface_Member struct, which is a YANG list entry.
func (t *Lacp_Interface_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Interface == nil {
		return nil, fmt.Errorf("nil value for key Interface")
	}

	return map[string]interface{}{
		"interface": *t.Interface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_Interface_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_Interface_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_Interface_Member) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_Interface_Member) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_Interface_Member.
func (*Lacp_Interface_Member) ΛBelongingModule() string {
	return "openconfig-lacp"
}
