/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// QosPath represents the /openconfig-qos/qos YANG schema element.
type QosPath struct {
	*ygnmi.NodePath
}

// QosPathAny represents the wildcard version of the /openconfig-qos/qos YANG schema element.
type QosPathAny struct {
	*ygnmi.NodePath
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPath) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	ps := &Qos_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPathAny) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	ps := &Qos_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
//
//	Name: string
func (n *QosPath) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePath {
	ps := &Qos_BufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
//
//	Name: string
func (n *QosPathAny) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePathAny {
	ps := &Qos_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// BufferAllocationProfileMap (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPath) BufferAllocationProfileMap() *Qos_BufferAllocationProfilePathMap {
	ps := &Qos_BufferAllocationProfilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BufferAllocationProfileMap (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "buffer-allocation-profiles/buffer-allocation-profile"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile"
func (n *QosPathAny) BufferAllocationProfileMap() *Qos_BufferAllocationProfilePathMapAny {
	ps := &Qos_BufferAllocationProfilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"buffer-allocation-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPath) ClassifierAny() *Qos_ClassifierPathAny {
	ps := &Qos_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPathAny) ClassifierAny() *Qos_ClassifierPathAny {
	ps := &Qos_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Classifier (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
//
//	Name: string
func (n *QosPath) Classifier(Name string) *Qos_ClassifierPath {
	ps := &Qos_ClassifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Classifier (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
//
//	Name: string
func (n *QosPathAny) Classifier(Name string) *Qos_ClassifierPathAny {
	ps := &Qos_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPath) ClassifierMap() *Qos_ClassifierPathMap {
	ps := &Qos_ClassifierPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): List of classifier elements
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/classifiers/classifier"
func (n *QosPathAny) ClassifierMap() *Qos_ClassifierPathMapAny {
	ps := &Qos_ClassifierPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPath) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	ps := &Qos_ForwardingGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPathAny) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	ps := &Qos_ForwardingGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
//
//	Name: string
func (n *QosPath) ForwardingGroup(Name string) *Qos_ForwardingGroupPath {
	ps := &Qos_ForwardingGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
//
//	Name: string
func (n *QosPathAny) ForwardingGroup(Name string) *Qos_ForwardingGroupPathAny {
	ps := &Qos_ForwardingGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ForwardingGroupMap (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPath) ForwardingGroupMap() *Qos_ForwardingGroupPathMap {
	ps := &Qos_ForwardingGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingGroupMap (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "forwarding-groups/forwarding-group"
//	Path from root:       "/qos/forwarding-groups/forwarding-group"
func (n *QosPathAny) ForwardingGroupMap() *Qos_ForwardingGroupPathMapAny {
	ps := &Qos_ForwardingGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPath) InterfaceAny() *Qos_InterfacePathAny {
	ps := &Qos_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPathAny) InterfaceAny() *Qos_InterfacePathAny {
	ps := &Qos_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
//
//	InterfaceId: string
func (n *QosPath) Interface(InterfaceId string) *Qos_InterfacePath {
	ps := &Qos_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
//
//	InterfaceId: string
func (n *QosPathAny) Interface(InterfaceId string) *Qos_InterfacePathAny {
	ps := &Qos_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPath) InterfaceMap() *Qos_InterfacePathMap {
	ps := &Qos_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/qos/interfaces/interface"
func (n *QosPathAny) InterfaceMap() *Qos_InterfacePathMapAny {
	ps := &Qos_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueAny (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPath) QueueAny() *Qos_QueuePathAny {
	ps := &Qos_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPathAny) QueueAny() *Qos_QueuePathAny {
	ps := &Qos_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
//
//	Name: string
func (n *QosPath) Queue(Name string) *Qos_QueuePath {
	ps := &Qos_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
//
//	Name: string
func (n *QosPathAny) Queue(Name string) *Qos_QueuePathAny {
	ps := &Qos_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPath) QueueMap() *Qos_QueuePathMap {
	ps := &Qos_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): List of defined queues
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/queues/queue"
func (n *QosPathAny) QueueMap() *Qos_QueuePathMapAny {
	ps := &Qos_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPath) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	ps := &Qos_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPathAny) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	ps := &Qos_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
//
//	Name: string
func (n *QosPath) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePath {
	ps := &Qos_QueueManagementProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
//
//	Name: string
func (n *QosPathAny) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePathAny {
	ps := &Qos_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueManagementProfileMap (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPath) QueueManagementProfileMap() *Qos_QueueManagementProfilePathMap {
	ps := &Qos_QueueManagementProfilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueManagementProfileMap (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queue-management-profiles/queue-management-profile"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile"
func (n *QosPathAny) QueueManagementProfileMap() *Qos_QueueManagementProfilePathMapAny {
	ps := &Qos_QueueManagementProfilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queue-management-profiles"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPath) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	ps := &Qos_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPathAny) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	ps := &Qos_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
//
//	Name: string
func (n *QosPath) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPath {
	ps := &Qos_SchedulerPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
//
//	Name: string
func (n *QosPathAny) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPathAny {
	ps := &Qos_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// SchedulerPolicyMap (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPath) SchedulerPolicyMap() *Qos_SchedulerPolicyPathMap {
	ps := &Qos_SchedulerPolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicyMap (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policies/scheduler-policy"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy"
func (n *QosPathAny) SchedulerPolicyMap() *Qos_SchedulerPolicyPathMapAny {
	ps := &Qos_SchedulerPolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *QosPath) State() ygnmi.SingletonQuery[*oc.Qos] {
	return ygnmi.NewSingletonQuery[*oc.Qos](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *QosPathAny) State() ygnmi.WildcardQuery[*oc.Qos] {
	return ygnmi.NewWildcardQuery[*oc.Qos](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *QosPath) Config() ygnmi.ConfigQuery[*oc.Qos] {
	return ygnmi.NewConfigQuery[*oc.Qos](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *QosPathAny) Config() ygnmi.WildcardQuery[*oc.Qos] {
	return ygnmi.NewWildcardQuery[*oc.Qos](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name YANG schema element.
type Qos_BufferAllocationProfile_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name YANG schema element.
type Qos_BufferAllocationProfile_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name"
func (n *Qos_BufferAllocationProfile_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_BufferAllocationProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/state/name"
func (n *Qos_BufferAllocationProfile_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name"
func (n *Qos_BufferAllocationProfile_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_BufferAllocationProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name"
func (n *Qos_BufferAllocationProfile_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfilePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePath struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfilePathMap represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathMap struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfilePathMapAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/*/name"
func (n *Qos_BufferAllocationProfilePath) Name() *Qos_BufferAllocationProfile_NamePath {
	ps := &Qos_BufferAllocationProfile_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/*/name"
func (n *Qos_BufferAllocationProfilePathAny) Name() *Qos_BufferAllocationProfile_NamePathAny {
	ps := &Qos_BufferAllocationProfile_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePath) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	ps := &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePathAny) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	ps := &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
//
//	Name: string
func (n *Qos_BufferAllocationProfilePath) Queue(Name string) *Qos_BufferAllocationProfile_QueuePath {
	ps := &Qos_BufferAllocationProfile_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
//
//	Name: string
func (n *Qos_BufferAllocationProfilePathAny) Queue(Name string) *Qos_BufferAllocationProfile_QueuePathAny {
	ps := &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePath) QueueMap() *Qos_BufferAllocationProfile_QueuePathMap {
	ps := &Qos_BufferAllocationProfile_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): Buffer allocation profile for a specific queue on the interface.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
func (n *Qos_BufferAllocationProfilePathAny) QueueMap() *Qos_BufferAllocationProfile_QueuePathMapAny {
	ps := &Qos_BufferAllocationProfile_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePath) State() ygnmi.SingletonQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewSingletonQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePath) Config() ygnmi.ConfigQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewConfigQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfilePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile, bool) {
			ret := gs.(*oc.Qos).BufferAllocationProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:buffer-allocation-profiles"},
			PostRelPath: []string{"openconfig-qos:buffer-allocation-profile"},
		},
	)
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBuffer
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dedicated-buffer-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DedicatedBufferTemporal
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath) State() ygnmi.SingletonQuery[int32] {
	return ygnmi.NewSingletonQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny) State() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath) Config() ygnmi.ConfigQuery[int32] {
	return ygnmi.NewConfigQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny) Config() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dynamic-limit-scaling-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).DynamicLimitScalingFactor
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name"
func (n *Qos_BufferAllocationProfile_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath) State() ygnmi.SingletonQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny) State() ygnmi.WildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath) Config() ygnmi.ConfigQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shared-buffer-limit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_SHARED_BUFFER_LIMIT_TYPE, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).SharedBufferLimitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-shared-buffer-limit-temporal"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).StaticSharedBufferLimitTemporal
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/state/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-shared-buffer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile_Queue).UseSharedBuffer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_BufferAllocationProfile_QueuePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfile_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfile_QueuePathMap represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_BufferAllocationProfile_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// This leaf is mutualy exclusive with dedicated-buffer-temporal leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// This leaf is mutualy exclusive with dedicated-buffer-temporal leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DedicatedBufferTemporal (leaf): This is the dedicated buffer that is carved for the queue. The the minimum
// number of bytes reserved for this queue is calculated by multiplying by interface speed
// queue is attached to and queues minimum, guarantaed transmit share (derived
// form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with dedicated-buffer leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_QueuePath) DedicatedBufferTemporal() *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DedicatedBufferTemporal (leaf): This is the dedicated buffer that is carved for the queue. The the minimum
// number of bytes reserved for this queue is calculated by multiplying by interface speed
// queue is attached to and queues minimum, guarantaed transmit share (derived
// form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with dedicated-buffer leaf
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dedicated-buffer-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DedicatedBufferTemporal() *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dedicated-buffer-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePath) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath {
	ps := &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dynamic-limit-scaling-factor"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/name"
func (n *Qos_BufferAllocationProfile_QueuePath) Name() *Qos_BufferAllocationProfile_Queue_NamePath {
	ps := &Qos_BufferAllocationProfile_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/name"
func (n *Qos_BufferAllocationProfile_QueuePathAny) Name() *Qos_BufferAllocationProfile_Queue_NamePathAny {
	ps := &Qos_BufferAllocationProfile_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePath) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath {
	ps := &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/shared-buffer-limit-type"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePathAny) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny {
	ps := &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// This leaf is mutualy exclusive with static-shared-buffer-limit-temporal leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePath) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// This leaf is mutualy exclusive with static-shared-buffer-limit-temporal leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePathAny) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimitTemporal (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit-temporal is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// The the number of bytes is calculated by multiplying static-shared-buffer-limit-temporal
// by interface speed the queue is attached to and queues minimum, guarantaed transmit share
// (derived form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with static-shared-buffer-limit leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_QueuePath) StaticSharedBufferLimitTemporal() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticSharedBufferLimitTemporal (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit-temporal is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// The the number of bytes is calculated by multiplying static-shared-buffer-limit-temporal
// by interface speed the queue is attached to and queues minimum, guarantaed transmit share
// (derived form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with static-shared-buffer-limit leaf.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/static-shared-buffer-limit-temporal"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_QueuePathAny) StaticSharedBufferLimitTemporal() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-shared-buffer-limit-temporal"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath {
	ps := &Qos_BufferAllocationProfile_Queue_UseSharedBufferPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/use-shared-buffer"
//	Path from root:       "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/*/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny {
	ps := &Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_BufferAllocationProfile_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_BufferAllocationProfile_Queue](
		"Qos_BufferAllocationProfile",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_BufferAllocationProfile_Queue, bool) {
			ret := gs.(*oc.Qos_BufferAllocationProfile).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_BufferAllocationProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_Classifier_NamePath represents the /openconfig-qos/qos/classifiers/classifier/state/name YANG schema element.
type Qos_Classifier_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/state/name YANG schema element.
type Qos_Classifier_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/classifiers/classifier/state/name"
func (n *Qos_Classifier_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/classifiers/classifier/state/name"
func (n *Qos_Classifier_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/classifiers/classifier/config/name"
func (n *Qos_Classifier_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/classifiers/classifier/config/name"
func (n *Qos_Classifier_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_TypePath represents the /openconfig-qos/qos/classifiers/classifier/state/type YANG schema element.
type Qos_Classifier_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/state/type YANG schema element.
type Qos_Classifier_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/state/type"
func (n *Qos_Classifier_TypePath) State() ygnmi.SingletonQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/state/type"
func (n *Qos_Classifier_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/config/type"
func (n *Qos_Classifier_TypePath) Config() ygnmi.ConfigQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewConfigQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/config/type"
func (n *Qos_Classifier_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Qos_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Qos_Classifier_Type](
		"Qos_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Qos_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ClassifierPath represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPath struct {
	*ygnmi.NodePath
}

// Qos_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathAny struct {
	*ygnmi.NodePath
}

// Qos_ClassifierPathMap represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathMap struct {
	*ygnmi.NodePath
}

// Qos_ClassifierPathMapAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): User-assigned name of the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/classifiers/classifier/*/name"
func (n *Qos_ClassifierPath) Name() *Qos_Classifier_NamePath {
	ps := &Qos_Classifier_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): User-assigned name of the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/classifiers/classifier/*/name"
func (n *Qos_ClassifierPathAny) Name() *Qos_Classifier_NamePathAny {
	ps := &Qos_Classifier_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TermAny (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPath) TermAny() *Qos_Classifier_TermPathAny {
	ps := &Qos_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TermAny (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPathAny) TermAny() *Qos_Classifier_TermPathAny {
	ps := &Qos_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_ClassifierPath) Term(Id string) *Qos_Classifier_TermPath {
	ps := &Qos_Classifier_TermPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_ClassifierPathAny) Term(Id string) *Qos_Classifier_TermPathAny {
	ps := &Qos_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPath) TermMap() *Qos_Classifier_TermPathMap {
	ps := &Qos_Classifier_TermPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms used in the classifier
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/classifiers/classifier/terms/term"
func (n *Qos_ClassifierPathAny) TermMap() *Qos_Classifier_TermPathMapAny {
	ps := &Qos_Classifier_TermPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of classifier.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/*/type"
func (n *Qos_ClassifierPath) Type() *Qos_Classifier_TypePath {
	ps := &Qos_Classifier_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of classifier.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/*/type"
func (n *Qos_ClassifierPathAny) Type() *Qos_Classifier_TypePathAny {
	ps := &Qos_Classifier_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ClassifierPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier, bool) {
			ret := gs.(*oc.Qos).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Qos_Classifier_Term_IdPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Classifier_Term_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Classifier_Term_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/state/id"
func (n *Qos_Classifier_Term_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/state/id"
func (n *Qos_Classifier_Term_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/config/id"
func (n *Qos_Classifier_Term_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/config/id"
func (n *Qos_Classifier_Term_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_TermPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathAny struct {
	*ygnmi.NodePath
}

// Qos_Classifier_TermPathMap represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathMap struct {
	*ygnmi.NodePath
}

// Qos_Classifier_TermPathMapAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathMapAny struct {
	*ygnmi.NodePath
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "actions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPath) Actions() *Qos_Classifier_Term_ActionsPath {
	ps := &Qos_Classifier_Term_ActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "actions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPathAny) Actions() *Qos_Classifier_Term_ActionsPathAny {
	ps := &Qos_Classifier_Term_ActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conditions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPath) Conditions() *Qos_Classifier_Term_ConditionsPath {
	ps := &Qos_Classifier_Term_ConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conditions"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPathAny) Conditions() *Qos_Classifier_Term_ConditionsPathAny {
	ps := &Qos_Classifier_Term_ConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Id (leaf): Identifier for the match term
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/*/id"
func (n *Qos_Classifier_TermPath) Id() *Qos_Classifier_Term_IdPath {
	ps := &Qos_Classifier_Term_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Identifier for the match term
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/classifiers/classifier/terms/term/*/id"
func (n *Qos_Classifier_TermPathAny) Id() *Qos_Classifier_Term_IdPathAny {
	ps := &Qos_Classifier_Term_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term](
		"Qos_Classifier_Term",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_TermPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Classifier_Term](
		"Qos_Classifier",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Qos_Classifier_Term_Actions_TargetGroupPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/state/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_TargetGroupPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/state/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/state/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/state/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/config/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/config/target-group"
func (n *Qos_Classifier_Term_Actions_TargetGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions).TargetGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_ActionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_ActionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPathAny struct {
	*ygnmi.NodePath
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "remark"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPath) Remark() *Qos_Classifier_Term_Actions_RemarkPath {
	ps := &Qos_Classifier_Term_Actions_RemarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "remark"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPathAny) Remark() *Qos_Classifier_Term_Actions_RemarkPathAny {
	ps := &Qos_Classifier_Term_Actions_RemarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/*/target-group"
func (n *Qos_Classifier_Term_ActionsPath) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPath {
	ps := &Qos_Classifier_Term_Actions_TargetGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/target-group"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/*/target-group"
func (n *Qos_Classifier_Term_ActionsPathAny) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPathAny {
	ps := &Qos_Classifier_Term_Actions_TargetGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ActionsPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions](
		"Qos_Classifier_Term_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"
func (n *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"
func (n *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Actions_Remark).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Actions_Remark) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Actions_RemarkPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Actions_RemarkPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPathAny struct {
	*ygnmi.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPath {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPath {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny {
	ps := &Qos_Classifier_Term_Actions_Remark_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath {
	ps := &Qos_Classifier_Term_Actions_Remark_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/classifiers/classifier/terms/term/actions/remark/*/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny {
	ps := &Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Actions_Remark](
		"Qos_Classifier_Term_Actions_Remark",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_ConditionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_ConditionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPathAny struct {
	*ygnmi.NodePath
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "ipv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "l2"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPath) L2() *Qos_Classifier_Term_Conditions_L2Path {
	ps := &Qos_Classifier_Term_Conditions_L2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "l2"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPathAny) L2() *Qos_Classifier_Term_Conditions_L2PathAny {
	ps := &Qos_Classifier_Term_Conditions_L2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): MPLS header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "mpls"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPath) Mpls() *Qos_Classifier_Term_Conditions_MplsPath {
	ps := &Qos_Classifier_Term_Conditions_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): MPLS header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "mpls"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPathAny) Mpls() *Qos_Classifier_Term_Conditions_MplsPathAny {
	ps := &Qos_Classifier_Term_Conditions_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "transport"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPath) Transport() *Qos_Classifier_Term_Conditions_TransportPath {
	ps := &Qos_Classifier_Term_Conditions_TransportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "transport"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPathAny) Transport() *Qos_Classifier_Term_Conditions_TransportPathAny {
	ps := &Qos_Classifier_Term_Conditions_TransportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_ConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions](
		"Qos_Classifier_Term_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_LengthPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
