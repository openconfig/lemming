/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_Interface_Input_VoqInterface_Queue_NamePath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"
func (n *Qos_Interface_Input_VoqInterface_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_VoqInterface_QueuePath represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterface_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterface_QueuePathMap represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_VoqInterface_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) AvgQueueLen() *Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) AvgQueueLen() *Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_AvgQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) DroppedOctets() *Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) DroppedOctets() *Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) DroppedPkts() *Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) DroppedPkts() *Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_DroppedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnMarkedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnMarkedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnMarkedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnMarkedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnMarkedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnSelectedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnSelectedOctets() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) EcnSelectedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) EcnSelectedPkts() *Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_EcnSelectedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) MaxQueueLen() *Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) MaxQueueLen() *Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_MaxQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/*/name"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) Name() *Qos_Interface_Input_VoqInterface_Queue_NamePath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/*/name"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) Name() *Qos_Interface_Input_VoqInterface_Queue_NamePathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) TransmitOctets() *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) TransmitOctets() *Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePath) TransmitPkts() *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) TransmitPkts() *Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny {
	ps := &Qos_Interface_Input_VoqInterface_Queue_TransmitPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_VoqInterface_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_VoqInterface_Queue](
		"Qos_Interface_Input_VoqInterface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_VoqInterface_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Input_VoqInterface).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_VoqInterface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_Interface_InterfaceRef_InterfacePath represents the /openconfig-qos/qos/interfaces/interface/interface-ref/state/interface YANG schema element.
type Qos_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/interface-ref/state/interface YANG schema element.
type Qos_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/interface"
func (n *Qos_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-qos/qos/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Qos_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Qos_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/state/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/config/subinterface"
func (n *Qos_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_InterfaceRefPath represents the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/interface"
func (n *Qos_Interface_InterfaceRefPath) Interface() *Qos_Interface_InterfaceRef_InterfacePath {
	ps := &Qos_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/interface"
func (n *Qos_Interface_InterfaceRefPathAny) Interface() *Qos_Interface_InterfaceRef_InterfacePathAny {
	ps := &Qos_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/subinterface"
func (n *Qos_Interface_InterfaceRefPath) Subinterface() *Qos_Interface_InterfaceRef_SubinterfacePath {
	ps := &Qos_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/qos/interfaces/interface/interface-ref/*/subinterface"
func (n *Qos_Interface_InterfaceRefPathAny) Subinterface() *Qos_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &Qos_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_InterfaceRef](
		"Qos_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_BufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_BufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_BufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/buffer-allocation-profile"
func (n *Qos_Interface_Output_BufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_MulticastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_MulticastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_MulticastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_MulticastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_MulticastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_UnicastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_UnicastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_UnicastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Output_UnicastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Output_UnicastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_OutputPath represents the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_OutputPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_OutputPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_OutputPathAny struct {
	*ygnmi.NodePath
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/buffer-allocation-profile"
func (n *Qos_Interface_OutputPath) BufferAllocationProfile() *Qos_Interface_Output_BufferAllocationProfilePath {
	ps := &Qos_Interface_Output_BufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/buffer-allocation-profile"
func (n *Qos_Interface_OutputPathAny) BufferAllocationProfile() *Qos_Interface_Output_BufferAllocationProfilePathAny {
	ps := &Qos_Interface_Output_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPath) ClassifierAny() *Qos_Interface_Output_ClassifierPathAny {
	ps := &Qos_Interface_Output_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPathAny) ClassifierAny() *Qos_Interface_Output_ClassifierPathAny {
	ps := &Qos_Interface_Output_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_OutputPath) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Output_ClassifierPath {
	ps := &Qos_Interface_Output_ClassifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_OutputPathAny) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Output_ClassifierPathAny {
	ps := &Qos_Interface_Output_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPath) ClassifierMap() *Qos_Interface_Output_ClassifierPathMap {
	ps := &Qos_Interface_Output_ClassifierPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier"
func (n *Qos_Interface_OutputPathAny) ClassifierMap() *Qos_Interface_Output_ClassifierPathMapAny {
	ps := &Qos_Interface_Output_ClassifierPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPath) MulticastBufferAllocationProfile() *Qos_Interface_Output_MulticastBufferAllocationProfilePath {
	ps := &Qos_Interface_Output_MulticastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPathAny) MulticastBufferAllocationProfile() *Qos_Interface_Output_MulticastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Output_MulticastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPath) QueueAny() *Qos_Interface_Output_QueuePathAny {
	ps := &Qos_Interface_Output_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPathAny) QueueAny() *Qos_Interface_Output_QueuePathAny {
	ps := &Qos_Interface_Output_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
//
//	Name: string
func (n *Qos_Interface_OutputPath) Queue(Name string) *Qos_Interface_Output_QueuePath {
	ps := &Qos_Interface_Output_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
//
//	Name: string
func (n *Qos_Interface_OutputPathAny) Queue(Name string) *Qos_Interface_Output_QueuePathAny {
	ps := &Qos_Interface_Output_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPath) QueueMap() *Qos_Interface_Output_QueuePathMap {
	ps := &Qos_Interface_Output_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue"
func (n *Qos_Interface_OutputPathAny) QueueMap() *Qos_Interface_Output_QueuePathMapAny {
	ps := &Qos_Interface_Output_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy"
func (n *Qos_Interface_OutputPath) SchedulerPolicy() *Qos_Interface_Output_SchedulerPolicyPath {
	ps := &Qos_Interface_Output_SchedulerPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy"
func (n *Qos_Interface_OutputPathAny) SchedulerPolicy() *Qos_Interface_Output_SchedulerPolicyPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPath) UnicastBufferAllocationProfile() *Qos_Interface_Output_UnicastBufferAllocationProfilePath {
	ps := &Qos_Interface_Output_UnicastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/output/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_OutputPathAny) UnicastBufferAllocationProfile() *Qos_Interface_Output_UnicastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Output_UnicastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_OutputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Output_Classifier_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Output_Classifier_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/name"
func (n *Qos_Interface_Output_Classifier_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/name"
func (n *Qos_Interface_Output_Classifier_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/name"
func (n *Qos_Interface_Output_Classifier_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/name"
func (n *Qos_Interface_Output_Classifier_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_TypePath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Output_Classifier_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Output_Classifier_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/type"
func (n *Qos_Interface_Output_Classifier_TypePath) State() ygnmi.SingletonQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/state/type"
func (n *Qos_Interface_Output_Classifier_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/type"
func (n *Qos_Interface_Output_Classifier_TypePath) Config() ygnmi.ConfigQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewConfigQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/config/type"
func (n *Qos_Interface_Output_Classifier_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_ClassifierPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_ClassifierPathMap represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_ClassifierPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_ClassifierPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/name"
func (n *Qos_Interface_Output_ClassifierPath) Name() *Qos_Interface_Output_Classifier_NamePath {
	ps := &Qos_Interface_Output_Classifier_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/name"
func (n *Qos_Interface_Output_ClassifierPathAny) Name() *Qos_Interface_Output_Classifier_NamePathAny {
	ps := &Qos_Interface_Output_Classifier_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPath) TermAny() *Qos_Interface_Output_Classifier_TermPathAny {
	ps := &Qos_Interface_Output_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPathAny) TermAny() *Qos_Interface_Output_Classifier_TermPathAny {
	ps := &Qos_Interface_Output_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Output_ClassifierPath) Term(Id string) *Qos_Interface_Output_Classifier_TermPath {
	ps := &Qos_Interface_Output_Classifier_TermPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Output_ClassifierPathAny) Term(Id string) *Qos_Interface_Output_Classifier_TermPathAny {
	ps := &Qos_Interface_Output_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPath) TermMap() *Qos_Interface_Output_Classifier_TermPathMap {
	ps := &Qos_Interface_Output_Classifier_TermPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term"
func (n *Qos_Interface_Output_ClassifierPathAny) TermMap() *Qos_Interface_Output_Classifier_TermPathMapAny {
	ps := &Qos_Interface_Output_Classifier_TermPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/type"
func (n *Qos_Interface_Output_ClassifierPath) Type() *Qos_Interface_Output_Classifier_TypePath {
	ps := &Qos_Interface_Output_Classifier_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/*/type"
func (n *Qos_Interface_Output_ClassifierPathAny) Type() *Qos_Interface_Output_Classifier_TypePathAny {
	ps := &Qos_Interface_Output_Classifier_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMap) State() ygnmi.SingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewSingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMap) Config() ygnmi.ConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_ClassifierPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Output_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Qos_Interface_Output_Classifier_Term_IdPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Output_Classifier_Term_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Output_Classifier_Term_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Output_Classifier_Term_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Output_Classifier_Term_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Output_Classifier_Term_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Output_Classifier_Term_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_Term_MatchedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_Term_MatchedPacketsPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Classifier_TermPath represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_Classifier_TermPathMap represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_Classifier_TermPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_TermPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Output_Classifier_TermPath) Id() *Qos_Interface_Output_Classifier_Term_IdPath {
	ps := &Qos_Interface_Output_Classifier_Term_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Output_Classifier_TermPathAny) Id() *Qos_Interface_Output_Classifier_Term_IdPathAny {
	ps := &Qos_Interface_Output_Classifier_Term_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_TermPath) MatchedOctets() *Qos_Interface_Output_Classifier_Term_MatchedOctetsPath {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Output_Classifier_TermPathAny) MatchedOctets() *Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_TermPath) MatchedPackets() *Qos_Interface_Output_Classifier_Term_MatchedPacketsPath {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/output/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Output_Classifier_TermPathAny) MatchedPackets() *Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny {
	ps := &Qos_Interface_Output_Classifier_Term_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_Classifier_TermPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Output_Classifier_Term](
		"Qos_Interface_Output_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Qos_Interface_Output_Queue_AvgQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Output_Queue_AvgQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_AvgQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Output_Queue_AvgQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_Queue_AvgQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_Queue_AvgQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_DroppedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Output_Queue_DroppedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_DroppedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Output_Queue_DroppedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_Queue_DroppedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_Queue_DroppedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_DroppedPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Output_Queue_DroppedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_DroppedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/dropped-pkts YANG schema element.
type Qos_Interface_Output_Queue_DroppedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_Queue_DroppedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_Queue_DroppedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).DroppedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnMarkedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_Queue_EcnMarkedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnMarkedPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnMarkedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnMarkedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_Queue_EcnMarkedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_Queue_EcnMarkedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnMarkedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnSelectedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_Queue_EcnSelectedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_EcnSelectedPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_EcnSelectedPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts YANG schema element.
type Qos_Interface_Output_Queue_EcnSelectedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_Queue_EcnSelectedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_Queue_EcnSelectedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).EcnSelectedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_MaxQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Output_Queue_MaxQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_MaxQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/max-queue-len YANG schema element.
type Qos_Interface_Output_Queue_MaxQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_Queue_MaxQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_Queue_MaxQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).MaxQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/name YANG schema element.
type Qos_Interface_Output_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/name YANG schema element.
type Qos_Interface_Output_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/name"
func (n *Qos_Interface_Output_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/name"
func (n *Qos_Interface_Output_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/name"
func (n *Qos_Interface_Output_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/name"
func (n *Qos_Interface_Output_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_QueueManagementProfilePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Output_Queue_QueueManagementProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_QueueManagementProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/queue-management-profile YANG schema element.
type Qos_Interface_Output_Queue_QueueManagementProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/config/queue-management-profile"
func (n *Qos_Interface_Output_Queue_QueueManagementProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-management-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).QueueManagementProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_TransmitOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Output_Queue_TransmitOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_TransmitOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-octets YANG schema element.
type Qos_Interface_Output_Queue_TransmitOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_Queue_TransmitOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_Queue_TransmitOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_Queue_TransmitPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Output_Queue_TransmitPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_Queue_TransmitPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue/state/transmit-pkts YANG schema element.
type Qos_Interface_Output_Queue_TransmitPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_Queue_TransmitPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_Queue_TransmitPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_Queue).TransmitPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_QueuePath represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_QueuePathMap represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_QueuePath) AvgQueueLen() *Qos_Interface_Output_Queue_AvgQueueLenPath {
	ps := &Qos_Interface_Output_Queue_AvgQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvgQueueLen (leaf): Average observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Output_QueuePathAny) AvgQueueLen() *Qos_Interface_Output_Queue_AvgQueueLenPathAny {
	ps := &Qos_Interface_Output_Queue_AvgQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_QueuePath) DroppedOctets() *Qos_Interface_Output_Queue_DroppedOctetsPath {
	ps := &Qos_Interface_Output_Queue_DroppedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedOctets (leaf): Number of octets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Output_QueuePathAny) DroppedOctets() *Qos_Interface_Output_Queue_DroppedOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_DroppedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_QueuePath) DroppedPkts() *Qos_Interface_Output_Queue_DroppedPktsPath {
	ps := &Qos_Interface_Output_Queue_DroppedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedPkts (leaf): Number of packets dropped by the queue due to overrun, that is tail-drop
// or AMQ (RED, WRED, etc) induced drops as indicated by the attached
// queue-management-profile
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"
func (n *Qos_Interface_Output_QueuePathAny) DroppedPkts() *Qos_Interface_Output_Queue_DroppedPktsPathAny {
	ps := &Qos_Interface_Output_Queue_DroppedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_QueuePath) EcnMarkedOctets() *Qos_Interface_Output_Queue_EcnMarkedOctetsPath {
	ps := &Qos_Interface_Output_Queue_EcnMarkedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedOctets (leaf): Number of octets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-octets"
func (n *Qos_Interface_Output_QueuePathAny) EcnMarkedOctets() *Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnMarkedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_QueuePath) EcnMarkedPkts() *Qos_Interface_Output_Queue_EcnMarkedPktsPath {
	ps := &Qos_Interface_Output_Queue_EcnMarkedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnMarkedPkts (leaf): number of packets for which ECN codepoint has been changed from ECT to CE
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-marked-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-marked-pkts"
func (n *Qos_Interface_Output_QueuePathAny) EcnMarkedPkts() *Qos_Interface_Output_Queue_EcnMarkedPktsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnMarkedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-marked-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_QueuePath) EcnSelectedOctets() *Qos_Interface_Output_Queue_EcnSelectedOctetsPath {
	ps := &Qos_Interface_Output_Queue_EcnSelectedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedOctets (leaf): Number of octets of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all octets enqueued while queue utilization was greater then max-threshold
// - octets enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Octets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-octets"
func (n *Qos_Interface_Output_QueuePathAny) EcnSelectedOctets() *Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnSelectedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_QueuePath) EcnSelectedPkts() *Qos_Interface_Output_Queue_EcnSelectedPktsPath {
	ps := &Qos_Interface_Output_Queue_EcnSelectedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcnSelectedPkts (leaf): Number of packets selected by AQM
//
// For RED/WRED AQM this counter counts:
// - all packets enqueued while queue utilization was greater then max-threshold
// - packs enqueued while queue utilization was between min-threshold and max-threshold, with probability derived from RED/WRED slope
//
// Packets are counted regardless of its ECN codepoint
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ecn-selected-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/ecn-selected-pkts"
func (n *Qos_Interface_Output_QueuePathAny) EcnSelectedPkts() *Qos_Interface_Output_Queue_EcnSelectedPktsPathAny {
	ps := &Qos_Interface_Output_Queue_EcnSelectedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ecn-selected-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_QueuePath) MaxQueueLen() *Qos_Interface_Output_Queue_MaxQueueLenPath {
	ps := &Qos_Interface_Output_Queue_MaxQueueLenPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueLen (leaf): Maximum observed queue length
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-len"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"
func (n *Qos_Interface_Output_QueuePathAny) MaxQueueLen() *Qos_Interface_Output_Queue_MaxQueueLenPathAny {
	ps := &Qos_Interface_Output_Queue_MaxQueueLenPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-queue-len"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/name"
func (n *Qos_Interface_Output_QueuePath) Name() *Qos_Interface_Output_Queue_NamePath {
	ps := &Qos_Interface_Output_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the queue associated with this interface.
// A queue may be explicitly configured, or implicitly created
// by the system based on default queues that are instantiated
// by a hardware component, or are assumed to be default on
// the system.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/name"
func (n *Qos_Interface_Output_QueuePathAny) Name() *Qos_Interface_Output_Queue_NamePathAny {
	ps := &Qos_Interface_Output_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/queue-management-profile"
func (n *Qos_Interface_Output_QueuePath) QueueManagementProfile() *Qos_Interface_Output_Queue_QueueManagementProfilePath {
	ps := &Qos_Interface_Output_Queue_QueueManagementProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueManagementProfile (leaf): The queue management profile that is to be used for the queue
// on the interface.
//
// For example, the system may use a profile which specifies that
// WRED curves are used for setting an ECN mark in the IP header
// instead of dropping a packet in order to signal impending
// congestion and for determining when there is sufficient
// congestion to tail drop packets.
//
// A single profile is available per queue - which applies to all packets
// that are enqueued to the specified queue, whether they are unicast or
// multicast.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-management-profile"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/*/queue-management-profile"
func (n *Qos_Interface_Output_QueuePathAny) QueueManagementProfile() *Qos_Interface_Output_Queue_QueueManagementProfilePathAny {
	ps := &Qos_Interface_Output_Queue_QueueManagementProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-management-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_QueuePath) TransmitOctets() *Qos_Interface_Output_Queue_TransmitOctetsPath {
	ps := &Qos_Interface_Output_Queue_TransmitOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitOctets (leaf): Number of octets trasmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-octets"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"
func (n *Qos_Interface_Output_QueuePathAny) TransmitOctets() *Qos_Interface_Output_Queue_TransmitOctetsPathAny {
	ps := &Qos_Interface_Output_Queue_TransmitOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_QueuePath) TransmitPkts() *Qos_Interface_Output_Queue_TransmitPktsPath {
	ps := &Qos_Interface_Output_Queue_TransmitPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitPkts (leaf): Number of packets transmitted by this queue
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/transmit-pkts"
//	Path from root:       "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"
func (n *Qos_Interface_Output_QueuePathAny) TransmitPkts() *Qos_Interface_Output_Queue_TransmitPktsPathAny {
	ps := &Qos_Interface_Output_Queue_TransmitPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Output_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Output_Queue](
		"Qos_Interface_Output",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Output_Queue, bool) {
			ret := gs.(*oc.Qos_Interface_Output).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}
