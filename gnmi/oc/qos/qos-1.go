/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Dscp() *Qos_Classifier_Term_Conditions_Ipv4_DscpPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Dscp() *Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) DscpSet() *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) DscpSet() *Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) HopLimit() *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) HopLimit() *Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Icmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv4"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Icmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Length() *Qos_Classifier_Term_Conditions_Ipv4_LengthPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Length() *Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Protocol() *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Protocol() *Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4](
		"Qos_Classifier_Term_Conditions_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) Code() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) Code() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) Type() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) Type() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv4_Icmpv4](
		"Qos_Classifier_Term_Conditions_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_LengthPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationAddress() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DestinationFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/destination-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DestinationFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Dscp() *Qos_Classifier_Term_Conditions_Ipv6_DscpPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Dscp() *Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) DscpSet() *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/dscp-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) DscpSet() *Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) HopLimit() *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/hop-limit"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) HopLimit() *Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Icmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "icmpv6"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Icmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Length() *Qos_Classifier_Term_Conditions_Ipv6_LengthPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/length"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/length"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Length() *Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Protocol() *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/protocol"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/protocol"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Protocol() *Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceAddress() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-address-prefix-set"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceAddressPrefixSet() *Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) SourceFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/*/source-flow-label"
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) SourceFlowLabel() *Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6](
		"Qos_Classifier_Term_Conditions_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/state/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/config/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) Code() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/code"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/code"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) Code() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) Type() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6/*/type"
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) Type() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny {
	ps := &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Ipv6_Icmpv6](
		"Qos_Classifier_Term_Conditions_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_EthertypePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype YANG schema element.
type Qos_Classifier_Term_Conditions_L2_EthertypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_EthertypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype YANG schema element.
type Qos_Classifier_Term_Conditions_L2_EthertypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2_EthertypePathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_SourceMacPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_SourceMacPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask YANG schema element.
type Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_L2Path represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2Path struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_L2PathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2PathAny struct {
	*ygnmi.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2Path) DestinationMac() *Qos_Classifier_Term_Conditions_L2_DestinationMacPath {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) DestinationMac() *Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2Path) DestinationMacMask() *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/destination-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) DestinationMacMask() *Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_DestinationMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2Path) Ethertype() *Qos_Classifier_Term_Conditions_L2_EthertypePath {
	ps := &Qos_Classifier_Term_Conditions_L2_EthertypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/ethertype"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) Ethertype() *Qos_Classifier_Term_Conditions_L2_EthertypePathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_EthertypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2Path) SourceMac() *Qos_Classifier_Term_Conditions_L2_SourceMacPath {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) SourceMac() *Qos_Classifier_Term_Conditions_L2_SourceMacPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2Path) SourceMacMask() *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/l2/*/source-mac-mask"
func (n *Qos_Classifier_Term_Conditions_L2PathAny) SourceMacMask() *Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny {
	ps := &Qos_Classifier_Term_Conditions_L2_SourceMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2Path) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2PathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2Path) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_L2PathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_L2](
		"Qos_Classifier_Term_Conditions_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/end-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/start-label-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"
func (n *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Mpls_TtlValuePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TtlValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/state/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/config/ttl-value"
func (n *Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
