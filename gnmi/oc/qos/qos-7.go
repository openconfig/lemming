/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "child-scheduler"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).ChildScheduler
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-fwd-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputFwdGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath) State() ygnmi.SingletonQuery[oc.E_Output_OutputType] {
	return ygnmi.NewSingletonQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny) State() ygnmi.WildcardQuery[oc.E_Output_OutputType] {
	return ygnmi.NewWildcardQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath) Config() ygnmi.ConfigQuery[oc.E_Output_OutputType] {
	return ygnmi.NewConfigQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Output_OutputType] {
	return ygnmi.NewWildcardQuery[oc.E_Output_OutputType](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Output_OutputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Output).OutputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Output) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OutputPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OutputPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OutputPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OutputPathAny struct {
	*ygnmi.NodePath
}

// ChildScheduler (leaf): When the scheduler output type is a child scheduler,
// this leaf provides a reference to the downstream
// scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) ChildScheduler() *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "child-scheduler"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ChildScheduler (leaf): When the scheduler output type is a child scheduler,
// this leaf provides a reference to the downstream
// scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/child-scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/child-scheduler"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) ChildScheduler() *Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_ChildSchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "child-scheduler"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputFwdGroup (leaf): When the scheduler output type is a forwarding group,
// this leaf provides a reference to the forwarding group.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) OutputFwdGroup() *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-fwd-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputFwdGroup (leaf): When the scheduler output type is a forwarding group,
// this leaf provides a reference to the forwarding group.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-fwd-group"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-fwd-group"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) OutputFwdGroup() *Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputFwdGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-fwd-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputType (leaf): Describes the type of output sink for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) OutputType() *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputType (leaf): Describes the type of output sink for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/*/output-type"
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) OutputType() *Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Output_OutputTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OutputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Output](
		"Qos_SchedulerPolicy_Scheduler_Output",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "be"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Be
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).Pir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor).PirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny struct {
	*ygnmi.NodePath
}

// Bc (leaf): Committed burst size for the dual-rate token bucket
// policer.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Bc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bc (leaf): Committed burst size for the dual-rate token bucket
// policer.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Bc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Be (leaf): Excess burst size for the dual-rate token bucket policer.
// This value represents the depth of the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Be() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "be"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Be (leaf): Excess burst size for the dual-rate token bucket policer.
// This value represents the depth of the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/be"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/be"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Be() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_BePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "be"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the dual-rate token
// bucket policer.  This value represents the rate at which
// tokens are added to the primary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Cir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the dual-rate token
// bucket policer.  This value represents the rate at which
// tokens are added to the primary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Cir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the primary bucket. It is expressed as a
// percentage of the total bandwidth available within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) CirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the primary bucket. It is expressed as a
// percentage of the total bandwidth available within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) CirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the primary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the primary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_CirPctRemainingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformAction (container): Action to be applied to the packets that are scheduled
// within the CIR of the policer. All packets that receive
// a token from this bucket have all actions specified
// applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConformAction (container): Action to be applied to the packets that are scheduled
// within the CIR of the policer. All packets that receive
// a token from this bucket have all actions specified
// applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to the packets that are scheduled
// within the PIR of the policer. Packets that receive a
// token from within the PIR allocation have all the
// specified actions applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to the packets that are scheduled
// within the PIR of the policer. Packets that receive a
// token from within the PIR allocation have all the
// specified actions applied to them
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Pir (leaf): Peak information rate for the dual-rate token bucket
// policer.  This value represents the rate at which tokens
// are added to the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Pir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Pir (leaf): Peak information rate for the dual-rate token bucket
// policer.  This value represents the rate at which tokens
// are added to the secondary bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Pir() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPct (leaf): Peak information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the secondary bucket. The value is expressed
// as a percentage of the total bandwidth available in the
// context in which the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) PirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPct (leaf): Peak information rate for the dual-rate token bucket
// policer. This value represents the rate at which tokens
// are added to the secondary bucket. The value is expressed
// as a percentage of the total bandwidth available in the
// context in which the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) PirPct() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPctRemaining (leaf): Peak information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the secondary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) PirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PirPctRemaining (leaf): Peak information rate for the dual-rate token
// bucket policer. This value represents the rate at which
// tokens are added to the secondary bucket. It is expressed
// as a percentage of the remaining bandwidth within the
// context the scheduler is instantiated.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/pir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/*/pir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) PirPctRemaining() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_PirPctRemainingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolateAction (container): Action to be applied to the packets that are scheduled
// above the PIR of the policer. Packets that do not receive
// a token from either bucket have all specified actions
// applied to them.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "violate-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) ViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"violate-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ViolateAction (container): Action to be applied to the packets that are scheduled
// above the PIR of the policer. Packets that do not receive
// a token from either bucket have all specified actions
// applied to them.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "violate-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) ViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"violate-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny struct {
	*ygnmi.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction](
		"Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
