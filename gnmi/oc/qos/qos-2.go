/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_Classifier_Term_Conditions_MplsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_MplsPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_MplsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_MplsPathAny struct {
	*ygnmi.NodePath
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/end-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) EndLabelValue() *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/end-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) EndLabelValue() *Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_EndLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/start-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) StartLabelValue() *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/start-label-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) StartLabelValue() *Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_StartLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/traffic-class"
func (n *Qos_Classifier_Term_Conditions_MplsPath) TrafficClass() *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TrafficClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/traffic-class"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) TrafficClass() *Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TrafficClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/ttl-value"
func (n *Qos_Classifier_Term_Conditions_MplsPath) TtlValue() *Qos_Classifier_Term_Conditions_Mpls_TtlValuePath {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TtlValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/mpls/*/ttl-value"
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) TtlValue() *Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny {
	ps := &Qos_Classifier_Term_Conditions_Mpls_TtlValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Mpls](
		"Qos_Classifier_Term_Conditions_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath) State() ygnmi.SingletonQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny) State() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath) Config() ygnmi.ConfigQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewConfigQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_DetailModePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DetailModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_DetailModePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_DetailModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePath) State() ygnmi.SingletonQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/detail-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_DetailModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath) State() ygnmi.SingletonQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewSingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath) Config() ygnmi.ConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny) Config() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPath) State() ygnmi.SingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewSingletonQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny) State() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPath) Config() ygnmi.ConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewConfigQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny) Config() ygnmi.WildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set YANG schema element.
type Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/state/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port-set"
func (n *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Classifier_Term_Conditions_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Classifier_Term_Conditions_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Classifier_Term_Conditions_TransportPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_TransportPath struct {
	*ygnmi.NodePath
}

// Qos_Classifier_Term_Conditions_TransportPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_TransportPathAny struct {
	*ygnmi.NodePath
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_TransportPath) BuiltinDetail() *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/builtin-detail"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) BuiltinDetail() *Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_BuiltinDetailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port"
func (n *Qos_Classifier_Term_Conditions_TransportPath) DestinationPort() *Qos_Classifier_Term_Conditions_Transport_DestinationPortPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) DestinationPort() *Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPath) DestinationPortSet() *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/destination-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) DestinationPortSet() *Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_DestinationPortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/detail-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPath) DetailMode() *Qos_Classifier_Term_Conditions_Transport_DetailModePath {
	ps := &Qos_Classifier_Term_Conditions_Transport_DetailModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/detail-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) DetailMode() *Qos_Classifier_Term_Conditions_Transport_DetailModePathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_DetailModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPath) ExplicitDetailMatchMode() *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-detail-match-mode"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) ExplicitDetailMatchMode() *Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitDetailMatchModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_TransportPath) ExplicitTcpFlags() *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/explicit-tcp-flags"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) ExplicitTcpFlags() *Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_ExplicitTcpFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port"
func (n *Qos_Classifier_Term_Conditions_TransportPath) SourcePort() *Qos_Classifier_Term_Conditions_Transport_SourcePortPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) SourcePort() *Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPath) SourcePortSet() *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/qos/classifiers/classifier/terms/term/conditions/transport/*/source-port-set"
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) SourcePortSet() *Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny {
	ps := &Qos_Classifier_Term_Conditions_Transport_SourcePortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPath) State() ygnmi.SingletonQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPath) Config() ygnmi.ConfigQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewConfigQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Classifier_Term_Conditions_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Classifier_Term_Conditions_Transport](
		"Qos_Classifier_Term_Conditions_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_FabricPriorityPath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/fabric-priority YANG schema element.
type Qos_ForwardingGroup_FabricPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_FabricPriorityPathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/fabric-priority YANG schema element.
type Qos_ForwardingGroup_FabricPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/fabric-priority"
func (n *Qos_ForwardingGroup_FabricPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fabric-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).FabricPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_MulticastOutputQueuePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/multicast-output-queue YANG schema element.
type Qos_ForwardingGroup_MulticastOutputQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_MulticastOutputQueuePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/multicast-output-queue YANG schema element.
type Qos_ForwardingGroup_MulticastOutputQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/multicast-output-queue"
func (n *Qos_ForwardingGroup_MulticastOutputQueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).MulticastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_NamePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/name YANG schema element.
type Qos_ForwardingGroup_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_NamePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/name YANG schema element.
type Qos_ForwardingGroup_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/name"
func (n *Qos_ForwardingGroup_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/name"
func (n *Qos_ForwardingGroup_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/name"
func (n *Qos_ForwardingGroup_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/name"
func (n *Qos_ForwardingGroup_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_OutputQueuePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/output-queue YANG schema element.
type Qos_ForwardingGroup_OutputQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_OutputQueuePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/output-queue YANG schema element.
type Qos_ForwardingGroup_OutputQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/output-queue"
func (n *Qos_ForwardingGroup_OutputQueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).OutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroup_UnicastOutputQueuePath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/unicast-output-queue YANG schema element.
type Qos_ForwardingGroup_UnicastOutputQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_ForwardingGroup_UnicastOutputQueuePathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group/state/unicast-output-queue YANG schema element.
type Qos_ForwardingGroup_UnicastOutputQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/state/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/config/unicast-output-queue"
func (n *Qos_ForwardingGroup_UnicastOutputQueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_ForwardingGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-output-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_ForwardingGroup).UnicastOutputQueue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_ForwardingGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_ForwardingGroupPath represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPath struct {
	*ygnmi.NodePath
}

// Qos_ForwardingGroupPathAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPathAny struct {
	*ygnmi.NodePath
}

// Qos_ForwardingGroupPathMap represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPathMap struct {
	*ygnmi.NodePath
}

// Qos_ForwardingGroupPathMapAny represents the wildcard version of the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroupPathMapAny struct {
	*ygnmi.NodePath
}

// FabricPriority (leaf): Set the priority for the forwarding group for
// local transmission through the device, e.g.,
// across a switching fabric. Higher priorities
// are considered to be better, such that traffic
// with fabric priority 128 is considered to be
// higher priority than that with fabric priority
// 0.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/fabric-priority"
func (n *Qos_ForwardingGroupPath) FabricPriority() *Qos_ForwardingGroup_FabricPriorityPath {
	ps := &Qos_ForwardingGroup_FabricPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fabric-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FabricPriority (leaf): Set the priority for the forwarding group for
// local transmission through the device, e.g.,
// across a switching fabric. Higher priorities
// are considered to be better, such that traffic
// with fabric priority 128 is considered to be
// higher priority than that with fabric priority
// 0.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/fabric-priority"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/fabric-priority"
func (n *Qos_ForwardingGroupPathAny) FabricPriority() *Qos_ForwardingGroup_FabricPriorityPathAny {
	ps := &Qos_ForwardingGroup_FabricPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fabric-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastOutputQueue (leaf): Output queue for multicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/multicast-output-queue"
func (n *Qos_ForwardingGroupPath) MulticastOutputQueue() *Qos_ForwardingGroup_MulticastOutputQueuePath {
	ps := &Qos_ForwardingGroup_MulticastOutputQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastOutputQueue (leaf): Output queue for multicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/multicast-output-queue"
func (n *Qos_ForwardingGroupPathAny) MulticastOutputQueue() *Qos_ForwardingGroup_MulticastOutputQueuePathAny {
	ps := &Qos_ForwardingGroup_MulticastOutputQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the forwarding group
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/name"
func (n *Qos_ForwardingGroupPath) Name() *Qos_ForwardingGroup_NamePath {
	ps := &Qos_ForwardingGroup_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the forwarding group
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/name"
func (n *Qos_ForwardingGroupPathAny) Name() *Qos_ForwardingGroup_NamePathAny {
	ps := &Qos_ForwardingGroup_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputQueue (leaf): Output queue for packets in this forwarding group.
// This leaf applies to both multicast and unicast
// packets. Where a user or system requires separate
// queueing for multicast and unicast the unicast-output-queue
// and multicast-output-queue leaves should be specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/output-queue"
func (n *Qos_ForwardingGroupPath) OutputQueue() *Qos_ForwardingGroup_OutputQueuePath {
	ps := &Qos_ForwardingGroup_OutputQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputQueue (leaf): Output queue for packets in this forwarding group.
// This leaf applies to both multicast and unicast
// packets. Where a user or system requires separate
// queueing for multicast and unicast the unicast-output-queue
// and multicast-output-queue leaves should be specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/output-queue"
func (n *Qos_ForwardingGroupPathAny) OutputQueue() *Qos_ForwardingGroup_OutputQueuePathAny {
	ps := &Qos_ForwardingGroup_OutputQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastOutputQueue (leaf): Output queue for unicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/unicast-output-queue"
func (n *Qos_ForwardingGroupPath) UnicastOutputQueue() *Qos_ForwardingGroup_UnicastOutputQueuePath {
	ps := &Qos_ForwardingGroup_UnicastOutputQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastOutputQueue (leaf): Output queue for unicast packets within this
// forwarding group. Where an operator or system does
// not require separate queueing for multicast and
// unicast this leaf is not specified.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-output-queue"
//	Path from root:       "/qos/forwarding-groups/forwarding-group/*/unicast-output-queue"
func (n *Qos_ForwardingGroupPathAny) UnicastOutputQueue() *Qos_ForwardingGroup_UnicastOutputQueuePathAny {
	ps := &Qos_ForwardingGroup_UnicastOutputQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-output-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPath) State() ygnmi.SingletonQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewSingletonQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathAny) State() ygnmi.WildcardQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPath) Config() ygnmi.ConfigQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewConfigQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[*oc.Qos_ForwardingGroup](
		"Qos_ForwardingGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_ForwardingGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_ForwardingGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_ForwardingGroup](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_ForwardingGroup, bool) {
			ret := gs.(*oc.Qos).ForwardingGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:forwarding-groups"},
			PostRelPath: []string{"openconfig-qos:forwarding-group"},
		},
	)
}

// Qos_Interface_InterfaceIdPath represents the /openconfig-qos/qos/interfaces/interface/state/interface-id YANG schema element.
type Qos_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/state/interface-id YANG schema element.
type Qos_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/qos/interfaces/interface/state/interface-id"
func (n *Qos_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/qos/interfaces/interface/state/interface-id"
func (n *Qos_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/qos/interfaces/interface/config/interface-id"
func (n *Qos_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/qos/interfaces/interface/config/interface-id"
func (n *Qos_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_InterfacePath represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePath struct {
	*ygnmi.NodePath
}

// Qos_InterfacePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Qos_InterfacePathMap represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Qos_InterfacePathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Input (container): Top-level container for QoS data for the ingress
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "input"
//	Path from root:       "/qos/interfaces/interface/input"
func (n *Qos_InterfacePath) Input() *Qos_Interface_InputPath {
	ps := &Qos_Interface_InputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"input"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Input (container): Top-level container for QoS data for the ingress
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "input"
//	Path from root:       "/qos/interfaces/interface/input"
func (n *Qos_InterfacePathAny) Input() *Qos_Interface_InputPathAny {
	ps := &Qos_Interface_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/qos/interfaces/interface/*/interface-id"
func (n *Qos_InterfacePath) InterfaceId() *Qos_Interface_InterfaceIdPath {
	ps := &Qos_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/qos/interfaces/interface/*/interface-id"
func (n *Qos_InterfacePathAny) InterfaceId() *Qos_Interface_InterfaceIdPathAny {
	ps := &Qos_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interface-ref"
//	Path from root:       "/qos/interfaces/interface/interface-ref"
func (n *Qos_InterfacePath) InterfaceRef() *Qos_Interface_InterfaceRefPath {
	ps := &Qos_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "interface-ref"
//	Path from root:       "/qos/interfaces/interface/interface-ref"
func (n *Qos_InterfacePathAny) InterfaceRef() *Qos_Interface_InterfaceRefPathAny {
	ps := &Qos_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for QoS data related to the egress
// interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/interfaces/interface/output"
func (n *Qos_InterfacePath) Output() *Qos_Interface_OutputPath {
	ps := &Qos_Interface_OutputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for QoS data related to the egress
// interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/interfaces/interface/output"
func (n *Qos_InterfacePathAny) Output() *Qos_Interface_OutputPathAny {
	ps := &Qos_Interface_OutputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePath) State() ygnmi.SingletonQuery[*oc.Qos_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface](
		"Qos_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface](
		"Qos_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface](
		"Qos_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface](
		"Qos_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Interface](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface, bool) {
			ret := gs.(*oc.Qos).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:interfaces"},
			PostRelPath: []string{"openconfig-qos:interface"},
		},
	)
}

// Qos_Interface_Input_BufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/input/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_BufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/state/buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_BufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/buffer-allocation-profile"
func (n *Qos_Interface_Input_BufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).BufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_MulticastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_MulticastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_MulticastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_MulticastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/multicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_MulticastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).MulticastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_UnicastBufferAllocationProfilePath represents the /openconfig-qos/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_UnicastBufferAllocationProfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_UnicastBufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile YANG schema element.
type Qos_Interface_Input_UnicastBufferAllocationProfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/state/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/config/unicast-buffer-allocation-profile"
func (n *Qos_Interface_Input_UnicastBufferAllocationProfilePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "unicast-buffer-allocation-profile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input).UnicastBufferAllocationProfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_InputPath represents the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_InputPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_InputPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_InputPathAny struct {
	*ygnmi.NodePath
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the input (rx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/buffer-allocation-profile"
func (n *Qos_Interface_InputPath) BufferAllocationProfile() *Qos_Interface_Input_BufferAllocationProfilePath {
	ps := &Qos_Interface_Input_BufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the input (rx) queueing.
//
// This leaf is used in deployment cases where the operator or system
// requires common allocation profiles covering unicast and multicast
// packets.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/buffer-allocation-profile"
func (n *Qos_Interface_InputPathAny) BufferAllocationProfile() *Qos_Interface_Input_BufferAllocationProfilePathAny {
	ps := &Qos_Interface_Input_BufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPath) ClassifierAny() *Qos_Interface_Input_ClassifierPathAny {
	ps := &Qos_Interface_Input_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// ClassifierAny (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPathAny) ClassifierAny() *Qos_Interface_Input_ClassifierPathAny {
	ps := &Qos_Interface_Input_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_InputPath) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Input_ClassifierPath {
	ps := &Qos_Interface_Input_ClassifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Classifier (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
//
//	Type: oc.E_Input_Classifier_Type
func (n *Qos_Interface_InputPathAny) Classifier(Type oc.E_Input_Classifier_Type) *Qos_Interface_Input_ClassifierPathAny {
	ps := &Qos_Interface_Input_ClassifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPath) ClassifierMap() *Qos_Interface_Input_ClassifierPathMap {
	ps := &Qos_Interface_Input_ClassifierPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ClassifierMap (list): A list of classifiers that should be applied to the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "classifiers/classifier"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier"
func (n *Qos_Interface_InputPathAny) ClassifierMap() *Qos_Interface_Input_ClassifierPathMapAny {
	ps := &Qos_Interface_Input_ClassifierPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"classifiers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPath) MulticastBufferAllocationProfile() *Qos_Interface_Input_MulticastBufferAllocationProfilePath {
	ps := &Qos_Interface_Input_MulticastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only multicast packets on
// the interface - if specified, the unicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to unicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/multicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/multicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPathAny) MulticastBufferAllocationProfile() *Qos_Interface_Input_MulticastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Input_MulticastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPath) QueueAny() *Qos_Interface_Input_QueuePathAny {
	ps := &Qos_Interface_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueAny (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPathAny) QueueAny() *Qos_Interface_Input_QueuePathAny {
	ps := &Qos_Interface_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
//
//	Name: string
func (n *Qos_Interface_InputPath) Queue(Name string) *Qos_Interface_Input_QueuePath {
	ps := &Qos_Interface_Input_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Queue (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
//
//	Name: string
func (n *Qos_Interface_InputPathAny) Queue(Name string) *Qos_Interface_Input_QueuePathAny {
	ps := &Qos_Interface_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPath) QueueMap() *Qos_Interface_Input_QueuePathMap {
	ps := &Qos_Interface_Input_QueuePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueMap (list): Top-level container for the queue associated with this
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "queues/queue"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue"
func (n *Qos_Interface_InputPathAny) QueueMap() *Qos_Interface_Input_QueuePathMapAny {
	ps := &Qos_Interface_Input_QueuePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy"
func (n *Qos_Interface_InputPath) SchedulerPolicy() *Qos_Interface_Input_SchedulerPolicyPath {
	ps := &Qos_Interface_Input_SchedulerPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerPolicy (container): Scheduler policy associated with the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "scheduler-policy"
//	Path from root:       "/qos/interfaces/interface/input/scheduler-policy"
func (n *Qos_Interface_InputPathAny) SchedulerPolicy() *Qos_Interface_Input_SchedulerPolicyPathAny {
	ps := &Qos_Interface_Input_SchedulerPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"scheduler-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPath) UnicastBufferAllocationProfile() *Qos_Interface_Input_UnicastBufferAllocationProfilePath {
	ps := &Qos_Interface_Input_UnicastBufferAllocationProfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastBufferAllocationProfile (leaf): The buffer allocation profile that is to be used for the interface.
// This profile specifies how memory that is available to the interface
// should be allocated amongst the queues that are instantiated on the
// interface.
//
// This reference specifies the policy that should be used for memory
// allocated to the output (tx) queueing.
//
// This buffer allocation profile applies to only unicast packets on
// the interface - if specified, the multicast-buffer-allocation-profile
// governs the allocation profile used for memory dedicated to multicast.
// If a system does not support, or an operator does not require separate
// buffer-allocation-profiles, this is specified by use of the
// buffer-allocation-profile leaf.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/unicast-buffer-allocation-profile"
//	Path from root:       "/qos/interfaces/interface/input/*/unicast-buffer-allocation-profile"
func (n *Qos_Interface_InputPathAny) UnicastBufferAllocationProfile() *Qos_Interface_Input_UnicastBufferAllocationProfilePathAny {
	ps := &Qos_Interface_Input_UnicastBufferAllocationProfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "unicast-buffer-allocation-profile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VoqInterfaceAny (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPath) VoqInterfaceAny() *Qos_Interface_Input_VoqInterfacePathAny {
	ps := &Qos_Interface_Input_VoqInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// VoqInterfaceAny (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPathAny) VoqInterfaceAny() *Qos_Interface_Input_VoqInterfacePathAny {
	ps := &Qos_Interface_Input_VoqInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// VoqInterface (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
//
//	Name: string
func (n *Qos_Interface_InputPath) VoqInterface(Name string) *Qos_Interface_Input_VoqInterfacePath {
	ps := &Qos_Interface_Input_VoqInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// VoqInterface (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
//
//	Name: string
func (n *Qos_Interface_InputPathAny) VoqInterface(Name string) *Qos_Interface_Input_VoqInterfacePathAny {
	ps := &Qos_Interface_Input_VoqInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues", "voq-interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// VoqInterfaceMap (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPath) VoqInterfaceMap() *Qos_Interface_Input_VoqInterfacePathMap {
	ps := &Qos_Interface_Input_VoqInterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VoqInterfaceMap (list): List of egress interfaces for which a virtual output
// queue is instantiated at this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "virtual-output-queues/voq-interface"
//	Path from root:       "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"
func (n *Qos_Interface_InputPathAny) VoqInterfaceMap() *Qos_Interface_Input_VoqInterfacePathMapAny {
	ps := &Qos_Interface_Input_VoqInterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"virtual-output-queues"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_InputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_NamePath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Input_Classifier_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/name YANG schema element.
type Qos_Interface_Input_Classifier_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/name"
func (n *Qos_Interface_Input_Classifier_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/name"
func (n *Qos_Interface_Input_Classifier_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/name"
func (n *Qos_Interface_Input_Classifier_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/name"
func (n *Qos_Interface_Input_Classifier_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_TypePath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Input_Classifier_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/state/type YANG schema element.
type Qos_Interface_Input_Classifier_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/type"
func (n *Qos_Interface_Input_Classifier_TypePath) State() ygnmi.SingletonQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/state/type"
func (n *Qos_Interface_Input_Classifier_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/type"
func (n *Qos_Interface_Input_Classifier_TypePath) Config() ygnmi.ConfigQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewConfigQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/config/type"
func (n *Qos_Interface_Input_Classifier_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Input_Classifier_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Input_Classifier_Type](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_Classifier_Type, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_ClassifierPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_ClassifierPathMap represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_ClassifierPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_ClassifierPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/name"
func (n *Qos_Interface_Input_ClassifierPath) Name() *Qos_Interface_Input_Classifier_NamePath {
	ps := &Qos_Interface_Input_Classifier_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the classifier to be applied to ingress traffic on
// the interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/name"
func (n *Qos_Interface_Input_ClassifierPathAny) Name() *Qos_Interface_Input_Classifier_NamePathAny {
	ps := &Qos_Interface_Input_Classifier_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPath) TermAny() *Qos_Interface_Input_Classifier_TermPathAny {
	ps := &Qos_Interface_Input_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TermAny (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPathAny) TermAny() *Qos_Interface_Input_Classifier_TermPathAny {
	ps := &Qos_Interface_Input_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Input_ClassifierPath) Term(Id string) *Qos_Interface_Input_Classifier_TermPath {
	ps := &Qos_Interface_Input_Classifier_TermPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Term (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
//
//	Id: string
func (n *Qos_Interface_Input_ClassifierPathAny) Term(Id string) *Qos_Interface_Input_Classifier_TermPathAny {
	ps := &Qos_Interface_Input_Classifier_TermPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPath) TermMap() *Qos_Interface_Input_Classifier_TermPathMap {
	ps := &Qos_Interface_Input_Classifier_TermPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TermMap (list): List of match terms in the classifier associated with the
// interface
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "terms/term"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term"
func (n *Qos_Interface_Input_ClassifierPathAny) TermMap() *Qos_Interface_Input_Classifier_TermPathMapAny {
	ps := &Qos_Interface_Input_Classifier_TermPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"terms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/type"
func (n *Qos_Interface_Input_ClassifierPath) Type() *Qos_Interface_Input_Classifier_TypePath {
	ps := &Qos_Interface_Input_Classifier_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of packets matched by the classifier.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/*/type"
func (n *Qos_Interface_Input_ClassifierPathAny) Type() *Qos_Interface_Input_Classifier_TypePathAny {
	ps := &Qos_Interface_Input_Classifier_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input_Classifier",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMap) State() ygnmi.SingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewSingletonQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMap) Config() ygnmi.ConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewConfigQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_ClassifierPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier] {
	return ygnmi.NewWildcardQuery[map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier](
		"Qos_Interface_Input",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Input_Classifier_Type]*oc.Qos_Interface_Input_Classifier, bool) {
			ret := gs.(*oc.Qos_Interface_Input).Classifier
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:classifiers"},
			PostRelPath: []string{"openconfig-qos:classifier"},
		},
	)
}

// Qos_Interface_Input_Classifier_Term_IdPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Input_Classifier_Term_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id YANG schema element.
type Qos_Interface_Input_Classifier_Term_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Input_Classifier_Term_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/id"
func (n *Qos_Interface_Input_Classifier_Term_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Input_Classifier_Term_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *Qos_Interface_Input_Classifier_Term_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Input_Classifier_Term",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_Term_MatchedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_Term_MatchedPacketsPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets YANG schema element.
type Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier_Term).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier_Term) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Classifier_TermPath represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_Classifier_TermPathMap represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Input_Classifier_TermPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_TermPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Input_Classifier_TermPath) Id() *Qos_Interface_Input_Classifier_Term_IdPath {
	ps := &Qos_Interface_Input_Classifier_Term_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Reference to match terms in the classifier
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/*/id"
func (n *Qos_Interface_Input_Classifier_TermPathAny) Id() *Qos_Interface_Input_Classifier_Term_IdPathAny {
	ps := &Qos_Interface_Input_Classifier_Term_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_TermPath) MatchedOctets() *Qos_Interface_Input_Classifier_Term_MatchedOctetsPath {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching this
// classifier match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-octets"
func (n *Qos_Interface_Input_Classifier_TermPathAny) MatchedOctets() *Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_TermPath) MatchedPackets() *Qos_Interface_Input_Classifier_Term_MatchedPacketsPath {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching this classifier
// match term on the interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/qos/interfaces/interface/input/classifiers/classifier/terms/term/state/matched-packets"
func (n *Qos_Interface_Input_Classifier_TermPathAny) MatchedPackets() *Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny {
	ps := &Qos_Interface_Input_Classifier_Term_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier_Term",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Input_Classifier_TermPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Interface_Input_Classifier_Term](
		"Qos_Interface_Input_Classifier",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Interface_Input_Classifier_Term, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Classifier).Term
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Classifier) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:terms"},
			PostRelPath: []string{"openconfig-qos:term"},
		},
	)
}

// Qos_Interface_Input_Queue_AvgQueueLenPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Input_Queue_AvgQueueLenPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_AvgQueueLenPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/avg-queue-len YANG schema element.
type Qos_Interface_Input_Queue_AvgQueueLenPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_Queue_AvgQueueLenPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/avg-queue-len"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"
func (n *Qos_Interface_Input_Queue_AvgQueueLenPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg-queue-len"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).AvgQueueLen
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Input_Queue_DroppedOctetsPath represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Input_Queue_DroppedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Input_Queue_DroppedOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/input/queues/queue/state/dropped-octets YANG schema element.
type Qos_Interface_Input_Queue_DroppedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_Queue_DroppedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/dropped-octets"
//	Path from root:       "/qos/interfaces/interface/input/queues/queue/state/dropped-octets"
func (n *Qos_Interface_Input_Queue_DroppedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Input_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Input_Queue).DroppedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Input_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
