/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_QueueManagementProfile_Wred_Uniform_WeightPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/weight"
func (n *Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_UniformPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_UniformPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_Wred_UniformPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_UniformPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Drop() *Qos_QueueManagementProfile_Wred_Uniform_DropPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Drop() *Qos_QueueManagementProfile_Wred_Uniform_DropPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) EnableEcn() *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) EnableEcn() *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxDropProbabilityPercent (leaf): If the queue depth is between min and max threshold then this
// the probability with which packets are dropped or marked.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxDropProbabilityPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-drop-probability-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxDropProbabilityPercent (leaf): If the queue depth is between min and max threshold then this
// the probability with which packets are dropped or marked.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxDropProbabilityPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-drop-probability-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MaxThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MaxThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MinThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MinThreshold() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) MinThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) MinThresholdPercent() *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The average queue size depends on the previous average as well as
// the current size of the queue.
//
// average queue size = (previous average queue size)*(1-2^{-n})+
//
//	(current queue size)*(2^{-n})
//
// where n is the user-configurable exponential weight factor.
//
// The previous average is more important for high values of n. Peaks
// and lows in queue size are smoothed by a high value. For low values
// of n, the average queue size is close to the current queue size.
//
// When this leaf is not present, implementation default value is
// applied.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/weight"
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Weight() *Qos_QueueManagementProfile_Wred_Uniform_WeightPath {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The average queue size depends on the previous average as well as
// the current size of the queue.
//
// average queue size = (previous average queue size)*(1-2^{-n})+
//
//	(current queue size)*(2^{-n})
//
// where n is the user-configurable exponential weight factor.
//
// The previous average is more important for high values of n. Peaks
// and lows in queue size are smoothed by a high value. For low values
// of n, the average queue size is close to the current queue size.
//
// When this leaf is not present, implementation default value is
// applied.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/*/weight"
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Weight() *Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny {
	ps := &Qos_QueueManagementProfile_Wred_Uniform_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Wred_UniformPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred_Uniform](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_NamePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/state/name YANG schema element.
type Qos_SchedulerPolicy_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_NamePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/state/name YANG schema element.
type Qos_SchedulerPolicy_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/state/name"
func (n *Qos_SchedulerPolicy_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/state/name"
func (n *Qos_SchedulerPolicy_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/config/name"
func (n *Qos_SchedulerPolicy_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/config/name"
func (n *Qos_SchedulerPolicy_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicyPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicyPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPathAny struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicyPathMap represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPathMap struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicyPathMapAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicyPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Name for the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/*/name"
func (n *Qos_SchedulerPolicyPath) Name() *Qos_SchedulerPolicy_NamePath {
	ps := &Qos_SchedulerPolicy_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name for the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/*/name"
func (n *Qos_SchedulerPolicyPathAny) Name() *Qos_SchedulerPolicy_NamePathAny {
	ps := &Qos_SchedulerPolicy_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SchedulerAny (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPath) SchedulerAny() *Qos_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// SchedulerAny (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPathAny) SchedulerAny() *Qos_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_SchedulerPolicyPath) Scheduler(Sequence uint32) *Qos_SchedulerPolicy_SchedulerPath {
	ps := &Qos_SchedulerPolicy_SchedulerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_SchedulerPolicyPathAny) Scheduler(Sequence uint32) *Qos_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPath) SchedulerMap() *Qos_SchedulerPolicy_SchedulerPathMap {
	ps := &Qos_SchedulerPolicy_SchedulerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of defined QoS traffic schedulers.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"
func (n *Qos_SchedulerPolicyPathAny) SchedulerMap() *Qos_SchedulerPolicy_SchedulerPathMapAny {
	ps := &Qos_SchedulerPolicy_SchedulerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy, bool) {
			ret := gs.(*oc.Qos).SchedulerPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:scheduler-policies"},
			PostRelPath: []string{"openconfig-qos:scheduler-policy"},
		},
	)
}

// Qos_SchedulerPolicy_Scheduler_PriorityPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority YANG schema element.
type Qos_SchedulerPolicy_Scheduler_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_PriorityPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority YANG schema element.
type Qos_SchedulerPolicy_Scheduler_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPath) State() ygnmi.SingletonQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewSingletonQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPathAny) State() ygnmi.WildcardQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewWildcardQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPath) Config() ygnmi.ConfigQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewConfigQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"
func (n *Qos_SchedulerPolicy_Scheduler_PriorityPathAny) Config() ygnmi.WildcardQuery[oc.E_Scheduler_Priority] {
	return ygnmi.NewWildcardQuery[oc.E_Scheduler_Priority](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Scheduler_Priority, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_SequencePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_SchedulerPolicy_Scheduler_SequencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_SequencePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_SchedulerPolicy_Scheduler_SequencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"
func (n *Qos_SchedulerPolicy_Scheduler_SequencePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_TypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_TypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePath) State() ygnmi.SingletonQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePathAny) State() ygnmi.WildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePath) Config() ygnmi.ConfigQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"
func (n *Qos_SchedulerPolicy_Scheduler_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_QosTypes_QOS_SCHEDULER_TYPE](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QOS_SCHEDULER_TYPE, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_SchedulerPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_SchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPathAny struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_SchedulerPathMap represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPathMap struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_SchedulerPathMapAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_SchedulerPathMapAny struct {
	*ygnmi.NodePath
}

// InputAny (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPath) InputAny() *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InputAny (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) InputAny() *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Input (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
//
//	Id: string
func (n *Qos_SchedulerPolicy_SchedulerPath) Input(Id string) *Qos_SchedulerPolicy_Scheduler_InputPath {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Input (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
//
//	Id: string
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Input(Id string) *Qos_SchedulerPolicy_Scheduler_InputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs", "input"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InputMap (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPath) InputMap() *Qos_SchedulerPolicy_Scheduler_InputPathMap {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputMap (list): List of input sources for the scheduler.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "inputs/input"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) InputMap() *Qos_SchedulerPolicy_Scheduler_InputPathMapAny {
	ps := &Qos_SchedulerPolicy_Scheduler_InputPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inputs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OneRateTwoColor (container): Top-level container for data related to a 1 rate, 2 color
// shaper.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "one-rate-two-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"
func (n *Qos_SchedulerPolicy_SchedulerPath) OneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"one-rate-two-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OneRateTwoColor (container): Top-level container for data related to a 1 rate, 2 color
// shaper.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "one-rate-two-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) OneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"one-rate-two-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for scheduler output data
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"
func (n *Qos_SchedulerPolicy_SchedulerPath) Output() *Qos_SchedulerPolicy_Scheduler_OutputPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OutputPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Output (container): Top-level container for scheduler output data
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "output"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Output() *Qos_SchedulerPolicy_Scheduler_OutputPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OutputPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"output"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Priority (leaf): Priority of the scheduler within the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/priority"
func (n *Qos_SchedulerPolicy_SchedulerPath) Priority() *Qos_SchedulerPolicy_Scheduler_PriorityPath {
	ps := &Qos_SchedulerPolicy_Scheduler_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Priority of the scheduler within the scheduler policy.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/priority"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/priority"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Priority() *Qos_SchedulerPolicy_Scheduler_PriorityPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Sequence number for the scheduler within the scheduler
// policy. Schedulers are processed from lowest sequence
// to highest.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_SchedulerPolicy_SchedulerPath) Sequence() *Qos_SchedulerPolicy_Scheduler_SequencePath {
	ps := &Qos_SchedulerPolicy_Scheduler_SequencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Sequence number for the scheduler within the scheduler
// policy. Schedulers are processed from lowest sequence
// to highest.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Sequence() *Qos_SchedulerPolicy_Scheduler_SequencePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_SequencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TwoRateThreeColor (container): Top-level container for data for a 2 rate, 3 color policer.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "two-rate-three-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"
func (n *Qos_SchedulerPolicy_SchedulerPath) TwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"two-rate-three-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TwoRateThreeColor (container): Top-level container for data for a 2 rate, 3 color policer.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "two-rate-three-color"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) TwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"two-rate-three-color"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Sets the type of scheduler, i.e. the scheduling algorithm
// used to serve inputs.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/type"
func (n *Qos_SchedulerPolicy_SchedulerPath) Type() *Qos_SchedulerPolicy_Scheduler_TypePath {
	ps := &Qos_SchedulerPolicy_Scheduler_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Sets the type of scheduler, i.e. the scheduling algorithm
// used to serve inputs.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/*/type"
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Type() *Qos_SchedulerPolicy_Scheduler_TypePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_SchedulerPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Qos_SchedulerPolicy_Scheduler](
		"Qos_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_IdPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_IdPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"
func (n *Qos_SchedulerPolicy_Scheduler_Input_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_InputTypePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_InputTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePath) State() ygnmi.SingletonQuery[oc.E_Input_InputType] {
	return ygnmi.NewSingletonQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny) State() ygnmi.WildcardQuery[oc.E_Input_InputType] {
	return ygnmi.NewWildcardQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePath) Config() ygnmi.ConfigQuery[oc.E_Input_InputType] {
	return ygnmi.NewConfigQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Input_InputType] {
	return ygnmi.NewWildcardQuery[oc.E_Input_InputType](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "input-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Input_InputType, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).InputType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_QueuePath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_QueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"
func (n *Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Queue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_Input_WeightPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"
func (n *Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_Input).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_Input) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_InputPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_InputPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPathAny struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_InputPathMap represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPathMap struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_InputPathMapAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_InputPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): User-defined identifier for the scheduler input
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/id"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Id() *Qos_SchedulerPolicy_Scheduler_Input_IdPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): User-defined identifier for the scheduler input
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/id"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/id"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Id() *Qos_SchedulerPolicy_Scheduler_Input_IdPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputType (leaf): Describes the type of input source for the scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) InputType() *Qos_SchedulerPolicy_Scheduler_Input_InputTypePath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_InputTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "input-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputType (leaf): Describes the type of input source for the scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/input-type"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/input-type"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) InputType() *Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_InputTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "input-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Queue (leaf): Reference to a queue that is an input source for the
// scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/queue"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Queue() *Qos_SchedulerPolicy_Scheduler_Input_QueuePath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_QueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Queue (leaf): Reference to a queue that is an input source for the
// scheduler
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/queue"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Queue() *Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_QueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): For priority schedulers, this indicates the priority of
// the corresponding input.  Higher values indicate higher
// priority.  For weighted round-robin schedulers, this leaf
// indicates the weight of the corresponding input.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/weight"
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Weight() *Qos_SchedulerPolicy_Scheduler_Input_WeightPath {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): For priority schedulers, this indicates the priority of
// the corresponding input.  Higher values indicate higher
// priority.  For weighted round-robin schedulers, this leaf
// indicates the weight of the corresponding input.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/weight"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/*/weight"
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Weight() *Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_Input_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler_Input",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_InputPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input](
		"Qos_SchedulerPolicy_Scheduler",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_SchedulerPolicy_Scheduler_Input, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler).Input
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:inputs"},
			PostRelPath: []string{"openconfig-qos:input"},
		},
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Bc
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).Cir
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPct
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cir-pct-remaining"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).CirPctRemaining
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthBytes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPackets
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-queue-depth-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).MaxQueueDepthPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath) State() ygnmi.SingletonQuery[oc.E_QosTypes_QueueBehavior] {
	return ygnmi.NewSingletonQuery[oc.E_QosTypes_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny) State() ygnmi.WildcardQuery[oc.E_QosTypes_QueueBehavior] {
	return ygnmi.NewWildcardQuery[oc.E_QosTypes_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath) Config() ygnmi.ConfigQuery[oc.E_QosTypes_QueueBehavior] {
	return ygnmi.NewConfigQuery[oc.E_QosTypes_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny) Config() ygnmi.WildcardQuery[oc.E_QosTypes_QueueBehavior] {
	return ygnmi.NewWildcardQuery[oc.E_QosTypes_QueueBehavior](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queuing-behavior"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_QosTypes_QueueBehavior, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor).QueuingBehavior
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny struct {
	*ygnmi.NodePath
}

// Bc (leaf): Committed burst size for the single-rate token bucket
// scheduler.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Bc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bc (leaf): Committed burst size for the single-rate token bucket
// scheduler.  This value represents the depth of the token
// bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/bc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/bc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Bc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_BcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the single-rate token
// bucket scheduler.  This value represents the rate at which
// tokens are added to the bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Cir() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cir (leaf): Committed information rate for the single-rate token
// bucket scheduler.  This value represents the rate at which
// tokens are added to the bucket.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Cir() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the total bandwidth allocated to the
// context in which the scheduler is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) CirPct() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPct (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the total bandwidth allocated to the
// context in which the scheduler is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) CirPct() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the unallocated bandwidth available in the
// context in which the scheduled is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CirPctRemaining (leaf): Committed information rate for the single-rate token
// bucket scheduler. This value represents the rate at which
// tokens are added to the bucket. It is expressed as a
// percentage of the unallocated bandwidth available in the
// context in which the scheduled is referenced.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/cir-pct-remaining"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/cir-pct-remaining"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) CirPctRemaining() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_CirPctRemainingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cir-pct-remaining"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformAction (container): Action to be applied to packets that are scheduled within the
// CIR of the one-rate, two-colour scheduler. Packets that receive
// a token from the in-CIR bucket are said to be conforming and
// have all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) ConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConformAction (container): Action to be applied to packets that are scheduled within the
// CIR of the one-rate, two-colour scheduler. Packets that receive
// a token from the in-CIR bucket are said to be conforming and
// have all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "conform-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) ConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"conform-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to packets that are scheduled above the CIR
// of the one-rate, two-colour shaper. Packets that do not receive a
// token from the in-CIR bucket are said to be exceeding, and have
// all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) ExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExceedAction (container): Action to be applied to packets that are scheduled above the CIR
// of the one-rate, two-colour shaper. Packets that do not receive a
// token from the in-CIR bucket are said to be exceeding, and have
// all of the specified actions applied.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "exceed-action"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) ExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"exceed-action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxQueueDepthBytes (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in bytes is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthBytes() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthBytes (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in bytes is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-bytes"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-bytes"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthBytes() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPackets (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in packets is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthPackets() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPackets (leaf): When the scheduler is specified to be a shaper - the
// maximum depth of the queue in packets is the value
// specified by this leaf.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-packets"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-packets"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthPackets() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPercent (leaf): The queue depth specified as a percentage of the total
// available buffer that is avaialble.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) MaxQueueDepthPercent() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxQueueDepthPercent (leaf): The queue depth specified as a percentage of the total
// available buffer that is avaialble.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-queue-depth-percent"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/max-queue-depth-percent"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) MaxQueueDepthPercent() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_MaxQueueDepthPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-queue-depth-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuingBehavior (leaf): The type of scheduler that is being configured.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) QueuingBehavior() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queuing-behavior"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuingBehavior (leaf): The type of scheduler that is being configured.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queuing-behavior"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/*/queuing-behavior"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) QueuingBehavior() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_QueuingBehaviorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queuing-behavior"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColorPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny struct {
	*ygnmi.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dot1p"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDot1P
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetDscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction).SetMplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath struct {
	*ygnmi.NodePath
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny represents the wildcard version of the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) Drop() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): If set to true, packets within this context are dropped.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/drop"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) Drop() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dot1p"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dot1p"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetDot1P() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDot1PPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-dscp"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-dscp"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetDscp() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetDscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/set-mpls-tc"
//	Path from root:       "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/*/set-mpls-tc"
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) SetMplsTc() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny {
	ps := &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction_SetMplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) State() ygnmi.SingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewSingletonQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) State() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPath) Config() ygnmi.ConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewConfigQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedActionPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction] {
	return ygnmi.NewWildcardQuery[*oc.Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction](
		"Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
