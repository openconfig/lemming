/*
Package qos is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package qos

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_Interface_Output_SchedulerPolicy_NamePath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_NamePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/state/name YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/state/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/state/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/config/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/config/name"
func (n *Qos_Interface_Output_SchedulerPolicy_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicyPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicyPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicyPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicyPathAny struct {
	*ygnmi.NodePath
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/*/name"
func (n *Qos_Interface_Output_SchedulerPolicyPath) Name() *Qos_Interface_Output_SchedulerPolicy_NamePath {
	ps := &Qos_Interface_Output_SchedulerPolicy_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The scheduler policy to be applied to traffic on this interface.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/*/name"
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Name() *Qos_Interface_Output_SchedulerPolicy_NamePathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPath) SchedulerAny() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// SchedulerAny (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) SchedulerAny() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": "*"},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_Interface_Output_SchedulerPolicyPath) Scheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_SchedulerPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// Scheduler (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
//
//	Sequence: uint32
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Scheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers", "scheduler"},
			map[string]interface{}{"sequence": Sequence},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPath) SchedulerMap() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SchedulerMap (list): List of the schedulers that are part of the scheduler-policy
// specified.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "schedulers/scheduler"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) SchedulerMap() *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"schedulers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPath) Config() ygnmi.ConfigQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewConfigQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy](
		"Qos_Interface_Output_SchedulerPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ConformingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ExceedingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "sequence"
//	Path from root:       ""
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "sequence"
//	Path from root:       ""
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).Sequence
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler).ViolatingPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy_Scheduler) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPath represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPath struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap struct {
	*ygnmi.NodePath
}

// Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny represents the wildcard version of the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny struct {
	*ygnmi.NodePath
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ConformingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingOctets (leaf): The number of octets in packets that were considered
// conforming by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ConformingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ConformingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConformingPkts (leaf): The number of packets that were considered conforming by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/conforming-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ConformingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ConformingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "conforming-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ExceedingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingOctets (leaf): The number of octets in packets that were considered
// exceeding by the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ExceedingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ExceedingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceedingPkts (leaf): The number of packets that were considered exceeding by
// the scheduler.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/exceeding-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ExceedingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ExceedingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "exceeding-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) Sequence() *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sequence (leaf): Reference to the sequence ID of the scheduler within
// the current scheduler policy.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/sequence"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/*/sequence"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) Sequence() *Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_SequencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ViolatingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingOctets (leaf): The number of octets in packets that were considered
// violating by the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-octets"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ViolatingOctets() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) ViolatingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ViolatingPkts (leaf): The number of packets that were considered violating by
// the policer.
//
//	Defining module:      "openconfig-qos-interfaces"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/violating-pkts"
//	Path from root:       "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) ViolatingPkts() *Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny {
	ps := &Qos_Interface_Output_SchedulerPolicy_Scheduler_ViolatingPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "violating-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPath) State() ygnmi.SingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathAny) State() ygnmi.WildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy_Scheduler",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_Interface_Output_SchedulerPolicy_SchedulerPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler](
		"Qos_Interface_Output_SchedulerPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Qos_Interface_Output_SchedulerPolicy_Scheduler, bool) {
			ret := gs.(*oc.Qos_Interface_Output_SchedulerPolicy).Scheduler
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Interface_Output_SchedulerPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:schedulers"},
			PostRelPath: []string{"openconfig-qos:scheduler"},
		},
	)
}

// Qos_Queue_NamePath represents the /openconfig-qos/qos/queues/queue/state/name YANG schema element.
type Qos_Queue_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue/state/name YANG schema element.
type Qos_Queue_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queues/queue/state/name"
func (n *Qos_Queue_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queues/queue/state/name"
func (n *Qos_Queue_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queues/queue/config/name"
func (n *Qos_Queue_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queues/queue/config/name"
func (n *Qos_Queue_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_Queue).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_Queue_QueueIdPath represents the /openconfig-qos/qos/queues/queue/state/queue-id YANG schema element.
type Qos_Queue_QueueIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_Queue_QueueIdPathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue/state/queue-id YANG schema element.
type Qos_Queue_QueueIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-id"
//	Path from root:       "/qos/queues/queue/state/queue-id"
func (n *Qos_Queue_QueueIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/queue-id"
//	Path from root:       "/qos/queues/queue/state/queue-id"
func (n *Qos_Queue_QueueIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Queue",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-id"
//	Path from root:       "/qos/queues/queue/config/queue-id"
func (n *Qos_Queue_QueueIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/queue-id"
//	Path from root:       "/qos/queues/queue/config/queue-id"
func (n *Qos_Queue_QueueIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_Queue",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "queue-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_Queue).QueueId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_Queue) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueuePath represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePath struct {
	*ygnmi.NodePath
}

// Qos_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePathAny struct {
	*ygnmi.NodePath
}

// Qos_QueuePathMap represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePathMap struct {
	*ygnmi.NodePath
}

// Qos_QueuePathMapAny represents the wildcard version of the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_QueuePathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): User-defined name of the queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queues/queue/*/name"
func (n *Qos_QueuePath) Name() *Qos_Queue_NamePath {
	ps := &Qos_Queue_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): User-defined name of the queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queues/queue/*/name"
func (n *Qos_QueuePathAny) Name() *Qos_Queue_NamePathAny {
	ps := &Qos_Queue_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueId (leaf): An optional identifier which may be required by some hardware to map
// the named queue to a hardware queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-id"
//	Path from root:       "/qos/queues/queue/*/queue-id"
func (n *Qos_QueuePath) QueueId() *Qos_Queue_QueueIdPath {
	ps := &Qos_Queue_QueueIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueId (leaf): An optional identifier which may be required by some hardware to map
// the named queue to a hardware queue
//
//	Defining module:      "openconfig-qos-elements"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/queue-id"
//	Path from root:       "/qos/queues/queue/*/queue-id"
func (n *Qos_QueuePathAny) QueueId() *Qos_Queue_QueueIdPathAny {
	ps := &Qos_Queue_QueueIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "queue-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePath) State() ygnmi.SingletonQuery[*oc.Qos_Queue] {
	return ygnmi.NewSingletonQuery[*oc.Qos_Queue](
		"Qos_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathAny) State() ygnmi.WildcardQuery[*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Queue](
		"Qos_Queue",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePath) Config() ygnmi.ConfigQuery[*oc.Qos_Queue] {
	return ygnmi.NewConfigQuery[*oc.Qos_Queue](
		"Qos_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[*oc.Qos_Queue](
		"Qos_Queue",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_Queue](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Queue](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_Queue](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueuePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_Queue] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_Queue](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_Queue, bool) {
			ret := gs.(*oc.Qos).Queue
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queues"},
			PostRelPath: []string{"openconfig-qos:queue"},
		},
	)
}

// Qos_QueueManagementProfile_NamePath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/state/name YANG schema element.
type Qos_QueueManagementProfile_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_NamePathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/state/name YANG schema element.
type Qos_QueueManagementProfile_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/state/name"
func (n *Qos_QueueManagementProfile_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Qos_QueueManagementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/state/name"
func (n *Qos_QueueManagementProfile_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_QueueManagementProfile",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/config/name"
func (n *Qos_QueueManagementProfile_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Qos_QueueManagementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/config/name"
func (n *Qos_QueueManagementProfile_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Qos_QueueManagementProfile",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfilePath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfilePathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePathAny struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfilePathMap represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePathMap struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfilePathMapAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfilePathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Unique string name used for the queue management profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/*/name"
func (n *Qos_QueueManagementProfilePath) Name() *Qos_QueueManagementProfile_NamePath {
	ps := &Qos_QueueManagementProfile_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Unique string name used for the queue management profile.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/name"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/*/name"
func (n *Qos_QueueManagementProfilePathAny) Name() *Qos_QueueManagementProfile_NamePathAny {
	ps := &Qos_QueueManagementProfile_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Red (container): Configuration and operational state parameters
// relating to Random Early Detection (RED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "red"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red"
func (n *Qos_QueueManagementProfilePath) Red() *Qos_QueueManagementProfile_RedPath {
	ps := &Qos_QueueManagementProfile_RedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"red"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Red (container): Configuration and operational state parameters
// relating to Random Early Detection (RED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "red"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red"
func (n *Qos_QueueManagementProfilePathAny) Red() *Qos_QueueManagementProfile_RedPathAny {
	ps := &Qos_QueueManagementProfile_RedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"red"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Wred (container): Configuration and operational state parameters relating to
// Weighted Random Early Detection (WRED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "wred"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred"
func (n *Qos_QueueManagementProfilePath) Wred() *Qos_QueueManagementProfile_WredPath {
	ps := &Qos_QueueManagementProfile_WredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"wred"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Wred (container): Configuration and operational state parameters relating to
// Weighted Random Early Detection (WRED).
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "wred"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred"
func (n *Qos_QueueManagementProfilePathAny) Wred() *Qos_QueueManagementProfile_WredPathAny {
	ps := &Qos_QueueManagementProfile_WredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"wred"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile](
		"Qos_QueueManagementProfile",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewConfigQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfilePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Qos_QueueManagementProfile] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Qos_QueueManagementProfile](
		"Qos",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Qos_QueueManagementProfile, bool) {
			ret := gs.(*oc.Qos).QueueManagementProfile
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-qos:queue-management-profiles"},
			PostRelPath: []string{"openconfig-qos:queue-management-profile"},
		},
	)
}

// Qos_QueueManagementProfile_RedPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_RedPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_RedPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_RedPathAny struct {
	*ygnmi.NodePath
}

// Uniform (container): Uniform RED parameters. These parameters are applied to all
// the traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform"
func (n *Qos_QueueManagementProfile_RedPath) Uniform() *Qos_QueueManagementProfile_Red_UniformPath {
	ps := &Qos_QueueManagementProfile_Red_UniformPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Uniform (container): Uniform RED parameters. These parameters are applied to all
// the traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform"
func (n *Qos_QueueManagementProfile_RedPathAny) Uniform() *Qos_QueueManagementProfile_Red_UniformPathAny {
	ps := &Qos_QueueManagementProfile_Red_UniformPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_RedPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red](
		"Qos_QueueManagementProfile_Red",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_DropPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_DropPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Red_Uniform_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Red_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Red_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Red_UniformPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_UniformPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_Red_UniformPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_UniformPathAny struct {
	*ygnmi.NodePath
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Red_UniformPath) Drop() *Qos_QueueManagementProfile_Red_Uniform_DropPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Drop (leaf): When this leaf is true and the packet and if the ECN field in
// the packet indicates that the endpoints are not ECN capable and
// the and the WRED algorithm determines that the packet should
// have been dropped based on the drop probability, the packet
// is dropped.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/drop"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) Drop() *Qos_QueueManagementProfile_Red_Uniform_DropPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "drop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_UniformPath) EnableEcn() *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_EnableEcnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableEcn (leaf): When this leaf is true and the number of packets in the queue
// is between the minimum threshold and the maximum threshold, if
// the ECN field on the packet indicates that the endpoints are ECN
// capable (that is, the ECT bit is set to 1 and the CE bit is set
// to 0, or the ECT bit is set to 0 and the CE bit is set to 1) and
// the WRED algorithm determines that the packet should have been
// dropped based on the drop probability, the ECT and CE bits for
// the packet are changed to 1, and the packet is transmitted.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/enable-ecn"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) EnableEcn() *Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_EnableEcnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ecn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MaxThreshold() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThreshold (leaf): The maximum threshold parameter for a RED-managed queue in bytes.
// When the average queue length exceeds the maxth value, all packets are
// dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold-percent and max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MaxThreshold() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MaxThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxThresholdPercent (leaf): The maximum threshold parameter for a RED-managed queue in percent.
// When the average queue length exceeds the maxth value, all packets
// are dropped (or marked if ECN is enabled).  Mutually exclusive with
// min-threshold and max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MaxThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MaxThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MinThreshold() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThreshold (leaf): The mininum threshold parameter for a RED-managed queue in bytes.
// When the average queue length is less than minth, all packets are admitted
// to the queue.  Mututally exclusive with min-threshold-percent and
// max-threshold-percent.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MinThreshold() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPath) MinThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinThresholdPercent (leaf): The mininum threshold parameter for a RED-managed queue in percent.
// When the average queue length is less than minth, all packets are
// admitted to the queue.  Mutually exclusive with min-threshold and
// max-threshold.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "*/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/red/uniform/*/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) MinThresholdPercent() *Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny {
	ps := &Qos_QueueManagementProfile_Red_Uniform_MinThresholdPercentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-threshold-percent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_Red_UniformPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Red_Uniform](
		"Qos_QueueManagementProfile_Red_Uniform",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_WredPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_WredPath struct {
	*ygnmi.NodePath
}

// Qos_QueueManagementProfile_WredPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_WredPathAny struct {
	*ygnmi.NodePath
}

// Uniform (container): Uniform WRED parameters. These parameters are applied to all the
// traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform"
func (n *Qos_QueueManagementProfile_WredPath) Uniform() *Qos_QueueManagementProfile_Wred_UniformPath {
	ps := &Qos_QueueManagementProfile_Wred_UniformPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Uniform (container): Uniform WRED parameters. These parameters are applied to all the
// traffic coming into system.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "uniform"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform"
func (n *Qos_QueueManagementProfile_WredPathAny) Uniform() *Qos_QueueManagementProfile_Wred_UniformPathAny {
	ps := &Qos_QueueManagementProfile_Wred_UniformPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"uniform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPath) State() ygnmi.SingletonQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewSingletonQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPathAny) State() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPath) Config() ygnmi.ConfigQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewConfigQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Qos_QueueManagementProfile_WredPathAny) Config() ygnmi.WildcardQuery[*oc.Qos_QueueManagementProfile_Wred] {
	return ygnmi.NewWildcardQuery[*oc.Qos_QueueManagementProfile_Wred](
		"Qos_QueueManagementProfile_Wred",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_DropPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_DropPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_DropPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_DropPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/drop"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/drop"
func (n *Qos_QueueManagementProfile_Wred_Uniform_DropPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "drop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).Drop
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/enable-ecn"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn"
func (n *Qos_QueueManagementProfile_Wred_Uniform_EnableEcnPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ecn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).EnableEcn
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-drop-probability-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxDropProbabilityPercentPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-drop-probability-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxDropProbabilityPercent
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/max-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MaxThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MaxThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThreshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny represents the wildcard version of the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "state/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-qos-mem-mgmt"
//	Instantiating module: "openconfig-qos"
//	Path from parent:     "config/min-threshold-percent"
//	Path from root:       "/qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold-percent"
func (n *Qos_QueueManagementProfile_Wred_Uniform_MinThresholdPercentPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Qos_QueueManagementProfile_Wred_Uniform",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-threshold-percent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Qos_QueueManagementProfile_Wred_Uniform).MinThresholdPercent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Qos_QueueManagementProfile_Wred_Uniform) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
